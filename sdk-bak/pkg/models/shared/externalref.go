// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ExternalRefExternalRefSource - The externalRefSource field.
type ExternalRefExternalRefSource string

const (
	ExternalRefExternalRefSourceUnspecified ExternalRefExternalRefSource = "UNSPECIFIED"
	ExternalRefExternalRefSourceJira        ExternalRefExternalRefSource = "JIRA"
)

func (e ExternalRefExternalRefSource) ToPointer() *ExternalRefExternalRefSource {
	return &e
}

func (e *ExternalRefExternalRefSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "JIRA":
		*e = ExternalRefExternalRefSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExternalRefExternalRefSource: %v", v)
	}
}

// ExternalRef - The ExternalRef message.
type ExternalRef struct {
	// The externalRefSource field.
	ExternalRefSource *ExternalRefExternalRefSource `json:"externalRefSource,omitempty"`
	// The name field.
	Name *string `json:"name,omitempty"`
	// The url field.
	URL *string `json:"url,omitempty"`
}
