// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdk

// Generated from OpenAPI doc version 0.1.0-alpha and generator version 2.675.0

import (
	"context"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/config"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/hooks"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// The ConductorOne API server for the current tenant.
	"https://{tenantDomain}.conductor.one",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// ConductoroneAPI - ConductorOne API: The ConductorOne API is a HTTP API for managing ConductorOne resources.
type ConductoroneAPI struct {
	SDKVersion                 string
	AccessConflict             *AccessConflict
	Apps                       *Apps
	AppAccessRequestsDefaults  *AppAccessRequestsDefaults
	AppUser                    *AppUser
	Connector                  *Connector
	AppEntitlements            *AppEntitlements
	AppEntitlementSearch       *AppEntitlementSearch
	AppEntitlementUserBinding  *AppEntitlementUserBinding
	AppEntitlementOwners       *AppEntitlementOwners
	AppOwners                  *AppOwners
	AppReport                  *AppReport
	AppReportAction            *AppReportAction
	AppResourceType            *AppResourceType
	AppResource                *AppResource
	AppResourceOwners          *AppResourceOwners
	AppUsageControls           *AppUsageControls
	AppEntitlementsProxy       *AppEntitlementsProxy
	Attributes                 *Attributes
	Auth                       *Auth
	AutomationExecution        *AutomationExecution
	AutomationExecutionActions *AutomationExecutionActions
	AutomationExecutionSearch  *AutomationExecutionSearch
	AutomationSearch           *AutomationSearch
	Automation                 *Automation
	RequestCatalogManagement   *RequestCatalogManagement
	Directory                  *Directory
	PersonalClient             *PersonalClient
	Roles                      *Roles
	Policies                   *Policies
	AccountProvisionPolicyTest *AccountProvisionPolicyTest
	PolicyValidate             *PolicyValidate
	AppResourceSearch          *AppResourceSearch
	AppSearch                  *AppSearch
	AttributeSearch            *AttributeSearch
	PersonalClientSearch       *PersonalClientSearch
	PolicySearch               *PolicySearch
	RequestCatalogSearch       *RequestCatalogSearch
	StepUpProvider             *StepUpProvider
	StepUpTransaction          *StepUpTransaction
	ExportsSearch              *ExportsSearch
	TaskSearch                 *TaskSearch
	UserSearch                 *UserSearch
	WebhooksSearch             *WebhooksSearch
	AWSExternalIDSettings      *AWSExternalIDSettings
	OrgDomain                  *OrgDomain
	SessionSettings            *SessionSettings
	SystemLog                  *SystemLog
	Export                     *Export
	TaskAudit                  *TaskAudit
	Task                       *Task
	TaskActions                *TaskActions
	User                       *User
	Webhooks                   *Webhooks

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*ConductoroneAPI)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *ConductoroneAPI) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *ConductoroneAPI) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *ConductoroneAPI) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithTenantDomain allows setting the tenantDomain variable for url substitution
func WithTenantDomain(tenantDomain string) SDKOption {
	return func(sdk *ConductoroneAPI) {
		for idx := range sdk.sdkConfiguration.ServerVariables {
			if _, ok := sdk.sdkConfiguration.ServerVariables[idx]["tenantDomain"]; !ok {
				continue
			}

			sdk.sdkConfiguration.ServerVariables[idx]["tenantDomain"] = fmt.Sprintf("%v", tenantDomain)
		}
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *ConductoroneAPI) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *ConductoroneAPI) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (shared.Security, error)) SDKOption {
	return func(sdk *ConductoroneAPI) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *ConductoroneAPI) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *ConductoroneAPI) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *ConductoroneAPI {
	sdk := &ConductoroneAPI{
		SDKVersion: "1.5.1",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/terraform 1.5.1 2.675.0 0.1.0-alpha github.com/conductorone/terraform-provider-conductorone/internal/sdk",
			ServerList: ServerList,
			ServerVariables: []map[string]string{
				{
					"tenantDomain": "example",
				},
			},
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if currentServerURL != serverURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.AccessConflict = newAccessConflict(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Apps = newApps(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppAccessRequestsDefaults = newAppAccessRequestsDefaults(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppUser = newAppUser(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Connector = newConnector(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppEntitlements = newAppEntitlements(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppEntitlementSearch = newAppEntitlementSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppEntitlementUserBinding = newAppEntitlementUserBinding(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppEntitlementOwners = newAppEntitlementOwners(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppOwners = newAppOwners(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppReport = newAppReport(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppReportAction = newAppReportAction(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppResourceType = newAppResourceType(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppResource = newAppResource(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppResourceOwners = newAppResourceOwners(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppUsageControls = newAppUsageControls(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppEntitlementsProxy = newAppEntitlementsProxy(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Attributes = newAttributes(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Auth = newAuth(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AutomationExecution = newAutomationExecution(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AutomationExecutionActions = newAutomationExecutionActions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AutomationExecutionSearch = newAutomationExecutionSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AutomationSearch = newAutomationSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Automation = newAutomation(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.RequestCatalogManagement = newRequestCatalogManagement(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Directory = newDirectory(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PersonalClient = newPersonalClient(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Roles = newRoles(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Policies = newPolicies(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AccountProvisionPolicyTest = newAccountProvisionPolicyTest(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PolicyValidate = newPolicyValidate(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppResourceSearch = newAppResourceSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppSearch = newAppSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AttributeSearch = newAttributeSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PersonalClientSearch = newPersonalClientSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PolicySearch = newPolicySearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.RequestCatalogSearch = newRequestCatalogSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.StepUpProvider = newStepUpProvider(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.StepUpTransaction = newStepUpTransaction(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.ExportsSearch = newExportsSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.TaskSearch = newTaskSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.UserSearch = newUserSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.WebhooksSearch = newWebhooksSearch(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AWSExternalIDSettings = newAWSExternalIDSettings(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.OrgDomain = newOrgDomain(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.SessionSettings = newSessionSettings(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.SystemLog = newSystemLog(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Export = newExport(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.TaskAudit = newTaskAudit(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Task = newTask(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.TaskActions = newTaskActions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.User = newUser(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Webhooks = newWebhooks(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
