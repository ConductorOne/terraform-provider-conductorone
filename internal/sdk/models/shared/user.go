// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// DirectoryStatus - The status of the user in the directory.
type DirectoryStatus string

const (
	DirectoryStatusUnknown  DirectoryStatus = "UNKNOWN"
	DirectoryStatusEnabled  DirectoryStatus = "ENABLED"
	DirectoryStatusDisabled DirectoryStatus = "DISABLED"
	DirectoryStatusDeleted  DirectoryStatus = "DELETED"
)

func (e DirectoryStatus) ToPointer() *DirectoryStatus {
	return &e
}
func (e *DirectoryStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "ENABLED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "DELETED":
		*e = DirectoryStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectoryStatus: %v", v)
	}
}

type Profile struct {
}

// UserStatus - The status of the user in the system.
type UserStatus string

const (
	UserStatusUnknown  UserStatus = "UNKNOWN"
	UserStatusEnabled  UserStatus = "ENABLED"
	UserStatusDisabled UserStatus = "DISABLED"
	UserStatusDeleted  UserStatus = "DELETED"
)

func (e UserStatus) ToPointer() *UserStatus {
	return &e
}
func (e *UserStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "ENABLED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "DELETED":
		*e = UserStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserStatus: %v", v)
	}
}

// Type - The type of the user.
type Type string

const (
	TypeUserTypeUnspecified Type = "USER_TYPE_UNSPECIFIED"
	TypeUserTypeSystem      Type = "USER_TYPE_SYSTEM"
	TypeUserTypeHuman       Type = "USER_TYPE_HUMAN"
	TypeUserTypeService     Type = "USER_TYPE_SERVICE"
	TypeUserTypeAgent       Type = "USER_TYPE_AGENT"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER_TYPE_UNSPECIFIED":
		fallthrough
	case "USER_TYPE_SYSTEM":
		fallthrough
	case "USER_TYPE_HUMAN":
		fallthrough
	case "USER_TYPE_SERVICE":
		fallthrough
	case "USER_TYPE_AGENT":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// The User object provides all of the details for an user, as well as some configuration.
type User struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The id of the user to whom tasks will be automatically reassigned to.
	DelegatedUserID *string    `json:"delegatedUserId,omitempty"`
	DeletedAt       *time.Time `json:"deletedAt,omitempty"`
	// The department which the user belongs to in the organization.
	Department *string `json:"department,omitempty"`
	// A list of objects mapped based on department attribute mappings configured in the system.
	DepartmentSources []UserAttributeMappingSource `json:"departmentSources,omitempty"`
	// A list of unique ids that represent different directories.
	DirectoryIds []string `json:"directoryIds,omitempty"`
	// The status of the user in the directory.
	DirectoryStatus *DirectoryStatus `json:"directoryStatus,omitempty"`
	// A list of objects mapped based on directoryStatus attribute mappings configured in the system.
	DirectoryStatusSources []UserAttributeMappingSource `json:"directoryStatusSources,omitempty"`
	// The display name of the user.
	DisplayName *string `json:"displayName,omitempty"`
	// This is the user's email.
	Email *string `json:"email,omitempty"`
	// A list of source data for the email attribute.
	EmailSources []UserAttributeMappingSource `json:"emailSources,omitempty"`
	// This is a list of all of the user's emails from app users.
	Emails []string `json:"emails,omitempty"`
	// A list of source data for the employee IDs attribute.
	EmployeeIDSources []UserAttributeMappingSource `json:"employeeIdSources,omitempty"`
	// This is a list of all of the user's employee IDs from app users.
	EmployeeIds []string `json:"employeeIds,omitempty"`
	// The users employment status.
	EmploymentStatus *string `json:"employmentStatus,omitempty"`
	// A list of objects mapped based on employmentStatus attribute mappings configured in the system.
	EmploymentStatusSources []UserAttributeMappingSource `json:"employmentStatusSources,omitempty"`
	// The employment type of the user.
	EmploymentType *string `json:"employmentType,omitempty"`
	// A list of objects mapped based on employmentType attribute mappings configured in the system.
	EmploymentTypeSources []UserAttributeMappingSource `json:"employmentTypeSources,omitempty"`
	// A unique identifier of the user.
	ID *string `json:"id,omitempty"`
	// The job title of the user.
	JobTitle *string `json:"jobTitle,omitempty"`
	// A list of objects mapped based on jobTitle attribute mappings configured in the system.
	JobTitleSources []UserAttributeMappingSource `json:"jobTitleSources,omitempty"`
	// A list of ids of the user's managers.
	ManagerIds []string `json:"managerIds,omitempty"`
	// A list of objects mapped based on managerId attribute mappings configured in the system.
	ManagerSources []UserAttributeMappingSource `json:"managerSources,omitempty"`
	Profile        *Profile                     `json:"profile,omitempty"`
	// A list of unique identifiers that maps to ConductorOne's user roles let you assign users permissions tailored to the work they do in the software.
	RoleIds []string `json:"roleIds,omitempty"`
	// The status of the user in the system.
	Status *UserStatus `json:"status,omitempty"`
	// The type of the user.
	Type      *Type      `json:"type,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// This is the user's primary username. Typically sourced from the primary directory.
	Username *string `json:"username,omitempty"`
	// A list of source data for the usernames attribute.
	UsernameSources []UserAttributeMappingSource `json:"usernameSources,omitempty"`
	// This is a list of all of the user's usernames from app users.
	Usernames []string `json:"usernames,omitempty"`
}

func (u User) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *User) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (u *User) GetCreatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *User) GetDelegatedUserID() *string {
	if u == nil {
		return nil
	}
	return u.DelegatedUserID
}

func (u *User) GetDeletedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.DeletedAt
}

func (u *User) GetDepartment() *string {
	if u == nil {
		return nil
	}
	return u.Department
}

func (u *User) GetDepartmentSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.DepartmentSources
}

func (u *User) GetDirectoryIds() []string {
	if u == nil {
		return nil
	}
	return u.DirectoryIds
}

func (u *User) GetDirectoryStatus() *DirectoryStatus {
	if u == nil {
		return nil
	}
	return u.DirectoryStatus
}

func (u *User) GetDirectoryStatusSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.DirectoryStatusSources
}

func (u *User) GetDisplayName() *string {
	if u == nil {
		return nil
	}
	return u.DisplayName
}

func (u *User) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *User) GetEmailSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.EmailSources
}

func (u *User) GetEmails() []string {
	if u == nil {
		return nil
	}
	return u.Emails
}

func (u *User) GetEmployeeIDSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.EmployeeIDSources
}

func (u *User) GetEmployeeIds() []string {
	if u == nil {
		return nil
	}
	return u.EmployeeIds
}

func (u *User) GetEmploymentStatus() *string {
	if u == nil {
		return nil
	}
	return u.EmploymentStatus
}

func (u *User) GetEmploymentStatusSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.EmploymentStatusSources
}

func (u *User) GetEmploymentType() *string {
	if u == nil {
		return nil
	}
	return u.EmploymentType
}

func (u *User) GetEmploymentTypeSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.EmploymentTypeSources
}

func (u *User) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *User) GetJobTitle() *string {
	if u == nil {
		return nil
	}
	return u.JobTitle
}

func (u *User) GetJobTitleSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.JobTitleSources
}

func (u *User) GetManagerIds() []string {
	if u == nil {
		return nil
	}
	return u.ManagerIds
}

func (u *User) GetManagerSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.ManagerSources
}

func (u *User) GetProfile() *Profile {
	if u == nil {
		return nil
	}
	return u.Profile
}

func (u *User) GetRoleIds() []string {
	if u == nil {
		return nil
	}
	return u.RoleIds
}

func (u *User) GetStatus() *UserStatus {
	if u == nil {
		return nil
	}
	return u.Status
}

func (u *User) GetType() *Type {
	if u == nil {
		return nil
	}
	return u.Type
}

func (u *User) GetUpdatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *User) GetUsername() *string {
	if u == nil {
		return nil
	}
	return u.Username
}

func (u *User) GetUsernameSources() []UserAttributeMappingSource {
	if u == nil {
		return nil
	}
	return u.UsernameSources
}

func (u *User) GetUsernames() []string {
	if u == nil {
		return nil
	}
	return u.Usernames
}
