// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// Config - Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
type Config struct {
	// The type of the serialized message.
	AtType               *string `json:"@type,omitempty"`
	AdditionalProperties any     `additionalProperties:"true" json:"-"`
}

func (c Config) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Config) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *Config) GetAtType() *string {
	if c == nil {
		return nil
	}
	return c.AtType
}

func (c *Config) GetAdditionalProperties() any {
	if c == nil {
		return nil
	}
	return c.AdditionalProperties
}

// A Connector is used to sync objects into Apps
type Connector struct {
	// The id of the app the connector is associated with.
	AppID *string `json:"appId,omitempty"`
	// The canResumeSync field.
	CanResumeSync *bool `json:"canResumeSync,omitempty"`
	// The catalogId describes which catalog entry this connector is an instance of. For example, every Okta connector will have the same catalogId indicating it is an Okta connector.
	CatalogID *string `json:"catalogId,omitempty"`
	// Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
	Config    *Config    `json:"config,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// The description of the connector.
	Description *string `json:"description,omitempty"`
	// The disableCheckBadSync field.
	DisableCheckBadSync *bool `json:"disableCheckBadSync,omitempty"`
	// The display name of the connector.
	DisplayName *string `json:"displayName,omitempty"`
	// The downloadUrl for a spreadsheet if the connector was created from uploading a file.
	DownloadURL *string `json:"downloadUrl,omitempty"`
	// The id of the connector.
	ID *string `json:"id,omitempty"`
	// OAuth2AuthorizedAs tracks the user that OAuthed with the connector.
	OAuth2AuthorizedAs *OAuth2AuthorizedAs `json:"oauthAuthorizedAs,omitempty"`
	// List of profile attributes to sync, when set only these attributes will be synced
	ProfileAllowList []string `json:"profileAllowList,omitempty"`
	// List of profile attributes to ignore (not sync), when set other attributes will be synced, but these will not.
	ProfileIgnoreList []string `json:"profileIgnoreList,omitempty"`
	// The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update.
	ConnectorStatus *ConnectorStatus `json:"status,omitempty"`
	SyncDisabledAt  *time.Time       `json:"syncDisabledAt,omitempty"`
	// The category of the connector sync that was disabled.
	SyncDisabledCategory *string `json:"syncDisabledCategory,omitempty"`
	// The reason the connector sync was disabled.
	SyncDisabledReason *string    `json:"syncDisabledReason,omitempty"`
	UpdatedAt          *time.Time `json:"updatedAt,omitempty"`
	// The userIds field is used to define the integration owners of the connector.
	UserIds []string `json:"userIds,omitempty"`
}

func (c Connector) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Connector) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *Connector) GetAppID() *string {
	if c == nil {
		return nil
	}
	return c.AppID
}

func (c *Connector) GetCanResumeSync() *bool {
	if c == nil {
		return nil
	}
	return c.CanResumeSync
}

func (c *Connector) GetCatalogID() *string {
	if c == nil {
		return nil
	}
	return c.CatalogID
}

func (c *Connector) GetConfig() *Config {
	if c == nil {
		return nil
	}
	return c.Config
}

func (c *Connector) GetCreatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *Connector) GetDeletedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.DeletedAt
}

func (c *Connector) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *Connector) GetDisableCheckBadSync() *bool {
	if c == nil {
		return nil
	}
	return c.DisableCheckBadSync
}

func (c *Connector) GetDisplayName() *string {
	if c == nil {
		return nil
	}
	return c.DisplayName
}

func (c *Connector) GetDownloadURL() *string {
	if c == nil {
		return nil
	}
	return c.DownloadURL
}

func (c *Connector) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *Connector) GetOAuth2AuthorizedAs() *OAuth2AuthorizedAs {
	if c == nil {
		return nil
	}
	return c.OAuth2AuthorizedAs
}

func (c *Connector) GetProfileAllowList() []string {
	if c == nil {
		return nil
	}
	return c.ProfileAllowList
}

func (c *Connector) GetProfileIgnoreList() []string {
	if c == nil {
		return nil
	}
	return c.ProfileIgnoreList
}

func (c *Connector) GetConnectorStatus() *ConnectorStatus {
	if c == nil {
		return nil
	}
	return c.ConnectorStatus
}

func (c *Connector) GetSyncDisabledAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.SyncDisabledAt
}

func (c *Connector) GetSyncDisabledCategory() *string {
	if c == nil {
		return nil
	}
	return c.SyncDisabledCategory
}

func (c *Connector) GetSyncDisabledReason() *string {
	if c == nil {
		return nil
	}
	return c.SyncDisabledReason
}

func (c *Connector) GetUpdatedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *Connector) GetUserIds() []string {
	if c == nil {
		return nil
	}
	return c.UserIds
}

// ConnectorInput - A Connector is used to sync objects into Apps
type ConnectorInput struct {
	// The id of the app the connector is associated with.
	AppID *string `json:"appId,omitempty"`
	// The canResumeSync field.
	CanResumeSync *bool `json:"canResumeSync,omitempty"`
	// The catalogId describes which catalog entry this connector is an instance of. For example, every Okta connector will have the same catalogId indicating it is an Okta connector.
	CatalogID *string `json:"catalogId,omitempty"`
	// Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
	Config *Config `json:"config,omitempty"`
	// The description of the connector.
	Description *string `json:"description,omitempty"`
	// The disableCheckBadSync field.
	DisableCheckBadSync *bool `json:"disableCheckBadSync,omitempty"`
	// The display name of the connector.
	DisplayName *string `json:"displayName,omitempty"`
	// The id of the connector.
	ID *string `json:"id,omitempty"`
	// OAuth2AuthorizedAs tracks the user that OAuthed with the connector.
	OAuth2AuthorizedAs *OAuth2AuthorizedAsInput `json:"oauthAuthorizedAs,omitempty"`
	// List of profile attributes to sync, when set only these attributes will be synced
	ProfileAllowList []string `json:"profileAllowList,omitempty"`
	// List of profile attributes to ignore (not sync), when set other attributes will be synced, but these will not.
	ProfileIgnoreList []string `json:"profileIgnoreList,omitempty"`
	// The status field on the connector is used to track the status of the connectors sync, and when syncing last started, completed, or caused the connector to update.
	ConnectorStatus *ConnectorStatus `json:"status,omitempty"`
	// The category of the connector sync that was disabled.
	SyncDisabledCategory *string `json:"syncDisabledCategory,omitempty"`
	// The reason the connector sync was disabled.
	SyncDisabledReason *string `json:"syncDisabledReason,omitempty"`
	// The userIds field is used to define the integration owners of the connector.
	UserIds []string `json:"userIds,omitempty"`
}

func (c *ConnectorInput) GetAppID() *string {
	if c == nil {
		return nil
	}
	return c.AppID
}

func (c *ConnectorInput) GetCanResumeSync() *bool {
	if c == nil {
		return nil
	}
	return c.CanResumeSync
}

func (c *ConnectorInput) GetCatalogID() *string {
	if c == nil {
		return nil
	}
	return c.CatalogID
}

func (c *ConnectorInput) GetConfig() *Config {
	if c == nil {
		return nil
	}
	return c.Config
}

func (c *ConnectorInput) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ConnectorInput) GetDisableCheckBadSync() *bool {
	if c == nil {
		return nil
	}
	return c.DisableCheckBadSync
}

func (c *ConnectorInput) GetDisplayName() *string {
	if c == nil {
		return nil
	}
	return c.DisplayName
}

func (c *ConnectorInput) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ConnectorInput) GetOAuth2AuthorizedAs() *OAuth2AuthorizedAsInput {
	if c == nil {
		return nil
	}
	return c.OAuth2AuthorizedAs
}

func (c *ConnectorInput) GetProfileAllowList() []string {
	if c == nil {
		return nil
	}
	return c.ProfileAllowList
}

func (c *ConnectorInput) GetProfileIgnoreList() []string {
	if c == nil {
		return nil
	}
	return c.ProfileIgnoreList
}

func (c *ConnectorInput) GetConnectorStatus() *ConnectorStatus {
	if c == nil {
		return nil
	}
	return c.ConnectorStatus
}

func (c *ConnectorInput) GetSyncDisabledCategory() *string {
	if c == nil {
		return nil
	}
	return c.SyncDisabledCategory
}

func (c *ConnectorInput) GetSyncDisabledReason() *string {
	if c == nil {
		return nil
	}
	return c.SyncDisabledReason
}

func (c *ConnectorInput) GetUserIds() []string {
	if c == nil {
		return nil
	}
	return c.UserIds
}
