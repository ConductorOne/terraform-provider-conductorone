// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ApprovalInstanceState - The state of the approval instance
type ApprovalInstanceState string

const (
	ApprovalInstanceStateApprovalInstanceStateUnspecified          ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_UNSPECIFIED"
	ApprovalInstanceStateApprovalInstanceStateInit                 ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_INIT"
	ApprovalInstanceStateApprovalInstanceStateSendingNotifications ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_SENDING_NOTIFICATIONS"
	ApprovalInstanceStateApprovalInstanceStateWaiting              ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_WAITING"
	ApprovalInstanceStateApprovalInstanceStateDone                 ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_DONE"
)

func (e ApprovalInstanceState) ToPointer() *ApprovalInstanceState {
	return &e
}
func (e *ApprovalInstanceState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APPROVAL_INSTANCE_STATE_UNSPECIFIED":
		fallthrough
	case "APPROVAL_INSTANCE_STATE_INIT":
		fallthrough
	case "APPROVAL_INSTANCE_STATE_SENDING_NOTIFICATIONS":
		fallthrough
	case "APPROVAL_INSTANCE_STATE_WAITING":
		fallthrough
	case "APPROVAL_INSTANCE_STATE_DONE":
		*e = ApprovalInstanceState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApprovalInstanceState: %v", v)
	}
}

// ApprovalInstance - The approval instance object describes the way a policy step should be approved as well as its outcomes and state.
//
// This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
//   - approved
//   - denied
//   - reassigned
//   - restarted
//   - reassignedByError
//   - skipped
type ApprovalInstance struct {
	Approval           *Approval                `json:"approval,omitempty"`
	Approved           *ApprovedAction          `json:"approved,omitempty"`
	Denied             *DeniedAction            `json:"denied,omitempty"`
	EscalationInstance *EscalationInstance      `json:"escalationInstance,omitempty"`
	Reassigned         *ReassignedAction        `json:"reassigned,omitempty"`
	ReassignedByError  *ReassignedByErrorAction `json:"reassignedByError,omitempty"`
	Restarted          *RestartAction           `json:"restarted,omitempty"`
	Skipped            *SkippedAction           `json:"skipped,omitempty"`
	// The state of the approval instance
	State *ApprovalInstanceState `json:"state,omitempty"`
}

func (a *ApprovalInstance) GetApproval() *Approval {
	if a == nil {
		return nil
	}
	return a.Approval
}

func (a *ApprovalInstance) GetApproved() *ApprovedAction {
	if a == nil {
		return nil
	}
	return a.Approved
}

func (a *ApprovalInstance) GetDenied() *DeniedAction {
	if a == nil {
		return nil
	}
	return a.Denied
}

func (a *ApprovalInstance) GetEscalationInstance() *EscalationInstance {
	if a == nil {
		return nil
	}
	return a.EscalationInstance
}

func (a *ApprovalInstance) GetReassigned() *ReassignedAction {
	if a == nil {
		return nil
	}
	return a.Reassigned
}

func (a *ApprovalInstance) GetReassignedByError() *ReassignedByErrorAction {
	if a == nil {
		return nil
	}
	return a.ReassignedByError
}

func (a *ApprovalInstance) GetRestarted() *RestartAction {
	if a == nil {
		return nil
	}
	return a.Restarted
}

func (a *ApprovalInstance) GetSkipped() *SkippedAction {
	if a == nil {
		return nil
	}
	return a.Skipped
}

func (a *ApprovalInstance) GetState() *ApprovalInstanceState {
	if a == nil {
		return nil
	}
	return a.State
}
