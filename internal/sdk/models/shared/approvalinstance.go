// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ApprovalInstanceState - The state of the approval instance
type ApprovalInstanceState string

const (
	ApprovalInstanceStateApprovalInstanceStateUnspecified          ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_UNSPECIFIED"
	ApprovalInstanceStateApprovalInstanceStateInit                 ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_INIT"
	ApprovalInstanceStateApprovalInstanceStateSendingNotifications ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_SENDING_NOTIFICATIONS"
	ApprovalInstanceStateApprovalInstanceStateWaiting              ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_WAITING"
	ApprovalInstanceStateApprovalInstanceStateDone                 ApprovalInstanceState = "APPROVAL_INSTANCE_STATE_DONE"
)

func (e ApprovalInstanceState) ToPointer() *ApprovalInstanceState {
	return &e
}
func (e *ApprovalInstanceState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APPROVAL_INSTANCE_STATE_UNSPECIFIED":
		fallthrough
	case "APPROVAL_INSTANCE_STATE_INIT":
		fallthrough
	case "APPROVAL_INSTANCE_STATE_SENDING_NOTIFICATIONS":
		fallthrough
	case "APPROVAL_INSTANCE_STATE_WAITING":
		fallthrough
	case "APPROVAL_INSTANCE_STATE_DONE":
		*e = ApprovalInstanceState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApprovalInstanceState: %v", v)
	}
}

// ApprovalInstance - The approval instance object describes the way a policy step should be approved as well as its outcomes and state.
//
// This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
//   - approved
//   - denied
//   - reassigned
//   - restarted
//   - reassignedByError
//   - skipped
type ApprovalInstance struct {
	// The Approval message.
	//
	// This message contains a oneof named typ. Only a single field of the following list may be set at a time:
	//   - users
	//   - manager
	//   - appOwners
	//   - group
	//   - self
	//   - entitlementOwners
	//   - expression
	//   - webhook
	//   - resourceOwners
	//   - agent
	//
	Approval *Approval `json:"approval,omitempty"`
	// The approved action indicates that the approvalinstance had an outcome of approved.
	ApprovedAction *ApprovedAction `json:"approved,omitempty"`
	// The denied action indicates that the c1.api.policy.v1.ApprovalInstance had an outcome of denied.
	DeniedAction *DeniedAction `json:"denied,omitempty"`
	// The EscalationInstance message.
	//
	// This message contains a oneof named escalation_policy. Only a single field of the following list may be set at a time:
	//   - replacePolicy
	//   - reassignToApprovers
	//
	EscalationInstance *EscalationInstance `json:"escalationInstance,omitempty"`
	// The ReassignedAction object describes the outcome of a policy step that has been reassigned.
	ReassignedAction *ReassignedAction `json:"reassigned,omitempty"`
	// The ReassignedByErrorAction object describes the outcome of a policy step that has been reassigned because it had an error provisioning.
	ReassignedByErrorAction *ReassignedByErrorAction `json:"reassignedByError,omitempty"`
	// The restart action describes the outcome of policy steps for when the task was restarted. This can be applied to multiple steps since restart skips all pending next steps.
	RestartAction *RestartAction `json:"restarted,omitempty"`
	// The SkippedAction object describes the outcome of a policy step that has been skipped.
	SkippedAction *SkippedAction `json:"skipped,omitempty"`
	// The state of the approval instance
	State *ApprovalInstanceState `json:"state,omitempty"`
}

func (a *ApprovalInstance) GetApproval() *Approval {
	if a == nil {
		return nil
	}
	return a.Approval
}

func (a *ApprovalInstance) GetApprovedAction() *ApprovedAction {
	if a == nil {
		return nil
	}
	return a.ApprovedAction
}

func (a *ApprovalInstance) GetDeniedAction() *DeniedAction {
	if a == nil {
		return nil
	}
	return a.DeniedAction
}

func (a *ApprovalInstance) GetEscalationInstance() *EscalationInstance {
	if a == nil {
		return nil
	}
	return a.EscalationInstance
}

func (a *ApprovalInstance) GetReassignedAction() *ReassignedAction {
	if a == nil {
		return nil
	}
	return a.ReassignedAction
}

func (a *ApprovalInstance) GetReassignedByErrorAction() *ReassignedByErrorAction {
	if a == nil {
		return nil
	}
	return a.ReassignedByErrorAction
}

func (a *ApprovalInstance) GetRestartAction() *RestartAction {
	if a == nil {
		return nil
	}
	return a.RestartAction
}

func (a *ApprovalInstance) GetSkippedAction() *SkippedAction {
	if a == nil {
		return nil
	}
	return a.SkippedAction
}

func (a *ApprovalInstance) GetState() *ApprovalInstanceState {
	if a == nil {
		return nil
	}
	return a.State
}
