// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// SearchStepUpTransactionsRequestState - Filter by transaction state
type SearchStepUpTransactionsRequestState string

const (
	SearchStepUpTransactionsRequestStateStepUpTransactionStateUnspecified SearchStepUpTransactionsRequestState = "STEP_UP_TRANSACTION_STATE_UNSPECIFIED"
	SearchStepUpTransactionsRequestStateStepUpTransactionStatePending     SearchStepUpTransactionsRequestState = "STEP_UP_TRANSACTION_STATE_PENDING"
	SearchStepUpTransactionsRequestStateStepUpTransactionStateVerified    SearchStepUpTransactionsRequestState = "STEP_UP_TRANSACTION_STATE_VERIFIED"
	SearchStepUpTransactionsRequestStateStepUpTransactionStateError       SearchStepUpTransactionsRequestState = "STEP_UP_TRANSACTION_STATE_ERROR"
)

func (e SearchStepUpTransactionsRequestState) ToPointer() *SearchStepUpTransactionsRequestState {
	return &e
}
func (e *SearchStepUpTransactionsRequestState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STEP_UP_TRANSACTION_STATE_UNSPECIFIED":
		fallthrough
	case "STEP_UP_TRANSACTION_STATE_PENDING":
		fallthrough
	case "STEP_UP_TRANSACTION_STATE_VERIFIED":
		fallthrough
	case "STEP_UP_TRANSACTION_STATE_ERROR":
		*e = SearchStepUpTransactionsRequestState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchStepUpTransactionsRequestState: %v", v)
	}
}

// TargetType - The targetType field.
type TargetType string

const (
	TargetTypeTargetTypeUnspecified TargetType = "TARGET_TYPE_UNSPECIFIED"
	TargetTypeTargetTypeTicket      TargetType = "TARGET_TYPE_TICKET"
	TargetTypeTargetTypeTest        TargetType = "TARGET_TYPE_TEST"
)

func (e TargetType) ToPointer() *TargetType {
	return &e
}
func (e *TargetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TARGET_TYPE_UNSPECIFIED":
		fallthrough
	case "TARGET_TYPE_TICKET":
		fallthrough
	case "TARGET_TYPE_TEST":
		*e = TargetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetType: %v", v)
	}
}

// SearchStepUpTransactionsRequest - Request message for searching step-up transactions
type SearchStepUpTransactionsRequest struct {
	CreatedAfter  *time.Time `json:"createdAfter,omitempty"`
	CreatedBefore *time.Time `json:"createdBefore,omitempty"`
	// Maximum number of results to return
	PageSize *int `json:"pageSize,omitempty"`
	// Token for pagination
	PageToken *string `json:"pageToken,omitempty"`
	// Filter by provider ID
	ProviderID *string `json:"providerId,omitempty"`
	// Filter by transaction state
	State *SearchStepUpTransactionsRequestState `json:"state,omitempty"`
	// The targetType field.
	TargetType *TargetType `json:"targetType,omitempty"`
	// Filter by task ID (only applicable if target_type is TICKET)
	TaskID *string `json:"taskId,omitempty"`
	// Filter by user ID
	UserID *string `json:"userId,omitempty"`
}

func (s SearchStepUpTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchStepUpTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchStepUpTransactionsRequest) GetCreatedAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAfter
}

func (o *SearchStepUpTransactionsRequest) GetCreatedBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedBefore
}

func (o *SearchStepUpTransactionsRequest) GetPageSize() *int {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *SearchStepUpTransactionsRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *SearchStepUpTransactionsRequest) GetProviderID() *string {
	if o == nil {
		return nil
	}
	return o.ProviderID
}

func (o *SearchStepUpTransactionsRequest) GetState() *SearchStepUpTransactionsRequestState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *SearchStepUpTransactionsRequest) GetTargetType() *TargetType {
	if o == nil {
		return nil
	}
	return o.TargetType
}

func (o *SearchStepUpTransactionsRequest) GetTaskID() *string {
	if o == nil {
		return nil
	}
	return o.TaskID
}

func (o *SearchStepUpTransactionsRequest) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}
