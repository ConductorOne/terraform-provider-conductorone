// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProviderType - The providerType field.
type ProviderType string

const (
	ProviderTypeProviderTypeUnspecified ProviderType = "PROVIDER_TYPE_UNSPECIFIED"
	ProviderTypeProviderTypeOauth2      ProviderType = "PROVIDER_TYPE_OAUTH2"
	ProviderTypeProviderTypeMicrosoft   ProviderType = "PROVIDER_TYPE_MICROSOFT"
)

func (e ProviderType) ToPointer() *ProviderType {
	return &e
}
func (e *ProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROVIDER_TYPE_UNSPECIFIED":
		fallthrough
	case "PROVIDER_TYPE_OAUTH2":
		fallthrough
	case "PROVIDER_TYPE_MICROSOFT":
		*e = ProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProviderType: %v", v)
	}
}

// SearchStepUpProvidersRequest - Request message for searching step-up providers
type SearchStepUpProvidersRequest struct {
	// Maximum number of results to return
	PageSize *int `json:"pageSize,omitempty"`
	// Token for pagination
	PageToken *string `json:"pageToken,omitempty"`
	// The providerType field.
	ProviderType *ProviderType `json:"providerType,omitempty"`
	// Filter by name (partial match)
	Query *string `json:"query,omitempty"`
	// The refs field.
	Refs []StepUpProviderRef `json:"refs,omitempty"`
}

func (s *SearchStepUpProvidersRequest) GetPageSize() *int {
	if s == nil {
		return nil
	}
	return s.PageSize
}

func (s *SearchStepUpProvidersRequest) GetPageToken() *string {
	if s == nil {
		return nil
	}
	return s.PageToken
}

func (s *SearchStepUpProvidersRequest) GetProviderType() *ProviderType {
	if s == nil {
		return nil
	}
	return s.ProviderType
}

func (s *SearchStepUpProvidersRequest) GetQuery() *string {
	if s == nil {
		return nil
	}
	return s.Query
}

func (s *SearchStepUpProvidersRequest) GetRefs() []StepUpProviderRef {
	if s == nil {
		return nil
	}
	return s.Refs
}
