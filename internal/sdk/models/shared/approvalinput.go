// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// ApprovalInput - The Approval message.
//
// This message contains a oneof named typ. Only a single field of the following list may be set at a time:
//   - users
//   - manager
//   - appOwners
//   - group
//   - self
//   - entitlementOwners
//   - expression
//   - webhook
//   - resourceOwners
//   - agent
type ApprovalInput struct {
	Agent *AgentApproval `json:"agent,omitempty"`
	// Whether ticket delegation is allowed for this step.
	AllowDelegation *bool `json:"allowDelegation,omitempty"`
	// Configuration to allow reassignment by reviewers during this step.
	AllowReassignment *bool `json:"allowReassignment,omitempty"`
	// List of users for whom this step can be reassigned.
	AllowedReassignees []string                  `json:"allowedReassignees,omitempty"`
	AppOwners          *AppOwnerApproval         `json:"appOwners,omitempty"`
	EntitlementOwners  *EntitlementOwnerApproval `json:"entitlementOwners,omitempty"`
	Escalation         *Escalation               `json:"escalation,omitempty"`
	// Whether escalation is enabled for this step.
	EscalationEnabled *bool                    `json:"escalationEnabled,omitempty"`
	Expression        *ExpressionApprovalInput `json:"expression,omitempty"`
	Group             *AppGroupApproval        `json:"group,omitempty"`
	Manager           *ManagerApprovalInput    `json:"manager,omitempty"`
	// Configuration to require a reason when approving this step.
	RequireApprovalReason *bool `json:"requireApprovalReason,omitempty"`
	// Configuration to require a reason when denying this step.
	RequireDenialReason *bool `json:"requireDenialReason,omitempty"`
	// Configuration to require a reason when reassigning this step.
	RequireReassignmentReason *bool `json:"requireReassignmentReason,omitempty"`
	// The ID of a step-up authentication provider that will be required for approvals on this step.
	//  If set, approvers must complete the step-up authentication flow before they can approve.
	RequiresStepUpProviderID *string                `json:"requiresStepUpProviderId,omitempty"`
	ResourceOwners           *ResourceOwnerApproval `json:"resourceOwners,omitempty"`
	Self                     *SelfApprovalInput     `json:"self,omitempty"`
	Users                    *UserApproval          `json:"users,omitempty"`
	Webhook                  *WebhookApproval       `json:"webhook,omitempty"`
}

func (a *ApprovalInput) GetAgent() *AgentApproval {
	if a == nil {
		return nil
	}
	return a.Agent
}

func (a *ApprovalInput) GetAllowDelegation() *bool {
	if a == nil {
		return nil
	}
	return a.AllowDelegation
}

func (a *ApprovalInput) GetAllowReassignment() *bool {
	if a == nil {
		return nil
	}
	return a.AllowReassignment
}

func (a *ApprovalInput) GetAllowedReassignees() []string {
	if a == nil {
		return nil
	}
	return a.AllowedReassignees
}

func (a *ApprovalInput) GetAppOwners() *AppOwnerApproval {
	if a == nil {
		return nil
	}
	return a.AppOwners
}

func (a *ApprovalInput) GetEntitlementOwners() *EntitlementOwnerApproval {
	if a == nil {
		return nil
	}
	return a.EntitlementOwners
}

func (a *ApprovalInput) GetEscalation() *Escalation {
	if a == nil {
		return nil
	}
	return a.Escalation
}

func (a *ApprovalInput) GetEscalationEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.EscalationEnabled
}

func (a *ApprovalInput) GetExpression() *ExpressionApprovalInput {
	if a == nil {
		return nil
	}
	return a.Expression
}

func (a *ApprovalInput) GetGroup() *AppGroupApproval {
	if a == nil {
		return nil
	}
	return a.Group
}

func (a *ApprovalInput) GetManager() *ManagerApprovalInput {
	if a == nil {
		return nil
	}
	return a.Manager
}

func (a *ApprovalInput) GetRequireApprovalReason() *bool {
	if a == nil {
		return nil
	}
	return a.RequireApprovalReason
}

func (a *ApprovalInput) GetRequireDenialReason() *bool {
	if a == nil {
		return nil
	}
	return a.RequireDenialReason
}

func (a *ApprovalInput) GetRequireReassignmentReason() *bool {
	if a == nil {
		return nil
	}
	return a.RequireReassignmentReason
}

func (a *ApprovalInput) GetRequiresStepUpProviderID() *string {
	if a == nil {
		return nil
	}
	return a.RequiresStepUpProviderID
}

func (a *ApprovalInput) GetResourceOwners() *ResourceOwnerApproval {
	if a == nil {
		return nil
	}
	return a.ResourceOwners
}

func (a *ApprovalInput) GetSelf() *SelfApprovalInput {
	if a == nil {
		return nil
	}
	return a.Self
}

func (a *ApprovalInput) GetUsers() *UserApproval {
	if a == nil {
		return nil
	}
	return a.Users
}

func (a *ApprovalInput) GetWebhook() *WebhookApproval {
	if a == nil {
		return nil
	}
	return a.Webhook
}
