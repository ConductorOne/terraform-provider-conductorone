// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// Wait - Define a Wait step for a policy to wait on a condition to be met.
//
// This message contains a oneof named until. Only a single field of the following list may be set at a time:
//   - condition
//   - duration
//   - untilTime
type Wait struct {
	// The comment to post on first failed check.
	CommentOnFirstWait *string `json:"commentOnFirstWait,omitempty"`
	// The comment to post if we timeout.
	CommentOnTimeout *string `json:"commentOnTimeout,omitempty"`
	// The WaitCondition message.
	WaitCondition *WaitCondition `json:"condition,omitempty"`
	// The WaitDuration message.
	WaitDuration *WaitDuration `json:"duration,omitempty"`
	// The name of our condition to show on the task details page
	Name            *string `json:"name,omitempty"`
	TimeoutDuration *string `json:"timeoutDuration,omitempty"`
	// Waits until a specific time of the day (UTC)
	WaitUntilTime *WaitUntilTime `json:"untilTime,omitempty"`
}

func (w *Wait) GetCommentOnFirstWait() *string {
	if w == nil {
		return nil
	}
	return w.CommentOnFirstWait
}

func (w *Wait) GetCommentOnTimeout() *string {
	if w == nil {
		return nil
	}
	return w.CommentOnTimeout
}

func (w *Wait) GetWaitCondition() *WaitCondition {
	if w == nil {
		return nil
	}
	return w.WaitCondition
}

func (w *Wait) GetWaitDuration() *WaitDuration {
	if w == nil {
		return nil
	}
	return w.WaitDuration
}

func (w *Wait) GetName() *string {
	if w == nil {
		return nil
	}
	return w.Name
}

func (w *Wait) GetTimeoutDuration() *string {
	if w == nil {
		return nil
	}
	return w.TimeoutDuration
}

func (w *Wait) GetWaitUntilTime() *WaitUntilTime {
	if w == nil {
		return nil
	}
	return w.WaitUntilTime
}
