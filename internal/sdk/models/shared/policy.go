// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// PolicyType - Indicates the type of this policy. Can also be used to get the value from policySteps.
type PolicyType string

const (
	PolicyTypePolicyTypeUnspecified   PolicyType = "POLICY_TYPE_UNSPECIFIED"
	PolicyTypePolicyTypeGrant         PolicyType = "POLICY_TYPE_GRANT"
	PolicyTypePolicyTypeRevoke        PolicyType = "POLICY_TYPE_REVOKE"
	PolicyTypePolicyTypeCertify       PolicyType = "POLICY_TYPE_CERTIFY"
	PolicyTypePolicyTypeAccessRequest PolicyType = "POLICY_TYPE_ACCESS_REQUEST"
	PolicyTypePolicyTypeProvision     PolicyType = "POLICY_TYPE_PROVISION"
)

func (e PolicyType) ToPointer() *PolicyType {
	return &e
}
func (e *PolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POLICY_TYPE_UNSPECIFIED":
		fallthrough
	case "POLICY_TYPE_GRANT":
		fallthrough
	case "POLICY_TYPE_REVOKE":
		fallthrough
	case "POLICY_TYPE_CERTIFY":
		fallthrough
	case "POLICY_TYPE_ACCESS_REQUEST":
		fallthrough
	case "POLICY_TYPE_PROVISION":
		*e = PolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PolicyType: %v", v)
	}
}

// Policy - A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
type Policy struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
	// The description of the Policy.
	Description *string `json:"description,omitempty"`
	// The display name of the Policy.
	DisplayName *string `json:"displayName,omitempty"`
	// The ID of the Policy.
	ID *string `json:"id,omitempty"`
	// A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set.
	PolicySteps map[string]PolicySteps `json:"policySteps,omitempty"`
	// Indicates the type of this policy. Can also be used to get the value from policySteps.
	PolicyType *PolicyType `json:"policyType,omitempty"`
	// An array of actions (ordered) to take place after a policy completes processing.
	PostActions []PolicyPostActions `json:"postActions,omitempty"`
	// Deprecated. Use setting in policy step instead
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ReassignTasksToDelegates *bool `json:"reassignTasksToDelegates,omitempty"`
	// The rules field.
	Rules []Rule `json:"rules,omitempty"`
	// Whether this policy is a builtin system policy. Builtin system policies cannot be edited.
	SystemBuiltin *bool      `json:"systemBuiltin,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
}

func (p Policy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Policy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *Policy) GetCreatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *Policy) GetDeletedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.DeletedAt
}

func (p *Policy) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *Policy) GetDisplayName() *string {
	if p == nil {
		return nil
	}
	return p.DisplayName
}

func (p *Policy) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *Policy) GetPolicySteps() map[string]PolicySteps {
	if p == nil {
		return nil
	}
	return p.PolicySteps
}

func (p *Policy) GetPolicyType() *PolicyType {
	if p == nil {
		return nil
	}
	return p.PolicyType
}

func (p *Policy) GetPostActions() []PolicyPostActions {
	if p == nil {
		return nil
	}
	return p.PostActions
}

func (p *Policy) GetReassignTasksToDelegates() *bool {
	if p == nil {
		return nil
	}
	return p.ReassignTasksToDelegates
}

func (p *Policy) GetRules() []Rule {
	if p == nil {
		return nil
	}
	return p.Rules
}

func (p *Policy) GetSystemBuiltin() *bool {
	if p == nil {
		return nil
	}
	return p.SystemBuiltin
}

func (p *Policy) GetUpdatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

// PolicyInput - A policy describes the behavior of the ConductorOne system when processing a task. You can describe the type, approvers, fallback behavior, and escalation processes.
type PolicyInput struct {
	// The description of the Policy.
	Description *string `json:"description,omitempty"`
	// The display name of the Policy.
	DisplayName *string `json:"displayName,omitempty"`
	// A map of string(policy type) to steps in a policy. This structure is leftover from a previous design, and should only ever have one key->value set.
	PolicySteps map[string]PolicyStepsInput `json:"policySteps,omitempty"`
	// Indicates the type of this policy. Can also be used to get the value from policySteps.
	PolicyType *PolicyType `json:"policyType,omitempty"`
	// An array of actions (ordered) to take place after a policy completes processing.
	PostActions []PolicyPostActions `json:"postActions,omitempty"`
	// Deprecated. Use setting in policy step instead
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ReassignTasksToDelegates *bool `json:"reassignTasksToDelegates,omitempty"`
	// The rules field.
	Rules []Rule `json:"rules,omitempty"`
}

func (p *PolicyInput) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PolicyInput) GetDisplayName() *string {
	if p == nil {
		return nil
	}
	return p.DisplayName
}

func (p *PolicyInput) GetPolicySteps() map[string]PolicyStepsInput {
	if p == nil {
		return nil
	}
	return p.PolicySteps
}

func (p *PolicyInput) GetPolicyType() *PolicyType {
	if p == nil {
		return nil
	}
	return p.PolicyType
}

func (p *PolicyInput) GetPostActions() []PolicyPostActions {
	if p == nil {
		return nil
	}
	return p.PostActions
}

func (p *PolicyInput) GetReassignTasksToDelegates() *bool {
	if p == nil {
		return nil
	}
	return p.ReassignTasksToDelegates
}

func (p *PolicyInput) GetRules() []Rule {
	if p == nil {
		return nil
	}
	return p.Rules
}
