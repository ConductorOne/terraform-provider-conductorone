// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FunctionTypes string

const (
	FunctionTypesFunctionTypeAny FunctionTypes = "FUNCTION_TYPE_ANY"
)

func (e FunctionTypes) ToPointer() *FunctionTypes {
	return &e
}
func (e *FunctionTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FUNCTION_TYPE_ANY":
		*e = FunctionTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FunctionTypes: %v", v)
	}
}

// The FunctionsSearchRequest message.
type FunctionsSearchRequest struct {
	// The functionTypes field.
	FunctionTypes []FunctionTypes `json:"functionTypes,omitempty"`
	// The pageSize field.
	PageSize *int `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	// The query field.
	Query *string `json:"query,omitempty"`
}

func (o *FunctionsSearchRequest) GetFunctionTypes() []FunctionTypes {
	if o == nil {
		return nil
	}
	return o.FunctionTypes
}

func (o *FunctionsSearchRequest) GetPageSize() *int {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *FunctionsSearchRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *FunctionsSearchRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}
