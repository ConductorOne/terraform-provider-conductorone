// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TriggerTypes string

const (
	TriggerTypesTriggerTypeUnspecified       TriggerTypes = "TRIGGER_TYPE_UNSPECIFIED"
	TriggerTypesTriggerTypeUserProfileChange TriggerTypes = "TRIGGER_TYPE_USER_PROFILE_CHANGE"
	TriggerTypesTriggerTypeAppUserCreate     TriggerTypes = "TRIGGER_TYPE_APP_USER_CREATE"
	TriggerTypesTriggerTypeAppUserUpdate     TriggerTypes = "TRIGGER_TYPE_APP_USER_UPDATE"
	TriggerTypesTriggerTypeUnusedAccess      TriggerTypes = "TRIGGER_TYPE_UNUSED_ACCESS"
	TriggerTypesTriggerTypeUserCreated       TriggerTypes = "TRIGGER_TYPE_USER_CREATED"
	TriggerTypesTriggerTypeGrantFound        TriggerTypes = "TRIGGER_TYPE_GRANT_FOUND"
	TriggerTypesTriggerTypeGrantDeleted      TriggerTypes = "TRIGGER_TYPE_GRANT_DELETED"
	TriggerTypesTriggerTypeWebhook           TriggerTypes = "TRIGGER_TYPE_WEBHOOK"
	TriggerTypesTriggerTypeSchedule          TriggerTypes = "TRIGGER_TYPE_SCHEDULE"
	TriggerTypesTriggerTypeForm              TriggerTypes = "TRIGGER_TYPE_FORM"
)

func (e TriggerTypes) ToPointer() *TriggerTypes {
	return &e
}
func (e *TriggerTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRIGGER_TYPE_UNSPECIFIED":
		fallthrough
	case "TRIGGER_TYPE_USER_PROFILE_CHANGE":
		fallthrough
	case "TRIGGER_TYPE_APP_USER_CREATE":
		fallthrough
	case "TRIGGER_TYPE_APP_USER_UPDATE":
		fallthrough
	case "TRIGGER_TYPE_UNUSED_ACCESS":
		fallthrough
	case "TRIGGER_TYPE_USER_CREATED":
		fallthrough
	case "TRIGGER_TYPE_GRANT_FOUND":
		fallthrough
	case "TRIGGER_TYPE_GRANT_DELETED":
		fallthrough
	case "TRIGGER_TYPE_WEBHOOK":
		fallthrough
	case "TRIGGER_TYPE_SCHEDULE":
		fallthrough
	case "TRIGGER_TYPE_FORM":
		*e = TriggerTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TriggerTypes: %v", v)
	}
}

// The SearchAutomationsRequest message.
type SearchAutomationsRequest struct {
	// The appId field.
	AppID *string `json:"appId,omitempty"`
	// The pageSize field.
	PageSize *int `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	// The query field.
	Query *string `json:"query,omitempty"`
	// The refs field.
	Refs []*AutomationTemplateRef `json:"refs,omitempty"`
	// The triggerTypes field.
	TriggerTypes []TriggerTypes `json:"triggerTypes,omitempty"`
}

func (s *SearchAutomationsRequest) GetAppID() *string {
	if s == nil {
		return nil
	}
	return s.AppID
}

func (s *SearchAutomationsRequest) GetPageSize() *int {
	if s == nil {
		return nil
	}
	return s.PageSize
}

func (s *SearchAutomationsRequest) GetPageToken() *string {
	if s == nil {
		return nil
	}
	return s.PageToken
}

func (s *SearchAutomationsRequest) GetQuery() *string {
	if s == nil {
		return nil
	}
	return s.Query
}

func (s *SearchAutomationsRequest) GetRefs() []*AutomationTemplateRef {
	if s == nil {
		return nil
	}
	return s.Refs
}

func (s *SearchAutomationsRequest) GetTriggerTypes() []TriggerTypes {
	if s == nil {
		return nil
	}
	return s.TriggerTypes
}
