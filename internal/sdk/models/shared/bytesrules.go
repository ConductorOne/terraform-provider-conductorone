// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// BytesRules describe the constraints applied to `bytes` values
//
// This message contains a oneof named well_known. Only a single field of the following list may be set at a time:
//   - ip
//   - ipv4
//   - ipv6
type BytesRules struct {
	// Const specifies that this field must be exactly the specified value
	Const *string `json:"const,omitempty"`
	// Contains specifies that this field must have the specified bytes
	//  anywhere in the string.
	Contains *string `json:"contains,omitempty"`
	// IgnoreEmpty specifies that the validation rules of this field should be
	//  evaluated only if the field is not empty
	IgnoreEmpty *bool `json:"ignoreEmpty,omitempty"`
	// In specifies that this field must be equal to one of the specified
	//  values
	In []string `json:"in,omitempty"`
	// Ip specifies that the field must be a valid IP (v4 or v6) address in
	//  byte format
	// This field is part of the `well_known` oneof.
	// See the documentation for `validate.BytesRules` for more details.
	IP *bool `json:"ip,omitempty"`
	// Ipv4 specifies that the field must be a valid IPv4 address in byte
	//  format
	// This field is part of the `well_known` oneof.
	// See the documentation for `validate.BytesRules` for more details.
	Ipv4 *bool `json:"ipv4,omitempty"`
	// Ipv6 specifies that the field must be a valid IPv6 address in byte
	//  format
	// This field is part of the `well_known` oneof.
	// See the documentation for `validate.BytesRules` for more details.
	Ipv6 *bool `json:"ipv6,omitempty"`
	// Len specifies that this field must be the specified number of bytes
	Len *string `json:"len,omitempty"`
	// MaxLen specifies that this field must be the specified number of bytes
	//  at a maximum
	MaxLen *string `json:"maxLen,omitempty"`
	// MinLen specifies that this field must be the specified number of bytes
	//  at a minimum
	MinLen *string `json:"minLen,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	//  values
	NotIn []string `json:"notIn,omitempty"`
	// Pattern specifes that this field must match against the specified
	//  regular expression (RE2 syntax). The included expression should elide
	//  any delimiters.
	Pattern *string `json:"pattern,omitempty"`
	// Prefix specifies that this field must have the specified bytes at the
	//  beginning of the string.
	Prefix *string `json:"prefix,omitempty"`
	// Suffix specifies that this field must have the specified bytes at the
	//  end of the string.
	Suffix *string `json:"suffix,omitempty"`
}

func (b *BytesRules) GetConst() *string {
	if b == nil {
		return nil
	}
	return b.Const
}

func (b *BytesRules) GetContains() *string {
	if b == nil {
		return nil
	}
	return b.Contains
}

func (b *BytesRules) GetIgnoreEmpty() *bool {
	if b == nil {
		return nil
	}
	return b.IgnoreEmpty
}

func (b *BytesRules) GetIn() []string {
	if b == nil {
		return nil
	}
	return b.In
}

func (b *BytesRules) GetIP() *bool {
	if b == nil {
		return nil
	}
	return b.IP
}

func (b *BytesRules) GetIpv4() *bool {
	if b == nil {
		return nil
	}
	return b.Ipv4
}

func (b *BytesRules) GetIpv6() *bool {
	if b == nil {
		return nil
	}
	return b.Ipv6
}

func (b *BytesRules) GetLen() *string {
	if b == nil {
		return nil
	}
	return b.Len
}

func (b *BytesRules) GetMaxLen() *string {
	if b == nil {
		return nil
	}
	return b.MaxLen
}

func (b *BytesRules) GetMinLen() *string {
	if b == nil {
		return nil
	}
	return b.MinLen
}

func (b *BytesRules) GetNotIn() []string {
	if b == nil {
		return nil
	}
	return b.NotIn
}

func (b *BytesRules) GetPattern() *string {
	if b == nil {
		return nil
	}
	return b.Pattern
}

func (b *BytesRules) GetPrefix() *string {
	if b == nil {
		return nil
	}
	return b.Prefix
}

func (b *BytesRules) GetSuffix() *string {
	if b == nil {
		return nil
	}
	return b.Suffix
}
