// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// ActionType - The actionType field.
type ActionType string

const (
	ActionTypeTaskActionTypeUnspecified                              ActionType = "TASK_ACTION_TYPE_UNSPECIFIED"
	ActionTypeTaskActionTypeClose                                    ActionType = "TASK_ACTION_TYPE_CLOSE"
	ActionTypeTaskActionTypeApprove                                  ActionType = "TASK_ACTION_TYPE_APPROVE"
	ActionTypeTaskActionTypeDeny                                     ActionType = "TASK_ACTION_TYPE_DENY"
	ActionTypeTaskActionTypeComment                                  ActionType = "TASK_ACTION_TYPE_COMMENT"
	ActionTypeTaskActionTypeDelete                                   ActionType = "TASK_ACTION_TYPE_DELETE"
	ActionTypeTaskActionTypeReassign                                 ActionType = "TASK_ACTION_TYPE_REASSIGN"
	ActionTypeTaskActionTypeRestart                                  ActionType = "TASK_ACTION_TYPE_RESTART"
	ActionTypeTaskActionTypeSendReminder                             ActionType = "TASK_ACTION_TYPE_SEND_REMINDER"
	ActionTypeTaskActionTypeProvisionComplete                        ActionType = "TASK_ACTION_TYPE_PROVISION_COMPLETE"
	ActionTypeTaskActionTypeProvisionCancelled                       ActionType = "TASK_ACTION_TYPE_PROVISION_CANCELLED"
	ActionTypeTaskActionTypeProvisionErrored                         ActionType = "TASK_ACTION_TYPE_PROVISION_ERRORED"
	ActionTypeTaskActionTypeRollbackSkipped                          ActionType = "TASK_ACTION_TYPE_ROLLBACK_SKIPPED"
	ActionTypeTaskActionTypeProvisionAppUserTargetCreated            ActionType = "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED"
	ActionTypeTaskActionTypeHardReset                                ActionType = "TASK_ACTION_TYPE_HARD_RESET"
	ActionTypeTaskActionTypeEscalateToEmergencyAccess                ActionType = "TASK_ACTION_TYPE_ESCALATE_TO_EMERGENCY_ACCESS"
	ActionTypeTaskActionTypeChangePolicy                             ActionType = "TASK_ACTION_TYPE_CHANGE_POLICY"
	ActionTypeTaskActionTypeRecalculateDenialFromBasePolicyDecisions ActionType = "TASK_ACTION_TYPE_RECALCULATE_DENIAL_FROM_BASE_POLICY_DECISIONS"
	ActionTypeTaskActionTypeSetInsightsAndRecommendation             ActionType = "TASK_ACTION_TYPE_SET_INSIGHTS_AND_RECOMMENDATION"
	ActionTypeTaskActionTypeSetAnalysisID                            ActionType = "TASK_ACTION_TYPE_SET_ANALYSIS_ID"
	ActionTypeTaskActionTypeRecalculateApproversList                 ActionType = "TASK_ACTION_TYPE_RECALCULATE_APPROVERS_LIST"
	ActionTypeTaskActionTypeProcessNow                               ActionType = "TASK_ACTION_TYPE_PROCESS_NOW"
	ActionTypeTaskActionTypeApproveWithStepUp                        ActionType = "TASK_ACTION_TYPE_APPROVE_WITH_STEP_UP"
	ActionTypeTaskActionTypeSkipStep                                 ActionType = "TASK_ACTION_TYPE_SKIP_STEP"
	ActionTypeTaskActionTypeRollbackCancelled                        ActionType = "TASK_ACTION_TYPE_ROLLBACK_CANCELLED"
	ActionTypeTaskActionTypeUpdateRequestData                        ActionType = "TASK_ACTION_TYPE_UPDATE_REQUEST_DATA"
	ActionTypeTaskActionTypeUpdateGrantDuration                      ActionType = "TASK_ACTION_TYPE_UPDATE_GRANT_DURATION"
)

func (e ActionType) ToPointer() *ActionType {
	return &e
}
func (e *ActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_ACTION_TYPE_UNSPECIFIED":
		fallthrough
	case "TASK_ACTION_TYPE_CLOSE":
		fallthrough
	case "TASK_ACTION_TYPE_APPROVE":
		fallthrough
	case "TASK_ACTION_TYPE_DENY":
		fallthrough
	case "TASK_ACTION_TYPE_COMMENT":
		fallthrough
	case "TASK_ACTION_TYPE_DELETE":
		fallthrough
	case "TASK_ACTION_TYPE_REASSIGN":
		fallthrough
	case "TASK_ACTION_TYPE_RESTART":
		fallthrough
	case "TASK_ACTION_TYPE_SEND_REMINDER":
		fallthrough
	case "TASK_ACTION_TYPE_PROVISION_COMPLETE":
		fallthrough
	case "TASK_ACTION_TYPE_PROVISION_CANCELLED":
		fallthrough
	case "TASK_ACTION_TYPE_PROVISION_ERRORED":
		fallthrough
	case "TASK_ACTION_TYPE_ROLLBACK_SKIPPED":
		fallthrough
	case "TASK_ACTION_TYPE_PROVISION_APP_USER_TARGET_CREATED":
		fallthrough
	case "TASK_ACTION_TYPE_HARD_RESET":
		fallthrough
	case "TASK_ACTION_TYPE_ESCALATE_TO_EMERGENCY_ACCESS":
		fallthrough
	case "TASK_ACTION_TYPE_CHANGE_POLICY":
		fallthrough
	case "TASK_ACTION_TYPE_RECALCULATE_DENIAL_FROM_BASE_POLICY_DECISIONS":
		fallthrough
	case "TASK_ACTION_TYPE_SET_INSIGHTS_AND_RECOMMENDATION":
		fallthrough
	case "TASK_ACTION_TYPE_SET_ANALYSIS_ID":
		fallthrough
	case "TASK_ACTION_TYPE_RECALCULATE_APPROVERS_LIST":
		fallthrough
	case "TASK_ACTION_TYPE_PROCESS_NOW":
		fallthrough
	case "TASK_ACTION_TYPE_APPROVE_WITH_STEP_UP":
		fallthrough
	case "TASK_ACTION_TYPE_SKIP_STEP":
		fallthrough
	case "TASK_ACTION_TYPE_ROLLBACK_CANCELLED":
		fallthrough
	case "TASK_ACTION_TYPE_UPDATE_REQUEST_DATA":
		fallthrough
	case "TASK_ACTION_TYPE_UPDATE_GRANT_DURATION":
		*e = ActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionType: %v", v)
	}
}

// TaskAction1 - The TaskAction message.
type TaskAction1 struct {
	// The actionType field.
	ActionType *ActionType `json:"actionType,omitempty"`
	// The bulkActionId field.
	BulkActionID *string    `json:"bulkActionId,omitempty"`
	CreatedAt    *time.Time `json:"createdAt,omitempty"`
	DeletedAt    *time.Time `json:"deletedAt,omitempty"`
	// The id field.
	ID *string `json:"id,omitempty"`
	// The policyStepId field.
	PolicyStepID *string    `json:"policyStepId,omitempty"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	// The userId field.
	UserID *string `json:"userId,omitempty"`
}

func (t TaskAction1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskAction1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TaskAction1) GetActionType() *ActionType {
	if t == nil {
		return nil
	}
	return t.ActionType
}

func (t *TaskAction1) GetBulkActionID() *string {
	if t == nil {
		return nil
	}
	return t.BulkActionID
}

func (t *TaskAction1) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *TaskAction1) GetDeletedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.DeletedAt
}

func (t *TaskAction1) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TaskAction1) GetPolicyStepID() *string {
	if t == nil {
		return nil
	}
	return t.PolicyStepID
}

func (t *TaskAction1) GetUpdatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}

func (t *TaskAction1) GetUserID() *string {
	if t == nil {
		return nil
	}
	return t.UserID
}
