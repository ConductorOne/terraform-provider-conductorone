// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

type AppEntitlementDurationUnset struct {
}

// Purpose - The purpose field.
type Purpose string

const (
	PurposeAppEntitlementPurposeValueUnspecified Purpose = "APP_ENTITLEMENT_PURPOSE_VALUE_UNSPECIFIED"
	PurposeAppEntitlementPurposeValueAssignment  Purpose = "APP_ENTITLEMENT_PURPOSE_VALUE_ASSIGNMENT"
	PurposeAppEntitlementPurposeValuePermission  Purpose = "APP_ENTITLEMENT_PURPOSE_VALUE_PERMISSION"
)

func (e Purpose) ToPointer() *Purpose {
	return &e
}
func (e *Purpose) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_ENTITLEMENT_PURPOSE_VALUE_UNSPECIFIED":
		fallthrough
	case "APP_ENTITLEMENT_PURPOSE_VALUE_ASSIGNMENT":
		fallthrough
	case "APP_ENTITLEMENT_PURPOSE_VALUE_PERMISSION":
		*e = Purpose(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Purpose: %v", v)
	}
}

// DeprovisionerPolicy - ProvisionPolicy is a oneOf that indicates how a provision step should be processed.
//
// This message contains a oneof named typ. Only a single field of the following list may be set at a time:
//   - connector
//   - manual
//   - delegated
//   - webhook
//   - multiStep
//   - externalTicket
//   - unconfigured
type DeprovisionerPolicy struct {
	Connector      *ConnectorProvision      `json:"connector,omitempty"`
	Delegated      *DelegatedProvision      `json:"delegated,omitempty"`
	ExternalTicket *ExternalTicketProvision `json:"externalTicket,omitempty"`
	Manual         *ManualProvision         `json:"manual,omitempty"`
	MultiStep      any                      `json:"multiStep,omitempty"`
	Unconfigured   *UnconfiguredProvision   `json:"unconfigured,omitempty"`
	Webhook        *WebhookProvision        `json:"webhook,omitempty"`
}

func (d *DeprovisionerPolicy) GetConnector() *ConnectorProvision {
	if d == nil {
		return nil
	}
	return d.Connector
}

func (d *DeprovisionerPolicy) GetDelegated() *DelegatedProvision {
	if d == nil {
		return nil
	}
	return d.Delegated
}

func (d *DeprovisionerPolicy) GetExternalTicket() *ExternalTicketProvision {
	if d == nil {
		return nil
	}
	return d.ExternalTicket
}

func (d *DeprovisionerPolicy) GetManual() *ManualProvision {
	if d == nil {
		return nil
	}
	return d.Manual
}

func (d *DeprovisionerPolicy) GetMultiStep() any {
	if d == nil {
		return nil
	}
	return d.MultiStep
}

func (d *DeprovisionerPolicy) GetUnconfigured() *UnconfiguredProvision {
	if d == nil {
		return nil
	}
	return d.Unconfigured
}

func (d *DeprovisionerPolicy) GetWebhook() *WebhookProvision {
	if d == nil {
		return nil
	}
	return d.Webhook
}

// AppEntitlement - The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.
//
// This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
//   - durationUnset
//   - durationGrant
type AppEntitlement struct {
	// The alias of the app entitlement used by Cone. Also exact-match queryable.
	Alias *string `json:"alias,omitempty"`
	// The ID of the app that is associated with the app entitlement.
	AppID *string `json:"appId,omitempty"`
	// The ID of the app resource that is associated with the app entitlement
	AppResourceID *string `json:"appResourceId,omitempty"`
	// The ID of the app resource type that is associated with the app entitlement
	AppResourceTypeID *string `json:"appResourceTypeId,omitempty"`
	// The ID of the policy that will be used for certify tickets related to the app entitlement.
	CertifyPolicyID *string `json:"certifyPolicyId,omitempty"`
	// The IDs of different compliance frameworks associated with this app entitlement ex (SOX, HIPAA, PCI, etc.)
	ComplianceFrameworkValueIds []string   `json:"complianceFrameworkValueIds,omitempty"`
	CreatedAt                   *time.Time `json:"createdAt,omitempty"`
	// Flag to indicate if app-level access request defaults have been applied to the entitlement
	DefaultValuesApplied *bool      `json:"defaultValuesApplied,omitempty"`
	DeletedAt            *time.Time `json:"deletedAt,omitempty"`
	// The description of the app entitlement.
	Description *string `json:"description,omitempty"`
	// The display name of the app entitlement.
	DisplayName   *string                      `json:"displayName,omitempty"`
	DurationGrant *string                      `json:"durationGrant,omitempty"`
	DurationUnset *AppEntitlementDurationUnset `json:"durationUnset,omitempty"`
	// This enables tasks to be created in an emergency and use a selected emergency access policy.
	EmergencyGrantEnabled *bool `json:"emergencyGrantEnabled,omitempty"`
	// The ID of the policy that will be used for emergency access grant tasks.
	EmergencyGrantPolicyID *string `json:"emergencyGrantPolicyId,omitempty"`
	// The amount of grants open for this entitlement
	GrantCount *string `json:"grantCount,omitempty"`
	// The ID of the policy that will be used for grant tickets related to the app entitlement.
	GrantPolicyID *string `json:"grantPolicyId,omitempty"`
	// The unique ID for the App Entitlement.
	ID *string `json:"id,omitempty"`
	// Flag to indicate whether automation (for adding users to entitlement based on rules) has been enabled.
	IsAutomationEnabled *bool `json:"isAutomationEnabled,omitempty"`
	// Flag to indicate if the app entitlement is manually managed.
	IsManuallyManaged *bool `json:"isManuallyManaged,omitempty"`
	// The matchBatonId field.
	MatchBatonID *string `json:"matchBatonId,omitempty"`
	// Flag to indicate if the app-level access request settings have been overridden for the entitlement
	OverrideAccessRequestsDefaults *bool            `json:"overrideAccessRequestsDefaults,omitempty"`
	ProvisionerPolicy              *ProvisionPolicy `json:"provisionerPolicy,omitempty"`
	// The purpose field.
	Purpose *Purpose `json:"purpose,omitempty"`
	// The ID of the request schema associated with this app entitlement.
	RequestSchemaID *string `json:"requestSchemaId,omitempty"`
	// The ID of the policy that will be used for revoke tickets related to the app entitlement
	RevokePolicyID *string `json:"revokePolicyId,omitempty"`
	// The riskLevelValueId field.
	RiskLevelValueID *string `json:"riskLevelValueId,omitempty"`
	// The slug is displayed as an oval next to the name in the frontend of C1, it tells you what permission the entitlement grants. See https://www.conductorone.com/docs/product/admin/entitlements/
	Slug *string `json:"slug,omitempty"`
	// Map to tell us which connector the entitlement came from.
	SourceConnectorIds map[string]string `json:"sourceConnectorIds,omitempty"`
	// This field indicates if this is a system builtin entitlement.
	SystemBuiltin       *bool                `json:"systemBuiltin,omitempty"`
	UpdatedAt           *time.Time           `json:"updatedAt,omitempty"`
	DeprovisionerPolicy *DeprovisionerPolicy `json:"deprovisionerPolicy,omitempty"`
}

func (a AppEntitlement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppEntitlement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AppEntitlement) GetAlias() *string {
	if a == nil {
		return nil
	}
	return a.Alias
}

func (a *AppEntitlement) GetAppID() *string {
	if a == nil {
		return nil
	}
	return a.AppID
}

func (a *AppEntitlement) GetAppResourceID() *string {
	if a == nil {
		return nil
	}
	return a.AppResourceID
}

func (a *AppEntitlement) GetAppResourceTypeID() *string {
	if a == nil {
		return nil
	}
	return a.AppResourceTypeID
}

func (a *AppEntitlement) GetCertifyPolicyID() *string {
	if a == nil {
		return nil
	}
	return a.CertifyPolicyID
}

func (a *AppEntitlement) GetComplianceFrameworkValueIds() []string {
	if a == nil {
		return nil
	}
	return a.ComplianceFrameworkValueIds
}

func (a *AppEntitlement) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AppEntitlement) GetDefaultValuesApplied() *bool {
	if a == nil {
		return nil
	}
	return a.DefaultValuesApplied
}

func (a *AppEntitlement) GetDeletedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.DeletedAt
}

func (a *AppEntitlement) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AppEntitlement) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *AppEntitlement) GetDurationGrant() *string {
	if a == nil {
		return nil
	}
	return a.DurationGrant
}

func (a *AppEntitlement) GetDurationUnset() *AppEntitlementDurationUnset {
	if a == nil {
		return nil
	}
	return a.DurationUnset
}

func (a *AppEntitlement) GetEmergencyGrantEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.EmergencyGrantEnabled
}

func (a *AppEntitlement) GetEmergencyGrantPolicyID() *string {
	if a == nil {
		return nil
	}
	return a.EmergencyGrantPolicyID
}

func (a *AppEntitlement) GetGrantCount() *string {
	if a == nil {
		return nil
	}
	return a.GrantCount
}

func (a *AppEntitlement) GetGrantPolicyID() *string {
	if a == nil {
		return nil
	}
	return a.GrantPolicyID
}

func (a *AppEntitlement) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AppEntitlement) GetIsAutomationEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.IsAutomationEnabled
}

func (a *AppEntitlement) GetIsManuallyManaged() *bool {
	if a == nil {
		return nil
	}
	return a.IsManuallyManaged
}

func (a *AppEntitlement) GetMatchBatonID() *string {
	if a == nil {
		return nil
	}
	return a.MatchBatonID
}

func (a *AppEntitlement) GetOverrideAccessRequestsDefaults() *bool {
	if a == nil {
		return nil
	}
	return a.OverrideAccessRequestsDefaults
}

func (a *AppEntitlement) GetProvisionerPolicy() *ProvisionPolicy {
	if a == nil {
		return nil
	}
	return a.ProvisionerPolicy
}

func (a *AppEntitlement) GetPurpose() *Purpose {
	if a == nil {
		return nil
	}
	return a.Purpose
}

func (a *AppEntitlement) GetRequestSchemaID() *string {
	if a == nil {
		return nil
	}
	return a.RequestSchemaID
}

func (a *AppEntitlement) GetRevokePolicyID() *string {
	if a == nil {
		return nil
	}
	return a.RevokePolicyID
}

func (a *AppEntitlement) GetRiskLevelValueID() *string {
	if a == nil {
		return nil
	}
	return a.RiskLevelValueID
}

func (a *AppEntitlement) GetSlug() *string {
	if a == nil {
		return nil
	}
	return a.Slug
}

func (a *AppEntitlement) GetSourceConnectorIds() map[string]string {
	if a == nil {
		return nil
	}
	return a.SourceConnectorIds
}

func (a *AppEntitlement) GetSystemBuiltin() *bool {
	if a == nil {
		return nil
	}
	return a.SystemBuiltin
}

func (a *AppEntitlement) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AppEntitlement) GetDeprovisionerPolicy() *DeprovisionerPolicy {
	if a == nil {
		return nil
	}
	return a.DeprovisionerPolicy
}

// AppEntitlementInput - The app entitlement represents one permission in a downstream App (SAAS) that can be granted. For example, GitHub Read vs GitHub Write.
//
// This message contains a oneof named max_grant_duration. Only a single field of the following list may be set at a time:
//   - durationUnset
//   - durationGrant
type AppEntitlementInput struct {
	// The alias of the app entitlement used by Cone. Also exact-match queryable.
	Alias *string `json:"alias,omitempty"`
	// The ID of the app that is associated with the app entitlement.
	AppID *string `json:"appId,omitempty"`
	// The ID of the app resource that is associated with the app entitlement
	AppResourceID *string `json:"appResourceId,omitempty"`
	// The ID of the app resource type that is associated with the app entitlement
	AppResourceTypeID *string `json:"appResourceTypeId,omitempty"`
	// The ID of the policy that will be used for certify tickets related to the app entitlement.
	CertifyPolicyID *string `json:"certifyPolicyId,omitempty"`
	// The IDs of different compliance frameworks associated with this app entitlement ex (SOX, HIPAA, PCI, etc.)
	ComplianceFrameworkValueIds []string   `json:"complianceFrameworkValueIds,omitempty"`
	CreatedAt                   *time.Time `json:"createdAt,omitempty"`
	// Flag to indicate if app-level access request defaults have been applied to the entitlement
	DefaultValuesApplied *bool      `json:"defaultValuesApplied,omitempty"`
	DeletedAt            *time.Time `json:"deletedAt,omitempty"`
	// The description of the app entitlement.
	Description *string `json:"description,omitempty"`
	// The display name of the app entitlement.
	DisplayName   *string                      `json:"displayName,omitempty"`
	DurationGrant *string                      `json:"durationGrant,omitempty"`
	DurationUnset *AppEntitlementDurationUnset `json:"durationUnset,omitempty"`
	// This enables tasks to be created in an emergency and use a selected emergency access policy.
	EmergencyGrantEnabled *bool `json:"emergencyGrantEnabled,omitempty"`
	// The ID of the policy that will be used for emergency access grant tasks.
	EmergencyGrantPolicyID *string `json:"emergencyGrantPolicyId,omitempty"`
	// The ID of the policy that will be used for grant tickets related to the app entitlement.
	GrantPolicyID *string `json:"grantPolicyId,omitempty"`
	// Flag to indicate if the app entitlement is manually managed.
	IsManuallyManaged *bool `json:"isManuallyManaged,omitempty"`
	// The matchBatonId field.
	MatchBatonID *string `json:"matchBatonId,omitempty"`
	// Flag to indicate if the app-level access request settings have been overridden for the entitlement
	OverrideAccessRequestsDefaults *bool            `json:"overrideAccessRequestsDefaults,omitempty"`
	ProvisionerPolicy              *ProvisionPolicy `json:"provisionerPolicy,omitempty"`
	// The purpose field.
	Purpose *Purpose `json:"purpose,omitempty"`
	// The ID of the request schema associated with this app entitlement.
	RequestSchemaID *string `json:"requestSchemaId,omitempty"`
	// The ID of the policy that will be used for revoke tickets related to the app entitlement
	RevokePolicyID *string `json:"revokePolicyId,omitempty"`
	// The riskLevelValueId field.
	RiskLevelValueID *string `json:"riskLevelValueId,omitempty"`
	// The slug is displayed as an oval next to the name in the frontend of C1, it tells you what permission the entitlement grants. See https://www.conductorone.com/docs/product/admin/entitlements/
	Slug *string `json:"slug,omitempty"`
	// Map to tell us which connector the entitlement came from.
	SourceConnectorIds  map[string]string    `json:"sourceConnectorIds,omitempty"`
	UpdatedAt           *time.Time           `json:"updatedAt,omitempty"`
	DeprovisionerPolicy *DeprovisionerPolicy `json:"deprovisionerPolicy,omitempty"`
}

func (a AppEntitlementInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppEntitlementInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AppEntitlementInput) GetAlias() *string {
	if a == nil {
		return nil
	}
	return a.Alias
}

func (a *AppEntitlementInput) GetAppID() *string {
	if a == nil {
		return nil
	}
	return a.AppID
}

func (a *AppEntitlementInput) GetAppResourceID() *string {
	if a == nil {
		return nil
	}
	return a.AppResourceID
}

func (a *AppEntitlementInput) GetAppResourceTypeID() *string {
	if a == nil {
		return nil
	}
	return a.AppResourceTypeID
}

func (a *AppEntitlementInput) GetCertifyPolicyID() *string {
	if a == nil {
		return nil
	}
	return a.CertifyPolicyID
}

func (a *AppEntitlementInput) GetComplianceFrameworkValueIds() []string {
	if a == nil {
		return nil
	}
	return a.ComplianceFrameworkValueIds
}

func (a *AppEntitlementInput) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AppEntitlementInput) GetDefaultValuesApplied() *bool {
	if a == nil {
		return nil
	}
	return a.DefaultValuesApplied
}

func (a *AppEntitlementInput) GetDeletedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.DeletedAt
}

func (a *AppEntitlementInput) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AppEntitlementInput) GetDisplayName() *string {
	if a == nil {
		return nil
	}
	return a.DisplayName
}

func (a *AppEntitlementInput) GetDurationGrant() *string {
	if a == nil {
		return nil
	}
	return a.DurationGrant
}

func (a *AppEntitlementInput) GetDurationUnset() *AppEntitlementDurationUnset {
	if a == nil {
		return nil
	}
	return a.DurationUnset
}

func (a *AppEntitlementInput) GetEmergencyGrantEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.EmergencyGrantEnabled
}

func (a *AppEntitlementInput) GetEmergencyGrantPolicyID() *string {
	if a == nil {
		return nil
	}
	return a.EmergencyGrantPolicyID
}

func (a *AppEntitlementInput) GetGrantPolicyID() *string {
	if a == nil {
		return nil
	}
	return a.GrantPolicyID
}

func (a *AppEntitlementInput) GetIsManuallyManaged() *bool {
	if a == nil {
		return nil
	}
	return a.IsManuallyManaged
}

func (a *AppEntitlementInput) GetMatchBatonID() *string {
	if a == nil {
		return nil
	}
	return a.MatchBatonID
}

func (a *AppEntitlementInput) GetOverrideAccessRequestsDefaults() *bool {
	if a == nil {
		return nil
	}
	return a.OverrideAccessRequestsDefaults
}

func (a *AppEntitlementInput) GetProvisionerPolicy() *ProvisionPolicy {
	if a == nil {
		return nil
	}
	return a.ProvisionerPolicy
}

func (a *AppEntitlementInput) GetPurpose() *Purpose {
	if a == nil {
		return nil
	}
	return a.Purpose
}

func (a *AppEntitlementInput) GetRequestSchemaID() *string {
	if a == nil {
		return nil
	}
	return a.RequestSchemaID
}

func (a *AppEntitlementInput) GetRevokePolicyID() *string {
	if a == nil {
		return nil
	}
	return a.RevokePolicyID
}

func (a *AppEntitlementInput) GetRiskLevelValueID() *string {
	if a == nil {
		return nil
	}
	return a.RiskLevelValueID
}

func (a *AppEntitlementInput) GetSlug() *string {
	if a == nil {
		return nil
	}
	return a.Slug
}

func (a *AppEntitlementInput) GetSourceConnectorIds() map[string]string {
	if a == nil {
		return nil
	}
	return a.SourceConnectorIds
}

func (a *AppEntitlementInput) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AppEntitlementInput) GetDeprovisionerPolicy() *DeprovisionerPolicy {
	if a == nil {
		return nil
	}
	return a.DeprovisionerPolicy
}
