// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// AutomationExecutionState - The state field.
type AutomationExecutionState string

const (
	AutomationExecutionStateAutomationExecutionStateUnspecified  AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_UNSPECIFIED"
	AutomationExecutionStateAutomationExecutionStatePending      AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_PENDING"
	AutomationExecutionStateAutomationExecutionStateCreating     AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_CREATING"
	AutomationExecutionStateAutomationExecutionStateGetStep      AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_GET_STEP"
	AutomationExecutionStateAutomationExecutionStateProcessStep  AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_PROCESS_STEP"
	AutomationExecutionStateAutomationExecutionStateCompleteStep AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_COMPLETE_STEP"
	AutomationExecutionStateAutomationExecutionStateDone         AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_DONE"
	AutomationExecutionStateAutomationExecutionStateError        AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_ERROR"
	AutomationExecutionStateAutomationExecutionStateTerminate    AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_TERMINATE"
	AutomationExecutionStateAutomationExecutionStateWaiting      AutomationExecutionState = "AUTOMATION_EXECUTION_STATE_WAITING"
)

func (e AutomationExecutionState) ToPointer() *AutomationExecutionState {
	return &e
}
func (e *AutomationExecutionState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTOMATION_EXECUTION_STATE_UNSPECIFIED":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_PENDING":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_CREATING":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_GET_STEP":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_PROCESS_STEP":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_COMPLETE_STEP":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_DONE":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_ERROR":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_TERMINATE":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_WAITING":
		*e = AutomationExecutionState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutomationExecutionState: %v", v)
	}
}

// The AutomationExecution message.
type AutomationExecution struct {
	// The automationTemplateId field.
	AutomationTemplateID *string            `json:"automationTemplateId,omitempty"`
	CompletedAt          *time.Time         `json:"completedAt,omitempty"`
	Context              *AutomationContext `json:"context,omitempty"`
	CreatedAt            *time.Time         `json:"createdAt,omitempty"`
	// The currentVersion field.
	CurrentVersion *int       `json:"currentVersion,omitempty"`
	DeletedAt      *time.Time `json:"deletedAt,omitempty"`
	Duration       *string    `json:"duration,omitempty"`
	// The id field.
	ID *string `json:"id,omitempty"`
	// The isDraft field.
	IsDraft *bool `json:"isDraft,omitempty"`
	// The state field.
	State     *AutomationExecutionState `json:"state,omitempty"`
	UpdatedAt *time.Time                `json:"updatedAt,omitempty"`
}

func (a AutomationExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AutomationExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AutomationExecution) GetAutomationTemplateID() *string {
	if a == nil {
		return nil
	}
	return a.AutomationTemplateID
}

func (a *AutomationExecution) GetCompletedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CompletedAt
}

func (a *AutomationExecution) GetContext() *AutomationContext {
	if a == nil {
		return nil
	}
	return a.Context
}

func (a *AutomationExecution) GetCreatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AutomationExecution) GetCurrentVersion() *int {
	if a == nil {
		return nil
	}
	return a.CurrentVersion
}

func (a *AutomationExecution) GetDeletedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.DeletedAt
}

func (a *AutomationExecution) GetDuration() *string {
	if a == nil {
		return nil
	}
	return a.Duration
}

func (a *AutomationExecution) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AutomationExecution) GetIsDraft() *bool {
	if a == nil {
		return nil
	}
	return a.IsDraft
}

func (a *AutomationExecution) GetState() *AutomationExecutionState {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *AutomationExecution) GetUpdatedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}
