// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// EncryptedData is a message that contains encrypted bytes and metadata.
type EncryptedData struct {
	// The human-readable description of the encrypted data.
	Description *string `json:"description,omitempty"`
	// The encrypted bytes.
	EncryptedBytes *string `json:"encryptedBytes,omitempty"`
	// The key ID used to encrypt the data.
	KeyID *string `json:"keyId,omitempty"`
	// The human-readable name of the encrypted data.
	Name *string `json:"name,omitempty"`
	// The encryption provider used to encrypt the data.
	Provider *string `json:"provider,omitempty"`
	// The (optional) JSON schema of the encrypted data.
	Schema *string `json:"schema,omitempty"`
}

func (e *EncryptedData) GetDescription() *string {
	if e == nil {
		return nil
	}
	return e.Description
}

func (e *EncryptedData) GetEncryptedBytes() *string {
	if e == nil {
		return nil
	}
	return e.EncryptedBytes
}

func (e *EncryptedData) GetKeyID() *string {
	if e == nil {
		return nil
	}
	return e.KeyID
}

func (e *EncryptedData) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EncryptedData) GetProvider() *string {
	if e == nil {
		return nil
	}
	return e.Provider
}

func (e *EncryptedData) GetSchema() *string {
	if e == nil {
		return nil
	}
	return e.Schema
}
