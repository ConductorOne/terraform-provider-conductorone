// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// ColdStartBehavior - The coldStartBehavior field.
type ColdStartBehavior string

const (
	ColdStartBehaviorColdStartBehaviorUnspecified    ColdStartBehavior = "COLD_START_BEHAVIOR_UNSPECIFIED"
	ColdStartBehaviorColdStartBehaviorRunImmediately ColdStartBehavior = "COLD_START_BEHAVIOR_RUN_IMMEDIATELY"
	ColdStartBehaviorColdStartBehaviorRunDelayed     ColdStartBehavior = "COLD_START_BEHAVIOR_RUN_DELAYED"
)

func (e ColdStartBehavior) ToPointer() *ColdStartBehavior {
	return &e
}
func (e *ColdStartBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COLD_START_BEHAVIOR_UNSPECIFIED":
		fallthrough
	case "COLD_START_BEHAVIOR_RUN_IMMEDIATELY":
		fallthrough
	case "COLD_START_BEHAVIOR_RUN_DELAYED":
		*e = ColdStartBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ColdStartBehavior: %v", v)
	}
}

type TargetedAppUserTypes string

const (
	TargetedAppUserTypesAppUserTypeUnspecified    TargetedAppUserTypes = "APP_USER_TYPE_UNSPECIFIED"
	TargetedAppUserTypesAppUserTypeUser           TargetedAppUserTypes = "APP_USER_TYPE_USER"
	TargetedAppUserTypesAppUserTypeServiceAccount TargetedAppUserTypes = "APP_USER_TYPE_SERVICE_ACCOUNT"
	TargetedAppUserTypesAppUserTypeSystemAccount  TargetedAppUserTypes = "APP_USER_TYPE_SYSTEM_ACCOUNT"
)

func (e TargetedAppUserTypes) ToPointer() *TargetedAppUserTypes {
	return &e
}
func (e *TargetedAppUserTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_USER_TYPE_UNSPECIFIED":
		fallthrough
	case "APP_USER_TYPE_USER":
		fallthrough
	case "APP_USER_TYPE_SERVICE_ACCOUNT":
		fallthrough
	case "APP_USER_TYPE_SYSTEM_ACCOUNT":
		*e = TargetedAppUserTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetedAppUserTypes: %v", v)
	}
}

// The UsageBasedRevocationTrigger message.
type UsageBasedRevocationTrigger struct {
	// The appId field.
	AppID *string `json:"appId,omitempty"`
	// The coldStartBehavior field.
	ColdStartBehavior *ColdStartBehavior `json:"coldStartBehavior,omitempty"`
	// The coldStartDelayDays field.
	ColdStartDelayDays *int64     `json:"coldStartDelayDays,omitempty"`
	EnabledAt          *time.Time `json:"enabledAt,omitempty"`
	// The excludedGroupRefs field.
	ExcludedGroupRefs []AppEntitlementRef `json:"excludedGroupRefs,omitempty"`
	// The excludedUserRefs field.
	ExcludedUserRefs []UserRef `json:"excludedUserRefs,omitempty"`
	// The includeUsersWithNoActivity field.
	IncludeUsersWithNoActivity *bool `json:"includeUsersWithNoActivity,omitempty"`
	// The targetedAppUserTypes field.
	TargetedAppUserTypes []TargetedAppUserTypes `json:"targetedAppUserTypes,omitempty"`
	// The targetedEntitlementRefs field.
	TargetedEntitlementRefs []AppEntitlementRef `json:"targetedEntitlementRefs,omitempty"`
	// The unusedForDays field.
	UnusedForDays *int64 `json:"unusedForDays,omitempty"`
}

func (u UsageBasedRevocationTrigger) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UsageBasedRevocationTrigger) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UsageBasedRevocationTrigger) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *UsageBasedRevocationTrigger) GetColdStartBehavior() *ColdStartBehavior {
	if o == nil {
		return nil
	}
	return o.ColdStartBehavior
}

func (o *UsageBasedRevocationTrigger) GetColdStartDelayDays() *int64 {
	if o == nil {
		return nil
	}
	return o.ColdStartDelayDays
}

func (o *UsageBasedRevocationTrigger) GetEnabledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UsageBasedRevocationTrigger) GetExcludedGroupRefs() []AppEntitlementRef {
	if o == nil {
		return nil
	}
	return o.ExcludedGroupRefs
}

func (o *UsageBasedRevocationTrigger) GetExcludedUserRefs() []UserRef {
	if o == nil {
		return nil
	}
	return o.ExcludedUserRefs
}

func (o *UsageBasedRevocationTrigger) GetIncludeUsersWithNoActivity() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeUsersWithNoActivity
}

func (o *UsageBasedRevocationTrigger) GetTargetedAppUserTypes() []TargetedAppUserTypes {
	if o == nil {
		return nil
	}
	return o.TargetedAppUserTypes
}

func (o *UsageBasedRevocationTrigger) GetTargetedEntitlementRefs() []AppEntitlementRef {
	if o == nil {
		return nil
	}
	return o.TargetedEntitlementRefs
}

func (o *UsageBasedRevocationTrigger) GetUnusedForDays() *int64 {
	if o == nil {
		return nil
	}
	return o.UnusedForDays
}
