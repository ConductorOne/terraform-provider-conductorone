// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// FieldRules encapsulates the rules for each type of field. Depending on the
//
//	field, the correct set should be used to ensure proper validations.
//
// This message contains a oneof named type. Only a single field of the following list may be set at a time:
//   - float
//   - double
//   - int32
//   - int64
//   - uint32
//   - uint64
//   - sint32
//   - sint64
//   - fixed32
//   - fixed64
//   - sfixed32
//   - sfixed64
//   - bool
//   - string
//   - bytes
//   - enum
//   - repeated
//   - map
//   - any
//   - duration
//   - timestamp
type FieldRules struct {
	Any       *AnyRules       `json:"any,omitempty"`
	Bool      *BoolRules      `json:"bool,omitempty"`
	Bytes     *BytesRules     `json:"bytes,omitempty"`
	Double    *DoubleRules    `json:"double,omitempty"`
	Duration  *DurationRules  `json:"duration,omitempty"`
	Enum      *EnumRules      `json:"enum,omitempty"`
	Fixed32   *Fixed32Rules   `json:"fixed32,omitempty"`
	Fixed64   *Fixed64Rules   `json:"fixed64,omitempty"`
	Float     *FloatRules     `json:"float,omitempty"`
	Int32     *Int32Rules     `json:"int32,omitempty"`
	Int64     *Int64Rules     `json:"int64,omitempty"`
	Map       *MapRules       `json:"map,omitempty"`
	Message   *MessageRules   `json:"message,omitempty"`
	Repeated  *RepeatedRules  `json:"repeated,omitempty"`
	Sfixed32  *SFixed32Rules  `json:"sfixed32,omitempty"`
	Sfixed64  *SFixed64Rules  `json:"sfixed64,omitempty"`
	Sint32    *SInt32Rules    `json:"sint32,omitempty"`
	Sint64    *SInt64Rules    `json:"sint64,omitempty"`
	String    *StringRules    `json:"string,omitempty"`
	Timestamp *TimestampRules `json:"timestamp,omitempty"`
	Uint32    *UInt32Rules    `json:"uint32,omitempty"`
	Uint64    *UInt64Rules    `json:"uint64,omitempty"`
}

func (f *FieldRules) GetAny() *AnyRules {
	if f == nil {
		return nil
	}
	return f.Any
}

func (f *FieldRules) GetBool() *BoolRules {
	if f == nil {
		return nil
	}
	return f.Bool
}

func (f *FieldRules) GetBytes() *BytesRules {
	if f == nil {
		return nil
	}
	return f.Bytes
}

func (f *FieldRules) GetDouble() *DoubleRules {
	if f == nil {
		return nil
	}
	return f.Double
}

func (f *FieldRules) GetDuration() *DurationRules {
	if f == nil {
		return nil
	}
	return f.Duration
}

func (f *FieldRules) GetEnum() *EnumRules {
	if f == nil {
		return nil
	}
	return f.Enum
}

func (f *FieldRules) GetFixed32() *Fixed32Rules {
	if f == nil {
		return nil
	}
	return f.Fixed32
}

func (f *FieldRules) GetFixed64() *Fixed64Rules {
	if f == nil {
		return nil
	}
	return f.Fixed64
}

func (f *FieldRules) GetFloat() *FloatRules {
	if f == nil {
		return nil
	}
	return f.Float
}

func (f *FieldRules) GetInt32() *Int32Rules {
	if f == nil {
		return nil
	}
	return f.Int32
}

func (f *FieldRules) GetInt64() *Int64Rules {
	if f == nil {
		return nil
	}
	return f.Int64
}

func (f *FieldRules) GetMap() *MapRules {
	if f == nil {
		return nil
	}
	return f.Map
}

func (f *FieldRules) GetMessage() *MessageRules {
	if f == nil {
		return nil
	}
	return f.Message
}

func (f *FieldRules) GetRepeated() *RepeatedRules {
	if f == nil {
		return nil
	}
	return f.Repeated
}

func (f *FieldRules) GetSfixed32() *SFixed32Rules {
	if f == nil {
		return nil
	}
	return f.Sfixed32
}

func (f *FieldRules) GetSfixed64() *SFixed64Rules {
	if f == nil {
		return nil
	}
	return f.Sfixed64
}

func (f *FieldRules) GetSint32() *SInt32Rules {
	if f == nil {
		return nil
	}
	return f.Sint32
}

func (f *FieldRules) GetSint64() *SInt64Rules {
	if f == nil {
		return nil
	}
	return f.Sint64
}

func (f *FieldRules) GetString() *StringRules {
	if f == nil {
		return nil
	}
	return f.String
}

func (f *FieldRules) GetTimestamp() *TimestampRules {
	if f == nil {
		return nil
	}
	return f.Timestamp
}

func (f *FieldRules) GetUint32() *UInt32Rules {
	if f == nil {
		return nil
	}
	return f.Uint32
}

func (f *FieldRules) GetUint64() *UInt64Rules {
	if f == nil {
		return nil
	}
	return f.Uint64
}
