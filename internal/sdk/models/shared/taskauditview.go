// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// CurrentState - The currentState field.
type CurrentState string

const (
	CurrentStateTaskStateUnspecified CurrentState = "TASK_STATE_UNSPECIFIED"
	CurrentStateTaskStateOpen        CurrentState = "TASK_STATE_OPEN"
	CurrentStateTaskStateClosed      CurrentState = "TASK_STATE_CLOSED"
)

func (e CurrentState) ToPointer() *CurrentState {
	return &e
}
func (e *CurrentState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_STATE_UNSPECIFIED":
		fallthrough
	case "TASK_STATE_OPEN":
		fallthrough
	case "TASK_STATE_CLOSED":
		*e = CurrentState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CurrentState: %v", v)
	}
}

// TaskAuditViewEventType - The eventType field.
type TaskAuditViewEventType string

const (
	TaskAuditViewEventTypeTaskAuditEventTypeUnspecified TaskAuditViewEventType = "TASK_AUDIT_EVENT_TYPE_UNSPECIFIED"
	TaskAuditViewEventTypeTaskAuditEventTypeNeutral     TaskAuditViewEventType = "TASK_AUDIT_EVENT_TYPE_NEUTRAL"
	TaskAuditViewEventTypeTaskAuditEventTypeError       TaskAuditViewEventType = "TASK_AUDIT_EVENT_TYPE_ERROR"
)

func (e TaskAuditViewEventType) ToPointer() *TaskAuditViewEventType {
	return &e
}
func (e *TaskAuditViewEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_AUDIT_EVENT_TYPE_UNSPECIFIED":
		fallthrough
	case "TASK_AUDIT_EVENT_TYPE_NEUTRAL":
		fallthrough
	case "TASK_AUDIT_EVENT_TYPE_ERROR":
		*e = TaskAuditViewEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskAuditViewEventType: %v", v)
	}
}

// Source - The source field.
type Source string

const (
	SourceSourceUnspecified   Source = "SOURCE_UNSPECIFIED"
	SourceSourceC1            Source = "SOURCE_C1"
	SourceSourceJira          Source = "SOURCE_JIRA"
	SourceSourceSlack         Source = "SOURCE_SLACK"
	SourceSourceCopilotAgents Source = "SOURCE_COPILOT_AGENTS"
)

func (e Source) ToPointer() *Source {
	return &e
}
func (e *Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_UNSPECIFIED":
		fallthrough
	case "SOURCE_C1":
		fallthrough
	case "SOURCE_JIRA":
		fallthrough
	case "SOURCE_SLACK":
		fallthrough
	case "SOURCE_COPILOT_AGENTS":
		*e = Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Source: %v", v)
	}
}

// The TaskAuditView message.
//
// This message contains a oneof named typ. Only a single field of the following list may be set at a time:
//   - comment
//   - stateChange
//   - approvalInstanceChange
//   - connectorActionsStart
//   - connectorActionsEnd
//   - actionResult
//   - taskCreated
//   - certifyOutcome
//   - actionSubmitted
//   - grantOutcome
//   - revokeOutcome
//   - approvalReassigned
//   - taskRestarted
//   - accessRequestOutcome
//   - provisionReassigned
//   - provisionError
//   - approvedAutomatically
//   - reassignedToDelegate
//   - hardReset
//   - taskEscalated
//   - conditionalPolicyExecutionResult
//   - expressionPolicyStepError
//   - approvalAutoAcceptedByPolicy
//   - approvalAutoRejectedByPolicy
//   - bulkActionError
//   - webhookTriggered
//   - webhookAttempt
//   - webhookSuccess
//   - policyEvaluationStep
//   - waitStepSuccess
//   - waitStepWaiting
//   - waitStepTimedOut
//   - webhookApprovalTriggered
//   - webhookApprovalAttempt
//   - webhookApprovalSuccess
//   - webhookApprovalBadResponse
//   - externalTicketTriggered
//   - externalTicketCreated
//   - externalTicketError
//   - waitStepAnalysisSuccess
//   - waitStepAnalysisWaiting
//   - waitStepAnalysisTimedOut
//   - stepUpApproval
//   - externalTicketProvisionStepResolved
//   - stepSkipped
//   - reassignmentListError
//   - slaEscalation
//   - policyChanged
//   - formInstanceChange
//   - grantDurationUpdated
//   - waitStepUntilTime
//   - webhookApprovalFatalError
type TaskAuditView struct {
	AccessRequestOutcome             *TaskAuditAccessRequestOutcome             `json:"accessRequestOutcome,omitempty"`
	ActionResult                     *TaskAuditConnectorActionResult            `json:"actionResult,omitempty"`
	ActionSubmitted                  *TaskAuditActionSubmitted                  `json:"actionSubmitted,omitempty"`
	ApprovalAutoAcceptedByPolicy     *TaskAuditApprovalAutoAcceptedByPolicy     `json:"approvalAutoAcceptedByPolicy,omitempty"`
	ApprovalAutoRejectedByPolicy     *TaskAuditApprovalAutoRejectedByPolicy     `json:"approvalAutoRejectedByPolicy,omitempty"`
	ApprovalInstanceChange           *TaskAuditApprovalInstanceChange           `json:"approvalInstanceChange,omitempty"`
	ApprovalReassigned               *TaskAuditPolicyApprovalReassigned         `json:"approvalReassigned,omitempty"`
	ApprovedAutomatically            *TaskAuditApprovalHappenedAutomatically    `json:"approvedAutomatically,omitempty"`
	BulkActionError                  *TaskAuditBulkActionError                  `json:"bulkActionError,omitempty"`
	CertifyOutcome                   *TaskAuditCertifyOutcome                   `json:"certifyOutcome,omitempty"`
	Comment                          *TaskAuditComment                          `json:"comment,omitempty"`
	ConditionalPolicyExecutionResult *TaskAuditConditionalPolicyExecutionResult `json:"conditionalPolicyExecutionResult,omitempty"`
	ConnectorActionsEnd              *TaskAuditFinishedConnectorActions         `json:"connectorActionsEnd,omitempty"`
	ConnectorActionsStart            *TaskAuditStartedConnectorActions          `json:"connectorActionsStart,omitempty"`
	Created                          *time.Time                                 `json:"created,omitempty"`
	// The currentState field.
	CurrentState *CurrentState `json:"currentState,omitempty"`
	// The eventType field.
	EventType                           *TaskAuditViewEventType                       `json:"eventType,omitempty"`
	ExpressionPolicyStepError           *TaskAuditExpressionPolicyStepError           `json:"expressionPolicyStepError,omitempty"`
	ExternalTicketCreated               *TaskAuditExternalTicketCreated               `json:"externalTicketCreated,omitempty"`
	ExternalTicketError                 *TaskAuditExternalTicketError                 `json:"externalTicketError,omitempty"`
	ExternalTicketProvisionStepResolved *TaskAuditExternalTicketProvisionStepResolved `json:"externalTicketProvisionStepResolved,omitempty"`
	ExternalTicketTriggered             *TaskAuditExternalTicketTriggered             `json:"externalTicketTriggered,omitempty"`
	FormInstanceChange                  *TaskAuditFormInstanceChange                  `json:"formInstanceChange,omitempty"`
	GrantDurationUpdated                *TaskAuditGrantDurationUpdated                `json:"grantDurationUpdated,omitempty"`
	GrantOutcome                        *TaskAuditGrantOutcome                        `json:"grantOutcome,omitempty"`
	HardReset                           *TaskAuditHardReset                           `json:"hardReset,omitempty"`
	// The id field.
	ID                    *string                             `json:"id,omitempty"`
	Metadata              *TaskAuditMetaData                  `json:"metadata,omitempty"`
	PolicyChanged         *TaskAuditPolicyChanged             `json:"policyChanged,omitempty"`
	PolicyEvaluationStep  *TaskAuditPolicyEvaluationStep      `json:"policyEvaluationStep,omitempty"`
	ProvisionError        *TaskAuditPolicyProvisionError      `json:"provisionError,omitempty"`
	ProvisionReassigned   *TaskAuditPolicyProvisionReassigned `json:"provisionReassigned,omitempty"`
	ReassignedToDelegate  *TaskAuditReassignedToDelegate      `json:"reassignedToDelegate,omitempty"`
	ReassignmentListError *TaskAuditReassignmentListError     `json:"reassignmentListError,omitempty"`
	RevokeOutcome         *TaskAuditRevokeOutcome             `json:"revokeOutcome,omitempty"`
	SLAEscalation         *TaskAuditSLAEscalation             `json:"slaEscalation,omitempty"`
	// The source field.
	Source         *Source                             `json:"source,omitempty"`
	StateChange    *TaskAuditStateChange               `json:"stateChange,omitempty"`
	StepSkipped    *TaskAuditStepSkipped               `json:"stepSkipped,omitempty"`
	StepUpApproval *TaskAuditStepUpApproval            `json:"stepUpApproval,omitempty"`
	TaskCreated    *TaskAuditNewTask                   `json:"taskCreated,omitempty"`
	TaskEscalated  *TaskAuditEscalateToEmergencyAccess `json:"taskEscalated,omitempty"`
	TaskRestarted  *TaskAuditRestart                   `json:"taskRestarted,omitempty"`
	// The ticketId field.
	TicketID *string `json:"ticketId,omitempty"`
	// The userId field.
	UserID                     *string                               `json:"userId,omitempty"`
	WaitStepAnalysisSuccess    *TaskAuditWaitForAnalysisStepSuccess  `json:"waitStepAnalysisSuccess,omitempty"`
	WaitStepAnalysisTimedOut   *TaskAuditWaitForAnalysisStepTimedOut `json:"waitStepAnalysisTimedOut,omitempty"`
	WaitStepAnalysisWaiting    *TaskAuditWaitForAnalysisStepWaiting  `json:"waitStepAnalysisWaiting,omitempty"`
	WaitStepSuccess            *TaskAuditWaitStepSuccess             `json:"waitStepSuccess,omitempty"`
	WaitStepTimedOut           *TaskAuditWaitStepTimedOut            `json:"waitStepTimedOut,omitempty"`
	WaitStepUntilTime          *TaskAuditWaitStepUntilTime           `json:"waitStepUntilTime,omitempty"`
	WaitStepWaiting            *TaskAuditWaitStepWaiting             `json:"waitStepWaiting,omitempty"`
	WebhookApprovalAttempt     *TaskAuditWebhookApprovalAttempt      `json:"webhookApprovalAttempt,omitempty"`
	WebhookApprovalBadResponse *TaskAuditWebhookApprovalBadResponse  `json:"webhookApprovalBadResponse,omitempty"`
	WebhookApprovalFatalError  *TaskAuditWebhookApprovalFatalError   `json:"webhookApprovalFatalError,omitempty"`
	WebhookApprovalSuccess     *TaskAuditWebhookApprovalSuccess      `json:"webhookApprovalSuccess,omitempty"`
	WebhookApprovalTriggered   *TaskAuditWebhookApprovalTriggered    `json:"webhookApprovalTriggered,omitempty"`
	WebhookAttempt             *TaskAuditWebhookAttempt              `json:"webhookAttempt,omitempty"`
	WebhookSuccess             *TaskAuditWebhookSuccess              `json:"webhookSuccess,omitempty"`
	WebhookTriggered           *TaskAuditWebhookTriggered            `json:"webhookTriggered,omitempty"`
	// The workflowStep field.
	WorkflowStep *int `json:"workflowStep,omitempty"`
}

func (t TaskAuditView) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskAuditView) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TaskAuditView) GetAccessRequestOutcome() *TaskAuditAccessRequestOutcome {
	if t == nil {
		return nil
	}
	return t.AccessRequestOutcome
}

func (t *TaskAuditView) GetActionResult() *TaskAuditConnectorActionResult {
	if t == nil {
		return nil
	}
	return t.ActionResult
}

func (t *TaskAuditView) GetActionSubmitted() *TaskAuditActionSubmitted {
	if t == nil {
		return nil
	}
	return t.ActionSubmitted
}

func (t *TaskAuditView) GetApprovalAutoAcceptedByPolicy() *TaskAuditApprovalAutoAcceptedByPolicy {
	if t == nil {
		return nil
	}
	return t.ApprovalAutoAcceptedByPolicy
}

func (t *TaskAuditView) GetApprovalAutoRejectedByPolicy() *TaskAuditApprovalAutoRejectedByPolicy {
	if t == nil {
		return nil
	}
	return t.ApprovalAutoRejectedByPolicy
}

func (t *TaskAuditView) GetApprovalInstanceChange() *TaskAuditApprovalInstanceChange {
	if t == nil {
		return nil
	}
	return t.ApprovalInstanceChange
}

func (t *TaskAuditView) GetApprovalReassigned() *TaskAuditPolicyApprovalReassigned {
	if t == nil {
		return nil
	}
	return t.ApprovalReassigned
}

func (t *TaskAuditView) GetApprovedAutomatically() *TaskAuditApprovalHappenedAutomatically {
	if t == nil {
		return nil
	}
	return t.ApprovedAutomatically
}

func (t *TaskAuditView) GetBulkActionError() *TaskAuditBulkActionError {
	if t == nil {
		return nil
	}
	return t.BulkActionError
}

func (t *TaskAuditView) GetCertifyOutcome() *TaskAuditCertifyOutcome {
	if t == nil {
		return nil
	}
	return t.CertifyOutcome
}

func (t *TaskAuditView) GetComment() *TaskAuditComment {
	if t == nil {
		return nil
	}
	return t.Comment
}

func (t *TaskAuditView) GetConditionalPolicyExecutionResult() *TaskAuditConditionalPolicyExecutionResult {
	if t == nil {
		return nil
	}
	return t.ConditionalPolicyExecutionResult
}

func (t *TaskAuditView) GetConnectorActionsEnd() *TaskAuditFinishedConnectorActions {
	if t == nil {
		return nil
	}
	return t.ConnectorActionsEnd
}

func (t *TaskAuditView) GetConnectorActionsStart() *TaskAuditStartedConnectorActions {
	if t == nil {
		return nil
	}
	return t.ConnectorActionsStart
}

func (t *TaskAuditView) GetCreated() *time.Time {
	if t == nil {
		return nil
	}
	return t.Created
}

func (t *TaskAuditView) GetCurrentState() *CurrentState {
	if t == nil {
		return nil
	}
	return t.CurrentState
}

func (t *TaskAuditView) GetEventType() *TaskAuditViewEventType {
	if t == nil {
		return nil
	}
	return t.EventType
}

func (t *TaskAuditView) GetExpressionPolicyStepError() *TaskAuditExpressionPolicyStepError {
	if t == nil {
		return nil
	}
	return t.ExpressionPolicyStepError
}

func (t *TaskAuditView) GetExternalTicketCreated() *TaskAuditExternalTicketCreated {
	if t == nil {
		return nil
	}
	return t.ExternalTicketCreated
}

func (t *TaskAuditView) GetExternalTicketError() *TaskAuditExternalTicketError {
	if t == nil {
		return nil
	}
	return t.ExternalTicketError
}

func (t *TaskAuditView) GetExternalTicketProvisionStepResolved() *TaskAuditExternalTicketProvisionStepResolved {
	if t == nil {
		return nil
	}
	return t.ExternalTicketProvisionStepResolved
}

func (t *TaskAuditView) GetExternalTicketTriggered() *TaskAuditExternalTicketTriggered {
	if t == nil {
		return nil
	}
	return t.ExternalTicketTriggered
}

func (t *TaskAuditView) GetFormInstanceChange() *TaskAuditFormInstanceChange {
	if t == nil {
		return nil
	}
	return t.FormInstanceChange
}

func (t *TaskAuditView) GetGrantDurationUpdated() *TaskAuditGrantDurationUpdated {
	if t == nil {
		return nil
	}
	return t.GrantDurationUpdated
}

func (t *TaskAuditView) GetGrantOutcome() *TaskAuditGrantOutcome {
	if t == nil {
		return nil
	}
	return t.GrantOutcome
}

func (t *TaskAuditView) GetHardReset() *TaskAuditHardReset {
	if t == nil {
		return nil
	}
	return t.HardReset
}

func (t *TaskAuditView) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TaskAuditView) GetMetadata() *TaskAuditMetaData {
	if t == nil {
		return nil
	}
	return t.Metadata
}

func (t *TaskAuditView) GetPolicyChanged() *TaskAuditPolicyChanged {
	if t == nil {
		return nil
	}
	return t.PolicyChanged
}

func (t *TaskAuditView) GetPolicyEvaluationStep() *TaskAuditPolicyEvaluationStep {
	if t == nil {
		return nil
	}
	return t.PolicyEvaluationStep
}

func (t *TaskAuditView) GetProvisionError() *TaskAuditPolicyProvisionError {
	if t == nil {
		return nil
	}
	return t.ProvisionError
}

func (t *TaskAuditView) GetProvisionReassigned() *TaskAuditPolicyProvisionReassigned {
	if t == nil {
		return nil
	}
	return t.ProvisionReassigned
}

func (t *TaskAuditView) GetReassignedToDelegate() *TaskAuditReassignedToDelegate {
	if t == nil {
		return nil
	}
	return t.ReassignedToDelegate
}

func (t *TaskAuditView) GetReassignmentListError() *TaskAuditReassignmentListError {
	if t == nil {
		return nil
	}
	return t.ReassignmentListError
}

func (t *TaskAuditView) GetRevokeOutcome() *TaskAuditRevokeOutcome {
	if t == nil {
		return nil
	}
	return t.RevokeOutcome
}

func (t *TaskAuditView) GetSLAEscalation() *TaskAuditSLAEscalation {
	if t == nil {
		return nil
	}
	return t.SLAEscalation
}

func (t *TaskAuditView) GetSource() *Source {
	if t == nil {
		return nil
	}
	return t.Source
}

func (t *TaskAuditView) GetStateChange() *TaskAuditStateChange {
	if t == nil {
		return nil
	}
	return t.StateChange
}

func (t *TaskAuditView) GetStepSkipped() *TaskAuditStepSkipped {
	if t == nil {
		return nil
	}
	return t.StepSkipped
}

func (t *TaskAuditView) GetStepUpApproval() *TaskAuditStepUpApproval {
	if t == nil {
		return nil
	}
	return t.StepUpApproval
}

func (t *TaskAuditView) GetTaskCreated() *TaskAuditNewTask {
	if t == nil {
		return nil
	}
	return t.TaskCreated
}

func (t *TaskAuditView) GetTaskEscalated() *TaskAuditEscalateToEmergencyAccess {
	if t == nil {
		return nil
	}
	return t.TaskEscalated
}

func (t *TaskAuditView) GetTaskRestarted() *TaskAuditRestart {
	if t == nil {
		return nil
	}
	return t.TaskRestarted
}

func (t *TaskAuditView) GetTicketID() *string {
	if t == nil {
		return nil
	}
	return t.TicketID
}

func (t *TaskAuditView) GetUserID() *string {
	if t == nil {
		return nil
	}
	return t.UserID
}

func (t *TaskAuditView) GetWaitStepAnalysisSuccess() *TaskAuditWaitForAnalysisStepSuccess {
	if t == nil {
		return nil
	}
	return t.WaitStepAnalysisSuccess
}

func (t *TaskAuditView) GetWaitStepAnalysisTimedOut() *TaskAuditWaitForAnalysisStepTimedOut {
	if t == nil {
		return nil
	}
	return t.WaitStepAnalysisTimedOut
}

func (t *TaskAuditView) GetWaitStepAnalysisWaiting() *TaskAuditWaitForAnalysisStepWaiting {
	if t == nil {
		return nil
	}
	return t.WaitStepAnalysisWaiting
}

func (t *TaskAuditView) GetWaitStepSuccess() *TaskAuditWaitStepSuccess {
	if t == nil {
		return nil
	}
	return t.WaitStepSuccess
}

func (t *TaskAuditView) GetWaitStepTimedOut() *TaskAuditWaitStepTimedOut {
	if t == nil {
		return nil
	}
	return t.WaitStepTimedOut
}

func (t *TaskAuditView) GetWaitStepUntilTime() *TaskAuditWaitStepUntilTime {
	if t == nil {
		return nil
	}
	return t.WaitStepUntilTime
}

func (t *TaskAuditView) GetWaitStepWaiting() *TaskAuditWaitStepWaiting {
	if t == nil {
		return nil
	}
	return t.WaitStepWaiting
}

func (t *TaskAuditView) GetWebhookApprovalAttempt() *TaskAuditWebhookApprovalAttempt {
	if t == nil {
		return nil
	}
	return t.WebhookApprovalAttempt
}

func (t *TaskAuditView) GetWebhookApprovalBadResponse() *TaskAuditWebhookApprovalBadResponse {
	if t == nil {
		return nil
	}
	return t.WebhookApprovalBadResponse
}

func (t *TaskAuditView) GetWebhookApprovalFatalError() *TaskAuditWebhookApprovalFatalError {
	if t == nil {
		return nil
	}
	return t.WebhookApprovalFatalError
}

func (t *TaskAuditView) GetWebhookApprovalSuccess() *TaskAuditWebhookApprovalSuccess {
	if t == nil {
		return nil
	}
	return t.WebhookApprovalSuccess
}

func (t *TaskAuditView) GetWebhookApprovalTriggered() *TaskAuditWebhookApprovalTriggered {
	if t == nil {
		return nil
	}
	return t.WebhookApprovalTriggered
}

func (t *TaskAuditView) GetWebhookAttempt() *TaskAuditWebhookAttempt {
	if t == nil {
		return nil
	}
	return t.WebhookAttempt
}

func (t *TaskAuditView) GetWebhookSuccess() *TaskAuditWebhookSuccess {
	if t == nil {
		return nil
	}
	return t.WebhookSuccess
}

func (t *TaskAuditView) GetWebhookTriggered() *TaskAuditWebhookTriggered {
	if t == nil {
		return nil
	}
	return t.WebhookTriggered
}

func (t *TaskAuditView) GetWorkflowStep() *int {
	if t == nil {
		return nil
	}
	return t.WorkflowStep
}
