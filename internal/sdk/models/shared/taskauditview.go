// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// CurrentState - The currentState field.
type CurrentState string

const (
	CurrentStateTaskStateUnspecified CurrentState = "TASK_STATE_UNSPECIFIED"
	CurrentStateTaskStateOpen        CurrentState = "TASK_STATE_OPEN"
	CurrentStateTaskStateClosed      CurrentState = "TASK_STATE_CLOSED"
)

func (e CurrentState) ToPointer() *CurrentState {
	return &e
}
func (e *CurrentState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_STATE_UNSPECIFIED":
		fallthrough
	case "TASK_STATE_OPEN":
		fallthrough
	case "TASK_STATE_CLOSED":
		*e = CurrentState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CurrentState: %v", v)
	}
}

// TaskAuditViewEventType - The eventType field.
type TaskAuditViewEventType string

const (
	TaskAuditViewEventTypeTaskAuditEventTypeUnspecified TaskAuditViewEventType = "TASK_AUDIT_EVENT_TYPE_UNSPECIFIED"
	TaskAuditViewEventTypeTaskAuditEventTypeNeutral     TaskAuditViewEventType = "TASK_AUDIT_EVENT_TYPE_NEUTRAL"
	TaskAuditViewEventTypeTaskAuditEventTypeError       TaskAuditViewEventType = "TASK_AUDIT_EVENT_TYPE_ERROR"
)

func (e TaskAuditViewEventType) ToPointer() *TaskAuditViewEventType {
	return &e
}
func (e *TaskAuditViewEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_AUDIT_EVENT_TYPE_UNSPECIFIED":
		fallthrough
	case "TASK_AUDIT_EVENT_TYPE_NEUTRAL":
		fallthrough
	case "TASK_AUDIT_EVENT_TYPE_ERROR":
		*e = TaskAuditViewEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskAuditViewEventType: %v", v)
	}
}

// Source - The source field.
type Source string

const (
	SourceSourceUnspecified   Source = "SOURCE_UNSPECIFIED"
	SourceSourceC1            Source = "SOURCE_C1"
	SourceSourceJira          Source = "SOURCE_JIRA"
	SourceSourceSlack         Source = "SOURCE_SLACK"
	SourceSourceCopilotAgents Source = "SOURCE_COPILOT_AGENTS"
)

func (e Source) ToPointer() *Source {
	return &e
}
func (e *Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SOURCE_UNSPECIFIED":
		fallthrough
	case "SOURCE_C1":
		fallthrough
	case "SOURCE_JIRA":
		fallthrough
	case "SOURCE_SLACK":
		fallthrough
	case "SOURCE_COPILOT_AGENTS":
		*e = Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Source: %v", v)
	}
}

// The TaskAuditView message.
//
// This message contains a oneof named typ. Only a single field of the following list may be set at a time:
//   - comment
//   - stateChange
//   - approvalInstanceChange
//   - connectorActionsStart
//   - connectorActionsEnd
//   - actionResult
//   - taskCreated
//   - certifyOutcome
//   - actionSubmitted
//   - grantOutcome
//   - revokeOutcome
//   - approvalReassigned
//   - taskRestarted
//   - accessRequestOutcome
//   - provisionReassigned
//   - provisionError
//   - approvedAutomatically
//   - reassignedToDelegate
//   - hardReset
//   - taskEscalated
//   - conditionalPolicyExecutionResult
//   - expressionPolicyStepError
//   - approvalAutoAcceptedByPolicy
//   - approvalAutoRejectedByPolicy
//   - bulkActionError
//   - webhookTriggered
//   - webhookAttempt
//   - webhookSuccess
//   - policyEvaluationStep
//   - waitStepSuccess
//   - waitStepWaiting
//   - waitStepTimedOut
//   - webhookApprovalTriggered
//   - webhookApprovalAttempt
//   - webhookApprovalSuccess
//   - webhookApprovalBadResponse
//   - externalTicketTriggered
//   - externalTicketCreated
//   - externalTicketError
//   - waitStepAnalysisSuccess
//   - waitStepAnalysisWaiting
//   - waitStepAnalysisTimedOut
//   - stepUpApproval
//   - externalTicketProvisionStepResolved
//   - stepSkipped
//   - reassignmentListError
//   - slaEscalation
//   - policyChanged
//   - formInstanceChange
//   - grantDurationUpdated
//   - waitStepUntilTime
//   - webhookApprovalFatalError
type TaskAuditView struct {
	// The TaskAuditAccessRequestOutcome message.
	TaskAuditAccessRequestOutcome *TaskAuditAccessRequestOutcome `json:"accessRequestOutcome,omitempty"`
	// The TaskAuditConnectorActionResult message.
	//
	// This message contains a oneof named result. Only a single field of the following list may be set at a time:
	//   - success
	//   - error
	//   - cancelled
	//
	TaskAuditConnectorActionResult *TaskAuditConnectorActionResult `json:"actionResult,omitempty"`
	// The TaskAuditActionSubmitted message.
	TaskAuditActionSubmitted *TaskAuditActionSubmitted `json:"actionSubmitted,omitempty"`
	// The TaskAuditApprovalAutoAcceptedByPolicy message.
	TaskAuditApprovalAutoAcceptedByPolicy *TaskAuditApprovalAutoAcceptedByPolicy `json:"approvalAutoAcceptedByPolicy,omitempty"`
	// The TaskAuditApprovalAutoRejectedByPolicy message.
	TaskAuditApprovalAutoRejectedByPolicy *TaskAuditApprovalAutoRejectedByPolicy `json:"approvalAutoRejectedByPolicy,omitempty"`
	// The TaskAuditApprovalInstanceChange message.
	TaskAuditApprovalInstanceChange *TaskAuditApprovalInstanceChange `json:"approvalInstanceChange,omitempty"`
	// The TaskAuditPolicyApprovalReassigned message.
	TaskAuditPolicyApprovalReassigned *TaskAuditPolicyApprovalReassigned `json:"approvalReassigned,omitempty"`
	// The TaskAuditApprovalHappenedAutomatically message.
	TaskAuditApprovalHappenedAutomatically *TaskAuditApprovalHappenedAutomatically `json:"approvedAutomatically,omitempty"`
	// The TaskAuditBulkActionError message.
	TaskAuditBulkActionError *TaskAuditBulkActionError `json:"bulkActionError,omitempty"`
	// The TaskAuditCertifyOutcome message.
	TaskAuditCertifyOutcome *TaskAuditCertifyOutcome `json:"certifyOutcome,omitempty"`
	// The TaskAuditComment message.
	TaskAuditComment *TaskAuditComment `json:"comment,omitempty"`
	// The TaskAuditConditionalPolicyExecutionResult message.
	TaskAuditConditionalPolicyExecutionResult *TaskAuditConditionalPolicyExecutionResult `json:"conditionalPolicyExecutionResult,omitempty"`
	// The TaskAuditFinishedConnectorActions message.
	TaskAuditFinishedConnectorActions *TaskAuditFinishedConnectorActions `json:"connectorActionsEnd,omitempty"`
	// The TaskAuditStartedConnectorActions message.
	TaskAuditStartedConnectorActions *TaskAuditStartedConnectorActions `json:"connectorActionsStart,omitempty"`
	Created                          *time.Time                        `json:"created,omitempty"`
	// The currentState field.
	CurrentState *CurrentState `json:"currentState,omitempty"`
	// The eventType field.
	EventType *TaskAuditViewEventType `json:"eventType,omitempty"`
	// The TaskAuditExpressionPolicyStepError message.
	TaskAuditExpressionPolicyStepError *TaskAuditExpressionPolicyStepError `json:"expressionPolicyStepError,omitempty"`
	// The TaskAuditExternalTicketCreated message.
	TaskAuditExternalTicketCreated *TaskAuditExternalTicketCreated `json:"externalTicketCreated,omitempty"`
	// The TaskAuditExternalTicketError message.
	TaskAuditExternalTicketError *TaskAuditExternalTicketError `json:"externalTicketError,omitempty"`
	// The TaskAuditExternalTicketProvisionStepResolved message.
	TaskAuditExternalTicketProvisionStepResolved *TaskAuditExternalTicketProvisionStepResolved `json:"externalTicketProvisionStepResolved,omitempty"`
	// The TaskAuditExternalTicketTriggered message.
	TaskAuditExternalTicketTriggered *TaskAuditExternalTicketTriggered `json:"externalTicketTriggered,omitempty"`
	// The TaskAuditFormInstanceChange message.
	TaskAuditFormInstanceChange *TaskAuditFormInstanceChange `json:"formInstanceChange,omitempty"`
	// The TaskAuditGrantDurationUpdated message.
	TaskAuditGrantDurationUpdated *TaskAuditGrantDurationUpdated `json:"grantDurationUpdated,omitempty"`
	// The TaskAuditGrantOutcome message.
	TaskAuditGrantOutcome *TaskAuditGrantOutcome `json:"grantOutcome,omitempty"`
	// The TaskAuditHardReset message.
	TaskAuditHardReset *TaskAuditHardReset `json:"hardReset,omitempty"`
	// The id field.
	ID *string `json:"id,omitempty"`
	// The TaskAuditMetaData message.
	TaskAuditMetaData *TaskAuditMetaData `json:"metadata,omitempty"`
	// The TaskAuditPolicyChanged message.
	TaskAuditPolicyChanged *TaskAuditPolicyChanged `json:"policyChanged,omitempty"`
	// The TaskAuditPolicyEvaluationStep message.
	TaskAuditPolicyEvaluationStep *TaskAuditPolicyEvaluationStep `json:"policyEvaluationStep,omitempty"`
	// The TaskAuditPolicyProvisionError message.
	TaskAuditPolicyProvisionError *TaskAuditPolicyProvisionError `json:"provisionError,omitempty"`
	// The TaskAuditPolicyProvisionReassigned message.
	TaskAuditPolicyProvisionReassigned *TaskAuditPolicyProvisionReassigned `json:"provisionReassigned,omitempty"`
	// The TaskAuditReassignedToDelegate message.
	TaskAuditReassignedToDelegate *TaskAuditReassignedToDelegate `json:"reassignedToDelegate,omitempty"`
	// The TaskAuditReassignmentListError message.
	TaskAuditReassignmentListError *TaskAuditReassignmentListError `json:"reassignmentListError,omitempty"`
	// The TaskAuditRevokeOutcome message.
	TaskAuditRevokeOutcome *TaskAuditRevokeOutcome `json:"revokeOutcome,omitempty"`
	// The TaskAuditSLAEscalation message.
	TaskAuditSLAEscalation *TaskAuditSLAEscalation `json:"slaEscalation,omitempty"`
	// The source field.
	Source *Source `json:"source,omitempty"`
	// The TaskAuditStateChange message.
	TaskAuditStateChange *TaskAuditStateChange `json:"stateChange,omitempty"`
	// The TaskAuditStepSkipped message.
	TaskAuditStepSkipped *TaskAuditStepSkipped `json:"stepSkipped,omitempty"`
	// The TaskAuditStepUpApproval message.
	TaskAuditStepUpApproval *TaskAuditStepUpApproval `json:"stepUpApproval,omitempty"`
	// The TaskAuditNewTask message.
	TaskAuditNewTask *TaskAuditNewTask `json:"taskCreated,omitempty"`
	// The TaskAuditEscalateToEmergencyAccess message.
	TaskAuditEscalateToEmergencyAccess *TaskAuditEscalateToEmergencyAccess `json:"taskEscalated,omitempty"`
	// The TaskAuditRestart message.
	TaskAuditRestart *TaskAuditRestart `json:"taskRestarted,omitempty"`
	// The ticketId field.
	TicketID *string `json:"ticketId,omitempty"`
	// The userId field.
	UserID *string `json:"userId,omitempty"`
	// The TaskAuditWaitForAnalysisStepSuccess message.
	TaskAuditWaitForAnalysisStepSuccess *TaskAuditWaitForAnalysisStepSuccess `json:"waitStepAnalysisSuccess,omitempty"`
	// The TaskAuditWaitForAnalysisStepTimedOut message.
	TaskAuditWaitForAnalysisStepTimedOut *TaskAuditWaitForAnalysisStepTimedOut `json:"waitStepAnalysisTimedOut,omitempty"`
	// The TaskAuditWaitForAnalysisStepWaiting message.
	TaskAuditWaitForAnalysisStepWaiting *TaskAuditWaitForAnalysisStepWaiting `json:"waitStepAnalysisWaiting,omitempty"`
	// The TaskAuditWaitStepSuccess message.
	TaskAuditWaitStepSuccess *TaskAuditWaitStepSuccess `json:"waitStepSuccess,omitempty"`
	// The TaskAuditWaitStepTimedOut message.
	TaskAuditWaitStepTimedOut *TaskAuditWaitStepTimedOut `json:"waitStepTimedOut,omitempty"`
	// The TaskAuditWaitStepUntilTime message.
	TaskAuditWaitStepUntilTime *TaskAuditWaitStepUntilTime `json:"waitStepUntilTime,omitempty"`
	// The TaskAuditWaitStepWaiting message.
	TaskAuditWaitStepWaiting *TaskAuditWaitStepWaiting `json:"waitStepWaiting,omitempty"`
	// The TaskAuditWebhookApprovalAttempt message.
	TaskAuditWebhookApprovalAttempt *TaskAuditWebhookApprovalAttempt `json:"webhookApprovalAttempt,omitempty"`
	// The TaskAuditWebhookApprovalBadResponse message.
	TaskAuditWebhookApprovalBadResponse *TaskAuditWebhookApprovalBadResponse `json:"webhookApprovalBadResponse,omitempty"`
	// The TaskAuditWebhookApprovalFatalError message.
	TaskAuditWebhookApprovalFatalError *TaskAuditWebhookApprovalFatalError `json:"webhookApprovalFatalError,omitempty"`
	// The TaskAuditWebhookApprovalSuccess message.
	TaskAuditWebhookApprovalSuccess *TaskAuditWebhookApprovalSuccess `json:"webhookApprovalSuccess,omitempty"`
	// The TaskAuditWebhookApprovalTriggered message.
	TaskAuditWebhookApprovalTriggered *TaskAuditWebhookApprovalTriggered `json:"webhookApprovalTriggered,omitempty"`
	// The TaskAuditWebhookAttempt message.
	TaskAuditWebhookAttempt *TaskAuditWebhookAttempt `json:"webhookAttempt,omitempty"`
	// The TaskAuditWebhookSuccess message.
	TaskAuditWebhookSuccess *TaskAuditWebhookSuccess `json:"webhookSuccess,omitempty"`
	// The TaskAuditWebhookTriggered message.
	TaskAuditWebhookTriggered *TaskAuditWebhookTriggered `json:"webhookTriggered,omitempty"`
	// The workflowStep field.
	WorkflowStep *int `json:"workflowStep,omitempty"`
}

func (t TaskAuditView) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskAuditView) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TaskAuditView) GetTaskAuditAccessRequestOutcome() *TaskAuditAccessRequestOutcome {
	if t == nil {
		return nil
	}
	return t.TaskAuditAccessRequestOutcome
}

func (t *TaskAuditView) GetTaskAuditConnectorActionResult() *TaskAuditConnectorActionResult {
	if t == nil {
		return nil
	}
	return t.TaskAuditConnectorActionResult
}

func (t *TaskAuditView) GetTaskAuditActionSubmitted() *TaskAuditActionSubmitted {
	if t == nil {
		return nil
	}
	return t.TaskAuditActionSubmitted
}

func (t *TaskAuditView) GetTaskAuditApprovalAutoAcceptedByPolicy() *TaskAuditApprovalAutoAcceptedByPolicy {
	if t == nil {
		return nil
	}
	return t.TaskAuditApprovalAutoAcceptedByPolicy
}

func (t *TaskAuditView) GetTaskAuditApprovalAutoRejectedByPolicy() *TaskAuditApprovalAutoRejectedByPolicy {
	if t == nil {
		return nil
	}
	return t.TaskAuditApprovalAutoRejectedByPolicy
}

func (t *TaskAuditView) GetTaskAuditApprovalInstanceChange() *TaskAuditApprovalInstanceChange {
	if t == nil {
		return nil
	}
	return t.TaskAuditApprovalInstanceChange
}

func (t *TaskAuditView) GetTaskAuditPolicyApprovalReassigned() *TaskAuditPolicyApprovalReassigned {
	if t == nil {
		return nil
	}
	return t.TaskAuditPolicyApprovalReassigned
}

func (t *TaskAuditView) GetTaskAuditApprovalHappenedAutomatically() *TaskAuditApprovalHappenedAutomatically {
	if t == nil {
		return nil
	}
	return t.TaskAuditApprovalHappenedAutomatically
}

func (t *TaskAuditView) GetTaskAuditBulkActionError() *TaskAuditBulkActionError {
	if t == nil {
		return nil
	}
	return t.TaskAuditBulkActionError
}

func (t *TaskAuditView) GetTaskAuditCertifyOutcome() *TaskAuditCertifyOutcome {
	if t == nil {
		return nil
	}
	return t.TaskAuditCertifyOutcome
}

func (t *TaskAuditView) GetTaskAuditComment() *TaskAuditComment {
	if t == nil {
		return nil
	}
	return t.TaskAuditComment
}

func (t *TaskAuditView) GetTaskAuditConditionalPolicyExecutionResult() *TaskAuditConditionalPolicyExecutionResult {
	if t == nil {
		return nil
	}
	return t.TaskAuditConditionalPolicyExecutionResult
}

func (t *TaskAuditView) GetTaskAuditFinishedConnectorActions() *TaskAuditFinishedConnectorActions {
	if t == nil {
		return nil
	}
	return t.TaskAuditFinishedConnectorActions
}

func (t *TaskAuditView) GetTaskAuditStartedConnectorActions() *TaskAuditStartedConnectorActions {
	if t == nil {
		return nil
	}
	return t.TaskAuditStartedConnectorActions
}

func (t *TaskAuditView) GetCreated() *time.Time {
	if t == nil {
		return nil
	}
	return t.Created
}

func (t *TaskAuditView) GetCurrentState() *CurrentState {
	if t == nil {
		return nil
	}
	return t.CurrentState
}

func (t *TaskAuditView) GetEventType() *TaskAuditViewEventType {
	if t == nil {
		return nil
	}
	return t.EventType
}

func (t *TaskAuditView) GetTaskAuditExpressionPolicyStepError() *TaskAuditExpressionPolicyStepError {
	if t == nil {
		return nil
	}
	return t.TaskAuditExpressionPolicyStepError
}

func (t *TaskAuditView) GetTaskAuditExternalTicketCreated() *TaskAuditExternalTicketCreated {
	if t == nil {
		return nil
	}
	return t.TaskAuditExternalTicketCreated
}

func (t *TaskAuditView) GetTaskAuditExternalTicketError() *TaskAuditExternalTicketError {
	if t == nil {
		return nil
	}
	return t.TaskAuditExternalTicketError
}

func (t *TaskAuditView) GetTaskAuditExternalTicketProvisionStepResolved() *TaskAuditExternalTicketProvisionStepResolved {
	if t == nil {
		return nil
	}
	return t.TaskAuditExternalTicketProvisionStepResolved
}

func (t *TaskAuditView) GetTaskAuditExternalTicketTriggered() *TaskAuditExternalTicketTriggered {
	if t == nil {
		return nil
	}
	return t.TaskAuditExternalTicketTriggered
}

func (t *TaskAuditView) GetTaskAuditFormInstanceChange() *TaskAuditFormInstanceChange {
	if t == nil {
		return nil
	}
	return t.TaskAuditFormInstanceChange
}

func (t *TaskAuditView) GetTaskAuditGrantDurationUpdated() *TaskAuditGrantDurationUpdated {
	if t == nil {
		return nil
	}
	return t.TaskAuditGrantDurationUpdated
}

func (t *TaskAuditView) GetTaskAuditGrantOutcome() *TaskAuditGrantOutcome {
	if t == nil {
		return nil
	}
	return t.TaskAuditGrantOutcome
}

func (t *TaskAuditView) GetTaskAuditHardReset() *TaskAuditHardReset {
	if t == nil {
		return nil
	}
	return t.TaskAuditHardReset
}

func (t *TaskAuditView) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TaskAuditView) GetTaskAuditMetaData() *TaskAuditMetaData {
	if t == nil {
		return nil
	}
	return t.TaskAuditMetaData
}

func (t *TaskAuditView) GetTaskAuditPolicyChanged() *TaskAuditPolicyChanged {
	if t == nil {
		return nil
	}
	return t.TaskAuditPolicyChanged
}

func (t *TaskAuditView) GetTaskAuditPolicyEvaluationStep() *TaskAuditPolicyEvaluationStep {
	if t == nil {
		return nil
	}
	return t.TaskAuditPolicyEvaluationStep
}

func (t *TaskAuditView) GetTaskAuditPolicyProvisionError() *TaskAuditPolicyProvisionError {
	if t == nil {
		return nil
	}
	return t.TaskAuditPolicyProvisionError
}

func (t *TaskAuditView) GetTaskAuditPolicyProvisionReassigned() *TaskAuditPolicyProvisionReassigned {
	if t == nil {
		return nil
	}
	return t.TaskAuditPolicyProvisionReassigned
}

func (t *TaskAuditView) GetTaskAuditReassignedToDelegate() *TaskAuditReassignedToDelegate {
	if t == nil {
		return nil
	}
	return t.TaskAuditReassignedToDelegate
}

func (t *TaskAuditView) GetTaskAuditReassignmentListError() *TaskAuditReassignmentListError {
	if t == nil {
		return nil
	}
	return t.TaskAuditReassignmentListError
}

func (t *TaskAuditView) GetTaskAuditRevokeOutcome() *TaskAuditRevokeOutcome {
	if t == nil {
		return nil
	}
	return t.TaskAuditRevokeOutcome
}

func (t *TaskAuditView) GetTaskAuditSLAEscalation() *TaskAuditSLAEscalation {
	if t == nil {
		return nil
	}
	return t.TaskAuditSLAEscalation
}

func (t *TaskAuditView) GetSource() *Source {
	if t == nil {
		return nil
	}
	return t.Source
}

func (t *TaskAuditView) GetTaskAuditStateChange() *TaskAuditStateChange {
	if t == nil {
		return nil
	}
	return t.TaskAuditStateChange
}

func (t *TaskAuditView) GetTaskAuditStepSkipped() *TaskAuditStepSkipped {
	if t == nil {
		return nil
	}
	return t.TaskAuditStepSkipped
}

func (t *TaskAuditView) GetTaskAuditStepUpApproval() *TaskAuditStepUpApproval {
	if t == nil {
		return nil
	}
	return t.TaskAuditStepUpApproval
}

func (t *TaskAuditView) GetTaskAuditNewTask() *TaskAuditNewTask {
	if t == nil {
		return nil
	}
	return t.TaskAuditNewTask
}

func (t *TaskAuditView) GetTaskAuditEscalateToEmergencyAccess() *TaskAuditEscalateToEmergencyAccess {
	if t == nil {
		return nil
	}
	return t.TaskAuditEscalateToEmergencyAccess
}

func (t *TaskAuditView) GetTaskAuditRestart() *TaskAuditRestart {
	if t == nil {
		return nil
	}
	return t.TaskAuditRestart
}

func (t *TaskAuditView) GetTicketID() *string {
	if t == nil {
		return nil
	}
	return t.TicketID
}

func (t *TaskAuditView) GetUserID() *string {
	if t == nil {
		return nil
	}
	return t.UserID
}

func (t *TaskAuditView) GetTaskAuditWaitForAnalysisStepSuccess() *TaskAuditWaitForAnalysisStepSuccess {
	if t == nil {
		return nil
	}
	return t.TaskAuditWaitForAnalysisStepSuccess
}

func (t *TaskAuditView) GetTaskAuditWaitForAnalysisStepTimedOut() *TaskAuditWaitForAnalysisStepTimedOut {
	if t == nil {
		return nil
	}
	return t.TaskAuditWaitForAnalysisStepTimedOut
}

func (t *TaskAuditView) GetTaskAuditWaitForAnalysisStepWaiting() *TaskAuditWaitForAnalysisStepWaiting {
	if t == nil {
		return nil
	}
	return t.TaskAuditWaitForAnalysisStepWaiting
}

func (t *TaskAuditView) GetTaskAuditWaitStepSuccess() *TaskAuditWaitStepSuccess {
	if t == nil {
		return nil
	}
	return t.TaskAuditWaitStepSuccess
}

func (t *TaskAuditView) GetTaskAuditWaitStepTimedOut() *TaskAuditWaitStepTimedOut {
	if t == nil {
		return nil
	}
	return t.TaskAuditWaitStepTimedOut
}

func (t *TaskAuditView) GetTaskAuditWaitStepUntilTime() *TaskAuditWaitStepUntilTime {
	if t == nil {
		return nil
	}
	return t.TaskAuditWaitStepUntilTime
}

func (t *TaskAuditView) GetTaskAuditWaitStepWaiting() *TaskAuditWaitStepWaiting {
	if t == nil {
		return nil
	}
	return t.TaskAuditWaitStepWaiting
}

func (t *TaskAuditView) GetTaskAuditWebhookApprovalAttempt() *TaskAuditWebhookApprovalAttempt {
	if t == nil {
		return nil
	}
	return t.TaskAuditWebhookApprovalAttempt
}

func (t *TaskAuditView) GetTaskAuditWebhookApprovalBadResponse() *TaskAuditWebhookApprovalBadResponse {
	if t == nil {
		return nil
	}
	return t.TaskAuditWebhookApprovalBadResponse
}

func (t *TaskAuditView) GetTaskAuditWebhookApprovalFatalError() *TaskAuditWebhookApprovalFatalError {
	if t == nil {
		return nil
	}
	return t.TaskAuditWebhookApprovalFatalError
}

func (t *TaskAuditView) GetTaskAuditWebhookApprovalSuccess() *TaskAuditWebhookApprovalSuccess {
	if t == nil {
		return nil
	}
	return t.TaskAuditWebhookApprovalSuccess
}

func (t *TaskAuditView) GetTaskAuditWebhookApprovalTriggered() *TaskAuditWebhookApprovalTriggered {
	if t == nil {
		return nil
	}
	return t.TaskAuditWebhookApprovalTriggered
}

func (t *TaskAuditView) GetTaskAuditWebhookAttempt() *TaskAuditWebhookAttempt {
	if t == nil {
		return nil
	}
	return t.TaskAuditWebhookAttempt
}

func (t *TaskAuditView) GetTaskAuditWebhookSuccess() *TaskAuditWebhookSuccess {
	if t == nil {
		return nil
	}
	return t.TaskAuditWebhookSuccess
}

func (t *TaskAuditView) GetTaskAuditWebhookTriggered() *TaskAuditWebhookTriggered {
	if t == nil {
		return nil
	}
	return t.TaskAuditWebhookTriggered
}

func (t *TaskAuditView) GetWorkflowStep() *int {
	if t == nil {
		return nil
	}
	return t.WorkflowStep
}
