// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ResourceType - The resourceType field.
type ResourceType string

const (
	ResourceTypeRole        ResourceType = "ROLE"
	ResourceTypeGroup       ResourceType = "GROUP"
	ResourceTypeLicense     ResourceType = "LICENSE"
	ResourceTypeProject     ResourceType = "PROJECT"
	ResourceTypeCatalog     ResourceType = "CATALOG"
	ResourceTypeCustom      ResourceType = "CUSTOM"
	ResourceTypeVault       ResourceType = "VAULT"
	ResourceTypeProfileType ResourceType = "PROFILE_TYPE"
)

func (e ResourceType) ToPointer() *ResourceType {
	return &e
}
func (e *ResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ROLE":
		fallthrough
	case "GROUP":
		fallthrough
	case "LICENSE":
		fallthrough
	case "PROJECT":
		fallthrough
	case "CATALOG":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "VAULT":
		fallthrough
	case "PROFILE_TYPE":
		*e = ResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResourceType: %v", v)
	}
}

// The CreateManuallyManagedResourceTypeRequest message.
type CreateManuallyManagedResourceTypeRequest struct {
	// The displayName field.
	DisplayName string `json:"displayName"`
	// The resourceType field.
	ResourceType ResourceType `json:"resourceType"`
}

func (c *CreateManuallyManagedResourceTypeRequest) GetDisplayName() string {
	if c == nil {
		return ""
	}
	return c.DisplayName
}

func (c *CreateManuallyManagedResourceTypeRequest) GetResourceType() ResourceType {
	if c == nil {
		return ResourceType("")
	}
	return c.ResourceType
}
