// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExecutionStepStates string

const (
	ExecutionStepStatesAutomationExecutionStateUnspecified  ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_UNSPECIFIED"
	ExecutionStepStatesAutomationExecutionStatePending      ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_PENDING"
	ExecutionStepStatesAutomationExecutionStateCreating     ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_CREATING"
	ExecutionStepStatesAutomationExecutionStateGetStep      ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_GET_STEP"
	ExecutionStepStatesAutomationExecutionStateProcessStep  ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_PROCESS_STEP"
	ExecutionStepStatesAutomationExecutionStateCompleteStep ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_COMPLETE_STEP"
	ExecutionStepStatesAutomationExecutionStateDone         ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_DONE"
	ExecutionStepStatesAutomationExecutionStateError        ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_ERROR"
	ExecutionStepStatesAutomationExecutionStateTerminate    ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_TERMINATE"
	ExecutionStepStatesAutomationExecutionStateWaiting      ExecutionStepStates = "AUTOMATION_EXECUTION_STATE_WAITING"
)

func (e ExecutionStepStates) ToPointer() *ExecutionStepStates {
	return &e
}
func (e *ExecutionStepStates) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTOMATION_EXECUTION_STATE_UNSPECIFIED":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_PENDING":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_CREATING":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_GET_STEP":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_PROCESS_STEP":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_COMPLETE_STEP":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_DONE":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_ERROR":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_TERMINATE":
		fallthrough
	case "AUTOMATION_EXECUTION_STATE_WAITING":
		*e = ExecutionStepStates(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionStepStates: %v", v)
	}
}

// The SearchAutomationExecutionsRequest message.
type SearchAutomationExecutionsRequest struct {
	// The automationTemplateId field.
	AutomationTemplateID *string `json:"automationTemplateId,omitempty"`
	// The executionId field.
	ExecutionID *string `json:"executionId,omitempty"`
	// The executionStepStates field.
	ExecutionStepStates []ExecutionStepStates `json:"executionStepStates,omitempty"`
	// The AutomationExecutionExpandMask message.
	AutomationExecutionExpandMask *AutomationExecutionExpandMask `json:"expandMask,omitempty"`
	// The pageSize field.
	PageSize *int `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	// The query field.
	Query *string `json:"query,omitempty"`
	// The refs field.
	Refs []AutomationExecutionRef `json:"refs,omitempty"`
}

func (s *SearchAutomationExecutionsRequest) GetAutomationTemplateID() *string {
	if s == nil {
		return nil
	}
	return s.AutomationTemplateID
}

func (s *SearchAutomationExecutionsRequest) GetExecutionID() *string {
	if s == nil {
		return nil
	}
	return s.ExecutionID
}

func (s *SearchAutomationExecutionsRequest) GetExecutionStepStates() []ExecutionStepStates {
	if s == nil {
		return nil
	}
	return s.ExecutionStepStates
}

func (s *SearchAutomationExecutionsRequest) GetAutomationExecutionExpandMask() *AutomationExecutionExpandMask {
	if s == nil {
		return nil
	}
	return s.AutomationExecutionExpandMask
}

func (s *SearchAutomationExecutionsRequest) GetPageSize() *int {
	if s == nil {
		return nil
	}
	return s.PageSize
}

func (s *SearchAutomationExecutionsRequest) GetPageToken() *string {
	if s == nil {
		return nil
	}
	return s.PageToken
}

func (s *SearchAutomationExecutionsRequest) GetQuery() *string {
	if s == nil {
		return nil
	}
	return s.Query
}

func (s *SearchAutomationExecutionsRequest) GetRefs() []AutomationExecutionRef {
	if s == nil {
		return nil
	}
	return s.Refs
}
