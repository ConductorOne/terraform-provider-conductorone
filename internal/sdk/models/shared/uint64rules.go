// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// UInt64Rules describes the constraints applied to `uint64` values
type UInt64Rules struct {
	// Const specifies that this field must be exactly the specified value
	Const *string `json:"const,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	//  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	//  range is reversed.
	Gt *string `json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	//  specified value, inclusive. If the value of Gte is larger than a
	//  specified Lt or Lte, the range is reversed.
	Gte *string `json:"gte,omitempty"`
	// IgnoreEmpty specifies that the validation rules of this field should be
	//  evaluated only if the field is not empty
	IgnoreEmpty *bool `json:"ignoreEmpty,omitempty"`
	// In specifies that this field must be equal to one of the specified
	//  values
	In []string `json:"in,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	//  exclusive
	Lt *string `json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	//  specified value, inclusive
	Lte *string `json:"lte,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	//  values
	NotIn []string `json:"notIn,omitempty"`
}

func (o *UInt64Rules) GetConst() *string {
	if o == nil {
		return nil
	}
	return o.Const
}

func (o *UInt64Rules) GetGt() *string {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UInt64Rules) GetGte() *string {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UInt64Rules) GetIgnoreEmpty() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreEmpty
}

func (o *UInt64Rules) GetIn() []string {
	if o == nil {
		return nil
	}
	return o.In
}

func (o *UInt64Rules) GetLt() *string {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UInt64Rules) GetLte() *string {
	if o == nil {
		return nil
	}
	return o.Lte
}

func (o *UInt64Rules) GetNotIn() []string {
	if o == nil {
		return nil
	}
	return o.NotIn
}
