// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// WaitInstanceState - The state field.
type WaitInstanceState string

const (
	WaitInstanceStateWaitInstanceStateUnspecified WaitInstanceState = "WAIT_INSTANCE_STATE_UNSPECIFIED"
	WaitInstanceStateWaitInstanceStateWaiting     WaitInstanceState = "WAIT_INSTANCE_STATE_WAITING"
	WaitInstanceStateWaitInstanceStateCompleted   WaitInstanceState = "WAIT_INSTANCE_STATE_COMPLETED"
	WaitInstanceStateWaitInstanceStateTimedOut    WaitInstanceState = "WAIT_INSTANCE_STATE_TIMED_OUT"
)

func (e WaitInstanceState) ToPointer() *WaitInstanceState {
	return &e
}
func (e *WaitInstanceState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WAIT_INSTANCE_STATE_UNSPECIFIED":
		fallthrough
	case "WAIT_INSTANCE_STATE_WAITING":
		fallthrough
	case "WAIT_INSTANCE_STATE_COMPLETED":
		fallthrough
	case "WAIT_INSTANCE_STATE_TIMED_OUT":
		*e = WaitInstanceState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WaitInstanceState: %v", v)
	}
}

// WaitInstance - Used by the policy engine to describe an instantiated wait step.
//
// This message contains a oneof named until. Only a single field of the following list may be set at a time:
//   - condition
//   - untilTime
//
// This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
//   - succeeded
//   - timedOut
//   - skipped
type WaitInstance struct {
	// The comment to post on first failed check.
	CommentOnFirstWait *string `json:"commentOnFirstWait,omitempty"`
	// The comment to post if we timeout.
	CommentOnTimeout *string                `json:"commentOnTimeout,omitempty"`
	Condition        *WaitConditionInstance `json:"condition,omitempty"`
	// The name field.
	Name             *string        `json:"name,omitempty"`
	Skipped          *SkippedAction `json:"skipped,omitempty"`
	StartedWaitingAt *time.Time     `json:"startedWaitingAt,omitempty"`
	// The state field.
	State           *WaitInstanceState     `json:"state,omitempty"`
	Succeeded       *ConditionSucceeded    `json:"succeeded,omitempty"`
	TimedOut        *ConditionTimedOut     `json:"timedOut,omitempty"`
	Timeout         *time.Time             `json:"timeout,omitempty"`
	TimeoutDuration *string                `json:"timeoutDuration,omitempty"`
	UntilTime       *WaitUntilTimeInstance `json:"untilTime,omitempty"`
}

func (w WaitInstance) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WaitInstance) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (w *WaitInstance) GetCommentOnFirstWait() *string {
	if w == nil {
		return nil
	}
	return w.CommentOnFirstWait
}

func (w *WaitInstance) GetCommentOnTimeout() *string {
	if w == nil {
		return nil
	}
	return w.CommentOnTimeout
}

func (w *WaitInstance) GetCondition() *WaitConditionInstance {
	if w == nil {
		return nil
	}
	return w.Condition
}

func (w *WaitInstance) GetName() *string {
	if w == nil {
		return nil
	}
	return w.Name
}

func (w *WaitInstance) GetSkipped() *SkippedAction {
	if w == nil {
		return nil
	}
	return w.Skipped
}

func (w *WaitInstance) GetStartedWaitingAt() *time.Time {
	if w == nil {
		return nil
	}
	return w.StartedWaitingAt
}

func (w *WaitInstance) GetState() *WaitInstanceState {
	if w == nil {
		return nil
	}
	return w.State
}

func (w *WaitInstance) GetSucceeded() *ConditionSucceeded {
	if w == nil {
		return nil
	}
	return w.Succeeded
}

func (w *WaitInstance) GetTimedOut() *ConditionTimedOut {
	if w == nil {
		return nil
	}
	return w.TimedOut
}

func (w *WaitInstance) GetTimeout() *time.Time {
	if w == nil {
		return nil
	}
	return w.Timeout
}

func (w *WaitInstance) GetTimeoutDuration() *string {
	if w == nil {
		return nil
	}
	return w.TimeoutDuration
}

func (w *WaitInstance) GetUntilTime() *WaitUntilTimeInstance {
	if w == nil {
		return nil
	}
	return w.UntilTime
}
