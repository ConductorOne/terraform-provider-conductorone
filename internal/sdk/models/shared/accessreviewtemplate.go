// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// AccessReviewTemplateDefaultView - The defaultView field.
type AccessReviewTemplateDefaultView string

const (
	AccessReviewTemplateDefaultViewAccessReviewViewTypeUnspecified  AccessReviewTemplateDefaultView = "ACCESS_REVIEW_VIEW_TYPE_UNSPECIFIED"
	AccessReviewTemplateDefaultViewAccessReviewViewTypeByApp        AccessReviewTemplateDefaultView = "ACCESS_REVIEW_VIEW_TYPE_BY_APP"
	AccessReviewTemplateDefaultViewAccessReviewViewTypeByUser       AccessReviewTemplateDefaultView = "ACCESS_REVIEW_VIEW_TYPE_BY_USER"
	AccessReviewTemplateDefaultViewAccessReviewViewTypeUnstructured AccessReviewTemplateDefaultView = "ACCESS_REVIEW_VIEW_TYPE_UNSTRUCTURED"
)

func (e AccessReviewTemplateDefaultView) ToPointer() *AccessReviewTemplateDefaultView {
	return &e
}
func (e *AccessReviewTemplateDefaultView) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCESS_REVIEW_VIEW_TYPE_UNSPECIFIED":
		fallthrough
	case "ACCESS_REVIEW_VIEW_TYPE_BY_APP":
		fallthrough
	case "ACCESS_REVIEW_VIEW_TYPE_BY_USER":
		fallthrough
	case "ACCESS_REVIEW_VIEW_TYPE_UNSTRUCTURED":
		*e = AccessReviewTemplateDefaultView(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessReviewTemplateDefaultView: %v", v)
	}
}

// The AccessReviewTemplate message.
//
// This message contains a oneof named slack_channel_details. Only a single field of the following list may be set at a time:
//   - slackChannel
type AccessReviewTemplate struct {
	AccessReviewDuration *string    `json:"accessReviewDuration,omitempty"`
	CreatedAt            *time.Time `json:"createdAt,omitempty"`
	// The defaultView field.
	DefaultView *AccessReviewTemplateDefaultView `json:"defaultView,omitempty"`
	DeletedAt   *time.Time                       `json:"deletedAt,omitempty"`
	// The description field.
	Description *string `json:"description,omitempty"`
	// The displayName field.
	DisplayName *string `json:"displayName,omitempty"`
	// The id field.
	ID *string `json:"id,omitempty"`
	// The AccessReviewInclusionScope message.
	AccessReviewInclusionScope *AccessReviewInclusionScope `json:"inclusionScope,omitempty"`
	// The isCampaignScheduleEnabled field.
	IsCampaignScheduleEnabled *bool      `json:"isCampaignScheduleEnabled,omitempty"`
	NextScheduledCampaignAt   *time.Time `json:"nextScheduledCampaignAt,omitempty"`
	// The occurrences field.
	Occurrences *int `json:"occurrences,omitempty"`
	// The policyId field.
	PolicyID *string `json:"policyId,omitempty"`
	// The RecurrenceRule message.
	//
	// This message contains a oneof named end_condition. Only a single field of the following list may be set at a time:
	//   - endDate
	//   - occurrences
	//
	RecurrenceRule *RecurrenceRule `json:"recurrenceRule,omitempty"`
	// The reviewInstructions field.
	ReviewInstructions *string `json:"reviewInstructions,omitempty"`
	// The AccessReviewScopeV2 message.
	//
	// This message contains a oneof named apps_and_resources_scope. Only a single field of the following list may be set at a time:
	//   - appAccess
	//   - specificResources
	//   - appSelectionCriteria
	//   - resourceTypeSelections
	//
	//
	// This message contains a oneof named users_scope. Only a single field of the following list may be set at a time:
	//   - allUsers
	//   - selectedUsers
	//   - userCriteria
	//
	//
	// This message contains a oneof named accounts_scope. Only a single field of the following list may be set at a time:
	//   - allAccounts
	//   - accountCriteria
	//
	//
	// This message contains a oneof named grants_scope. Only a single field of the following list may be set at a time:
	//   - allGrants
	//   - grantsByCriteria
	//
	AccessReviewScopeV2 *AccessReviewScopeV2 `json:"scope,omitempty"`
	// The SlackChannel message.
	SlackChannel *SlackChannel `json:"slackChannel,omitempty"`
	UpdatedAt    *time.Time    `json:"updatedAt,omitempty"`
	// The usePolicyOverride field.
	UsePolicyOverride *bool `json:"usePolicyOverride,omitempty"`
}

func (a AccessReviewTemplate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccessReviewTemplate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccessReviewTemplate) GetAccessReviewDuration() *string {
	if o == nil {
		return nil
	}
	return o.AccessReviewDuration
}

func (o *AccessReviewTemplate) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccessReviewTemplate) GetDefaultView() *AccessReviewTemplateDefaultView {
	if o == nil {
		return nil
	}
	return o.DefaultView
}

func (o *AccessReviewTemplate) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *AccessReviewTemplate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AccessReviewTemplate) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *AccessReviewTemplate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccessReviewTemplate) GetAccessReviewInclusionScope() *AccessReviewInclusionScope {
	if o == nil {
		return nil
	}
	return o.AccessReviewInclusionScope
}

func (o *AccessReviewTemplate) GetIsCampaignScheduleEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsCampaignScheduleEnabled
}

func (o *AccessReviewTemplate) GetNextScheduledCampaignAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.NextScheduledCampaignAt
}

func (o *AccessReviewTemplate) GetOccurrences() *int {
	if o == nil {
		return nil
	}
	return o.Occurrences
}

func (o *AccessReviewTemplate) GetPolicyID() *string {
	if o == nil {
		return nil
	}
	return o.PolicyID
}

func (o *AccessReviewTemplate) GetRecurrenceRule() *RecurrenceRule {
	if o == nil {
		return nil
	}
	return o.RecurrenceRule
}

func (o *AccessReviewTemplate) GetReviewInstructions() *string {
	if o == nil {
		return nil
	}
	return o.ReviewInstructions
}

func (o *AccessReviewTemplate) GetAccessReviewScopeV2() *AccessReviewScopeV2 {
	if o == nil {
		return nil
	}
	return o.AccessReviewScopeV2
}

func (o *AccessReviewTemplate) GetSlackChannel() *SlackChannel {
	if o == nil {
		return nil
	}
	return o.SlackChannel
}

func (o *AccessReviewTemplate) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AccessReviewTemplate) GetUsePolicyOverride() *bool {
	if o == nil {
		return nil
	}
	return o.UsePolicyOverride
}

// AccessReviewTemplateInput - The AccessReviewTemplate message.
//
// This message contains a oneof named slack_channel_details. Only a single field of the following list may be set at a time:
//   - slackChannel
type AccessReviewTemplateInput struct {
	AccessReviewDuration *string `json:"accessReviewDuration,omitempty"`
	// The defaultView field.
	DefaultView *AccessReviewTemplateDefaultView `json:"defaultView,omitempty"`
	// The description field.
	Description *string `json:"description,omitempty"`
	// The displayName field.
	DisplayName *string `json:"displayName,omitempty"`
	// The id field.
	ID *string `json:"id,omitempty"`
	// The AccessReviewInclusionScope message.
	AccessReviewInclusionScope *AccessReviewInclusionScope `json:"inclusionScope,omitempty"`
	// The isCampaignScheduleEnabled field.
	IsCampaignScheduleEnabled *bool      `json:"isCampaignScheduleEnabled,omitempty"`
	NextScheduledCampaignAt   *time.Time `json:"nextScheduledCampaignAt,omitempty"`
	// The occurrences field.
	Occurrences *int `json:"occurrences,omitempty"`
	// The policyId field.
	PolicyID *string `json:"policyId,omitempty"`
	// The RecurrenceRule message.
	//
	// This message contains a oneof named end_condition. Only a single field of the following list may be set at a time:
	//   - endDate
	//   - occurrences
	//
	RecurrenceRule *RecurrenceRule `json:"recurrenceRule,omitempty"`
	// The reviewInstructions field.
	ReviewInstructions *string `json:"reviewInstructions,omitempty"`
	// The AccessReviewScopeV2 message.
	//
	// This message contains a oneof named apps_and_resources_scope. Only a single field of the following list may be set at a time:
	//   - appAccess
	//   - specificResources
	//   - appSelectionCriteria
	//   - resourceTypeSelections
	//
	//
	// This message contains a oneof named users_scope. Only a single field of the following list may be set at a time:
	//   - allUsers
	//   - selectedUsers
	//   - userCriteria
	//
	//
	// This message contains a oneof named accounts_scope. Only a single field of the following list may be set at a time:
	//   - allAccounts
	//   - accountCriteria
	//
	//
	// This message contains a oneof named grants_scope. Only a single field of the following list may be set at a time:
	//   - allGrants
	//   - grantsByCriteria
	//
	AccessReviewScopeV2 *AccessReviewScopeV2 `json:"scope,omitempty"`
	// The SlackChannel message.
	SlackChannel *SlackChannel `json:"slackChannel,omitempty"`
	// The usePolicyOverride field.
	UsePolicyOverride *bool `json:"usePolicyOverride,omitempty"`
}

func (a AccessReviewTemplateInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccessReviewTemplateInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccessReviewTemplateInput) GetAccessReviewDuration() *string {
	if o == nil {
		return nil
	}
	return o.AccessReviewDuration
}

func (o *AccessReviewTemplateInput) GetDefaultView() *AccessReviewTemplateDefaultView {
	if o == nil {
		return nil
	}
	return o.DefaultView
}

func (o *AccessReviewTemplateInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AccessReviewTemplateInput) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *AccessReviewTemplateInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccessReviewTemplateInput) GetAccessReviewInclusionScope() *AccessReviewInclusionScope {
	if o == nil {
		return nil
	}
	return o.AccessReviewInclusionScope
}

func (o *AccessReviewTemplateInput) GetIsCampaignScheduleEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsCampaignScheduleEnabled
}

func (o *AccessReviewTemplateInput) GetNextScheduledCampaignAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.NextScheduledCampaignAt
}

func (o *AccessReviewTemplateInput) GetOccurrences() *int {
	if o == nil {
		return nil
	}
	return o.Occurrences
}

func (o *AccessReviewTemplateInput) GetPolicyID() *string {
	if o == nil {
		return nil
	}
	return o.PolicyID
}

func (o *AccessReviewTemplateInput) GetRecurrenceRule() *RecurrenceRule {
	if o == nil {
		return nil
	}
	return o.RecurrenceRule
}

func (o *AccessReviewTemplateInput) GetReviewInstructions() *string {
	if o == nil {
		return nil
	}
	return o.ReviewInstructions
}

func (o *AccessReviewTemplateInput) GetAccessReviewScopeV2() *AccessReviewScopeV2 {
	if o == nil {
		return nil
	}
	return o.AccessReviewScopeV2
}

func (o *AccessReviewTemplateInput) GetSlackChannel() *SlackChannel {
	if o == nil {
		return nil
	}
	return o.SlackChannel
}

func (o *AccessReviewTemplateInput) GetUsePolicyOverride() *bool {
	if o == nil {
		return nil
	}
	return o.UsePolicyOverride
}
