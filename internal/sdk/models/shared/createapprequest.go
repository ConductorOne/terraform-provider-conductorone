// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateAppRequestIdentityMatching - Define the app user identity matching strategy for this app.
type CreateAppRequestIdentityMatching string

const (
	CreateAppRequestIdentityMatchingAppUserIdentityMatchingUnspecified CreateAppRequestIdentityMatching = "APP_USER_IDENTITY_MATCHING_UNSPECIFIED"
	CreateAppRequestIdentityMatchingAppUserIdentityMatchingStrict      CreateAppRequestIdentityMatching = "APP_USER_IDENTITY_MATCHING_STRICT"
	CreateAppRequestIdentityMatchingAppUserIdentityMatchingDisplayName CreateAppRequestIdentityMatching = "APP_USER_IDENTITY_MATCHING_DISPLAY_NAME"
)

func (e CreateAppRequestIdentityMatching) ToPointer() *CreateAppRequestIdentityMatching {
	return &e
}
func (e *CreateAppRequestIdentityMatching) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_USER_IDENTITY_MATCHING_UNSPECIFIED":
		fallthrough
	case "APP_USER_IDENTITY_MATCHING_STRICT":
		fallthrough
	case "APP_USER_IDENTITY_MATCHING_DISPLAY_NAME":
		*e = CreateAppRequestIdentityMatching(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAppRequestIdentityMatching: %v", v)
	}
}

// The CreateAppRequest message is used to create a new app.
type CreateAppRequest struct {
	// Creates the app with this certify policy.
	CertifyPolicyID *string `json:"certifyPolicyId,omitempty"`
	// Creates the app with this description.
	Description *string `json:"description,omitempty"`
	// Creates the app with this display name.
	DisplayName string `json:"displayName"`
	// Creates the app with this grant policy.
	GrantPolicyID *string `json:"grantPolicyId,omitempty"`
	// Define the app user identity matching strategy for this app.
	IdentityMatching *CreateAppRequestIdentityMatching `json:"identityMatching,omitempty"`
	// Creates the app with this monthly cost per seat.
	MonthlyCostUsd *int `json:"monthlyCostUsd,omitempty"`
	// Creates the app with this array of owners.
	Owners []string `json:"owners,omitempty"`
	// Creates the app with this revoke policy.
	RevokePolicyID *string `json:"revokePolicyId,omitempty"`
	// This flag enforces a provisioning mode where the access entitlement is always included in the provisioning flow, if the app user doesn't exist
	StrictAccessEntitlementProvisioning *bool `json:"strictAccessEntitlementProvisioning,omitempty"`
}

func (c *CreateAppRequest) GetCertifyPolicyID() *string {
	if c == nil {
		return nil
	}
	return c.CertifyPolicyID
}

func (c *CreateAppRequest) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateAppRequest) GetDisplayName() string {
	if c == nil {
		return ""
	}
	return c.DisplayName
}

func (c *CreateAppRequest) GetGrantPolicyID() *string {
	if c == nil {
		return nil
	}
	return c.GrantPolicyID
}

func (c *CreateAppRequest) GetIdentityMatching() *CreateAppRequestIdentityMatching {
	if c == nil {
		return nil
	}
	return c.IdentityMatching
}

func (c *CreateAppRequest) GetMonthlyCostUsd() *int {
	if c == nil {
		return nil
	}
	return c.MonthlyCostUsd
}

func (c *CreateAppRequest) GetOwners() []string {
	if c == nil {
		return nil
	}
	return c.Owners
}

func (c *CreateAppRequest) GetRevokePolicyID() *string {
	if c == nil {
		return nil
	}
	return c.RevokePolicyID
}

func (c *CreateAppRequest) GetStrictAccessEntitlementProvisioning() *bool {
	if c == nil {
		return nil
	}
	return c.StrictAccessEntitlementProvisioning
}
