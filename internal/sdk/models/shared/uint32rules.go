// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

// UInt32Rules describes the constraints applied to `uint32` values
type UInt32Rules struct {
	// Const specifies that this field must be exactly the specified value
	Const *int64 `json:"const,omitempty"`
	// Gt specifies that this field must be greater than the specified value,
	//  exclusive. If the value of Gt is larger than a specified Lt or Lte, the
	//  range is reversed.
	Gt *int64 `json:"gt,omitempty"`
	// Gte specifies that this field must be greater than or equal to the
	//  specified value, inclusive. If the value of Gte is larger than a
	//  specified Lt or Lte, the range is reversed.
	Gte *int64 `json:"gte,omitempty"`
	// IgnoreEmpty specifies that the validation rules of this field should be
	//  evaluated only if the field is not empty
	IgnoreEmpty *bool `json:"ignoreEmpty,omitempty"`
	// In specifies that this field must be equal to one of the specified
	//  values
	In []int64 `json:"in,omitempty"`
	// Lt specifies that this field must be less than the specified value,
	//  exclusive
	Lt *int64 `json:"lt,omitempty"`
	// Lte specifies that this field must be less than or equal to the
	//  specified value, inclusive
	Lte *int64 `json:"lte,omitempty"`
	// NotIn specifies that this field cannot be equal to one of the specified
	//  values
	NotIn []int64 `json:"notIn,omitempty"`
}

func (u *UInt32Rules) GetConst() *int64 {
	if u == nil {
		return nil
	}
	return u.Const
}

func (u *UInt32Rules) GetGt() *int64 {
	if u == nil {
		return nil
	}
	return u.Gt
}

func (u *UInt32Rules) GetGte() *int64 {
	if u == nil {
		return nil
	}
	return u.Gte
}

func (u *UInt32Rules) GetIgnoreEmpty() *bool {
	if u == nil {
		return nil
	}
	return u.IgnoreEmpty
}

func (u *UInt32Rules) GetIn() []int64 {
	if u == nil {
		return nil
	}
	return u.In
}

func (u *UInt32Rules) GetLt() *int64 {
	if u == nil {
		return nil
	}
	return u.Lt
}

func (u *UInt32Rules) GetLte() *int64 {
	if u == nil {
		return nil
	}
	return u.Lte
}

func (u *UInt32Rules) GetNotIn() []int64 {
	if u == nil {
		return nil
	}
	return u.NotIn
}
