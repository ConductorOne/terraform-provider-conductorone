// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FormInstanceData struct {
}

// FormInstanceState - The state field.
type FormInstanceState string

const (
	FormInstanceStateFormInstanceStateUnspecified FormInstanceState = "FORM_INSTANCE_STATE_UNSPECIFIED"
	FormInstanceStateFormInstanceStateWaiting     FormInstanceState = "FORM_INSTANCE_STATE_WAITING"
	FormInstanceStateFormInstanceStateDone        FormInstanceState = "FORM_INSTANCE_STATE_DONE"
)

func (e FormInstanceState) ToPointer() *FormInstanceState {
	return &e
}
func (e *FormInstanceState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FORM_INSTANCE_STATE_UNSPECIFIED":
		fallthrough
	case "FORM_INSTANCE_STATE_WAITING":
		fallthrough
	case "FORM_INSTANCE_STATE_DONE":
		*e = FormInstanceState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FormInstanceState: %v", v)
	}
}

// The FormInstance message.
//
// This message contains a oneof named outcome. Only a single field of the following list may be set at a time:
//   - completed
//   - restarted
//   - reassigned
//   - skipped
type FormInstance struct {
	Completed  *FormCompletedAction `json:"completed,omitempty"`
	Data       *FormInstanceData    `json:"data,omitempty"`
	Form       *Form                `json:"form,omitempty"`
	Reassigned *ReassignedAction    `json:"reassigned,omitempty"`
	Restarted  *RestartAction       `json:"restarted,omitempty"`
	Skipped    *SkippedAction       `json:"skipped,omitempty"`
	// The state field.
	State *FormInstanceState `json:"state,omitempty"`
}

func (f *FormInstance) GetCompleted() *FormCompletedAction {
	if f == nil {
		return nil
	}
	return f.Completed
}

func (f *FormInstance) GetData() *FormInstanceData {
	if f == nil {
		return nil
	}
	return f.Data
}

func (f *FormInstance) GetForm() *Form {
	if f == nil {
		return nil
	}
	return f.Form
}

func (f *FormInstance) GetReassigned() *ReassignedAction {
	if f == nil {
		return nil
	}
	return f.Reassigned
}

func (f *FormInstance) GetRestarted() *RestartAction {
	if f == nil {
		return nil
	}
	return f.Restarted
}

func (f *FormInstance) GetSkipped() *SkippedAction {
	if f == nil {
		return nil
	}
	return f.Skipped
}

func (f *FormInstance) GetState() *FormInstanceState {
	if f == nil {
		return nil
	}
	return f.State
}
