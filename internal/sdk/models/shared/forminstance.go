// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FormInstanceData struct {
}

// FormInstanceState - The state field.
type FormInstanceState string

const (
	FormInstanceStateFormInstanceStateUnspecified FormInstanceState = "FORM_INSTANCE_STATE_UNSPECIFIED"
	FormInstanceStateFormInstanceStateWaiting     FormInstanceState = "FORM_INSTANCE_STATE_WAITING"
	FormInstanceStateFormInstanceStateDone        FormInstanceState = "FORM_INSTANCE_STATE_DONE"
)

func (e FormInstanceState) ToPointer() *FormInstanceState {
	return &e
}
func (e *FormInstanceState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FORM_INSTANCE_STATE_UNSPECIFIED":
		fallthrough
	case "FORM_INSTANCE_STATE_WAITING":
		fallthrough
	case "FORM_INSTANCE_STATE_DONE":
		*e = FormInstanceState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FormInstanceState: %v", v)
	}
}

// The FormInstance message.
type FormInstance struct {
	Data *FormInstanceData `json:"data,omitempty"`
	// A form is a collection of fields to be filled out by a user
	Form *Form `json:"form,omitempty"`
	// The state field.
	State *FormInstanceState `json:"state,omitempty"`
}

func (o *FormInstance) GetData() *FormInstanceData {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *FormInstance) GetForm() *Form {
	if o == nil {
		return nil
	}
	return o.Form
}

func (o *FormInstance) GetState() *FormInstanceState {
	if o == nil {
		return nil
	}
	return o.State
}
