// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AccessReviewInclusionScopeAppUserStatuses string

const (
	AccessReviewInclusionScopeAppUserStatusesAppUserStatusUnspecified AccessReviewInclusionScopeAppUserStatuses = "APP_USER_STATUS_UNSPECIFIED"
	AccessReviewInclusionScopeAppUserStatusesAppUserStatusEnabled     AccessReviewInclusionScopeAppUserStatuses = "APP_USER_STATUS_ENABLED"
	AccessReviewInclusionScopeAppUserStatusesAppUserStatusDisabled    AccessReviewInclusionScopeAppUserStatuses = "APP_USER_STATUS_DISABLED"
	AccessReviewInclusionScopeAppUserStatusesAppUserStatusDeleted     AccessReviewInclusionScopeAppUserStatuses = "APP_USER_STATUS_DELETED"
)

func (e AccessReviewInclusionScopeAppUserStatuses) ToPointer() *AccessReviewInclusionScopeAppUserStatuses {
	return &e
}
func (e *AccessReviewInclusionScopeAppUserStatuses) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_USER_STATUS_UNSPECIFIED":
		fallthrough
	case "APP_USER_STATUS_ENABLED":
		fallthrough
	case "APP_USER_STATUS_DISABLED":
		fallthrough
	case "APP_USER_STATUS_DELETED":
		*e = AccessReviewInclusionScopeAppUserStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessReviewInclusionScopeAppUserStatuses: %v", v)
	}
}

type AccessReviewInclusionScopeAppUserTypes string

const (
	AccessReviewInclusionScopeAppUserTypesAppUserTypeUnspecified    AccessReviewInclusionScopeAppUserTypes = "APP_USER_TYPE_UNSPECIFIED"
	AccessReviewInclusionScopeAppUserTypesAppUserTypeUser           AccessReviewInclusionScopeAppUserTypes = "APP_USER_TYPE_USER"
	AccessReviewInclusionScopeAppUserTypesAppUserTypeServiceAccount AccessReviewInclusionScopeAppUserTypes = "APP_USER_TYPE_SERVICE_ACCOUNT"
	AccessReviewInclusionScopeAppUserTypesAppUserTypeSystemAccount  AccessReviewInclusionScopeAppUserTypes = "APP_USER_TYPE_SYSTEM_ACCOUNT"
)

func (e AccessReviewInclusionScopeAppUserTypes) ToPointer() *AccessReviewInclusionScopeAppUserTypes {
	return &e
}
func (e *AccessReviewInclusionScopeAppUserTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_USER_TYPE_UNSPECIFIED":
		fallthrough
	case "APP_USER_TYPE_USER":
		fallthrough
	case "APP_USER_TYPE_SERVICE_ACCOUNT":
		fallthrough
	case "APP_USER_TYPE_SYSTEM_ACCOUNT":
		*e = AccessReviewInclusionScopeAppUserTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessReviewInclusionScopeAppUserTypes: %v", v)
	}
}

type UserStatuses string

const (
	UserStatusesUserUnknown  UserStatuses = "USER_UNKNOWN"
	UserStatusesUserEnabled  UserStatuses = "USER_ENABLED"
	UserStatusesUserDisabled UserStatuses = "USER_DISABLED"
	UserStatusesUserDeleted  UserStatuses = "USER_DELETED"
)

func (e UserStatuses) ToPointer() *UserStatuses {
	return &e
}
func (e *UserStatuses) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USER_UNKNOWN":
		fallthrough
	case "USER_ENABLED":
		fallthrough
	case "USER_DISABLED":
		fallthrough
	case "USER_DELETED":
		*e = UserStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserStatuses: %v", v)
	}
}

// The AccessReviewInclusionScope message.
type AccessReviewInclusionScope struct {
	// The appUserStatuses field.
	AppUserStatuses []AccessReviewInclusionScopeAppUserStatuses `json:"appUserStatuses,omitempty"`
	// The appUserTypes field.
	AppUserTypes []AccessReviewInclusionScopeAppUserTypes `json:"appUserTypes,omitempty"`
	// The managerIds field.
	ManagerIds []string `json:"managerIds,omitempty"`
	// The multiUserProfileAttributes field.
	MultiUserProfileAttributes map[string]IncludedUserAttributeValues `json:"multiUserProfileAttributes,omitempty"`
	// The noAccountOwners field.
	NoAccountOwners *bool `json:"noAccountOwners,omitempty"`
	// The userIds field.
	UserIds []string `json:"userIds,omitempty"`
	// The userStatuses field.
	UserStatuses []UserStatuses `json:"userStatuses,omitempty"`
}

func (o *AccessReviewInclusionScope) GetAppUserStatuses() []AccessReviewInclusionScopeAppUserStatuses {
	if o == nil {
		return nil
	}
	return o.AppUserStatuses
}

func (o *AccessReviewInclusionScope) GetAppUserTypes() []AccessReviewInclusionScopeAppUserTypes {
	if o == nil {
		return nil
	}
	return o.AppUserTypes
}

func (o *AccessReviewInclusionScope) GetManagerIds() []string {
	if o == nil {
		return nil
	}
	return o.ManagerIds
}

func (o *AccessReviewInclusionScope) GetMultiUserProfileAttributes() map[string]IncludedUserAttributeValues {
	if o == nil {
		return nil
	}
	return o.MultiUserProfileAttributes
}

func (o *AccessReviewInclusionScope) GetNoAccountOwners() *bool {
	if o == nil {
		return nil
	}
	return o.NoAccountOwners
}

func (o *AccessReviewInclusionScope) GetUserIds() []string {
	if o == nil {
		return nil
	}
	return o.UserIds
}

func (o *AccessReviewInclusionScope) GetUserStatuses() []UserStatuses {
	if o == nil {
		return nil
	}
	return o.UserStatuses
}
