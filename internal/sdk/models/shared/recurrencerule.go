// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// Frequency - The frequency field.
type Frequency string

const (
	FrequencyFrequencyUnspecified Frequency = "FREQUENCY_UNSPECIFIED"
	FrequencyFrequencyNone        Frequency = "FREQUENCY_NONE"
	FrequencyFrequencyDaily       Frequency = "FREQUENCY_DAILY"
	FrequencyFrequencyWeekly      Frequency = "FREQUENCY_WEEKLY"
	FrequencyFrequencyMonthly     Frequency = "FREQUENCY_MONTHLY"
	FrequencyFrequencyYearly      Frequency = "FREQUENCY_YEARLY"
)

func (e Frequency) ToPointer() *Frequency {
	return &e
}
func (e *Frequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREQUENCY_UNSPECIFIED":
		fallthrough
	case "FREQUENCY_NONE":
		fallthrough
	case "FREQUENCY_DAILY":
		fallthrough
	case "FREQUENCY_WEEKLY":
		fallthrough
	case "FREQUENCY_MONTHLY":
		fallthrough
	case "FREQUENCY_YEARLY":
		*e = Frequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Frequency: %v", v)
	}
}

// The RecurrenceRule message.
//
// This message contains a oneof named end_condition. Only a single field of the following list may be set at a time:
//   - endDate
//   - occurrences
type RecurrenceRule struct {
	EndDate *time.Time `json:"endDate,omitempty"`
	// The frequency field.
	Frequency *Frequency `json:"frequency,omitempty"`
	// The interval field.
	Interval *int `json:"interval,omitempty"`
	// The occurrences field.
	// This field is part of the `end_condition` oneof.
	// See the documentation for `c1.api.accessreview.v1.RecurrenceRule` for more details.
	Occurrences *int       `json:"occurrences,omitempty"`
	StartDate   *time.Time `json:"startDate,omitempty"`
}

func (r RecurrenceRule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RecurrenceRule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RecurrenceRule) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *RecurrenceRule) GetFrequency() *Frequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *RecurrenceRule) GetInterval() *int {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *RecurrenceRule) GetOccurrences() *int {
	if o == nil {
		return nil
	}
	return o.Occurrences
}

func (o *RecurrenceRule) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}
