// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ExternalRefSource - The source of the external reference.
type ExternalRefSource string

const (
	ExternalRefSourceUnspecified ExternalRefSource = "UNSPECIFIED"
	ExternalRefSourceJira        ExternalRefSource = "JIRA"
)

func (e ExternalRefSource) ToPointer() *ExternalRefSource {
	return &e
}
func (e *ExternalRefSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNSPECIFIED":
		fallthrough
	case "JIRA":
		*e = ExternalRefSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExternalRefSource: %v", v)
	}
}

// ExternalRef - A reference to an external source. This value is unused currently, but may be brought back.
type ExternalRef struct {
	// The source of the external reference.
	ExternalRefSource *ExternalRefSource `json:"externalRefSource,omitempty"`
	// The name of the external reference.
	Name *string `json:"name,omitempty"`
	// The URL to the external reference.
	URL *string `json:"url,omitempty"`
}

func (e *ExternalRef) GetExternalRefSource() *ExternalRefSource {
	if e == nil {
		return nil
	}
	return e.ExternalRefSource
}

func (e *ExternalRef) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExternalRef) GetURL() *string {
	if e == nil {
		return nil
	}
	return e.URL
}
