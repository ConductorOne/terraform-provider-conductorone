// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/internal/utils"
	"time"
)

// DefaultView - the default view that reviewers will see when they complete their access reviews
type DefaultView string

const (
	DefaultViewAccessReviewViewTypeUnspecified  DefaultView = "ACCESS_REVIEW_VIEW_TYPE_UNSPECIFIED"
	DefaultViewAccessReviewViewTypeByApp        DefaultView = "ACCESS_REVIEW_VIEW_TYPE_BY_APP"
	DefaultViewAccessReviewViewTypeByUser       DefaultView = "ACCESS_REVIEW_VIEW_TYPE_BY_USER"
	DefaultViewAccessReviewViewTypeUnstructured DefaultView = "ACCESS_REVIEW_VIEW_TYPE_UNSTRUCTURED"
)

func (e DefaultView) ToPointer() *DefaultView {
	return &e
}
func (e *DefaultView) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCESS_REVIEW_VIEW_TYPE_UNSPECIFIED":
		fallthrough
	case "ACCESS_REVIEW_VIEW_TYPE_BY_APP":
		fallthrough
	case "ACCESS_REVIEW_VIEW_TYPE_BY_USER":
		fallthrough
	case "ACCESS_REVIEW_VIEW_TYPE_UNSTRUCTURED":
		*e = DefaultView(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultView: %v", v)
	}
}

// State - The state field.
type State string

const (
	StateAccessReviewStateUnspecified                   State = "ACCESS_REVIEW_STATE_UNSPECIFIED"
	StateAccessReviewStateOpen                          State = "ACCESS_REVIEW_STATE_OPEN"
	StateAccessReviewStateClosed                        State = "ACCESS_REVIEW_STATE_CLOSED"
	StateAccessReviewStatePending                       State = "ACCESS_REVIEW_STATE_PENDING"
	StateAccessReviewStateReview                        State = "ACCESS_REVIEW_STATE_REVIEW"
	StateAccessReviewStatePreparing                     State = "ACCESS_REVIEW_STATE_PREPARING"
	StateAccessReviewStateStarting                      State = "ACCESS_REVIEW_STATE_STARTING"
	StateAccessReviewStateDraft                         State = "ACCESS_REVIEW_STATE_DRAFT"
	StateAccessReviewStateDeleting                      State = "ACCESS_REVIEW_STATE_DELETING"
	StateAccessReviewStateDeleted                       State = "ACCESS_REVIEW_STATE_DELETED"
	StateAccessReviewStateResettingPolicies             State = "ACCESS_REVIEW_STATE_RESETTING_POLICIES"
	StateAccessReviewStateCopyingSetupEntitlements      State = "ACCESS_REVIEW_STATE_COPYING_SETUP_ENTITLEMENTS"
	StateAccessReviewStateCopyingResourceTypeSelections State = "ACCESS_REVIEW_STATE_COPYING_RESOURCE_TYPE_SELECTIONS"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCESS_REVIEW_STATE_UNSPECIFIED":
		fallthrough
	case "ACCESS_REVIEW_STATE_OPEN":
		fallthrough
	case "ACCESS_REVIEW_STATE_CLOSED":
		fallthrough
	case "ACCESS_REVIEW_STATE_PENDING":
		fallthrough
	case "ACCESS_REVIEW_STATE_REVIEW":
		fallthrough
	case "ACCESS_REVIEW_STATE_PREPARING":
		fallthrough
	case "ACCESS_REVIEW_STATE_STARTING":
		fallthrough
	case "ACCESS_REVIEW_STATE_DRAFT":
		fallthrough
	case "ACCESS_REVIEW_STATE_DELETING":
		fallthrough
	case "ACCESS_REVIEW_STATE_DELETED":
		fallthrough
	case "ACCESS_REVIEW_STATE_RESETTING_POLICIES":
		fallthrough
	case "ACCESS_REVIEW_STATE_COPYING_SETUP_ENTITLEMENTS":
		fallthrough
	case "ACCESS_REVIEW_STATE_COPYING_RESOURCE_TYPE_SELECTIONS":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

// The AccessReview message.
//
// This message contains a oneof named setup_metadata. Only a single field of the following list may be set at a time:
//   - singleApp
//   - multiApp
//   - bindings
type AccessReview struct {
	// The ID of the template if the campaign was created from one
	AccessReviewTemplateID *string `json:"accessReviewTemplateId,omitempty"`
	// The autoResolve field.
	AutoResolve *bool `json:"autoResolve,omitempty"`
	// The BindingObjectSetup message.
	BindingObjectSetup       *BindingObjectSetup `json:"bindings,omitempty"`
	ClosedAt                 *time.Time          `json:"closedAt,omitempty"`
	CompletionDate           *time.Time          `json:"completionDate,omitempty"`
	ConnectorSourcesFrozenAt *time.Time          `json:"connectorSourcesFrozenAt,omitempty"`
	CreatedAt                *time.Time          `json:"createdAt,omitempty"`
	// The createdById field.
	CreatedByID *string `json:"createdById,omitempty"`
	// the default view that reviewers will see when they complete their access reviews
	DefaultView *DefaultView `json:"defaultView,omitempty"`
	// The description field.
	Description *string `json:"description,omitempty"`
	// The displayName field.
	DisplayName *string `json:"displayName,omitempty"`
	// The AccessReviewExclusionScope message.
	AccessReviewExclusionScope *AccessReviewExclusionScope `json:"exclusionScope,omitempty"`
	// The expectedTicketCount field.
	ExpectedTicketCount *int `json:"expectedTicketCount,omitempty"`
	// The hasAccuracySupport field.
	HasAccuracySupport *bool `json:"hasAccuracySupport,omitempty"`
	// The id field.
	ID *string `json:"id,omitempty"`
	// The AccessReviewInclusionScope message.
	AccessReviewInclusionScope *AccessReviewInclusionScope `json:"inclusionScope,omitempty"`
	// The MultiAppSetup message.
	MultiAppSetup *MultiAppSetup `json:"multiApp,omitempty"`
	// The policyId field.
	PolicyID *string `json:"policyId,omitempty"`
	// The reviewInstructions field.
	ReviewInstructions *string `json:"reviewInstructions,omitempty"`
	// The AccessReviewScope message.
	AccessReviewScope *AccessReviewScope `json:"scope,omitempty"`
	// The AccessReviewScopeV2 message.
	//
	// This message contains a oneof named apps_and_resources_scope. Only a single field of the following list may be set at a time:
	//   - appAccess
	//   - specificResources
	//   - appSelectionCriteria
	//   - resourceTypeSelections
	//
	//
	// This message contains a oneof named users_scope. Only a single field of the following list may be set at a time:
	//   - allUsers
	//   - selectedUsers
	//   - userCriteria
	//
	//
	// This message contains a oneof named accounts_scope. Only a single field of the following list may be set at a time:
	//   - allAccounts
	//   - accountCriteria
	//
	//
	// This message contains a oneof named grants_scope. Only a single field of the following list may be set at a time:
	//   - allGrants
	//   - grantsByCriteria
	//
	AccessReviewScopeV2 *AccessReviewScopeV2 `json:"scopeV2,omitempty"`
	// The scopingVersion field.
	ScopingVersion *string `json:"scopingVersion,omitempty"`
	// The SingleAppSetup message.
	SingleAppSetup *SingleAppSetup `json:"singleApp,omitempty"`
	StartedAt      *time.Time      `json:"startedAt,omitempty"`
	// The state field.
	State     *State     `json:"state,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Determines the policy applied to the campaign. Default is false, using the campaign policy.
	//  If true, the order of precedence is entitlement → app → campaign policy.
	UsePolicyOverride *bool `json:"usePolicyOverride,omitempty"`
}

func (a AccessReview) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccessReview) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccessReview) GetAccessReviewTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.AccessReviewTemplateID
}

func (o *AccessReview) GetAutoResolve() *bool {
	if o == nil {
		return nil
	}
	return o.AutoResolve
}

func (o *AccessReview) GetBindingObjectSetup() *BindingObjectSetup {
	if o == nil {
		return nil
	}
	return o.BindingObjectSetup
}

func (o *AccessReview) GetClosedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedAt
}

func (o *AccessReview) GetCompletionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletionDate
}

func (o *AccessReview) GetConnectorSourcesFrozenAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ConnectorSourcesFrozenAt
}

func (o *AccessReview) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AccessReview) GetCreatedByID() *string {
	if o == nil {
		return nil
	}
	return o.CreatedByID
}

func (o *AccessReview) GetDefaultView() *DefaultView {
	if o == nil {
		return nil
	}
	return o.DefaultView
}

func (o *AccessReview) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AccessReview) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *AccessReview) GetAccessReviewExclusionScope() *AccessReviewExclusionScope {
	if o == nil {
		return nil
	}
	return o.AccessReviewExclusionScope
}

func (o *AccessReview) GetExpectedTicketCount() *int {
	if o == nil {
		return nil
	}
	return o.ExpectedTicketCount
}

func (o *AccessReview) GetHasAccuracySupport() *bool {
	if o == nil {
		return nil
	}
	return o.HasAccuracySupport
}

func (o *AccessReview) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccessReview) GetAccessReviewInclusionScope() *AccessReviewInclusionScope {
	if o == nil {
		return nil
	}
	return o.AccessReviewInclusionScope
}

func (o *AccessReview) GetMultiAppSetup() *MultiAppSetup {
	if o == nil {
		return nil
	}
	return o.MultiAppSetup
}

func (o *AccessReview) GetPolicyID() *string {
	if o == nil {
		return nil
	}
	return o.PolicyID
}

func (o *AccessReview) GetReviewInstructions() *string {
	if o == nil {
		return nil
	}
	return o.ReviewInstructions
}

func (o *AccessReview) GetAccessReviewScope() *AccessReviewScope {
	if o == nil {
		return nil
	}
	return o.AccessReviewScope
}

func (o *AccessReview) GetAccessReviewScopeV2() *AccessReviewScopeV2 {
	if o == nil {
		return nil
	}
	return o.AccessReviewScopeV2
}

func (o *AccessReview) GetScopingVersion() *string {
	if o == nil {
		return nil
	}
	return o.ScopingVersion
}

func (o *AccessReview) GetSingleAppSetup() *SingleAppSetup {
	if o == nil {
		return nil
	}
	return o.SingleAppSetup
}

func (o *AccessReview) GetStartedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *AccessReview) GetState() *State {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *AccessReview) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AccessReview) GetUsePolicyOverride() *bool {
	if o == nil {
		return nil
	}
	return o.UsePolicyOverride
}

// AccessReviewInput - The AccessReview message.
//
// This message contains a oneof named setup_metadata. Only a single field of the following list may be set at a time:
//   - singleApp
//   - multiApp
//   - bindings
type AccessReviewInput struct {
	// The ID of the template if the campaign was created from one
	AccessReviewTemplateID *string `json:"accessReviewTemplateId,omitempty"`
	// The autoResolve field.
	AutoResolve *bool `json:"autoResolve,omitempty"`
	// The BindingObjectSetup message.
	BindingObjectSetup       *BindingObjectSetup `json:"bindings,omitempty"`
	ClosedAt                 *time.Time          `json:"closedAt,omitempty"`
	CompletionDate           *time.Time          `json:"completionDate,omitempty"`
	ConnectorSourcesFrozenAt *time.Time          `json:"connectorSourcesFrozenAt,omitempty"`
	// The createdById field.
	CreatedByID *string `json:"createdById,omitempty"`
	// the default view that reviewers will see when they complete their access reviews
	DefaultView *DefaultView `json:"defaultView,omitempty"`
	// The description field.
	Description *string `json:"description,omitempty"`
	// The displayName field.
	DisplayName *string `json:"displayName,omitempty"`
	// The AccessReviewExclusionScope message.
	AccessReviewExclusionScope *AccessReviewExclusionScope `json:"exclusionScope,omitempty"`
	// The expectedTicketCount field.
	ExpectedTicketCount *int `json:"expectedTicketCount,omitempty"`
	// The hasAccuracySupport field.
	HasAccuracySupport *bool `json:"hasAccuracySupport,omitempty"`
	// The id field.
	ID *string `json:"id,omitempty"`
	// The AccessReviewInclusionScope message.
	AccessReviewInclusionScope *AccessReviewInclusionScope `json:"inclusionScope,omitempty"`
	// The MultiAppSetup message.
	MultiAppSetup *MultiAppSetup `json:"multiApp,omitempty"`
	// The policyId field.
	PolicyID *string `json:"policyId,omitempty"`
	// The reviewInstructions field.
	ReviewInstructions *string `json:"reviewInstructions,omitempty"`
	// The AccessReviewScope message.
	AccessReviewScope *AccessReviewScope `json:"scope,omitempty"`
	// The AccessReviewScopeV2 message.
	//
	// This message contains a oneof named apps_and_resources_scope. Only a single field of the following list may be set at a time:
	//   - appAccess
	//   - specificResources
	//   - appSelectionCriteria
	//   - resourceTypeSelections
	//
	//
	// This message contains a oneof named users_scope. Only a single field of the following list may be set at a time:
	//   - allUsers
	//   - selectedUsers
	//   - userCriteria
	//
	//
	// This message contains a oneof named accounts_scope. Only a single field of the following list may be set at a time:
	//   - allAccounts
	//   - accountCriteria
	//
	//
	// This message contains a oneof named grants_scope. Only a single field of the following list may be set at a time:
	//   - allGrants
	//   - grantsByCriteria
	//
	AccessReviewScopeV2 *AccessReviewScopeV2 `json:"scopeV2,omitempty"`
	// The scopingVersion field.
	ScopingVersion *string `json:"scopingVersion,omitempty"`
	// The SingleAppSetup message.
	SingleAppSetup *SingleAppSetup `json:"singleApp,omitempty"`
	StartedAt      *time.Time      `json:"startedAt,omitempty"`
	// The state field.
	State *State `json:"state,omitempty"`
	// Determines the policy applied to the campaign. Default is false, using the campaign policy.
	//  If true, the order of precedence is entitlement → app → campaign policy.
	UsePolicyOverride *bool `json:"usePolicyOverride,omitempty"`
}

func (a AccessReviewInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AccessReviewInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AccessReviewInput) GetAccessReviewTemplateID() *string {
	if o == nil {
		return nil
	}
	return o.AccessReviewTemplateID
}

func (o *AccessReviewInput) GetAutoResolve() *bool {
	if o == nil {
		return nil
	}
	return o.AutoResolve
}

func (o *AccessReviewInput) GetBindingObjectSetup() *BindingObjectSetup {
	if o == nil {
		return nil
	}
	return o.BindingObjectSetup
}

func (o *AccessReviewInput) GetClosedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedAt
}

func (o *AccessReviewInput) GetCompletionDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletionDate
}

func (o *AccessReviewInput) GetConnectorSourcesFrozenAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ConnectorSourcesFrozenAt
}

func (o *AccessReviewInput) GetCreatedByID() *string {
	if o == nil {
		return nil
	}
	return o.CreatedByID
}

func (o *AccessReviewInput) GetDefaultView() *DefaultView {
	if o == nil {
		return nil
	}
	return o.DefaultView
}

func (o *AccessReviewInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *AccessReviewInput) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *AccessReviewInput) GetAccessReviewExclusionScope() *AccessReviewExclusionScope {
	if o == nil {
		return nil
	}
	return o.AccessReviewExclusionScope
}

func (o *AccessReviewInput) GetExpectedTicketCount() *int {
	if o == nil {
		return nil
	}
	return o.ExpectedTicketCount
}

func (o *AccessReviewInput) GetHasAccuracySupport() *bool {
	if o == nil {
		return nil
	}
	return o.HasAccuracySupport
}

func (o *AccessReviewInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AccessReviewInput) GetAccessReviewInclusionScope() *AccessReviewInclusionScope {
	if o == nil {
		return nil
	}
	return o.AccessReviewInclusionScope
}

func (o *AccessReviewInput) GetMultiAppSetup() *MultiAppSetup {
	if o == nil {
		return nil
	}
	return o.MultiAppSetup
}

func (o *AccessReviewInput) GetPolicyID() *string {
	if o == nil {
		return nil
	}
	return o.PolicyID
}

func (o *AccessReviewInput) GetReviewInstructions() *string {
	if o == nil {
		return nil
	}
	return o.ReviewInstructions
}

func (o *AccessReviewInput) GetAccessReviewScope() *AccessReviewScope {
	if o == nil {
		return nil
	}
	return o.AccessReviewScope
}

func (o *AccessReviewInput) GetAccessReviewScopeV2() *AccessReviewScopeV2 {
	if o == nil {
		return nil
	}
	return o.AccessReviewScopeV2
}

func (o *AccessReviewInput) GetScopingVersion() *string {
	if o == nil {
		return nil
	}
	return o.ScopingVersion
}

func (o *AccessReviewInput) GetSingleAppSetup() *SingleAppSetup {
	if o == nil {
		return nil
	}
	return o.SingleAppSetup
}

func (o *AccessReviewInput) GetStartedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *AccessReviewInput) GetState() *State {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *AccessReviewInput) GetUsePolicyOverride() *bool {
	if o == nil {
		return nil
	}
	return o.UsePolicyOverride
}
