// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PreviousState - The previousState field.
type PreviousState string

const (
	PreviousStateTaskStateOpen   PreviousState = "TASK_STATE_OPEN"
	PreviousStateTaskStateClosed PreviousState = "TASK_STATE_CLOSED"
)

func (e PreviousState) ToPointer() *PreviousState {
	return &e
}
func (e *PreviousState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TASK_STATE_OPEN":
		fallthrough
	case "TASK_STATE_CLOSED":
		*e = PreviousState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviousState: %v", v)
	}
}

// The TaskAuditStateChange message.
type TaskAuditStateChange struct {
	// The previousState field.
	PreviousState *PreviousState `json:"previousState,omitempty"`
}

func (o *TaskAuditStateChange) GetPreviousState() *PreviousState {
	if o == nil {
		return nil
	}
	return o.PreviousState
}
