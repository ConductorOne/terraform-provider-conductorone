// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AppUserDomains string

const (
	AppUserDomainsAppUserDomainUnspecified AppUserDomains = "APP_USER_DOMAIN_UNSPECIFIED"
	AppUserDomainsAppUserDomainExternal    AppUserDomains = "APP_USER_DOMAIN_EXTERNAL"
	AppUserDomainsAppUserDomainTrusted     AppUserDomains = "APP_USER_DOMAIN_TRUSTED"
)

func (e AppUserDomains) ToPointer() *AppUserDomains {
	return &e
}
func (e *AppUserDomains) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_USER_DOMAIN_UNSPECIFIED":
		fallthrough
	case "APP_USER_DOMAIN_EXTERNAL":
		fallthrough
	case "APP_USER_DOMAIN_TRUSTED":
		*e = AppUserDomains(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppUserDomains: %v", v)
	}
}

type AppUserStatuses string

const (
	AppUserStatusesStatusUnspecified AppUserStatuses = "STATUS_UNSPECIFIED"
	AppUserStatusesStatusEnabled     AppUserStatuses = "STATUS_ENABLED"
	AppUserStatusesStatusDisabled    AppUserStatuses = "STATUS_DISABLED"
	AppUserStatusesStatusDeleted     AppUserStatuses = "STATUS_DELETED"
)

func (e AppUserStatuses) ToPointer() *AppUserStatuses {
	return &e
}
func (e *AppUserStatuses) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATUS_UNSPECIFIED":
		fallthrough
	case "STATUS_ENABLED":
		fallthrough
	case "STATUS_DISABLED":
		fallthrough
	case "STATUS_DELETED":
		*e = AppUserStatuses(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppUserStatuses: %v", v)
	}
}

type AppUserTypes string

const (
	AppUserTypesAppUserTypeUnspecified    AppUserTypes = "APP_USER_TYPE_UNSPECIFIED"
	AppUserTypesAppUserTypeUser           AppUserTypes = "APP_USER_TYPE_USER"
	AppUserTypesAppUserTypeServiceAccount AppUserTypes = "APP_USER_TYPE_SERVICE_ACCOUNT"
	AppUserTypesAppUserTypeSystemAccount  AppUserTypes = "APP_USER_TYPE_SYSTEM_ACCOUNT"
)

func (e AppUserTypes) ToPointer() *AppUserTypes {
	return &e
}
func (e *AppUserTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "APP_USER_TYPE_UNSPECIFIED":
		fallthrough
	case "APP_USER_TYPE_USER":
		fallthrough
	case "APP_USER_TYPE_SERVICE_ACCOUNT":
		fallthrough
	case "APP_USER_TYPE_SYSTEM_ACCOUNT":
		*e = AppUserTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppUserTypes: %v", v)
	}
}

// AppUserServiceSearchRequest - Search App users based on filters specified in the request body
type AppUserServiceSearchRequest struct {
	// The app ID to restrict the search to.
	AppID *string `json:"appId,omitempty"`
	// A list of account domains to restrict the search to.
	AppUserDomains []AppUserDomains `json:"appUserDomains,omitempty"`
	// A list of app user IDs to restrict the search to.
	AppUserIds []string `json:"appUserIds,omitempty"`
	// A list of app user status details to restrict the search to.
	AppUserStatusDetails []string `json:"appUserStatusDetails,omitempty"`
	// A list of app user statuses to restrict the search to.
	AppUserStatuses []AppUserStatuses `json:"appUserStatuses,omitempty"`
	// A list of app user types to restrict the search to.
	AppUserTypes []AppUserTypes `json:"appUserTypes,omitempty"`
	// A list of app user IDs to remove from the results.
	ExcludeAppUserIds []string `json:"excludeAppUserIds,omitempty"`
	// The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
	PageSize *int `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	// Query the apps with a fuzzy search on display name and description.
	Query *string `json:"query,omitempty"`
	// A list of app users to limit the search to.
	Refs []AppUserRef `json:"refs,omitempty"`
	// A list of user IDs to restrict the search by.
	UserIds []string `json:"userIds,omitempty"`
}

func (a *AppUserServiceSearchRequest) GetAppID() *string {
	if a == nil {
		return nil
	}
	return a.AppID
}

func (a *AppUserServiceSearchRequest) GetAppUserDomains() []AppUserDomains {
	if a == nil {
		return nil
	}
	return a.AppUserDomains
}

func (a *AppUserServiceSearchRequest) GetAppUserIds() []string {
	if a == nil {
		return nil
	}
	return a.AppUserIds
}

func (a *AppUserServiceSearchRequest) GetAppUserStatusDetails() []string {
	if a == nil {
		return nil
	}
	return a.AppUserStatusDetails
}

func (a *AppUserServiceSearchRequest) GetAppUserStatuses() []AppUserStatuses {
	if a == nil {
		return nil
	}
	return a.AppUserStatuses
}

func (a *AppUserServiceSearchRequest) GetAppUserTypes() []AppUserTypes {
	if a == nil {
		return nil
	}
	return a.AppUserTypes
}

func (a *AppUserServiceSearchRequest) GetExcludeAppUserIds() []string {
	if a == nil {
		return nil
	}
	return a.ExcludeAppUserIds
}

func (a *AppUserServiceSearchRequest) GetPageSize() *int {
	if a == nil {
		return nil
	}
	return a.PageSize
}

func (a *AppUserServiceSearchRequest) GetPageToken() *string {
	if a == nil {
		return nil
	}
	return a.PageToken
}

func (a *AppUserServiceSearchRequest) GetQuery() *string {
	if a == nil {
		return nil
	}
	return a.Query
}

func (a *AppUserServiceSearchRequest) GetRefs() []AppUserRef {
	if a == nil {
		return nil
	}
	return a.Refs
}

func (a *AppUserServiceSearchRequest) GetUserIds() []string {
	if a == nil {
		return nil
	}
	return a.UserIds
}
