// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Format - The format field.
type Format string

const (
	FormatExportFormatUnspecified  Format = "EXPORT_FORMAT_UNSPECIFIED"
	FormatExportFormatOcsfJSONZstd Format = "EXPORT_FORMAT_OCSF_JSON_ZSTD"
	FormatExportFormatOcsfJSONGzip Format = "EXPORT_FORMAT_OCSF_JSON_GZIP"
)

func (e Format) ToPointer() *Format {
	return &e
}
func (e *Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXPORT_FORMAT_UNSPECIFIED":
		fallthrough
	case "EXPORT_FORMAT_OCSF_JSON_ZSTD":
		fallthrough
	case "EXPORT_FORMAT_OCSF_JSON_GZIP":
		*e = Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Format: %v", v)
	}
}

// The ExportToDatasource message.
type ExportToDatasource struct {
	// The datasourceId field.
	DatasourceID *string `json:"datasourceId,omitempty"`
	// The format field.
	Format *Format `json:"format,omitempty"`
	// The prefix field.
	Prefix *string `json:"prefix,omitempty"`
}

func (o *ExportToDatasource) GetDatasourceID() *string {
	if o == nil {
		return nil
	}
	return o.DatasourceID
}

func (o *ExportToDatasource) GetFormat() *Format {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *ExportToDatasource) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}
