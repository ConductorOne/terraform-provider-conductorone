// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// RepeatedRules describe the constraints applied to `repeated` values
type RepeatedRules struct {
	// IgnoreEmpty specifies that the validation rules of this field should be
	//  evaluated only if the field is not empty
	IgnoreEmpty *bool `json:"ignoreEmpty,omitempty"`
	// FieldRules encapsulates the rules for each type of field. Depending on the
	//  field, the correct set should be used to ensure proper validations.
	//
	// This message contains a oneof named type. Only a single field of the following list may be set at a time:
	//   - float
	//   - double
	//   - int32
	//   - int64
	//   - uint32
	//   - uint64
	//   - sint32
	//   - sint64
	//   - fixed32
	//   - fixed64
	//   - sfixed32
	//   - sfixed64
	//   - bool
	//   - string
	//   - bytes
	//   - enum
	//   - repeated
	//   - map
	//   - any
	//   - duration
	//   - timestamp
	//
	FieldRules *FieldRules `json:"items,omitempty"`
	// MaxItems specifies that this field must have the specified number of
	//  items at a maximum
	MaxItems *string `json:"maxItems,omitempty"`
	// MinItems specifies that this field must have the specified number of
	//  items at a minimum
	MinItems *string `json:"minItems,omitempty"`
	// Unique specifies that all elements in this field must be unique. This
	//  contraint is only applicable to scalar and enum types (messages are not
	//  supported).
	Unique *bool `json:"unique,omitempty"`
}

func (o *RepeatedRules) GetIgnoreEmpty() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreEmpty
}

func (o *RepeatedRules) GetFieldRules() *FieldRules {
	if o == nil {
		return nil
	}
	return o.FieldRules
}

func (o *RepeatedRules) GetMaxItems() *string {
	if o == nil {
		return nil
	}
	return o.MaxItems
}

func (o *RepeatedRules) GetMinItems() *string {
	if o == nil {
		return nil
	}
	return o.MinItems
}

func (o *RepeatedRules) GetUnique() *bool {
	if o == nil {
		return nil
	}
	return o.Unique
}
