// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"
	"undefined/internal/utils"
)

// StepUpTransactionState - Current state of the transaction
type StepUpTransactionState string

const (
	StepUpTransactionStateStepUpTransactionStateUnspecified StepUpTransactionState = "STEP_UP_TRANSACTION_STATE_UNSPECIFIED"
	StepUpTransactionStateStepUpTransactionStatePending     StepUpTransactionState = "STEP_UP_TRANSACTION_STATE_PENDING"
	StepUpTransactionStateStepUpTransactionStateVerified    StepUpTransactionState = "STEP_UP_TRANSACTION_STATE_VERIFIED"
	StepUpTransactionStateStepUpTransactionStateError       StepUpTransactionState = "STEP_UP_TRANSACTION_STATE_ERROR"
)

func (e StepUpTransactionState) ToPointer() *StepUpTransactionState {
	return &e
}

// StepUpTransaction represents a record of a step-up authentication attempt
//
// This message contains a oneof named target. Only a single field of the following list may be set at a time:
//   - approveTask
//   - test
type StepUpTransaction struct {
	// Target for approving a task
	TargetTask *TargetTask    `json:"approveTask,omitempty"`
	Claims     map[string]any `json:"claims,omitempty"`
	CreatedAt  *time.Time     `json:"createdAt,omitempty"`
	// Error message if the transaction failed
	ErrorMessage *string    `json:"errorMessage,omitempty"`
	ExpiresAt    *time.Time `json:"expiresAt,omitempty"`
	// Unique identifier for the transaction
	ID *string `json:"id,omitempty"`
	// ID of the provider used for this step-up authentication
	ProviderID *string `json:"providerId,omitempty"`
	// Current state of the transaction
	State *StepUpTransactionState `json:"state,omitempty"`
	// Target for testing a provider
	TargetTest *TargetTest `json:"test,omitempty"`
	UpdatedAt  *time.Time  `json:"updatedAt,omitempty"`
	// ID of the user who performed the step-up authentication
	UserID *string `json:"userId,omitempty"`
}

func (s StepUpTransaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StepUpTransaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *StepUpTransaction) GetTargetTask() *TargetTask {
	if o == nil {
		return nil
	}
	return o.TargetTask
}

func (o *StepUpTransaction) GetClaims() map[string]any {
	if o == nil {
		return nil
	}
	return o.Claims
}

func (o *StepUpTransaction) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *StepUpTransaction) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *StepUpTransaction) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *StepUpTransaction) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *StepUpTransaction) GetProviderID() *string {
	if o == nil {
		return nil
	}
	return o.ProviderID
}

func (o *StepUpTransaction) GetState() *StepUpTransactionState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *StepUpTransaction) GetTargetTest() *TargetTest {
	if o == nil {
		return nil
	}
	return o.TargetTest
}

func (o *StepUpTransaction) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *StepUpTransaction) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}
