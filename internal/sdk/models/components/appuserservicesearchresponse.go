// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"undefined/internal/utils"
)

// AppUserServiceSearchResponseExpanded - Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
type AppUserServiceSearchResponseExpanded struct {
	// The type of the serialized message.
	AtType               *string        `json:"@type,omitempty"`
	AdditionalProperties map[string]any `additionalProperties:"true" json:"-"`
}

func (a AppUserServiceSearchResponseExpanded) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppUserServiceSearchResponseExpanded) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AppUserServiceSearchResponseExpanded) GetAtType() *string {
	if o == nil {
		return nil
	}
	return o.AtType
}

func (o *AppUserServiceSearchResponseExpanded) GetAdditionalProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// The AppUserServiceSearchResponse message.
type AppUserServiceSearchResponse struct {
	// List of related objects.
	Expanded []AppUserServiceSearchResponseExpanded `json:"expanded,omitempty"`
	// The list of results containing up to X results, where X is the page size defined in the request.
	List []AppUserView `json:"list,omitempty"`
	// The nextPageToken is shown for the next page if the number of results is larger than the max page size.
	//  The server returns one page of results and the nextPageToken until all results are retrieved.
	//  To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.
	NextPageToken *string `json:"nextPageToken,omitempty"`
}

func (o *AppUserServiceSearchResponse) GetExpanded() []AppUserServiceSearchResponseExpanded {
	if o == nil {
		return nil
	}
	return o.Expanded
}

func (o *AppUserServiceSearchResponse) GetList() []AppUserView {
	if o == nil {
		return nil
	}
	return o.List
}

func (o *AppUserServiceSearchResponse) GetNextPageToken() *string {
	if o == nil {
		return nil
	}
	return o.NextPageToken
}
