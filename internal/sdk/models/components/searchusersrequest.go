// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type ExcludeTypes string

const (
	ExcludeTypesUserTypeUnspecified ExcludeTypes = "USER_TYPE_UNSPECIFIED"
	ExcludeTypesUserTypeSystem      ExcludeTypes = "USER_TYPE_SYSTEM"
	ExcludeTypesUserTypeHuman       ExcludeTypes = "USER_TYPE_HUMAN"
	ExcludeTypesUserTypeService     ExcludeTypes = "USER_TYPE_SERVICE"
	ExcludeTypesUserTypeAgent       ExcludeTypes = "USER_TYPE_AGENT"
)

func (e ExcludeTypes) ToPointer() *ExcludeTypes {
	return &e
}

type UserStatuses string

const (
	UserStatusesUnknown  UserStatuses = "UNKNOWN"
	UserStatusesEnabled  UserStatuses = "ENABLED"
	UserStatusesDisabled UserStatuses = "DISABLED"
	UserStatusesDeleted  UserStatuses = "DELETED"
)

func (e UserStatuses) ToPointer() *UserStatuses {
	return &e
}

// SearchUsersRequest - Search for users based on some filters.
type SearchUsersRequest struct {
	// Search for users based on their email (exact match).
	Email *string `json:"email,omitempty"`
	// An array of users IDs to exclude from the results.
	ExcludeIds []string `json:"excludeIds,omitempty"`
	// An array of types to exclude from the results.
	ExcludeTypes []ExcludeTypes `json:"excludeTypes,omitempty"`
	// The user expand mask is used to indicate which related objects should be expanded in the response.
	//  The supported paths are 'role_ids', 'manager_ids', 'delegated_user_id', 'directory_ids', and '*'.
	UserExpandMask *UserExpandMask `json:"expandMask,omitempty"`
	// Deprecated. Use refs array instead.
	Ids []string `json:"ids,omitempty"`
	// The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)
	PageSize *int `json:"pageSize,omitempty"`
	// The pageToken field.
	PageToken *string `json:"pageToken,omitempty"`
	// Query the apps with a fuzzy search on display name and emails.
	Query *string `json:"query,omitempty"`
	// An array of user refs to restrict the return values to by ID.
	Refs []UserRef `json:"refs,omitempty"`
	// Search for users that have any of the role IDs on this list.
	RoleIds []string `json:"roleIds,omitempty"`
	// Search for users that have any of the statuses on this list. This can only be ENABLED, DISABLED, and DELETED
	UserStatuses []UserStatuses `json:"userStatuses,omitempty"`
}

func (o *SearchUsersRequest) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *SearchUsersRequest) GetExcludeIds() []string {
	if o == nil {
		return nil
	}
	return o.ExcludeIds
}

func (o *SearchUsersRequest) GetExcludeTypes() []ExcludeTypes {
	if o == nil {
		return nil
	}
	return o.ExcludeTypes
}

func (o *SearchUsersRequest) GetUserExpandMask() *UserExpandMask {
	if o == nil {
		return nil
	}
	return o.UserExpandMask
}

func (o *SearchUsersRequest) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

func (o *SearchUsersRequest) GetPageSize() *int {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *SearchUsersRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *SearchUsersRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *SearchUsersRequest) GetRefs() []UserRef {
	if o == nil {
		return nil
	}
	return o.Refs
}

func (o *SearchUsersRequest) GetRoleIds() []string {
	if o == nil {
		return nil
	}
	return o.RoleIds
}

func (o *SearchUsersRequest) GetUserStatuses() []UserStatuses {
	if o == nil {
		return nil
	}
	return o.UserStatuses
}
