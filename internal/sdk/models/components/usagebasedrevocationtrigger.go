// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"
	"undefined/internal/utils"
)

type TargetedAppUserTypes string

const (
	TargetedAppUserTypesAppUserTypeUnspecified    TargetedAppUserTypes = "APP_USER_TYPE_UNSPECIFIED"
	TargetedAppUserTypesAppUserTypeUser           TargetedAppUserTypes = "APP_USER_TYPE_USER"
	TargetedAppUserTypesAppUserTypeServiceAccount TargetedAppUserTypes = "APP_USER_TYPE_SERVICE_ACCOUNT"
	TargetedAppUserTypesAppUserTypeSystemAccount  TargetedAppUserTypes = "APP_USER_TYPE_SYSTEM_ACCOUNT"
)

func (e TargetedAppUserTypes) ToPointer() *TargetedAppUserTypes {
	return &e
}

// The UsageBasedRevocationTrigger message.
//
// This message contains a oneof named cold_start_schedule. Only a single field of the following list may be set at a time:
//   - runImmediately
//   - runDelayed
type UsageBasedRevocationTrigger struct {
	// The appId field.
	AppID     *string    `json:"appId,omitempty"`
	EnabledAt *time.Time `json:"enabledAt,omitempty"`
	// The excludedGroupRefs field.
	ExcludedGroupRefs []AppEntitlementRef `json:"excludedGroupRefs,omitempty"`
	// The excludedUserRefs field.
	ExcludedUserRefs []UserRef `json:"excludedUserRefs,omitempty"`
	// The includeUsersWithNoActivity field.
	IncludeUsersWithNoActivity *bool `json:"includeUsersWithNoActivity,omitempty"`
	// The RunDelayed message.
	RunDelayed *RunDelayed `json:"runDelayed,omitempty"`
	// No fields needed; this just indicates the trigger should run immediately
	RunImmediately *RunImmediately `json:"runImmediately,omitempty"`
	// The targetedAppUserTypes field.
	TargetedAppUserTypes []TargetedAppUserTypes `json:"targetedAppUserTypes,omitempty"`
	// The targetedEntitlementRefs field.
	TargetedEntitlementRefs []AppEntitlementRef `json:"targetedEntitlementRefs,omitempty"`
	// The unusedForDays field.
	UnusedForDays *int64 `json:"unusedForDays,omitempty"`
}

func (u UsageBasedRevocationTrigger) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UsageBasedRevocationTrigger) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UsageBasedRevocationTrigger) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *UsageBasedRevocationTrigger) GetEnabledAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UsageBasedRevocationTrigger) GetExcludedGroupRefs() []AppEntitlementRef {
	if o == nil {
		return nil
	}
	return o.ExcludedGroupRefs
}

func (o *UsageBasedRevocationTrigger) GetExcludedUserRefs() []UserRef {
	if o == nil {
		return nil
	}
	return o.ExcludedUserRefs
}

func (o *UsageBasedRevocationTrigger) GetIncludeUsersWithNoActivity() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeUsersWithNoActivity
}

func (o *UsageBasedRevocationTrigger) GetRunDelayed() *RunDelayed {
	if o == nil {
		return nil
	}
	return o.RunDelayed
}

func (o *UsageBasedRevocationTrigger) GetRunImmediately() *RunImmediately {
	if o == nil {
		return nil
	}
	return o.RunImmediately
}

func (o *UsageBasedRevocationTrigger) GetTargetedAppUserTypes() []TargetedAppUserTypes {
	if o == nil {
		return nil
	}
	return o.TargetedAppUserTypes
}

func (o *UsageBasedRevocationTrigger) GetTargetedEntitlementRefs() []AppEntitlementRef {
	if o == nil {
		return nil
	}
	return o.TargetedEntitlementRefs
}

func (o *UsageBasedRevocationTrigger) GetUnusedForDays() *int64 {
	if o == nil {
		return nil
	}
	return o.UnusedForDays
}
