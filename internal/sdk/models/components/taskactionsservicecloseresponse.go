// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"undefined/internal/utils"
)

// TaskActionsServiceCloseResponseExpanded - Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
type TaskActionsServiceCloseResponseExpanded struct {
	// The type of the serialized message.
	AtType               *string        `json:"@type,omitempty"`
	AdditionalProperties map[string]any `additionalProperties:"true" json:"-"`
}

func (t TaskActionsServiceCloseResponseExpanded) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TaskActionsServiceCloseResponseExpanded) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TaskActionsServiceCloseResponseExpanded) GetAtType() *string {
	if o == nil {
		return nil
	}
	return o.AtType
}

func (o *TaskActionsServiceCloseResponseExpanded) GetAdditionalProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

// The TaskActionsServiceCloseResponse returns a task view with paths indicating the location of expanded items in the array.
type TaskActionsServiceCloseResponse struct {
	// List of serialized related objects.
	Expanded []TaskActionsServiceCloseResponseExpanded `json:"expanded,omitempty"`
	// The ID of the task close action created by this request.
	TaskActionID *string `json:"taskActionId,omitempty"`
	// Contains a task and JSONPATH expressions that describe where in the expanded array related objects are located. This view can be used to display a fully-detailed dashboard of task information.
	TaskView *TaskView `json:"taskView,omitempty"`
}

func (o *TaskActionsServiceCloseResponse) GetExpanded() []TaskActionsServiceCloseResponseExpanded {
	if o == nil {
		return nil
	}
	return o.Expanded
}

func (o *TaskActionsServiceCloseResponse) GetTaskActionID() *string {
	if o == nil {
		return nil
	}
	return o.TaskActionID
}

func (o *TaskActionsServiceCloseResponse) GetTaskView() *TaskView {
	if o == nil {
		return nil
	}
	return o.TaskView
}
