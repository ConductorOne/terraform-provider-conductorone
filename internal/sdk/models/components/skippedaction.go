// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"
	"undefined/internal/utils"
)

// The SkippedAction object describes the outcome of a policy step that has been skipped.
type SkippedAction struct {
	// The ID of the policy step that was created as a result of this skipping.
	NewPolicyStepID *string    `json:"newPolicyStepId,omitempty"`
	SkippedAt       *time.Time `json:"skippedAt,omitempty"`
	// The UserID of the user who skipped this step.
	UserID *string `json:"userId,omitempty"`
}

func (s SkippedAction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SkippedAction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SkippedAction) GetNewPolicyStepID() *string {
	if o == nil {
		return nil
	}
	return o.NewPolicyStepID
}

func (o *SkippedAction) GetSkippedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.SkippedAt
}

func (o *SkippedAction) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}
