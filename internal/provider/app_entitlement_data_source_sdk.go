// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppEntitlementDataSourceModel) RefreshFromSharedAppEntitlement(ctx context.Context, resp *shared.AppEntitlement) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Alias = types.StringPointerValue(resp.Alias)
		r.AppID = types.StringPointerValue(resp.AppID)
		r.AppResourceID = types.StringPointerValue(resp.AppResourceID)
		r.AppResourceTypeID = types.StringPointerValue(resp.AppResourceTypeID)
		r.CertifyPolicyID = types.StringPointerValue(resp.CertifyPolicyID)
		if resp.ComplianceFrameworkValueIds != nil {
			if r.ComplianceFrameworkValueIds == nil {
				r.ComplianceFrameworkValueIds = make([]types.String, 0, len(resp.ComplianceFrameworkValueIds))
			}
			for _, v := range resp.ComplianceFrameworkValueIds {
				r.ComplianceFrameworkValueIds = append(r.ComplianceFrameworkValueIds, types.StringValue(v))
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DefaultValuesApplied = types.BoolPointerValue(resp.DefaultValuesApplied)
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		if resp.DeprovisionerPolicy == nil {
			r.DeprovisionerPolicy = nil
		} else {
			r.DeprovisionerPolicy = &tfTypes.DeprovisionerPolicy{}
			if resp.DeprovisionerPolicy.Connector == nil {
				r.DeprovisionerPolicy.Connector = nil
			} else {
				r.DeprovisionerPolicy.Connector = &tfTypes.ConnectorProvision{}
				if resp.DeprovisionerPolicy.Connector.Account == nil {
					r.DeprovisionerPolicy.Connector.Account = nil
				} else {
					r.DeprovisionerPolicy.Connector.Account = &tfTypes.AccountProvision{}
					if resp.DeprovisionerPolicy.Connector.Account.Config == nil {
						r.DeprovisionerPolicy.Connector.Account.Config = nil
					} else {
						r.DeprovisionerPolicy.Connector.Account.Config = &tfTypes.Config{}
					}
					r.DeprovisionerPolicy.Connector.Account.ConnectorID = types.StringPointerValue(resp.DeprovisionerPolicy.Connector.Account.ConnectorID)
					if resp.DeprovisionerPolicy.Connector.Account.DoNotSave == nil {
						r.DeprovisionerPolicy.Connector.Account.DoNotSave = nil
					} else {
						r.DeprovisionerPolicy.Connector.Account.DoNotSave = &tfTypes.DoNotSave{}
					}
					if resp.DeprovisionerPolicy.Connector.Account.SaveToVault == nil {
						r.DeprovisionerPolicy.Connector.Account.SaveToVault = nil
					} else {
						r.DeprovisionerPolicy.Connector.Account.SaveToVault = &tfTypes.SaveToVault{}
						if resp.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds != nil {
							if r.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds == nil {
								r.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds = make([]types.String, 0, len(resp.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds))
							}
							for _, v := range resp.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds {
								r.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds = append(r.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds, types.StringValue(v))
							}
						}
					}
					r.DeprovisionerPolicy.Connector.Account.SchemaID = types.StringPointerValue(resp.DeprovisionerPolicy.Connector.Account.SchemaID)
				}
				if resp.DeprovisionerPolicy.Connector.DefaultBehavior == nil {
					r.DeprovisionerPolicy.Connector.DefaultBehavior = nil
				} else {
					r.DeprovisionerPolicy.Connector.DefaultBehavior = &tfTypes.DefaultBehavior{}
					r.DeprovisionerPolicy.Connector.DefaultBehavior.ConnectorID = types.StringPointerValue(resp.DeprovisionerPolicy.Connector.DefaultBehavior.ConnectorID)
				}
				if resp.DeprovisionerPolicy.Connector.DeleteAccount == nil {
					r.DeprovisionerPolicy.Connector.DeleteAccount = nil
				} else {
					r.DeprovisionerPolicy.Connector.DeleteAccount = &tfTypes.DeleteAccount{}
					r.DeprovisionerPolicy.Connector.DeleteAccount.ConnectorID = types.StringPointerValue(resp.DeprovisionerPolicy.Connector.DeleteAccount.ConnectorID)
				}
			}
			if resp.DeprovisionerPolicy.Delegated == nil {
				r.DeprovisionerPolicy.Delegated = nil
			} else {
				r.DeprovisionerPolicy.Delegated = &tfTypes.DelegatedProvision{}
				r.DeprovisionerPolicy.Delegated.AppID = types.StringPointerValue(resp.DeprovisionerPolicy.Delegated.AppID)
				r.DeprovisionerPolicy.Delegated.EntitlementID = types.StringPointerValue(resp.DeprovisionerPolicy.Delegated.EntitlementID)
			}
			if resp.DeprovisionerPolicy.ExternalTicket == nil {
				r.DeprovisionerPolicy.ExternalTicket = nil
			} else {
				r.DeprovisionerPolicy.ExternalTicket = &tfTypes.ExternalTicketProvision{}
				r.DeprovisionerPolicy.ExternalTicket.AppID = types.StringPointerValue(resp.DeprovisionerPolicy.ExternalTicket.AppID)
				r.DeprovisionerPolicy.ExternalTicket.ConnectorID = types.StringPointerValue(resp.DeprovisionerPolicy.ExternalTicket.ConnectorID)
				r.DeprovisionerPolicy.ExternalTicket.ExternalTicketProvisionerConfigID = types.StringPointerValue(resp.DeprovisionerPolicy.ExternalTicket.ExternalTicketProvisionerConfigID)
				r.DeprovisionerPolicy.ExternalTicket.Instructions = types.StringPointerValue(resp.DeprovisionerPolicy.ExternalTicket.Instructions)
			}
			if resp.DeprovisionerPolicy.Manual == nil {
				r.DeprovisionerPolicy.Manual = nil
			} else {
				r.DeprovisionerPolicy.Manual = &tfTypes.ManualProvision{}
				r.DeprovisionerPolicy.Manual.Instructions = types.StringPointerValue(resp.DeprovisionerPolicy.Manual.Instructions)
				if resp.DeprovisionerPolicy.Manual.UserIds != nil {
					if r.DeprovisionerPolicy.Manual.UserIds == nil {
						r.DeprovisionerPolicy.Manual.UserIds = make([]types.String, 0, len(resp.DeprovisionerPolicy.Manual.UserIds))
					}
					for _, v := range resp.DeprovisionerPolicy.Manual.UserIds {
						r.DeprovisionerPolicy.Manual.UserIds = append(r.DeprovisionerPolicy.Manual.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.DeprovisionerPolicy.MultiStep == nil {
				r.DeprovisionerPolicy.MultiStep = jsontypes.NewNormalizedNull()
			} else {
				multiStepResult, _ := json.Marshal(resp.DeprovisionerPolicy.MultiStep)
				r.DeprovisionerPolicy.MultiStep = jsontypes.NewNormalizedValue(string(multiStepResult))
			}
			if resp.DeprovisionerPolicy.Unconfigured == nil {
				r.DeprovisionerPolicy.Unconfigured = nil
			} else {
				r.DeprovisionerPolicy.Unconfigured = &tfTypes.UnconfiguredProvision{}
			}
			if resp.DeprovisionerPolicy.Webhook == nil {
				r.DeprovisionerPolicy.Webhook = nil
			} else {
				r.DeprovisionerPolicy.Webhook = &tfTypes.WebhookProvision{}
				r.DeprovisionerPolicy.Webhook.WebhookID = types.StringPointerValue(resp.DeprovisionerPolicy.Webhook.WebhookID)
			}
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.DurationGrant = types.StringPointerValue(resp.DurationGrant)
		if resp.DurationUnset == nil {
			r.DurationUnset = nil
		} else {
			r.DurationUnset = &tfTypes.AppEntitlementDurationUnset{}
		}
		r.EmergencyGrantEnabled = types.BoolPointerValue(resp.EmergencyGrantEnabled)
		r.EmergencyGrantPolicyID = types.StringPointerValue(resp.EmergencyGrantPolicyID)
		r.GrantCount = types.StringPointerValue(resp.GrantCount)
		r.GrantPolicyID = types.StringPointerValue(resp.GrantPolicyID)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsAutomationEnabled = types.BoolPointerValue(resp.IsAutomationEnabled)
		r.IsManuallyManaged = types.BoolPointerValue(resp.IsManuallyManaged)
		r.MatchBatonID = types.StringPointerValue(resp.MatchBatonID)
		r.OverrideAccessRequestsDefaults = types.BoolPointerValue(resp.OverrideAccessRequestsDefaults)
		if resp.ProvisionerPolicy == nil {
			r.ProvisionerPolicy = nil
		} else {
			r.ProvisionerPolicy = &tfTypes.ProvisionPolicy{}
			if resp.ProvisionerPolicy.Connector == nil {
				r.ProvisionerPolicy.Connector = nil
			} else {
				r.ProvisionerPolicy.Connector = &tfTypes.ConnectorProvision{}
				if resp.ProvisionerPolicy.Connector.Account == nil {
					r.ProvisionerPolicy.Connector.Account = nil
				} else {
					r.ProvisionerPolicy.Connector.Account = &tfTypes.AccountProvision{}
					if resp.ProvisionerPolicy.Connector.Account.Config == nil {
						r.ProvisionerPolicy.Connector.Account.Config = nil
					} else {
						r.ProvisionerPolicy.Connector.Account.Config = &tfTypes.Config{}
					}
					r.ProvisionerPolicy.Connector.Account.ConnectorID = types.StringPointerValue(resp.ProvisionerPolicy.Connector.Account.ConnectorID)
					if resp.ProvisionerPolicy.Connector.Account.DoNotSave == nil {
						r.ProvisionerPolicy.Connector.Account.DoNotSave = nil
					} else {
						r.ProvisionerPolicy.Connector.Account.DoNotSave = &tfTypes.DoNotSave{}
					}
					if resp.ProvisionerPolicy.Connector.Account.SaveToVault == nil {
						r.ProvisionerPolicy.Connector.Account.SaveToVault = nil
					} else {
						r.ProvisionerPolicy.Connector.Account.SaveToVault = &tfTypes.SaveToVault{}
						if resp.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds != nil {
							if r.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds == nil {
								r.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds = make([]types.String, 0, len(resp.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds))
							}
							for _, v := range resp.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds {
								r.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds = append(r.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds, types.StringValue(v))
							}
						}
					}
					r.ProvisionerPolicy.Connector.Account.SchemaID = types.StringPointerValue(resp.ProvisionerPolicy.Connector.Account.SchemaID)
				}
				if resp.ProvisionerPolicy.Connector.DefaultBehavior == nil {
					r.ProvisionerPolicy.Connector.DefaultBehavior = nil
				} else {
					r.ProvisionerPolicy.Connector.DefaultBehavior = &tfTypes.DefaultBehavior{}
					r.ProvisionerPolicy.Connector.DefaultBehavior.ConnectorID = types.StringPointerValue(resp.ProvisionerPolicy.Connector.DefaultBehavior.ConnectorID)
				}
				if resp.ProvisionerPolicy.Connector.DeleteAccount == nil {
					r.ProvisionerPolicy.Connector.DeleteAccount = nil
				} else {
					r.ProvisionerPolicy.Connector.DeleteAccount = &tfTypes.DeleteAccount{}
					r.ProvisionerPolicy.Connector.DeleteAccount.ConnectorID = types.StringPointerValue(resp.ProvisionerPolicy.Connector.DeleteAccount.ConnectorID)
				}
			}
			if resp.ProvisionerPolicy.Delegated == nil {
				r.ProvisionerPolicy.Delegated = nil
			} else {
				r.ProvisionerPolicy.Delegated = &tfTypes.DelegatedProvision{}
				r.ProvisionerPolicy.Delegated.AppID = types.StringPointerValue(resp.ProvisionerPolicy.Delegated.AppID)
				r.ProvisionerPolicy.Delegated.EntitlementID = types.StringPointerValue(resp.ProvisionerPolicy.Delegated.EntitlementID)
			}
			if resp.ProvisionerPolicy.ExternalTicket == nil {
				r.ProvisionerPolicy.ExternalTicket = nil
			} else {
				r.ProvisionerPolicy.ExternalTicket = &tfTypes.ExternalTicketProvision{}
				r.ProvisionerPolicy.ExternalTicket.AppID = types.StringPointerValue(resp.ProvisionerPolicy.ExternalTicket.AppID)
				r.ProvisionerPolicy.ExternalTicket.ConnectorID = types.StringPointerValue(resp.ProvisionerPolicy.ExternalTicket.ConnectorID)
				r.ProvisionerPolicy.ExternalTicket.ExternalTicketProvisionerConfigID = types.StringPointerValue(resp.ProvisionerPolicy.ExternalTicket.ExternalTicketProvisionerConfigID)
				r.ProvisionerPolicy.ExternalTicket.Instructions = types.StringPointerValue(resp.ProvisionerPolicy.ExternalTicket.Instructions)
			}
			if resp.ProvisionerPolicy.Manual == nil {
				r.ProvisionerPolicy.Manual = nil
			} else {
				r.ProvisionerPolicy.Manual = &tfTypes.ManualProvision{}
				r.ProvisionerPolicy.Manual.Instructions = types.StringPointerValue(resp.ProvisionerPolicy.Manual.Instructions)
				if resp.ProvisionerPolicy.Manual.UserIds != nil {
					if r.ProvisionerPolicy.Manual.UserIds == nil {
						r.ProvisionerPolicy.Manual.UserIds = make([]types.String, 0, len(resp.ProvisionerPolicy.Manual.UserIds))
					}
					for _, v := range resp.ProvisionerPolicy.Manual.UserIds {
						r.ProvisionerPolicy.Manual.UserIds = append(r.ProvisionerPolicy.Manual.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.ProvisionerPolicy.MultiStep == nil {
				r.ProvisionerPolicy.MultiStep = jsontypes.NewNormalizedNull()
			} else {
				multiStepResult1, _ := json.Marshal(resp.ProvisionerPolicy.MultiStep)
				r.ProvisionerPolicy.MultiStep = jsontypes.NewNormalizedValue(string(multiStepResult1))
			}
			if resp.ProvisionerPolicy.Unconfigured == nil {
				r.ProvisionerPolicy.Unconfigured = nil
			} else {
				r.ProvisionerPolicy.Unconfigured = &tfTypes.UnconfiguredProvision{}
			}
			if resp.ProvisionerPolicy.Webhook == nil {
				r.ProvisionerPolicy.Webhook = nil
			} else {
				r.ProvisionerPolicy.Webhook = &tfTypes.WebhookProvision{}
				r.ProvisionerPolicy.Webhook.WebhookID = types.StringPointerValue(resp.ProvisionerPolicy.Webhook.WebhookID)
			}
		}
		if resp.Purpose != nil {
			r.Purpose = types.StringValue(string(*resp.Purpose))
		} else {
			r.Purpose = types.StringNull()
		}
		r.RequestSchemaID = types.StringPointerValue(resp.RequestSchemaID)
		r.RevokePolicyID = types.StringPointerValue(resp.RevokePolicyID)
		r.RiskLevelValueID = types.StringPointerValue(resp.RiskLevelValueID)
		r.Slug = types.StringPointerValue(resp.Slug)
		if resp.SourceConnectorIds != nil {
			r.SourceConnectorIds = make(map[string]types.String, len(resp.SourceConnectorIds))
			for key, value := range resp.SourceConnectorIds {
				r.SourceConnectorIds[key] = types.StringValue(value)
			}
		}
		r.SystemBuiltin = types.BoolPointerValue(resp.SystemBuiltin)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *AppEntitlementDataSourceModel) ToSharedAppEntitlementSearchServiceSearchRequest(ctx context.Context) (*shared.AppEntitlementSearchServiceSearchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessReviewID := new(string)
	if !r.AccessReviewID.IsUnknown() && !r.AccessReviewID.IsNull() {
		*accessReviewID = r.AccessReviewID.ValueString()
	} else {
		accessReviewID = nil
	}
	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	var appIds []string
	if r.AppIds != nil {
		appIds = make([]string, 0, len(r.AppIds))
		for _, appIdsItem := range r.AppIds {
			appIds = append(appIds, appIdsItem.ValueString())
		}
	}
	var appUserIds []string
	if r.AppUserIds != nil {
		appUserIds = make([]string, 0, len(r.AppUserIds))
		for _, appUserIdsItem := range r.AppUserIds {
			appUserIds = append(appUserIds, appUserIdsItem.ValueString())
		}
	}
	var complianceFrameworkIds []string
	if r.ComplianceFrameworkIds != nil {
		complianceFrameworkIds = make([]string, 0, len(r.ComplianceFrameworkIds))
		for _, complianceFrameworkIdsItem := range r.ComplianceFrameworkIds {
			complianceFrameworkIds = append(complianceFrameworkIds, complianceFrameworkIdsItem.ValueString())
		}
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var excludeAppIds []string
	if r.ExcludeAppIds != nil {
		excludeAppIds = make([]string, 0, len(r.ExcludeAppIds))
		for _, excludeAppIdsItem := range r.ExcludeAppIds {
			excludeAppIds = append(excludeAppIds, excludeAppIdsItem.ValueString())
		}
	}
	var excludeAppUserIds []string
	if r.ExcludeAppUserIds != nil {
		excludeAppUserIds = make([]string, 0, len(r.ExcludeAppUserIds))
		for _, excludeAppUserIdsItem := range r.ExcludeAppUserIds {
			excludeAppUserIds = append(excludeAppUserIds, excludeAppUserIdsItem.ValueString())
		}
	}
	excludeImmutable := new(bool)
	if !r.ExcludeImmutable.IsUnknown() && !r.ExcludeImmutable.IsNull() {
		*excludeImmutable = r.ExcludeImmutable.ValueBool()
	} else {
		excludeImmutable = nil
	}
	var excludeResourceTypeIds []string
	if r.ExcludeResourceTypeIds != nil {
		excludeResourceTypeIds = make([]string, 0, len(r.ExcludeResourceTypeIds))
		for _, excludeResourceTypeIdsItem := range r.ExcludeResourceTypeIds {
			excludeResourceTypeIds = append(excludeResourceTypeIds, excludeResourceTypeIdsItem.ValueString())
		}
	}
	var excludedEntitlementRefs []shared.AppEntitlementRef
	if r.ExcludedEntitlementRefs != nil {
		excludedEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(r.ExcludedEntitlementRefs))
		for _, excludedEntitlementRefsItem := range r.ExcludedEntitlementRefs {
			appID := new(string)
			if !excludedEntitlementRefsItem.AppID.IsUnknown() && !excludedEntitlementRefsItem.AppID.IsNull() {
				*appID = excludedEntitlementRefsItem.AppID.ValueString()
			} else {
				appID = nil
			}
			id := new(string)
			if !excludedEntitlementRefsItem.ID.IsUnknown() && !excludedEntitlementRefsItem.ID.IsNull() {
				*id = excludedEntitlementRefsItem.ID.ValueString()
			} else {
				id = nil
			}
			excludedEntitlementRefs = append(excludedEntitlementRefs, shared.AppEntitlementRef{
				AppID: appID,
				ID:    id,
			})
		}
	}
	includeDeleted := new(bool)
	if !r.IncludeDeleted.IsUnknown() && !r.IncludeDeleted.IsNull() {
		*includeDeleted = r.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	isAutomated := new(bool)
	if !r.IsAutomated.IsUnknown() && !r.IsAutomated.IsNull() {
		*isAutomated = r.IsAutomated.ValueBool()
	} else {
		isAutomated = nil
	}
	var membershipType []shared.MembershipType
	if r.MembershipType != nil {
		membershipType = make([]shared.MembershipType, 0, len(r.MembershipType))
		for _, membershipTypeItem := range r.MembershipType {
			membershipType = append(membershipType, shared.MembershipType(membershipTypeItem.ValueString()))
		}
	}
	onlyGetExpiring := new(bool)
	if !r.OnlyGetExpiring.IsUnknown() && !r.OnlyGetExpiring.IsNull() {
		*onlyGetExpiring = r.OnlyGetExpiring.ValueBool()
	} else {
		onlyGetExpiring = nil
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	var policyRefs []shared.PolicyRef
	if r.PolicyRefs != nil {
		policyRefs = make([]shared.PolicyRef, 0, len(r.PolicyRefs))
		for _, policyRefsItem := range r.PolicyRefs {
			id1 := new(string)
			if !policyRefsItem.ID.IsUnknown() && !policyRefsItem.ID.IsNull() {
				*id1 = policyRefsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			policyRefs = append(policyRefs, shared.PolicyRef{
				ID: id1,
			})
		}
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var refs []shared.AppEntitlementRef
	if r.Refs != nil {
		refs = make([]shared.AppEntitlementRef, 0, len(r.Refs))
		for _, refsItem := range r.Refs {
			appId1 := new(string)
			if !refsItem.AppID.IsUnknown() && !refsItem.AppID.IsNull() {
				*appId1 = refsItem.AppID.ValueString()
			} else {
				appId1 = nil
			}
			id2 := new(string)
			if !refsItem.ID.IsUnknown() && !refsItem.ID.IsNull() {
				*id2 = refsItem.ID.ValueString()
			} else {
				id2 = nil
			}
			refs = append(refs, shared.AppEntitlementRef{
				AppID: appId1,
				ID:    id2,
			})
		}
	}
	var resourceIds []string
	if r.ResourceIds != nil {
		resourceIds = make([]string, 0, len(r.ResourceIds))
		for _, resourceIdsItem := range r.ResourceIds {
			resourceIds = append(resourceIds, resourceIdsItem.ValueString())
		}
	}
	var resourceTraitIds []string
	if r.ResourceTraitIds != nil {
		resourceTraitIds = make([]string, 0, len(r.ResourceTraitIds))
		for _, resourceTraitIdsItem := range r.ResourceTraitIds {
			resourceTraitIds = append(resourceTraitIds, resourceTraitIdsItem.ValueString())
		}
	}
	var resourceTypeIds []string
	if r.ResourceTypeIds != nil {
		resourceTypeIds = make([]string, 0, len(r.ResourceTypeIds))
		for _, resourceTypeIdsItem := range r.ResourceTypeIds {
			resourceTypeIds = append(resourceTypeIds, resourceTypeIdsItem.ValueString())
		}
	}
	var riskLevelIds []string
	if r.RiskLevelIds != nil {
		riskLevelIds = make([]string, 0, len(r.RiskLevelIds))
		for _, riskLevelIdsItem := range r.RiskLevelIds {
			riskLevelIds = append(riskLevelIds, riskLevelIdsItem.ValueString())
		}
	}
	sourceConnectorID := new(string)
	if !r.SourceConnectorID.IsUnknown() && !r.SourceConnectorID.IsNull() {
		*sourceConnectorID = r.SourceConnectorID.ValueString()
	} else {
		sourceConnectorID = nil
	}
	out := shared.AppEntitlementSearchServiceSearchRequest{
		AccessReviewID:          accessReviewID,
		Alias:                   alias,
		AppIds:                  appIds,
		AppUserIds:              appUserIds,
		ComplianceFrameworkIds:  complianceFrameworkIds,
		DisplayName:             displayName,
		ExcludeAppIds:           excludeAppIds,
		ExcludeAppUserIds:       excludeAppUserIds,
		ExcludeImmutable:        excludeImmutable,
		ExcludeResourceTypeIds:  excludeResourceTypeIds,
		ExcludedEntitlementRefs: excludedEntitlementRefs,
		IncludeDeleted:          includeDeleted,
		IsAutomated:             isAutomated,
		MembershipType:          membershipType,
		OnlyGetExpiring:         onlyGetExpiring,
		PageSize:                pageSize,
		PolicyRefs:              policyRefs,
		Query:                   query,
		Refs:                    refs,
		ResourceIds:             resourceIds,
		ResourceTraitIds:        resourceTraitIds,
		ResourceTypeIds:         resourceTypeIds,
		RiskLevelIds:            riskLevelIds,
		SourceConnectorID:       sourceConnectorID,
	}

	return &out, diags
}
