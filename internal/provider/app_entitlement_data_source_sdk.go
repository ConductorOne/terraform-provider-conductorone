// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppEntitlementDataSourceModel) ToSharedAppEntitlementSearchServiceSearchRequest() *shared.AppEntitlementSearchServiceSearchRequest {
	accessReviewID := new(string)
	if !r.AccessReviewID.IsUnknown() && !r.AccessReviewID.IsNull() {
		*accessReviewID = r.AccessReviewID.ValueString()
	} else {
		accessReviewID = nil
	}
	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	var appIds []string = []string{}
	for _, appIdsItem := range r.AppIds {
		appIds = append(appIds, appIdsItem.ValueString())
	}
	var appUserIds []string = []string{}
	for _, appUserIdsItem := range r.AppUserIds {
		appUserIds = append(appUserIds, appUserIdsItem.ValueString())
	}
	var complianceFrameworkIds []string = []string{}
	for _, complianceFrameworkIdsItem := range r.ComplianceFrameworkIds {
		complianceFrameworkIds = append(complianceFrameworkIds, complianceFrameworkIdsItem.ValueString())
	}
	var excludeAppIds []string = []string{}
	for _, excludeAppIdsItem := range r.ExcludeAppIds {
		excludeAppIds = append(excludeAppIds, excludeAppIdsItem.ValueString())
	}
	var excludeAppUserIds []string = []string{}
	for _, excludeAppUserIdsItem := range r.ExcludeAppUserIds {
		excludeAppUserIds = append(excludeAppUserIds, excludeAppUserIdsItem.ValueString())
	}
	var excludeResourceTypeIds []string = []string{}
	for _, excludeResourceTypeIdsItem := range r.ExcludeResourceTypeIds {
		excludeResourceTypeIds = append(excludeResourceTypeIds, excludeResourceTypeIdsItem.ValueString())
	}
	includeDeleted := new(bool)
	if !r.IncludeDeleted.IsUnknown() && !r.IncludeDeleted.IsNull() {
		*includeDeleted = r.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	isAutomated := new(bool)
	if !r.IsAutomated.IsUnknown() && !r.IsAutomated.IsNull() {
		*isAutomated = r.IsAutomated.ValueBool()
	} else {
		isAutomated = nil
	}
	var membershipType []shared.MembershipType = []shared.MembershipType{}
	for _, membershipTypeItem := range r.MembershipType {
		membershipType = append(membershipType, shared.MembershipType(membershipTypeItem.ValueString()))
	}
	onlyGetExpiring := new(bool)
	if !r.OnlyGetExpiring.IsUnknown() && !r.OnlyGetExpiring.IsNull() {
		*onlyGetExpiring = r.OnlyGetExpiring.ValueBool()
	} else {
		onlyGetExpiring = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var refs []shared.AppEntitlementRef = []shared.AppEntitlementRef{}
	for _, refsItem := range r.Refs {
		appID := new(string)
		if !refsItem.AppID.IsUnknown() && !refsItem.AppID.IsNull() {
			*appID = refsItem.AppID.ValueString()
		} else {
			appID = nil
		}
		id := new(string)
		if !refsItem.ID.IsUnknown() && !refsItem.ID.IsNull() {
			*id = refsItem.ID.ValueString()
		} else {
			id = nil
		}
		refs = append(refs, shared.AppEntitlementRef{
			AppID: appID,
			ID:    id,
		})
	}
	var resourceIds []string = []string{}
	for _, resourceIdsItem := range r.ResourceIds {
		resourceIds = append(resourceIds, resourceIdsItem.ValueString())
	}
	var resourceTraitIds []string = []string{}
	for _, resourceTraitIdsItem := range r.ResourceTraitIds {
		resourceTraitIds = append(resourceTraitIds, resourceTraitIdsItem.ValueString())
	}
	var resourceTypeIds []string = []string{}
	for _, resourceTypeIdsItem := range r.ResourceTypeIds {
		resourceTypeIds = append(resourceTypeIds, resourceTypeIdsItem.ValueString())
	}
	var riskLevelIds []string = []string{}
	for _, riskLevelIdsItem := range r.RiskLevelIds {
		riskLevelIds = append(riskLevelIds, riskLevelIdsItem.ValueString())
	}
	sourceConnectorID := new(string)
	if !r.SourceConnectorID.IsUnknown() && !r.SourceConnectorID.IsNull() {
		*sourceConnectorID = r.SourceConnectorID.ValueString()
	} else {
		sourceConnectorID = nil
	}
	out := shared.AppEntitlementSearchServiceSearchRequest{
		AccessReviewID:         accessReviewID,
		Alias:                  alias,
		AppIds:                 appIds,
		AppUserIds:             appUserIds,
		ComplianceFrameworkIds: complianceFrameworkIds,
		ExcludeAppIds:          excludeAppIds,
		ExcludeAppUserIds:      excludeAppUserIds,
		ExcludeResourceTypeIds: excludeResourceTypeIds,
		IncludeDeleted:         includeDeleted,
		IsAutomated:            isAutomated,
		MembershipType:         membershipType,
		OnlyGetExpiring:        onlyGetExpiring,
		Query:                  query,
		Refs:                   refs,
		ResourceIds:            resourceIds,
		ResourceTraitIds:       resourceTraitIds,
		ResourceTypeIds:        resourceTypeIds,
		RiskLevelIds:           riskLevelIds,
		SourceConnectorID:      sourceConnectorID,
	}
	return &out
}

func (r *AppEntitlementDataSourceModel) RefreshFromSharedAppEntitlement(ctx context.Context, resp *shared.AppEntitlement) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Alias = types.StringPointerValue(resp.Alias)
		r.AppID = types.StringPointerValue(resp.AppID)
		r.AppResourceID = types.StringPointerValue(resp.AppResourceID)
		r.AppResourceTypeID = types.StringPointerValue(resp.AppResourceTypeID)
		r.CertifyPolicyID = types.StringPointerValue(resp.CertifyPolicyID)
		if resp.ComplianceFrameworkValueIds != nil {
			r.ComplianceFrameworkValueIds = make([]types.String, 0, len(resp.ComplianceFrameworkValueIds))
			for _, v := range resp.ComplianceFrameworkValueIds {
				r.ComplianceFrameworkValueIds = append(r.ComplianceFrameworkValueIds, types.StringValue(v))
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DefaultValuesApplied = types.BoolPointerValue(resp.DefaultValuesApplied)
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.DurationGrant = types.StringPointerValue(resp.DurationGrant)
		if resp.DurationUnset == nil {
			r.DurationUnset = nil
		} else {
			r.DurationUnset = &tfTypes.AppEntitlementDurationUnset{}
		}
		r.EmergencyGrantEnabled = types.BoolPointerValue(resp.EmergencyGrantEnabled)
		r.EmergencyGrantPolicyID = types.StringPointerValue(resp.EmergencyGrantPolicyID)
		r.GrantCount = types.StringPointerValue(resp.GrantCount)
		r.GrantPolicyID = types.StringPointerValue(resp.GrantPolicyID)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsAutomationEnabled = types.BoolPointerValue(resp.IsAutomationEnabled)
		r.IsManuallyManaged = types.BoolPointerValue(resp.IsManuallyManaged)
		r.OverrideAccessRequestsDefaults = types.BoolPointerValue(resp.OverrideAccessRequestsDefaults)
		if resp.ProvisionPolicy == nil {
			r.ProvisionPolicy = nil
		} else {
			r.ProvisionPolicy = &tfTypes.ProvisionPolicy{}
			if resp.ProvisionPolicy.ConnectorProvision == nil {
				r.ProvisionPolicy.ConnectorProvision = nil
			} else {
				r.ProvisionPolicy.ConnectorProvision = &tfTypes.ConnectorProvision{}
				if resp.ProvisionPolicy.ConnectorProvision.AccountProvision == nil {
					r.ProvisionPolicy.ConnectorProvision.AccountProvision = nil
				} else {
					r.ProvisionPolicy.ConnectorProvision.AccountProvision = &tfTypes.AccountProvision{}
					if resp.ProvisionPolicy.ConnectorProvision.AccountProvision.Config == nil {
						r.ProvisionPolicy.ConnectorProvision.AccountProvision.Config = nil
					} else {
						r.ProvisionPolicy.ConnectorProvision.AccountProvision.Config = &tfTypes.AccountProvisionConfig{}
					}
					r.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID)
					r.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID = types.StringPointerValue(resp.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID)
				}
				if resp.ProvisionPolicy.ConnectorProvision.DefaultBehavior == nil {
					r.ProvisionPolicy.ConnectorProvision.DefaultBehavior = nil
				} else {
					r.ProvisionPolicy.ConnectorProvision.DefaultBehavior = &tfTypes.DefaultBehavior{}
					r.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID)
				}
			}
			if resp.ProvisionPolicy.DelegatedProvision == nil {
				r.ProvisionPolicy.DelegatedProvision = nil
			} else {
				r.ProvisionPolicy.DelegatedProvision = &tfTypes.DelegatedProvision{}
				r.ProvisionPolicy.DelegatedProvision.AppID = types.StringPointerValue(resp.ProvisionPolicy.DelegatedProvision.AppID)
				r.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringPointerValue(resp.ProvisionPolicy.DelegatedProvision.EntitlementID)
			}
			if resp.ProvisionPolicy.ExternalTicketProvision == nil {
				r.ProvisionPolicy.ExternalTicketProvision = nil
			} else {
				r.ProvisionPolicy.ExternalTicketProvision = &tfTypes.ExternalTicketProvision{}
				r.ProvisionPolicy.ExternalTicketProvision.AppID = types.StringPointerValue(resp.ProvisionPolicy.ExternalTicketProvision.AppID)
				r.ProvisionPolicy.ExternalTicketProvision.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy.ExternalTicketProvision.ConnectorID)
				r.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID = types.StringPointerValue(resp.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID)
				r.ProvisionPolicy.ExternalTicketProvision.Instructions = types.StringPointerValue(resp.ProvisionPolicy.ExternalTicketProvision.Instructions)
			}
			if resp.ProvisionPolicy.ManualProvision == nil {
				r.ProvisionPolicy.ManualProvision = nil
			} else {
				r.ProvisionPolicy.ManualProvision = &tfTypes.ManualProvision{}
				r.ProvisionPolicy.ManualProvision.Instructions = types.StringPointerValue(resp.ProvisionPolicy.ManualProvision.Instructions)
				if resp.ProvisionPolicy.ManualProvision.UserIds != nil {
					r.ProvisionPolicy.ManualProvision.UserIds = make([]types.String, 0, len(resp.ProvisionPolicy.ManualProvision.UserIds))
					for _, v := range resp.ProvisionPolicy.ManualProvision.UserIds {
						r.ProvisionPolicy.ManualProvision.UserIds = append(r.ProvisionPolicy.ManualProvision.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.ProvisionPolicy.MultiStep == nil {
				r.ProvisionPolicy.MultiStep = types.StringNull()
			} else {
				multiStepResult, _ := json.Marshal(resp.ProvisionPolicy.MultiStep)
				r.ProvisionPolicy.MultiStep = types.StringValue(string(multiStepResult))
			}
			if resp.ProvisionPolicy.WebhookProvision == nil {
				r.ProvisionPolicy.WebhookProvision = nil
			} else {
				r.ProvisionPolicy.WebhookProvision = &tfTypes.WebhookProvision{}
				r.ProvisionPolicy.WebhookProvision.WebhookID = types.StringPointerValue(resp.ProvisionPolicy.WebhookProvision.WebhookID)
			}
		}
		if resp.ProvisionPolicy1 == nil {
			r.ProvisionPolicy1 = nil
		} else {
			r.ProvisionPolicy1 = &tfTypes.ProvisionPolicy{}
			if resp.ProvisionPolicy1.ConnectorProvision == nil {
				r.ProvisionPolicy1.ConnectorProvision = nil
			} else {
				r.ProvisionPolicy1.ConnectorProvision = &tfTypes.ConnectorProvision{}
				if resp.ProvisionPolicy1.ConnectorProvision.AccountProvision == nil {
					r.ProvisionPolicy1.ConnectorProvision.AccountProvision = nil
				} else {
					r.ProvisionPolicy1.ConnectorProvision.AccountProvision = &tfTypes.AccountProvision{}
					if resp.ProvisionPolicy1.ConnectorProvision.AccountProvision.Config == nil {
						r.ProvisionPolicy1.ConnectorProvision.AccountProvision.Config = nil
					} else {
						r.ProvisionPolicy1.ConnectorProvision.AccountProvision.Config = &tfTypes.AccountProvisionConfig{}
					}
					r.ProvisionPolicy1.ConnectorProvision.AccountProvision.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy1.ConnectorProvision.AccountProvision.ConnectorID)
					r.ProvisionPolicy1.ConnectorProvision.AccountProvision.SchemaID = types.StringPointerValue(resp.ProvisionPolicy1.ConnectorProvision.AccountProvision.SchemaID)
				}
				if resp.ProvisionPolicy1.ConnectorProvision.DefaultBehavior == nil {
					r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior = nil
				} else {
					r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior = &tfTypes.DefaultBehavior{}
					r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy1.ConnectorProvision.DefaultBehavior.ConnectorID)
				}
			}
			if resp.ProvisionPolicy1.DelegatedProvision == nil {
				r.ProvisionPolicy1.DelegatedProvision = nil
			} else {
				r.ProvisionPolicy1.DelegatedProvision = &tfTypes.DelegatedProvision{}
				r.ProvisionPolicy1.DelegatedProvision.AppID = types.StringPointerValue(resp.ProvisionPolicy1.DelegatedProvision.AppID)
				r.ProvisionPolicy1.DelegatedProvision.EntitlementID = types.StringPointerValue(resp.ProvisionPolicy1.DelegatedProvision.EntitlementID)
			}
			if resp.ProvisionPolicy1.ExternalTicketProvision == nil {
				r.ProvisionPolicy1.ExternalTicketProvision = nil
			} else {
				r.ProvisionPolicy1.ExternalTicketProvision = &tfTypes.ExternalTicketProvision{}
				r.ProvisionPolicy1.ExternalTicketProvision.AppID = types.StringPointerValue(resp.ProvisionPolicy1.ExternalTicketProvision.AppID)
				r.ProvisionPolicy1.ExternalTicketProvision.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy1.ExternalTicketProvision.ConnectorID)
				r.ProvisionPolicy1.ExternalTicketProvision.ExternalTicketProvisionerConfigID = types.StringPointerValue(resp.ProvisionPolicy1.ExternalTicketProvision.ExternalTicketProvisionerConfigID)
				r.ProvisionPolicy1.ExternalTicketProvision.Instructions = types.StringPointerValue(resp.ProvisionPolicy1.ExternalTicketProvision.Instructions)
			}
			if resp.ProvisionPolicy1.ManualProvision == nil {
				r.ProvisionPolicy1.ManualProvision = nil
			} else {
				r.ProvisionPolicy1.ManualProvision = &tfTypes.ManualProvision{}
				r.ProvisionPolicy1.ManualProvision.Instructions = types.StringPointerValue(resp.ProvisionPolicy1.ManualProvision.Instructions)
				if resp.ProvisionPolicy1.ManualProvision.UserIds != nil {
					r.ProvisionPolicy1.ManualProvision.UserIds = make([]types.String, 0, len(resp.ProvisionPolicy1.ManualProvision.UserIds))
					for _, v := range resp.ProvisionPolicy1.ManualProvision.UserIds {
						r.ProvisionPolicy1.ManualProvision.UserIds = append(r.ProvisionPolicy1.ManualProvision.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.ProvisionPolicy1.MultiStep == nil {
				r.ProvisionPolicy1.MultiStep = types.StringNull()
			} else {
				multiStepResult1, _ := json.Marshal(resp.ProvisionPolicy1.MultiStep)
				r.ProvisionPolicy1.MultiStep = types.StringValue(string(multiStepResult1))
			}
			if resp.ProvisionPolicy1.WebhookProvision == nil {
				r.ProvisionPolicy1.WebhookProvision = nil
			} else {
				r.ProvisionPolicy1.WebhookProvision = &tfTypes.WebhookProvision{}
				r.ProvisionPolicy1.WebhookProvision.WebhookID = types.StringPointerValue(resp.ProvisionPolicy1.WebhookProvision.WebhookID)
			}
		}
		if resp.Purpose != nil {
			r.Purpose = types.StringValue(string(*resp.Purpose))
		} else {
			r.Purpose = types.StringNull()
		}
		r.RevokePolicyID = types.StringPointerValue(resp.RevokePolicyID)
		r.RiskLevelValueID = types.StringPointerValue(resp.RiskLevelValueID)
		r.Slug = types.StringPointerValue(resp.Slug)
		if len(resp.SourceConnectorIds) > 0 {
			r.SourceConnectorIds = make(map[string]types.String, len(resp.SourceConnectorIds))
			for key, value := range resp.SourceConnectorIds {
				r.SourceConnectorIds[key] = types.StringValue(value)
			}
		}
		r.SystemBuiltin = types.BoolPointerValue(resp.SystemBuiltin)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
