// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *CustomAppEntitlementResourceModel) ToSharedCreateAppEntitlementRequest() *shared.CreateAppEntitlementRequest {
	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	appResourceID := new(string)
	if !r.AppResourceID.IsUnknown() && !r.AppResourceID.IsNull() {
		*appResourceID = r.AppResourceID.ValueString()
	} else {
		appResourceID = nil
	}
	appResourceTypeID := new(string)
	if !r.AppResourceTypeID.IsUnknown() && !r.AppResourceTypeID.IsNull() {
		*appResourceTypeID = r.AppResourceTypeID.ValueString()
	} else {
		appResourceTypeID = nil
	}
	certifyPolicyID := new(string)
	if !r.CertifyPolicyID.IsUnknown() && !r.CertifyPolicyID.IsNull() {
		*certifyPolicyID = r.CertifyPolicyID.ValueString()
	} else {
		certifyPolicyID = nil
	}
	var complianceFrameworkValueIds []string = []string{}
	for _, complianceFrameworkValueIdsItem := range r.ComplianceFrameworkValueIds {
		complianceFrameworkValueIds = append(complianceFrameworkValueIds, complianceFrameworkValueIdsItem.ValueString())
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var displayName string
	displayName = r.DisplayName.ValueString()

	durationGrant := new(string)
	if !r.DurationGrant.IsUnknown() && !r.DurationGrant.IsNull() {
		*durationGrant = r.DurationGrant.ValueString()
	} else {
		durationGrant = nil
	}
	var durationUnset *shared.CreateAppEntitlementRequestDurationUnset
	if r.DurationUnset != nil {
		durationUnset = &shared.CreateAppEntitlementRequestDurationUnset{}
	}
	emergencyGrantEnabled := new(bool)
	if !r.EmergencyGrantEnabled.IsUnknown() && !r.EmergencyGrantEnabled.IsNull() {
		*emergencyGrantEnabled = r.EmergencyGrantEnabled.ValueBool()
	} else {
		emergencyGrantEnabled = nil
	}
	emergencyGrantPolicyID := new(string)
	if !r.EmergencyGrantPolicyID.IsUnknown() && !r.EmergencyGrantPolicyID.IsNull() {
		*emergencyGrantPolicyID = r.EmergencyGrantPolicyID.ValueString()
	} else {
		emergencyGrantPolicyID = nil
	}
	grantPolicyID := new(string)
	if !r.GrantPolicyID.IsUnknown() && !r.GrantPolicyID.IsNull() {
		*grantPolicyID = r.GrantPolicyID.ValueString()
	} else {
		grantPolicyID = nil
	}
	overrideAccessRequestsDefaults := new(bool)
	if !r.OverrideAccessRequestsDefaults.IsUnknown() && !r.OverrideAccessRequestsDefaults.IsNull() {
		*overrideAccessRequestsDefaults = r.OverrideAccessRequestsDefaults.ValueBool()
	} else {
		overrideAccessRequestsDefaults = nil
	}
	var provisionPolicy *shared.ProvisionPolicy
	if r.ProvisionPolicy != nil {
		var connectorProvision *shared.ConnectorProvision
		if r.ProvisionPolicy.ConnectorProvision != nil {
			var accountProvision *shared.AccountProvision
			if r.ProvisionPolicy.ConnectorProvision.AccountProvision != nil {
				var config *shared.AccountProvisionConfig
				if r.ProvisionPolicy.ConnectorProvision.AccountProvision.Config != nil {
					config = &shared.AccountProvisionConfig{}
				}
				connectorID := new(string)
				if !r.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID.IsUnknown() && !r.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID.IsNull() {
					*connectorID = r.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID.ValueString()
				} else {
					connectorID = nil
				}
				schemaID := new(string)
				if !r.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID.IsUnknown() && !r.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID.IsNull() {
					*schemaID = r.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID.ValueString()
				} else {
					schemaID = nil
				}
				accountProvision = &shared.AccountProvision{
					Config:      config,
					ConnectorID: connectorID,
					SchemaID:    schemaID,
				}
			}
			var defaultBehavior *shared.DefaultBehavior
			if r.ProvisionPolicy.ConnectorProvision.DefaultBehavior != nil {
				connectorId1 := new(string)
				if !r.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID.IsUnknown() && !r.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID.IsNull() {
					*connectorId1 = r.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID.ValueString()
				} else {
					connectorId1 = nil
				}
				defaultBehavior = &shared.DefaultBehavior{
					ConnectorID: connectorId1,
				}
			}
			connectorProvision = &shared.ConnectorProvision{
				AccountProvision: accountProvision,
				DefaultBehavior:  defaultBehavior,
			}
		}
		var delegatedProvision *shared.DelegatedProvision
		if r.ProvisionPolicy.DelegatedProvision != nil {
			appID := new(string)
			if !r.ProvisionPolicy.DelegatedProvision.AppID.IsUnknown() && !r.ProvisionPolicy.DelegatedProvision.AppID.IsNull() {
				*appID = r.ProvisionPolicy.DelegatedProvision.AppID.ValueString()
			} else {
				appID = nil
			}
			entitlementID := new(string)
			if !r.ProvisionPolicy.DelegatedProvision.EntitlementID.IsUnknown() && !r.ProvisionPolicy.DelegatedProvision.EntitlementID.IsNull() {
				*entitlementID = r.ProvisionPolicy.DelegatedProvision.EntitlementID.ValueString()
			} else {
				entitlementID = nil
			}
			delegatedProvision = &shared.DelegatedProvision{
				AppID:         appID,
				EntitlementID: entitlementID,
			}
		}
		var externalTicketProvision *shared.ExternalTicketProvision
		if r.ProvisionPolicy.ExternalTicketProvision != nil {
			appId1 := new(string)
			if !r.ProvisionPolicy.ExternalTicketProvision.AppID.IsUnknown() && !r.ProvisionPolicy.ExternalTicketProvision.AppID.IsNull() {
				*appId1 = r.ProvisionPolicy.ExternalTicketProvision.AppID.ValueString()
			} else {
				appId1 = nil
			}
			connectorId2 := new(string)
			if !r.ProvisionPolicy.ExternalTicketProvision.ConnectorID.IsUnknown() && !r.ProvisionPolicy.ExternalTicketProvision.ConnectorID.IsNull() {
				*connectorId2 = r.ProvisionPolicy.ExternalTicketProvision.ConnectorID.ValueString()
			} else {
				connectorId2 = nil
			}
			externalTicketProvisionerConfigID := new(string)
			if !r.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID.IsUnknown() && !r.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID.IsNull() {
				*externalTicketProvisionerConfigID = r.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID.ValueString()
			} else {
				externalTicketProvisionerConfigID = nil
			}
			instructions := new(string)
			if !r.ProvisionPolicy.ExternalTicketProvision.Instructions.IsUnknown() && !r.ProvisionPolicy.ExternalTicketProvision.Instructions.IsNull() {
				*instructions = r.ProvisionPolicy.ExternalTicketProvision.Instructions.ValueString()
			} else {
				instructions = nil
			}
			externalTicketProvision = &shared.ExternalTicketProvision{
				AppID:                             appId1,
				ConnectorID:                       connectorId2,
				ExternalTicketProvisionerConfigID: externalTicketProvisionerConfigID,
				Instructions:                      instructions,
			}
		}
		var manualProvision *shared.ManualProvision
		if r.ProvisionPolicy.ManualProvision != nil {
			instructions1 := new(string)
			if !r.ProvisionPolicy.ManualProvision.Instructions.IsUnknown() && !r.ProvisionPolicy.ManualProvision.Instructions.IsNull() {
				*instructions1 = r.ProvisionPolicy.ManualProvision.Instructions.ValueString()
			} else {
				instructions1 = nil
			}
			var userIds []string = []string{}
			for _, userIdsItem := range r.ProvisionPolicy.ManualProvision.UserIds {
				userIds = append(userIds, userIdsItem.ValueString())
			}
			manualProvision = &shared.ManualProvision{
				Instructions: instructions1,
				UserIds:      userIds,
			}
		}
		var multiStep interface{}
		if !r.ProvisionPolicy.MultiStep.IsUnknown() && !r.ProvisionPolicy.MultiStep.IsNull() {
			_ = json.Unmarshal([]byte(r.ProvisionPolicy.MultiStep.ValueString()), &multiStep)
		}
		var webhookProvision *shared.WebhookProvision
		if r.ProvisionPolicy.WebhookProvision != nil {
			webhookID := new(string)
			if !r.ProvisionPolicy.WebhookProvision.WebhookID.IsUnknown() && !r.ProvisionPolicy.WebhookProvision.WebhookID.IsNull() {
				*webhookID = r.ProvisionPolicy.WebhookProvision.WebhookID.ValueString()
			} else {
				webhookID = nil
			}
			webhookProvision = &shared.WebhookProvision{
				WebhookID: webhookID,
			}
		}
		provisionPolicy = &shared.ProvisionPolicy{
			ConnectorProvision:      connectorProvision,
			DelegatedProvision:      delegatedProvision,
			ExternalTicketProvision: externalTicketProvision,
			ManualProvision:         manualProvision,
			MultiStep:               multiStep,
			WebhookProvision:        webhookProvision,
		}
	}
	purpose := new(shared.CreateAppEntitlementRequestPurpose)
	if !r.Purpose.IsUnknown() && !r.Purpose.IsNull() {
		*purpose = shared.CreateAppEntitlementRequestPurpose(r.Purpose.ValueString())
	} else {
		purpose = nil
	}
	revokePolicyID := new(string)
	if !r.RevokePolicyID.IsUnknown() && !r.RevokePolicyID.IsNull() {
		*revokePolicyID = r.RevokePolicyID.ValueString()
	} else {
		revokePolicyID = nil
	}
	riskLevelValueID := new(string)
	if !r.RiskLevelValueID.IsUnknown() && !r.RiskLevelValueID.IsNull() {
		*riskLevelValueID = r.RiskLevelValueID.ValueString()
	} else {
		riskLevelValueID = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	out := shared.CreateAppEntitlementRequest{
		Alias:                          alias,
		AppResourceID:                  appResourceID,
		AppResourceTypeID:              appResourceTypeID,
		CertifyPolicyID:                certifyPolicyID,
		ComplianceFrameworkValueIds:    complianceFrameworkValueIds,
		Description:                    description,
		DisplayName:                    displayName,
		DurationGrant:                  durationGrant,
		DurationUnset:                  durationUnset,
		EmergencyGrantEnabled:          emergencyGrantEnabled,
		EmergencyGrantPolicyID:         emergencyGrantPolicyID,
		GrantPolicyID:                  grantPolicyID,
		OverrideAccessRequestsDefaults: overrideAccessRequestsDefaults,
		ProvisionPolicy:                provisionPolicy,
		Purpose:                        purpose,
		RevokePolicyID:                 revokePolicyID,
		RiskLevelValueID:               riskLevelValueID,
		Slug:                           slug,
	}
	return &out
}

func (r *CustomAppEntitlementResourceModel) RefreshFromSharedAppEntitlement(ctx context.Context, resp *shared.AppEntitlement) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Alias = types.StringPointerValue(resp.Alias)
		r.AppID = types.StringPointerValue(resp.AppID)
		r.AppResourceID = types.StringPointerValue(resp.AppResourceID)
		r.AppResourceTypeID = types.StringPointerValue(resp.AppResourceTypeID)
		r.CertifyPolicyID = types.StringPointerValue(resp.CertifyPolicyID)
		if resp.ComplianceFrameworkValueIds != nil {
			r.ComplianceFrameworkValueIds = make([]types.String, 0, len(resp.ComplianceFrameworkValueIds))
			for _, v := range resp.ComplianceFrameworkValueIds {
				r.ComplianceFrameworkValueIds = append(r.ComplianceFrameworkValueIds, types.StringValue(v))
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DefaultValuesApplied = types.BoolPointerValue(resp.DefaultValuesApplied)
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.DurationGrant = types.StringPointerValue(resp.DurationGrant)
		if resp.DurationUnset == nil {
			r.DurationUnset = nil
		} else {
			r.DurationUnset = &tfTypes.CreateAppEntitlementRequestDurationUnset{}
		}
		r.EmergencyGrantEnabled = types.BoolPointerValue(resp.EmergencyGrantEnabled)
		r.EmergencyGrantPolicyID = types.StringPointerValue(resp.EmergencyGrantPolicyID)
		r.GrantCount = types.StringPointerValue(resp.GrantCount)
		r.GrantPolicyID = types.StringPointerValue(resp.GrantPolicyID)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsAutomationEnabled = types.BoolPointerValue(resp.IsAutomationEnabled)
		r.IsManuallyManaged = types.BoolPointerValue(resp.IsManuallyManaged)
		r.OverrideAccessRequestsDefaults = types.BoolPointerValue(resp.OverrideAccessRequestsDefaults)
		if resp.ProvisionPolicy == nil {
			r.ProvisionPolicy = nil
		} else {
			r.ProvisionPolicy = &tfTypes.ProvisionPolicy{}
			if resp.ProvisionPolicy.ConnectorProvision == nil {
				r.ProvisionPolicy.ConnectorProvision = nil
			} else {
				r.ProvisionPolicy.ConnectorProvision = &tfTypes.ConnectorProvision{}
				if resp.ProvisionPolicy.ConnectorProvision.AccountProvision == nil {
					r.ProvisionPolicy.ConnectorProvision.AccountProvision = nil
				} else {
					r.ProvisionPolicy.ConnectorProvision.AccountProvision = &tfTypes.AccountProvision{}
					if resp.ProvisionPolicy.ConnectorProvision.AccountProvision.Config == nil {
						r.ProvisionPolicy.ConnectorProvision.AccountProvision.Config = nil
					} else {
						r.ProvisionPolicy.ConnectorProvision.AccountProvision.Config = &tfTypes.AccountProvisionConfig{}
					}
					r.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID)
					r.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID = types.StringPointerValue(resp.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID)
				}
				if resp.ProvisionPolicy.ConnectorProvision.DefaultBehavior == nil {
					r.ProvisionPolicy.ConnectorProvision.DefaultBehavior = nil
				} else {
					r.ProvisionPolicy.ConnectorProvision.DefaultBehavior = &tfTypes.DefaultBehavior{}
					r.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID)
				}
			}
			if resp.ProvisionPolicy.DelegatedProvision == nil {
				r.ProvisionPolicy.DelegatedProvision = nil
			} else {
				r.ProvisionPolicy.DelegatedProvision = &tfTypes.DelegatedProvision{}
				r.ProvisionPolicy.DelegatedProvision.AppID = types.StringPointerValue(resp.ProvisionPolicy.DelegatedProvision.AppID)
				r.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringPointerValue(resp.ProvisionPolicy.DelegatedProvision.EntitlementID)
			}
			if resp.ProvisionPolicy.ExternalTicketProvision == nil {
				r.ProvisionPolicy.ExternalTicketProvision = nil
			} else {
				r.ProvisionPolicy.ExternalTicketProvision = &tfTypes.ExternalTicketProvision{}
				r.ProvisionPolicy.ExternalTicketProvision.AppID = types.StringPointerValue(resp.ProvisionPolicy.ExternalTicketProvision.AppID)
				r.ProvisionPolicy.ExternalTicketProvision.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy.ExternalTicketProvision.ConnectorID)
				r.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID = types.StringPointerValue(resp.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID)
				r.ProvisionPolicy.ExternalTicketProvision.Instructions = types.StringPointerValue(resp.ProvisionPolicy.ExternalTicketProvision.Instructions)
			}
			if resp.ProvisionPolicy.ManualProvision == nil {
				r.ProvisionPolicy.ManualProvision = nil
			} else {
				r.ProvisionPolicy.ManualProvision = &tfTypes.ManualProvision{}
				r.ProvisionPolicy.ManualProvision.Instructions = types.StringPointerValue(resp.ProvisionPolicy.ManualProvision.Instructions)
				if resp.ProvisionPolicy.ManualProvision.UserIds != nil {
					r.ProvisionPolicy.ManualProvision.UserIds = make([]types.String, 0, len(resp.ProvisionPolicy.ManualProvision.UserIds))
					for _, v := range resp.ProvisionPolicy.ManualProvision.UserIds {
						r.ProvisionPolicy.ManualProvision.UserIds = append(r.ProvisionPolicy.ManualProvision.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.ProvisionPolicy.MultiStep == nil {
				r.ProvisionPolicy.MultiStep = types.StringNull()
			} else {
				multiStepResult, _ := json.Marshal(resp.ProvisionPolicy.MultiStep)
				r.ProvisionPolicy.MultiStep = types.StringValue(string(multiStepResult))
			}
			if resp.ProvisionPolicy.WebhookProvision == nil {
				r.ProvisionPolicy.WebhookProvision = nil
			} else {
				r.ProvisionPolicy.WebhookProvision = &tfTypes.WebhookProvision{}
				r.ProvisionPolicy.WebhookProvision.WebhookID = types.StringPointerValue(resp.ProvisionPolicy.WebhookProvision.WebhookID)
			}
		}
		if resp.ProvisionPolicy1 == nil {
			r.ProvisionPolicy1 = nil
		} else {
			r.ProvisionPolicy1 = &tfTypes.ProvisionPolicy{}
			if resp.ProvisionPolicy1.ConnectorProvision == nil {
				r.ProvisionPolicy1.ConnectorProvision = nil
			} else {
				r.ProvisionPolicy1.ConnectorProvision = &tfTypes.ConnectorProvision{}
				if resp.ProvisionPolicy1.ConnectorProvision.AccountProvision == nil {
					r.ProvisionPolicy1.ConnectorProvision.AccountProvision = nil
				} else {
					r.ProvisionPolicy1.ConnectorProvision.AccountProvision = &tfTypes.AccountProvision{}
					if resp.ProvisionPolicy1.ConnectorProvision.AccountProvision.Config == nil {
						r.ProvisionPolicy1.ConnectorProvision.AccountProvision.Config = nil
					} else {
						r.ProvisionPolicy1.ConnectorProvision.AccountProvision.Config = &tfTypes.AccountProvisionConfig{}
					}
					r.ProvisionPolicy1.ConnectorProvision.AccountProvision.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy1.ConnectorProvision.AccountProvision.ConnectorID)
					r.ProvisionPolicy1.ConnectorProvision.AccountProvision.SchemaID = types.StringPointerValue(resp.ProvisionPolicy1.ConnectorProvision.AccountProvision.SchemaID)
				}
				if resp.ProvisionPolicy1.ConnectorProvision.DefaultBehavior == nil {
					r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior = nil
				} else {
					r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior = &tfTypes.DefaultBehavior{}
					r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy1.ConnectorProvision.DefaultBehavior.ConnectorID)
				}
			}
			if resp.ProvisionPolicy1.DelegatedProvision == nil {
				r.ProvisionPolicy1.DelegatedProvision = nil
			} else {
				r.ProvisionPolicy1.DelegatedProvision = &tfTypes.DelegatedProvision{}
				r.ProvisionPolicy1.DelegatedProvision.AppID = types.StringPointerValue(resp.ProvisionPolicy1.DelegatedProvision.AppID)
				r.ProvisionPolicy1.DelegatedProvision.EntitlementID = types.StringPointerValue(resp.ProvisionPolicy1.DelegatedProvision.EntitlementID)
			}
			if resp.ProvisionPolicy1.ExternalTicketProvision == nil {
				r.ProvisionPolicy1.ExternalTicketProvision = nil
			} else {
				r.ProvisionPolicy1.ExternalTicketProvision = &tfTypes.ExternalTicketProvision{}
				r.ProvisionPolicy1.ExternalTicketProvision.AppID = types.StringPointerValue(resp.ProvisionPolicy1.ExternalTicketProvision.AppID)
				r.ProvisionPolicy1.ExternalTicketProvision.ConnectorID = types.StringPointerValue(resp.ProvisionPolicy1.ExternalTicketProvision.ConnectorID)
				r.ProvisionPolicy1.ExternalTicketProvision.ExternalTicketProvisionerConfigID = types.StringPointerValue(resp.ProvisionPolicy1.ExternalTicketProvision.ExternalTicketProvisionerConfigID)
				r.ProvisionPolicy1.ExternalTicketProvision.Instructions = types.StringPointerValue(resp.ProvisionPolicy1.ExternalTicketProvision.Instructions)
			}
			if resp.ProvisionPolicy1.ManualProvision == nil {
				r.ProvisionPolicy1.ManualProvision = nil
			} else {
				r.ProvisionPolicy1.ManualProvision = &tfTypes.ManualProvision{}
				r.ProvisionPolicy1.ManualProvision.Instructions = types.StringPointerValue(resp.ProvisionPolicy1.ManualProvision.Instructions)
				if resp.ProvisionPolicy1.ManualProvision.UserIds != nil {
					r.ProvisionPolicy1.ManualProvision.UserIds = make([]types.String, 0, len(resp.ProvisionPolicy1.ManualProvision.UserIds))
					for _, v := range resp.ProvisionPolicy1.ManualProvision.UserIds {
						r.ProvisionPolicy1.ManualProvision.UserIds = append(r.ProvisionPolicy1.ManualProvision.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.ProvisionPolicy1.MultiStep == nil {
				r.ProvisionPolicy1.MultiStep = types.StringNull()
			} else {
				multiStepResult1, _ := json.Marshal(resp.ProvisionPolicy1.MultiStep)
				r.ProvisionPolicy1.MultiStep = types.StringValue(string(multiStepResult1))
			}
			if resp.ProvisionPolicy1.WebhookProvision == nil {
				r.ProvisionPolicy1.WebhookProvision = nil
			} else {
				r.ProvisionPolicy1.WebhookProvision = &tfTypes.WebhookProvision{}
				r.ProvisionPolicy1.WebhookProvision.WebhookID = types.StringPointerValue(resp.ProvisionPolicy1.WebhookProvision.WebhookID)
			}
		}
		if resp.Purpose != nil {
			r.Purpose = types.StringValue(string(*resp.Purpose))
		} else {
			r.Purpose = types.StringNull()
		}
		r.RevokePolicyID = types.StringPointerValue(resp.RevokePolicyID)
		r.RiskLevelValueID = types.StringPointerValue(resp.RiskLevelValueID)
		r.Slug = types.StringPointerValue(resp.Slug)
		if len(resp.SourceConnectorIds) > 0 {
			r.SourceConnectorIds = make(map[string]types.String, len(resp.SourceConnectorIds))
			for key, value := range resp.SourceConnectorIds {
				r.SourceConnectorIds[key] = types.StringValue(value)
			}
		}
		r.SystemBuiltin = types.BoolPointerValue(resp.SystemBuiltin)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *CustomAppEntitlementResourceModel) ToSharedAppEntitlementInput() *shared.AppEntitlementInput {
	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appResourceID := new(string)
	if !r.AppResourceID.IsUnknown() && !r.AppResourceID.IsNull() {
		*appResourceID = r.AppResourceID.ValueString()
	} else {
		appResourceID = nil
	}
	appResourceTypeID := new(string)
	if !r.AppResourceTypeID.IsUnknown() && !r.AppResourceTypeID.IsNull() {
		*appResourceTypeID = r.AppResourceTypeID.ValueString()
	} else {
		appResourceTypeID = nil
	}
	certifyPolicyID := new(string)
	if !r.CertifyPolicyID.IsUnknown() && !r.CertifyPolicyID.IsNull() {
		*certifyPolicyID = r.CertifyPolicyID.ValueString()
	} else {
		certifyPolicyID = nil
	}
	var complianceFrameworkValueIds []string = []string{}
	for _, complianceFrameworkValueIdsItem := range r.ComplianceFrameworkValueIds {
		complianceFrameworkValueIds = append(complianceFrameworkValueIds, complianceFrameworkValueIdsItem.ValueString())
	}
	defaultValuesApplied := new(bool)
	if !r.DefaultValuesApplied.IsUnknown() && !r.DefaultValuesApplied.IsNull() {
		*defaultValuesApplied = r.DefaultValuesApplied.ValueBool()
	} else {
		defaultValuesApplied = nil
	}
	var provisionPolicy *shared.ProvisionPolicy
	if r.ProvisionPolicy != nil {
		var connectorProvision *shared.ConnectorProvision
		if r.ProvisionPolicy.ConnectorProvision != nil {
			var accountProvision *shared.AccountProvision
			if r.ProvisionPolicy.ConnectorProvision.AccountProvision != nil {
				var config *shared.AccountProvisionConfig
				if r.ProvisionPolicy.ConnectorProvision.AccountProvision.Config != nil {
					config = &shared.AccountProvisionConfig{}
				}
				connectorID := new(string)
				if !r.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID.IsUnknown() && !r.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID.IsNull() {
					*connectorID = r.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID.ValueString()
				} else {
					connectorID = nil
				}
				schemaID := new(string)
				if !r.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID.IsUnknown() && !r.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID.IsNull() {
					*schemaID = r.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID.ValueString()
				} else {
					schemaID = nil
				}
				accountProvision = &shared.AccountProvision{
					Config:      config,
					ConnectorID: connectorID,
					SchemaID:    schemaID,
				}
			}
			var defaultBehavior *shared.DefaultBehavior
			if r.ProvisionPolicy.ConnectorProvision.DefaultBehavior != nil {
				connectorId1 := new(string)
				if !r.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID.IsUnknown() && !r.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID.IsNull() {
					*connectorId1 = r.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID.ValueString()
				} else {
					connectorId1 = nil
				}
				defaultBehavior = &shared.DefaultBehavior{
					ConnectorID: connectorId1,
				}
			}
			connectorProvision = &shared.ConnectorProvision{
				AccountProvision: accountProvision,
				DefaultBehavior:  defaultBehavior,
			}
		}
		var delegatedProvision *shared.DelegatedProvision
		if r.ProvisionPolicy.DelegatedProvision != nil {
			appId1 := new(string)
			if !r.ProvisionPolicy.DelegatedProvision.AppID.IsUnknown() && !r.ProvisionPolicy.DelegatedProvision.AppID.IsNull() {
				*appId1 = r.ProvisionPolicy.DelegatedProvision.AppID.ValueString()
			} else {
				appId1 = nil
			}
			entitlementID := new(string)
			if !r.ProvisionPolicy.DelegatedProvision.EntitlementID.IsUnknown() && !r.ProvisionPolicy.DelegatedProvision.EntitlementID.IsNull() {
				*entitlementID = r.ProvisionPolicy.DelegatedProvision.EntitlementID.ValueString()
			} else {
				entitlementID = nil
			}
			delegatedProvision = &shared.DelegatedProvision{
				AppID:         appId1,
				EntitlementID: entitlementID,
			}
		}
		var externalTicketProvision *shared.ExternalTicketProvision
		if r.ProvisionPolicy.ExternalTicketProvision != nil {
			appId2 := new(string)
			if !r.ProvisionPolicy.ExternalTicketProvision.AppID.IsUnknown() && !r.ProvisionPolicy.ExternalTicketProvision.AppID.IsNull() {
				*appId2 = r.ProvisionPolicy.ExternalTicketProvision.AppID.ValueString()
			} else {
				appId2 = nil
			}
			connectorId2 := new(string)
			if !r.ProvisionPolicy.ExternalTicketProvision.ConnectorID.IsUnknown() && !r.ProvisionPolicy.ExternalTicketProvision.ConnectorID.IsNull() {
				*connectorId2 = r.ProvisionPolicy.ExternalTicketProvision.ConnectorID.ValueString()
			} else {
				connectorId2 = nil
			}
			externalTicketProvisionerConfigID := new(string)
			if !r.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID.IsUnknown() && !r.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID.IsNull() {
				*externalTicketProvisionerConfigID = r.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID.ValueString()
			} else {
				externalTicketProvisionerConfigID = nil
			}
			instructions := new(string)
			if !r.ProvisionPolicy.ExternalTicketProvision.Instructions.IsUnknown() && !r.ProvisionPolicy.ExternalTicketProvision.Instructions.IsNull() {
				*instructions = r.ProvisionPolicy.ExternalTicketProvision.Instructions.ValueString()
			} else {
				instructions = nil
			}
			externalTicketProvision = &shared.ExternalTicketProvision{
				AppID:                             appId2,
				ConnectorID:                       connectorId2,
				ExternalTicketProvisionerConfigID: externalTicketProvisionerConfigID,
				Instructions:                      instructions,
			}
		}
		var manualProvision *shared.ManualProvision
		if r.ProvisionPolicy.ManualProvision != nil {
			instructions1 := new(string)
			if !r.ProvisionPolicy.ManualProvision.Instructions.IsUnknown() && !r.ProvisionPolicy.ManualProvision.Instructions.IsNull() {
				*instructions1 = r.ProvisionPolicy.ManualProvision.Instructions.ValueString()
			} else {
				instructions1 = nil
			}
			var userIds []string = []string{}
			for _, userIdsItem := range r.ProvisionPolicy.ManualProvision.UserIds {
				userIds = append(userIds, userIdsItem.ValueString())
			}
			manualProvision = &shared.ManualProvision{
				Instructions: instructions1,
				UserIds:      userIds,
			}
		}
		var multiStep interface{}
		if !r.ProvisionPolicy.MultiStep.IsUnknown() && !r.ProvisionPolicy.MultiStep.IsNull() {
			_ = json.Unmarshal([]byte(r.ProvisionPolicy.MultiStep.ValueString()), &multiStep)
		}
		var webhookProvision *shared.WebhookProvision
		if r.ProvisionPolicy.WebhookProvision != nil {
			webhookID := new(string)
			if !r.ProvisionPolicy.WebhookProvision.WebhookID.IsUnknown() && !r.ProvisionPolicy.WebhookProvision.WebhookID.IsNull() {
				*webhookID = r.ProvisionPolicy.WebhookProvision.WebhookID.ValueString()
			} else {
				webhookID = nil
			}
			webhookProvision = &shared.WebhookProvision{
				WebhookID: webhookID,
			}
		}
		provisionPolicy = &shared.ProvisionPolicy{
			ConnectorProvision:      connectorProvision,
			DelegatedProvision:      delegatedProvision,
			ExternalTicketProvision: externalTicketProvision,
			ManualProvision:         manualProvision,
			MultiStep:               multiStep,
			WebhookProvision:        webhookProvision,
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	durationGrant := new(string)
	if !r.DurationGrant.IsUnknown() && !r.DurationGrant.IsNull() {
		*durationGrant = r.DurationGrant.ValueString()
	} else {
		durationGrant = nil
	}
	var durationUnset *shared.AppEntitlementDurationUnset
	if r.DurationUnset != nil {
		durationUnset = &shared.AppEntitlementDurationUnset{}
	}
	emergencyGrantEnabled := new(bool)
	if !r.EmergencyGrantEnabled.IsUnknown() && !r.EmergencyGrantEnabled.IsNull() {
		*emergencyGrantEnabled = r.EmergencyGrantEnabled.ValueBool()
	} else {
		emergencyGrantEnabled = nil
	}
	emergencyGrantPolicyID := new(string)
	if !r.EmergencyGrantPolicyID.IsUnknown() && !r.EmergencyGrantPolicyID.IsNull() {
		*emergencyGrantPolicyID = r.EmergencyGrantPolicyID.ValueString()
	} else {
		emergencyGrantPolicyID = nil
	}
	grantPolicyID := new(string)
	if !r.GrantPolicyID.IsUnknown() && !r.GrantPolicyID.IsNull() {
		*grantPolicyID = r.GrantPolicyID.ValueString()
	} else {
		grantPolicyID = nil
	}
	isManuallyManaged := new(bool)
	if !r.IsManuallyManaged.IsUnknown() && !r.IsManuallyManaged.IsNull() {
		*isManuallyManaged = r.IsManuallyManaged.ValueBool()
	} else {
		isManuallyManaged = nil
	}
	overrideAccessRequestsDefaults := new(bool)
	if !r.OverrideAccessRequestsDefaults.IsUnknown() && !r.OverrideAccessRequestsDefaults.IsNull() {
		*overrideAccessRequestsDefaults = r.OverrideAccessRequestsDefaults.ValueBool()
	} else {
		overrideAccessRequestsDefaults = nil
	}
	var provisionPolicy1 *shared.ProvisionPolicy
	if r.ProvisionPolicy1 != nil {
		var connectorProvision1 *shared.ConnectorProvision
		if r.ProvisionPolicy1.ConnectorProvision != nil {
			var accountProvision1 *shared.AccountProvision
			if r.ProvisionPolicy1.ConnectorProvision.AccountProvision != nil {
				var config1 *shared.AccountProvisionConfig
				if r.ProvisionPolicy1.ConnectorProvision.AccountProvision.Config != nil {
					config1 = &shared.AccountProvisionConfig{}
				}
				connectorId3 := new(string)
				if !r.ProvisionPolicy1.ConnectorProvision.AccountProvision.ConnectorID.IsUnknown() && !r.ProvisionPolicy1.ConnectorProvision.AccountProvision.ConnectorID.IsNull() {
					*connectorId3 = r.ProvisionPolicy1.ConnectorProvision.AccountProvision.ConnectorID.ValueString()
				} else {
					connectorId3 = nil
				}
				schemaId1 := new(string)
				if !r.ProvisionPolicy1.ConnectorProvision.AccountProvision.SchemaID.IsUnknown() && !r.ProvisionPolicy1.ConnectorProvision.AccountProvision.SchemaID.IsNull() {
					*schemaId1 = r.ProvisionPolicy1.ConnectorProvision.AccountProvision.SchemaID.ValueString()
				} else {
					schemaId1 = nil
				}
				accountProvision1 = &shared.AccountProvision{
					Config:      config1,
					ConnectorID: connectorId3,
					SchemaID:    schemaId1,
				}
			}
			var defaultBehavior1 *shared.DefaultBehavior
			if r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior != nil {
				connectorId4 := new(string)
				if !r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior.ConnectorID.IsUnknown() && !r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior.ConnectorID.IsNull() {
					*connectorId4 = r.ProvisionPolicy1.ConnectorProvision.DefaultBehavior.ConnectorID.ValueString()
				} else {
					connectorId4 = nil
				}
				defaultBehavior1 = &shared.DefaultBehavior{
					ConnectorID: connectorId4,
				}
			}
			connectorProvision1 = &shared.ConnectorProvision{
				AccountProvision: accountProvision1,
				DefaultBehavior:  defaultBehavior1,
			}
		}
		var delegatedProvision1 *shared.DelegatedProvision
		if r.ProvisionPolicy1.DelegatedProvision != nil {
			appId3 := new(string)
			if !r.ProvisionPolicy1.DelegatedProvision.AppID.IsUnknown() && !r.ProvisionPolicy1.DelegatedProvision.AppID.IsNull() {
				*appId3 = r.ProvisionPolicy1.DelegatedProvision.AppID.ValueString()
			} else {
				appId3 = nil
			}
			entitlementId1 := new(string)
			if !r.ProvisionPolicy1.DelegatedProvision.EntitlementID.IsUnknown() && !r.ProvisionPolicy1.DelegatedProvision.EntitlementID.IsNull() {
				*entitlementId1 = r.ProvisionPolicy1.DelegatedProvision.EntitlementID.ValueString()
			} else {
				entitlementId1 = nil
			}
			delegatedProvision1 = &shared.DelegatedProvision{
				AppID:         appId3,
				EntitlementID: entitlementId1,
			}
		}
		var externalTicketProvision1 *shared.ExternalTicketProvision
		if r.ProvisionPolicy1.ExternalTicketProvision != nil {
			appId4 := new(string)
			if !r.ProvisionPolicy1.ExternalTicketProvision.AppID.IsUnknown() && !r.ProvisionPolicy1.ExternalTicketProvision.AppID.IsNull() {
				*appId4 = r.ProvisionPolicy1.ExternalTicketProvision.AppID.ValueString()
			} else {
				appId4 = nil
			}
			connectorId5 := new(string)
			if !r.ProvisionPolicy1.ExternalTicketProvision.ConnectorID.IsUnknown() && !r.ProvisionPolicy1.ExternalTicketProvision.ConnectorID.IsNull() {
				*connectorId5 = r.ProvisionPolicy1.ExternalTicketProvision.ConnectorID.ValueString()
			} else {
				connectorId5 = nil
			}
			externalTicketProvisionerConfigId1 := new(string)
			if !r.ProvisionPolicy1.ExternalTicketProvision.ExternalTicketProvisionerConfigID.IsUnknown() && !r.ProvisionPolicy1.ExternalTicketProvision.ExternalTicketProvisionerConfigID.IsNull() {
				*externalTicketProvisionerConfigId1 = r.ProvisionPolicy1.ExternalTicketProvision.ExternalTicketProvisionerConfigID.ValueString()
			} else {
				externalTicketProvisionerConfigId1 = nil
			}
			instructions2 := new(string)
			if !r.ProvisionPolicy1.ExternalTicketProvision.Instructions.IsUnknown() && !r.ProvisionPolicy1.ExternalTicketProvision.Instructions.IsNull() {
				*instructions2 = r.ProvisionPolicy1.ExternalTicketProvision.Instructions.ValueString()
			} else {
				instructions2 = nil
			}
			externalTicketProvision1 = &shared.ExternalTicketProvision{
				AppID:                             appId4,
				ConnectorID:                       connectorId5,
				ExternalTicketProvisionerConfigID: externalTicketProvisionerConfigId1,
				Instructions:                      instructions2,
			}
		}
		var manualProvision1 *shared.ManualProvision
		if r.ProvisionPolicy1.ManualProvision != nil {
			instructions3 := new(string)
			if !r.ProvisionPolicy1.ManualProvision.Instructions.IsUnknown() && !r.ProvisionPolicy1.ManualProvision.Instructions.IsNull() {
				*instructions3 = r.ProvisionPolicy1.ManualProvision.Instructions.ValueString()
			} else {
				instructions3 = nil
			}
			var userIds1 []string = []string{}
			for _, userIdsItem1 := range r.ProvisionPolicy1.ManualProvision.UserIds {
				userIds1 = append(userIds1, userIdsItem1.ValueString())
			}
			manualProvision1 = &shared.ManualProvision{
				Instructions: instructions3,
				UserIds:      userIds1,
			}
		}
		var multiStep1 interface{}
		if !r.ProvisionPolicy1.MultiStep.IsUnknown() && !r.ProvisionPolicy1.MultiStep.IsNull() {
			_ = json.Unmarshal([]byte(r.ProvisionPolicy1.MultiStep.ValueString()), &multiStep1)
		}
		var webhookProvision1 *shared.WebhookProvision
		if r.ProvisionPolicy1.WebhookProvision != nil {
			webhookId1 := new(string)
			if !r.ProvisionPolicy1.WebhookProvision.WebhookID.IsUnknown() && !r.ProvisionPolicy1.WebhookProvision.WebhookID.IsNull() {
				*webhookId1 = r.ProvisionPolicy1.WebhookProvision.WebhookID.ValueString()
			} else {
				webhookId1 = nil
			}
			webhookProvision1 = &shared.WebhookProvision{
				WebhookID: webhookId1,
			}
		}
		provisionPolicy1 = &shared.ProvisionPolicy{
			ConnectorProvision:      connectorProvision1,
			DelegatedProvision:      delegatedProvision1,
			ExternalTicketProvision: externalTicketProvision1,
			ManualProvision:         manualProvision1,
			MultiStep:               multiStep1,
			WebhookProvision:        webhookProvision1,
		}
	}
	purpose := new(shared.Purpose)
	if !r.Purpose.IsUnknown() && !r.Purpose.IsNull() {
		*purpose = shared.Purpose(r.Purpose.ValueString())
	} else {
		purpose = nil
	}
	revokePolicyID := new(string)
	if !r.RevokePolicyID.IsUnknown() && !r.RevokePolicyID.IsNull() {
		*revokePolicyID = r.RevokePolicyID.ValueString()
	} else {
		revokePolicyID = nil
	}
	riskLevelValueID := new(string)
	if !r.RiskLevelValueID.IsUnknown() && !r.RiskLevelValueID.IsNull() {
		*riskLevelValueID = r.RiskLevelValueID.ValueString()
	} else {
		riskLevelValueID = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	sourceConnectorIds := make(map[string]string)
	for sourceConnectorIdsKey, sourceConnectorIdsValue := range r.SourceConnectorIds {
		var sourceConnectorIdsInst string
		sourceConnectorIdsInst = sourceConnectorIdsValue.ValueString()

		sourceConnectorIds[sourceConnectorIdsKey] = sourceConnectorIdsInst
	}
	out := shared.AppEntitlementInput{
		Alias:                          alias,
		AppID:                          appID,
		AppResourceID:                  appResourceID,
		AppResourceTypeID:              appResourceTypeID,
		CertifyPolicyID:                certifyPolicyID,
		ComplianceFrameworkValueIds:    complianceFrameworkValueIds,
		DefaultValuesApplied:           defaultValuesApplied,
		ProvisionPolicy:                provisionPolicy,
		Description:                    description,
		DisplayName:                    displayName,
		DurationGrant:                  durationGrant,
		DurationUnset:                  durationUnset,
		EmergencyGrantEnabled:          emergencyGrantEnabled,
		EmergencyGrantPolicyID:         emergencyGrantPolicyID,
		GrantPolicyID:                  grantPolicyID,
		IsManuallyManaged:              isManuallyManaged,
		OverrideAccessRequestsDefaults: overrideAccessRequestsDefaults,
		ProvisionPolicy1:               provisionPolicy1,
		Purpose:                        purpose,
		RevokePolicyID:                 revokePolicyID,
		RiskLevelValueID:               riskLevelValueID,
		Slug:                           slug,
		SourceConnectorIds:             sourceConnectorIds,
	}
	return &out
}
