// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FunctionResourceModel) RefreshFromSharedFunction(ctx context.Context, resp *shared.Function) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		if resp.FunctionType != nil {
			r.FunctionType = types.StringValue(string(*resp.FunctionType))
		} else {
			r.FunctionType = types.StringNull()
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.PublishedCommitID = types.StringPointerValue(resp.PublishedCommitID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *FunctionResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceDeleteFunctionRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceDeleteFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var functionsServiceDeleteFunctionRequest *shared.FunctionsServiceDeleteFunctionRequest
	if r.FunctionsServiceDeleteFunctionRequest != nil {
		functionsServiceDeleteFunctionRequest = &shared.FunctionsServiceDeleteFunctionRequest{}
	}
	out := operations.C1APIFunctionsV1FunctionsServiceDeleteFunctionRequest{
		ID:                                    id,
		FunctionsServiceDeleteFunctionRequest: functionsServiceDeleteFunctionRequest,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceGetFunctionRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceGetFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIFunctionsV1FunctionsServiceGetFunctionRequest{
		ID: id,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceUpdateFunctionRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceUpdateFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	functionsServiceUpdateFunctionRequest, functionsServiceUpdateFunctionRequestDiags := r.ToSharedFunctionsServiceUpdateFunctionRequest(ctx)
	diags.Append(functionsServiceUpdateFunctionRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIFunctionsV1FunctionsServiceUpdateFunctionRequest{
		ID:                                    id,
		FunctionsServiceUpdateFunctionRequest: functionsServiceUpdateFunctionRequest,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToSharedFunctionInput(ctx context.Context) (*shared.FunctionInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	functionType := new(shared.FunctionType)
	if !r.FunctionType.IsUnknown() && !r.FunctionType.IsNull() {
		*functionType = shared.FunctionType(r.FunctionType.ValueString())
	} else {
		functionType = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	publishedCommitID := new(string)
	if !r.PublishedCommitID.IsUnknown() && !r.PublishedCommitID.IsNull() {
		*publishedCommitID = r.PublishedCommitID.ValueString()
	} else {
		publishedCommitID = nil
	}
	out := shared.FunctionInput{
		Description:       description,
		DisplayName:       displayName,
		FunctionType:      functionType,
		ID:                id,
		PublishedCommitID: publishedCommitID,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToSharedFunctionsServiceCreateFunctionRequest(ctx context.Context) (*shared.FunctionsServiceCreateFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	commitMessage := new(string)
	if !r.CommitMessage.IsUnknown() && !r.CommitMessage.IsNull() {
		*commitMessage = r.CommitMessage.ValueString()
	} else {
		commitMessage = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	functionType := new(shared.FunctionsServiceCreateFunctionRequestFunctionType)
	if !r.FunctionType.IsUnknown() && !r.FunctionType.IsNull() {
		*functionType = shared.FunctionsServiceCreateFunctionRequestFunctionType(r.FunctionType.ValueString())
	} else {
		functionType = nil
	}
	initialContent := make(map[string]string)
	for initialContentKey, initialContentValue := range r.InitialContent {
		var initialContentInst string
		initialContentInst = initialContentValue.ValueString()

		initialContent[initialContentKey] = initialContentInst
	}
	out := shared.FunctionsServiceCreateFunctionRequest{
		CommitMessage:  commitMessage,
		Description:    description,
		DisplayName:    displayName,
		FunctionType:   functionType,
		InitialContent: initialContent,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToSharedFunctionsServiceDeleteFunctionRequest(ctx context.Context) (*shared.FunctionsServiceDeleteFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	out := shared.FunctionsServiceDeleteFunctionRequest{}

	return &out, diags
}

func (r *FunctionResourceModel) ToSharedFunctionsServiceUpdateFunctionRequest(ctx context.Context) (*shared.FunctionsServiceUpdateFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	function, functionDiags := r.ToSharedFunctionInput(ctx)
	diags.Append(functionDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.FunctionsServiceUpdateFunctionRequest{
		Function: function,
	}

	return &out, diags
}
