// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *FunctionResourceModel) RefreshFromSharedFunction(ctx context.Context, resp *shared.Function) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		if resp.FunctionType != nil {
			r.FunctionType = types.StringValue(string(*resp.FunctionType))
		} else {
			r.FunctionType = types.StringNull()
		}
		r.Head = types.StringPointerValue(resp.Head)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsDraft = types.BoolPointerValue(resp.IsDraft)
		r.PublishedCommitID = types.StringPointerValue(resp.PublishedCommitID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *FunctionResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceDeleteFunctionRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceDeleteFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var functionsServiceDeleteFunctionRequest *shared.FunctionsServiceDeleteFunctionRequest
	if r.FunctionsServiceDeleteFunctionRequest != nil {
		functionsServiceDeleteFunctionRequest = &shared.FunctionsServiceDeleteFunctionRequest{}
	}
	out := operations.C1APIFunctionsV1FunctionsServiceDeleteFunctionRequest{
		ID:                                    id,
		FunctionsServiceDeleteFunctionRequest: functionsServiceDeleteFunctionRequest,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceGetFunctionRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceGetFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIFunctionsV1FunctionsServiceGetFunctionRequest{
		ID: id,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToSharedFunction(ctx context.Context) (*shared.Function, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	functionType := new(shared.FunctionType)
	if !r.FunctionType.IsUnknown() && !r.FunctionType.IsNull() {
		*functionType = shared.FunctionType(r.FunctionType.ValueString())
	} else {
		functionType = nil
	}
	head := new(string)
	if !r.Head.IsUnknown() && !r.Head.IsNull() {
		*head = r.Head.ValueString()
	} else {
		head = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	isDraft := new(bool)
	if !r.IsDraft.IsUnknown() && !r.IsDraft.IsNull() {
		*isDraft = r.IsDraft.ValueBool()
	} else {
		isDraft = nil
	}
	publishedCommitID := new(string)
	if !r.PublishedCommitID.IsUnknown() && !r.PublishedCommitID.IsNull() {
		*publishedCommitID = r.PublishedCommitID.ValueString()
	} else {
		publishedCommitID = nil
	}
	updatedAt := new(time.Time)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, r.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	out := shared.Function{
		CreatedAt:         createdAt,
		DeletedAt:         deletedAt,
		Description:       description,
		DisplayName:       displayName,
		FunctionType:      functionType,
		Head:              head,
		ID:                id,
		IsDraft:           isDraft,
		PublishedCommitID: publishedCommitID,
		UpdatedAt:         updatedAt,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToSharedFunctionsServiceCreateFunctionRequest(ctx context.Context) (*shared.FunctionsServiceCreateFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	commitMessage := new(string)
	if !r.CommitMessage.IsUnknown() && !r.CommitMessage.IsNull() {
		*commitMessage = r.CommitMessage.ValueString()
	} else {
		commitMessage = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	functionType := new(shared.FunctionsServiceCreateFunctionRequestFunctionType)
	if !r.FunctionType.IsUnknown() && !r.FunctionType.IsNull() {
		*functionType = shared.FunctionsServiceCreateFunctionRequestFunctionType(r.FunctionType.ValueString())
	} else {
		functionType = nil
	}
	initialContent := make(map[string]string)
	for initialContentKey, initialContentValue := range r.InitialContent {
		var initialContentInst string
		initialContentInst = initialContentValue.ValueString()

		initialContent[initialContentKey] = initialContentInst
	}
	out := shared.FunctionsServiceCreateFunctionRequest{
		CommitMessage:  commitMessage,
		Description:    description,
		DisplayName:    displayName,
		FunctionType:   functionType,
		InitialContent: initialContent,
	}

	return &out, diags
}

func (r *FunctionResourceModel) ToSharedFunctionsServiceDeleteFunctionRequest(ctx context.Context) (*shared.FunctionsServiceDeleteFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	out := shared.FunctionsServiceDeleteFunctionRequest{}

	return &out, diags
}

func (r *FunctionResourceModel) ToSharedFunctionsServiceUpdateFunctionRequest(ctx context.Context) (*shared.FunctionsServiceUpdateFunctionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	function, functionDiags := r.ToSharedFunction(ctx)
	diags.Append(functionDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.FunctionsServiceUpdateFunctionRequest{
		Function: function,
	}

	return &out, diags
}
