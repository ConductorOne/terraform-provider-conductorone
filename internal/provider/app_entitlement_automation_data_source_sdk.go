// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppEntitlementAutomationDataSourceModel) RefreshFromSharedAppEntitlementAutomation(ctx context.Context, resp *shared.AppEntitlementAutomation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppEntitlementID = types.StringPointerValue(resp.AppEntitlementID)
		r.AppID = types.StringPointerValue(resp.AppID)
		if resp.AppEntitlementAutomationLastRunStatus == nil {
			r.AppEntitlementAutomationLastRunStatus = nil
		} else {
			r.AppEntitlementAutomationLastRunStatus = &tfTypes.AppEntitlementAutomationLastRunStatus{}
			r.AppEntitlementAutomationLastRunStatus.ErrorMessage = types.StringPointerValue(resp.AppEntitlementAutomationLastRunStatus.ErrorMessage)
			r.AppEntitlementAutomationLastRunStatus.LastCompletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AppEntitlementAutomationLastRunStatus.LastCompletedAt))
			if resp.AppEntitlementAutomationLastRunStatus.Status != nil {
				r.AppEntitlementAutomationLastRunStatus.Status = types.StringValue(string(*resp.AppEntitlementAutomationLastRunStatus.Status))
			} else {
				r.AppEntitlementAutomationLastRunStatus.Status = types.StringNull()
			}
		}
		if resp.AppEntitlementAutomationRuleBasic == nil {
			r.AppEntitlementAutomationRuleBasic = nil
		} else {
			r.AppEntitlementAutomationRuleBasic = &tfTypes.AppEntitlementAutomationRuleBasic{}
			r.AppEntitlementAutomationRuleBasic.Expression = types.StringPointerValue(resp.AppEntitlementAutomationRuleBasic.Expression)
		}
		if resp.AppEntitlementAutomationRuleCEL == nil {
			r.AppEntitlementAutomationRuleCEL = nil
		} else {
			r.AppEntitlementAutomationRuleCEL = &tfTypes.AppEntitlementAutomationRuleCEL{}
			r.AppEntitlementAutomationRuleCEL.Expression = types.StringPointerValue(resp.AppEntitlementAutomationRuleCEL.Expression)
		}
		if resp.AppEntitlementAutomationRuleEntitlement == nil {
			r.AppEntitlementAutomationRuleEntitlement = nil
		} else {
			r.AppEntitlementAutomationRuleEntitlement = &tfTypes.AppEntitlementAutomationRuleEntitlement{}
			if resp.AppEntitlementAutomationRuleEntitlement.EntitlementRefs != nil {
				r.AppEntitlementAutomationRuleEntitlement.EntitlementRefs = []tfTypes.AppEntitlementRef{}

				for _, entitlementRefsItem := range resp.AppEntitlementAutomationRuleEntitlement.EntitlementRefs {
					var entitlementRefs tfTypes.AppEntitlementRef

					entitlementRefs.AppID = types.StringPointerValue(entitlementRefsItem.AppID)
					entitlementRefs.ID = types.StringPointerValue(entitlementRefsItem.ID)

					r.AppEntitlementAutomationRuleEntitlement.EntitlementRefs = append(r.AppEntitlementAutomationRuleEntitlement.EntitlementRefs, entitlementRefs)
				}
			}
		}
		if resp.AppEntitlementAutomationRuleNone == nil {
			r.AppEntitlementAutomationRuleNone = nil
		} else {
			r.AppEntitlementAutomationRuleNone = &tfTypes.AppEntitlementAutomationRuleNone{}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *AppEntitlementAutomationDataSourceModel) ToOperationsC1APIAppV1AppEntitlementsGetAutomationRequest(ctx context.Context) (*operations.C1APIAppV1AppEntitlementsGetAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appID string
	appID = r.AppID.ValueString()

	var appEntitlementID string
	appEntitlementID = r.AppEntitlementID.ValueString()

	out := operations.C1APIAppV1AppEntitlementsGetAutomationRequest{
		AppID:            appID,
		AppEntitlementID: appEntitlementID,
	}

	return &out, diags
}
