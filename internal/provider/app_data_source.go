// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppDataSource{}
var _ datasource.DataSourceWithConfigure = &AppDataSource{}

func NewAppDataSource() datasource.DataSource {
	return &AppDataSource{}
}

// AppDataSource is the data source implementation.
type AppDataSource struct {
	client *sdk.ConductoroneAPI
}

// AppDataSourceModel describes the data model.
type AppDataSourceModel struct {
	AppAccountID                        types.String   `tfsdk:"app_account_id"`
	AppAccountName                      types.String   `tfsdk:"app_account_name"`
	AppIds                              []types.String `tfsdk:"app_ids"`
	CertifyPolicyID                     types.String   `tfsdk:"certify_policy_id"`
	CreatedAt                           types.String   `tfsdk:"created_at"`
	DeletedAt                           types.String   `tfsdk:"deleted_at"`
	Description                         types.String   `tfsdk:"description"`
	DisplayName                         types.String   `tfsdk:"display_name"`
	ExcludeAppIds                       []types.String `tfsdk:"exclude_app_ids"`
	GrantPolicyID                       types.String   `tfsdk:"grant_policy_id"`
	ID                                  types.String   `tfsdk:"id"`
	IdentityMatching                    types.String   `tfsdk:"identity_matching"`
	IsDirectory                         types.Bool     `tfsdk:"is_directory"`
	IsManuallyManaged                   types.Bool     `tfsdk:"is_manually_managed"`
	MonthlyCostUsd                      types.Int32    `tfsdk:"monthly_cost_usd"`
	NextPageToken                       types.String   `tfsdk:"next_page_token"`
	OnlyDirectories                     types.Bool     `tfsdk:"only_directories"`
	ParentAppID                         types.String   `tfsdk:"parent_app_id"`
	Query                               types.String   `tfsdk:"query"`
	RevokePolicyID                      types.String   `tfsdk:"revoke_policy_id"`
	StrictAccessEntitlementProvisioning types.Bool     `tfsdk:"strict_access_entitlement_provisioning"`
	UpdatedAt                           types.String   `tfsdk:"updated_at"`
	UserCount                           types.String   `tfsdk:"user_count"`
}

// Metadata returns the data source type name.
func (r *AppDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app"
}

// Schema defines the schema for the data source.
func (r *AppDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "App DataSource",

		Attributes: map[string]schema.Attribute{
			"app_account_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the Account named by AccountName.`,
			},
			"app_account_name": schema.StringAttribute{
				Computed:    true,
				Description: `The AccountName of the app. For example, AWS is AccountID, Github is Org Name, and Okta is Okta Subdomain.`,
			},
			"app_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of app IDs to restrict the search to.`,
			},
			"certify_policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the Certify Policy associated with this App.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `The app's description.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Search for apps with a case insensitive match on the display name.`,
			},
			"exclude_app_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of app IDs to remove from the results.`,
			},
			"grant_policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the Grant Policy associated with this App.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the app.`,
			},
			"identity_matching": schema.StringAttribute{
				Computed:    true,
				Description: `The identityMatching field.`,
			},
			"is_directory": schema.BoolAttribute{
				Computed:    true,
				Description: `Specifies if the app is a directory.`,
			},
			"is_manually_managed": schema.BoolAttribute{
				Computed:    true,
				Description: `The isManuallyManaged field.`,
			},
			"monthly_cost_usd": schema.Int32Attribute{
				Computed:    true,
				Description: `The cost of an app per-seat, so that total cost can be calculated by the grant count.`,
			},
			"next_page_token": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `The nextPageToken is shown for the next page if the number of results is larger than the max page size.` + "\n" +
					` The server returns one page of results and the nextPageToken until all results are retreived.` + "\n" +
					` To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.`,
			},
			"only_directories": schema.BoolAttribute{
				Optional:    true,
				Description: `Only return apps which are directories`,
			},
			"parent_app_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the app that created this app, if any.`,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `Query the apps with a fuzzy search on display name and description.`,
			},
			"revoke_policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the Revoke Policy associated with this App.`,
			},
			"strict_access_entitlement_provisioning": schema.BoolAttribute{
				Computed:    true,
				Description: `The strictAccessEntitlementProvisioning field.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"user_count": schema.StringAttribute{
				Computed:    true,
				Description: `The number of users with grants to this app.`,
			},
		},
	}
}

func (r *AppDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToSharedSearchAppsRequest()
	res, err := r.client.AppSearch.Search(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SearchAppsResponse != nil && res.SearchAppsResponse.List != nil && len(res.SearchAppsResponse.List) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedApp(ctx, &res.SearchAppsResponse.List[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
