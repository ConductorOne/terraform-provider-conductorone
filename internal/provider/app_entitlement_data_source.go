// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppEntitlementDataSource{}
var _ datasource.DataSourceWithConfigure = &AppEntitlementDataSource{}

func NewAppEntitlementDataSource() datasource.DataSource {
	return &AppEntitlementDataSource{}
}

// AppEntitlementDataSource is the data source implementation.
type AppEntitlementDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// AppEntitlementDataSourceModel describes the data model.
type AppEntitlementDataSourceModel struct {
	AccessReviewID                 types.String                         `tfsdk:"access_review_id"`
	Alias                          types.String                         `tfsdk:"alias"`
	AppID                          types.String                         `tfsdk:"app_id"`
	AppIds                         []types.String                       `tfsdk:"app_ids"`
	AppResourceID                  types.String                         `tfsdk:"app_resource_id"`
	AppResourceTypeID              types.String                         `tfsdk:"app_resource_type_id"`
	AppUserIds                     []types.String                       `tfsdk:"app_user_ids"`
	CertifyPolicyID                types.String                         `tfsdk:"certify_policy_id"`
	ComplianceFrameworkIds         []types.String                       `tfsdk:"compliance_framework_ids"`
	ComplianceFrameworkValueIds    []types.String                       `tfsdk:"compliance_framework_value_ids"`
	CreatedAt                      types.String                         `tfsdk:"created_at"`
	DefaultValuesApplied           types.Bool                           `tfsdk:"default_values_applied"`
	DeletedAt                      types.String                         `tfsdk:"deleted_at"`
	DeprovisionerPolicy            *tfTypes.DeprovisionerPolicy         `tfsdk:"deprovisioner_policy" tfPlanOnly:"true"`
	Description                    types.String                         `tfsdk:"description"`
	DisplayName                    types.String                         `tfsdk:"display_name"`
	DurationGrant                  types.String                         `tfsdk:"duration_grant" tfPlanOnly:"true"`
	DurationUnset                  *tfTypes.AppEntitlementDurationUnset `tfsdk:"duration_unset" tfPlanOnly:"true"`
	EmergencyGrantEnabled          types.Bool                           `tfsdk:"emergency_grant_enabled"`
	EmergencyGrantPolicyID         types.String                         `tfsdk:"emergency_grant_policy_id"`
	ExcludeAppIds                  []types.String                       `tfsdk:"exclude_app_ids"`
	ExcludeAppUserIds              []types.String                       `tfsdk:"exclude_app_user_ids"`
	ExcludeImmutable               types.Bool                           `tfsdk:"exclude_immutable"`
	ExcludeResourceTypeIds         []types.String                       `tfsdk:"exclude_resource_type_ids"`
	ExcludedEntitlementRefs        []tfTypes.AppEntitlementRef          `tfsdk:"excluded_entitlement_refs"`
	GrantCount                     types.String                         `tfsdk:"grant_count"`
	GrantPolicyID                  types.String                         `tfsdk:"grant_policy_id"`
	ID                             types.String                         `tfsdk:"id"`
	IncludeDeleted                 types.Bool                           `tfsdk:"include_deleted"`
	IsAutomated                    types.Bool                           `tfsdk:"is_automated"`
	IsAutomationEnabled            types.Bool                           `tfsdk:"is_automation_enabled"`
	IsManuallyManaged              types.Bool                           `tfsdk:"is_manually_managed"`
	MatchBatonID                   types.String                         `tfsdk:"match_baton_id"`
	MembershipType                 []types.String                       `tfsdk:"membership_type"`
	NextPageToken                  types.String                         `tfsdk:"next_page_token"`
	OnlyGetExpiring                types.Bool                           `tfsdk:"only_get_expiring"`
	OverrideAccessRequestsDefaults types.Bool                           `tfsdk:"override_access_requests_defaults"`
	PageSize                       types.Int32                          `tfsdk:"page_size"`
	PageToken                      types.String                         `tfsdk:"page_token"`
	PolicyRefs                     []tfTypes.PolicyRef                  `tfsdk:"policy_refs"`
	ProvisionPolicy                *tfTypes.ProvisionPolicy             `tfsdk:"provision_policy" tfPlanOnly:"true"`
	Purpose                        types.String                         `tfsdk:"purpose"`
	Query                          types.String                         `tfsdk:"query"`
	Refs                           []tfTypes.AppEntitlementRef          `tfsdk:"refs"`
	RequestSchemaID                types.String                         `tfsdk:"request_schema_id"`
	ResourceIds                    []types.String                       `tfsdk:"resource_ids"`
	ResourceTraitIds               []types.String                       `tfsdk:"resource_trait_ids"`
	ResourceTypeIds                []types.String                       `tfsdk:"resource_type_ids"`
	RevokePolicyID                 types.String                         `tfsdk:"revoke_policy_id"`
	RiskLevelIds                   []types.String                       `tfsdk:"risk_level_ids"`
	RiskLevelValueID               types.String                         `tfsdk:"risk_level_value_id"`
	Slug                           types.String                         `tfsdk:"slug"`
	SourceConnectorID              types.String                         `tfsdk:"source_connector_id"`
	SourceConnectorIds             map[string]types.String              `tfsdk:"source_connector_ids"`
	SystemBuiltin                  types.Bool                           `tfsdk:"system_builtin"`
	UpdatedAt                      types.String                         `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *AppEntitlementDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_entitlement"
}

// Schema defines the schema for the data source.
func (r *AppEntitlementDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AppEntitlement DataSource",

		Attributes: map[string]schema.Attribute{
			"access_review_id": schema.StringAttribute{
				Optional:    true,
				Description: `Search for app entitlements that are being reviewed as part of this access review campaign.`,
			},
			"alias": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Search for app entitlements that have this alias (exact match).`,
			},
			"app_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the app that is associated with the app entitlement.`,
			},
			"app_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for app entitlements contained in any of these apps.`,
			},
			"app_resource_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the app resource that is associated with the app entitlement`,
			},
			"app_resource_type_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the app resource type that is associated with the app entitlement`,
			},
			"app_user_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for app entitlements that are granted to any of these app user ids.`,
			},
			"certify_policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the policy that will be used for certify tickets related to the app entitlement.`,
			},
			"compliance_framework_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for app entitlements that are part of these compliace frameworks.`,
			},
			"compliance_framework_value_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The IDs of different compliance frameworks associated with this app entitlement ex (SOX, HIPAA, PCI, etc.)`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"default_values_applied": schema.BoolAttribute{
				Computed:    true,
				Description: `Flag to indicate if app-level access request defaults have been applied to the entitlement`,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"deprovisioner_policy": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"connector_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"account_provision": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
									},
									"connector_id": schema.StringAttribute{
										Computed:    true,
										Description: `The connectorId field.`,
									},
									"do_not_save": schema.SingleNestedAttribute{
										Computed:    true,
										Description: `The DoNotSave message.`,
									},
									"save_to_vault": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"vault_ids": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `The vaultIds field.`,
											},
										},
										Description: `The SaveToVault message.`,
									},
									"schema_id": schema.StringAttribute{
										Computed:    true,
										Description: `The schemaId field.`,
									},
								},
								MarkdownDescription: `The AccountProvision message.` + "\n" +
									`` + "\n" +
									`This message contains a oneof named storage_type. Only a single field of the following list may be set at a time:` + "\n" +
									`  - saveToVault` + "\n" +
									`  - doNotSave`,
							},
							"default_behavior": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"connector_id": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `this checks if the entitlement is enabled by provisioning in a specific connector` + "\n" +
											` this can happen automatically and doesn't need any extra info`,
									},
								},
								Description: `The DefaultBehavior message.`,
							},
							"delete_account": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"connector_id": schema.StringAttribute{
										Computed:    true,
										Description: `The connectorId field.`,
									},
								},
								Description: `The DeleteAccount message.`,
							},
						},
						MarkdownDescription: `Indicates that a connector should perform the provisioning. This object has no fields.` + "\n" +
							`` + "\n" +
							`This message contains a oneof named provision_type. Only a single field of the following list may be set at a time:` + "\n" +
							`  - defaultBehavior` + "\n" +
							`  - account` + "\n" +
							`  - deleteAccount`,
					},
					"delegated_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"app_id": schema.StringAttribute{
								Computed:    true,
								Description: `The AppID of the entitlement to delegate provisioning to.`,
							},
							"entitlement_id": schema.StringAttribute{
								Computed:    true,
								Description: `The ID of the entitlement we are delegating provisioning to.`,
							},
						},
						Description: `This provision step indicates that we should delegate provisioning to the configuration of another app entitlement. This app entitlement does not have to be one from the same app, but MUST be configured as a proxy binding leading into this entitlement.`,
					},
					"external_ticket_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"app_id": schema.StringAttribute{
								Computed:    true,
								Description: `The appId field.`,
							},
							"connector_id": schema.StringAttribute{
								Computed:    true,
								Description: `The connectorId field.`,
							},
							"external_ticket_provisioner_config_id": schema.StringAttribute{
								Computed:    true,
								Description: `The externalTicketProvisionerConfigId field.`,
							},
							"instructions": schema.StringAttribute{
								Computed:    true,
								Description: `This field indicates a text body of instructions for the provisioner to indicate.`,
							},
						},
						Description: `This provision step indicates that we should check an external ticket to provision this entitlement`,
					},
					"manual_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"instructions": schema.StringAttribute{
								Computed:    true,
								Description: `This field indicates a text body of instructions for the provisioner to indicate.`,
							},
							"user_ids": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `An array of users that are required to provision during this step.`,
							},
						},
						Description: `Manual provisioning indicates that a human must intervene for the provisioning of this step.`,
					},
					"multi_step": schema.StringAttribute{
						Computed:    true,
						Description: `MultiStep indicates that this provision step has multiple steps to process. Parsed as JSON.`,
					},
					"unconfigured_provision": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The UnconfiguredProvision message.`,
					},
					"webhook_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"webhook_id": schema.StringAttribute{
								Computed:    true,
								Description: `The ID of the webhook to call for provisioning.`,
							},
						},
						Description: `This provision step indicates that a webhook should be called to provision this entitlement.`,
					},
				},
				MarkdownDescription: `ProvisionPolicy is a oneOf that indicates how a provision step should be processed.` + "\n" +
					`` + "\n" +
					`This message contains a oneof named typ. Only a single field of the following list may be set at a time:` + "\n" +
					`  - connector` + "\n" +
					`  - manual` + "\n" +
					`  - delegated` + "\n" +
					`  - webhook` + "\n" +
					`  - multiStep` + "\n" +
					`  - externalTicket` + "\n" +
					`  - unconfigured`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `The description of the app entitlement.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The displayName field.`,
			},
			"duration_grant": schema.StringAttribute{
				Computed: true,
			},
			"duration_unset": schema.SingleNestedAttribute{
				Computed: true,
			},
			"emergency_grant_enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `This enables tasks to be created in an emergency and use a selected emergency access policy.`,
			},
			"emergency_grant_policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the policy that will be used for emergency access grant tasks.`,
			},
			"exclude_app_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Exclude app entitlements from the results that are in these app IDs.`,
			},
			"exclude_app_user_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Exclude app entitlements from the results that these app users have granted.`,
			},
			"exclude_immutable": schema.BoolAttribute{
				Optional:    true,
				Description: `The excludeImmutable field.`,
			},
			"exclude_resource_type_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The excludeResourceTypeIds field.`,
			},
			"excluded_entitlement_refs": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Optional:    true,
							Description: `The appId field.`,
						},
						"id": schema.StringAttribute{
							Optional:    true,
							Description: `The id field.`,
						},
					},
				},
				Description: `The excludedEntitlementRefs field.`,
			},
			"grant_count": schema.StringAttribute{
				Computed:    true,
				Description: `The amount of grants open for this entitlement`,
			},
			"grant_policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the policy that will be used for grant tickets related to the app entitlement.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique ID for the App Entitlement.`,
			},
			"include_deleted": schema.BoolAttribute{
				Optional:    true,
				Description: `Include deleted app entitlements, this includes app entitlements that have a deleted parent object (app, app resource, app resource type)`,
			},
			"is_automated": schema.BoolAttribute{
				Optional:    true,
				Description: `The isAutomated field.`,
			},
			"is_automation_enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Flag to indicate whether automation (for adding users to entitlement based on rules) has been enabled.`,
			},
			"is_manually_managed": schema.BoolAttribute{
				Computed:    true,
				Description: `Flag to indicate if the app entitlement is manually managed.`,
			},
			"match_baton_id": schema.StringAttribute{
				Computed:    true,
				Description: `The matchBatonId field.`,
			},
			"membership_type": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The membershipType field.`,
			},
			"next_page_token": schema.StringAttribute{
				Computed:    true,
				Description: `The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.`,
			},
			"only_get_expiring": schema.BoolAttribute{
				Optional:    true,
				Description: `Restrict results to only those who have expiring app entitlement user bindings.`,
			},
			"override_access_requests_defaults": schema.BoolAttribute{
				Computed:    true,
				Description: `Flag to indicate if the app-level access request settings have been overridden for the entitlement`,
			},
			"page_size": schema.Int32Attribute{
				Optional:    true,
				Description: `The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)`,
			},
			"page_token": schema.StringAttribute{
				Optional:    true,
				Description: `The pageToken field.`,
			},
			"policy_refs": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Optional:    true,
							Description: `The id field.`,
						},
					},
				},
				Description: `Search for app entitlements that use any of these policies.`,
			},
			"provision_policy": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"connector_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"account_provision": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"config": schema.SingleNestedAttribute{
										Computed: true,
									},
									"connector_id": schema.StringAttribute{
										Computed:    true,
										Description: `The connectorId field.`,
									},
									"do_not_save": schema.SingleNestedAttribute{
										Computed:    true,
										Description: `The DoNotSave message.`,
									},
									"save_to_vault": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"vault_ids": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `The vaultIds field.`,
											},
										},
										Description: `The SaveToVault message.`,
									},
									"schema_id": schema.StringAttribute{
										Computed:    true,
										Description: `The schemaId field.`,
									},
								},
								MarkdownDescription: `The AccountProvision message.` + "\n" +
									`` + "\n" +
									`This message contains a oneof named storage_type. Only a single field of the following list may be set at a time:` + "\n" +
									`  - saveToVault` + "\n" +
									`  - doNotSave`,
							},
							"default_behavior": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"connector_id": schema.StringAttribute{
										Computed: true,
										MarkdownDescription: `this checks if the entitlement is enabled by provisioning in a specific connector` + "\n" +
											` this can happen automatically and doesn't need any extra info`,
									},
								},
								Description: `The DefaultBehavior message.`,
							},
							"delete_account": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"connector_id": schema.StringAttribute{
										Computed:    true,
										Description: `The connectorId field.`,
									},
								},
								Description: `The DeleteAccount message.`,
							},
						},
						MarkdownDescription: `Indicates that a connector should perform the provisioning. This object has no fields.` + "\n" +
							`` + "\n" +
							`This message contains a oneof named provision_type. Only a single field of the following list may be set at a time:` + "\n" +
							`  - defaultBehavior` + "\n" +
							`  - account` + "\n" +
							`  - deleteAccount`,
					},
					"delegated_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"app_id": schema.StringAttribute{
								Computed:    true,
								Description: `The AppID of the entitlement to delegate provisioning to.`,
							},
							"entitlement_id": schema.StringAttribute{
								Computed:    true,
								Description: `The ID of the entitlement we are delegating provisioning to.`,
							},
						},
						Description: `This provision step indicates that we should delegate provisioning to the configuration of another app entitlement. This app entitlement does not have to be one from the same app, but MUST be configured as a proxy binding leading into this entitlement.`,
					},
					"external_ticket_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"app_id": schema.StringAttribute{
								Computed:    true,
								Description: `The appId field.`,
							},
							"connector_id": schema.StringAttribute{
								Computed:    true,
								Description: `The connectorId field.`,
							},
							"external_ticket_provisioner_config_id": schema.StringAttribute{
								Computed:    true,
								Description: `The externalTicketProvisionerConfigId field.`,
							},
							"instructions": schema.StringAttribute{
								Computed:    true,
								Description: `This field indicates a text body of instructions for the provisioner to indicate.`,
							},
						},
						Description: `This provision step indicates that we should check an external ticket to provision this entitlement`,
					},
					"manual_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"instructions": schema.StringAttribute{
								Computed:    true,
								Description: `This field indicates a text body of instructions for the provisioner to indicate.`,
							},
							"user_ids": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `An array of users that are required to provision during this step.`,
							},
						},
						Description: `Manual provisioning indicates that a human must intervene for the provisioning of this step.`,
					},
					"multi_step": schema.StringAttribute{
						Computed:    true,
						Description: `MultiStep indicates that this provision step has multiple steps to process. Parsed as JSON.`,
					},
					"unconfigured_provision": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The UnconfiguredProvision message.`,
					},
					"webhook_provision": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"webhook_id": schema.StringAttribute{
								Computed:    true,
								Description: `The ID of the webhook to call for provisioning.`,
							},
						},
						Description: `This provision step indicates that a webhook should be called to provision this entitlement.`,
					},
				},
				MarkdownDescription: `ProvisionPolicy is a oneOf that indicates how a provision step should be processed.` + "\n" +
					`` + "\n" +
					`This message contains a oneof named typ. Only a single field of the following list may be set at a time:` + "\n" +
					`  - connector` + "\n" +
					`  - manual` + "\n" +
					`  - delegated` + "\n" +
					`  - webhook` + "\n" +
					`  - multiStep` + "\n" +
					`  - externalTicket` + "\n" +
					`  - unconfigured`,
			},
			"purpose": schema.StringAttribute{
				Computed:    true,
				Description: `The purpose field.`,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `Query the app entitlements with a fuzzy search on display name and description.`,
			},
			"refs": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Optional:    true,
							Description: `The appId field.`,
						},
						"id": schema.StringAttribute{
							Optional:    true,
							Description: `The id field.`,
						},
					},
				},
				Description: `The refs field.`,
			},
			"request_schema_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the request schema associated with this app entitlement.`,
			},
			"resource_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for app entitlements that belongs to these resources.`,
			},
			"resource_trait_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The resourceTraitIds field.`,
			},
			"resource_type_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for app entitlements that are for items with resources types that have matching names. Example names are "group", "role", and "app".`,
			},
			"revoke_policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the policy that will be used for revoke tickets related to the app entitlement`,
			},
			"risk_level_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for app entitlements with these risk levels.`,
			},
			"risk_level_value_id": schema.StringAttribute{
				Computed:    true,
				Description: `The riskLevelValueId field.`,
			},
			"slug": schema.StringAttribute{
				Computed:    true,
				Description: `The slug is displayed as an oval next to the name in the frontend of C1, it tells you what permission the entitlement grants. See https://www.conductorone.com/docs/product/admin/entitlements/`,
			},
			"source_connector_id": schema.StringAttribute{
				Optional:    true,
				Description: `The sourceConnectorId field.`,
			},
			"source_connector_ids": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Map to tell us which connector the entitlement came from.`,
			},
			"system_builtin": schema.BoolAttribute{
				Computed:    true,
				Description: `This field indicates if this is a system builtin entitlement.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *AppEntitlementDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppEntitlementDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppEntitlementDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedAppEntitlementSearchServiceSearchRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppEntitlementSearch.Search(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AppEntitlementSearchServiceSearchResponse != nil && res.AppEntitlementSearchServiceSearchResponse.List != nil && len(res.AppEntitlementSearchServiceSearchResponse.List) > 0 && res.AppEntitlementSearchServiceSearchResponse.List[0].AppEntitlement != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAppEntitlement(ctx, res.AppEntitlementSearchServiceSearchResponse.List[0].AppEntitlement)...)

	if resp.Diagnostics.HasError() {
		return
	}
	for {
		res, err := res.Next()

		if err != nil {
			resp.Diagnostics.AddError(fmt.Sprintf("failed to retrieve next page of results: %v", err), debugResponse(res.RawResponse))
			return
		}

		if res == nil {
			break
		}

		resp.Diagnostics.Append(data.RefreshFromSharedAppEntitlement(ctx, res.AppEntitlementSearchServiceSearchResponse.List[0].AppEntitlement)...)

		if resp.Diagnostics.HasError() {
			return
		}
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
