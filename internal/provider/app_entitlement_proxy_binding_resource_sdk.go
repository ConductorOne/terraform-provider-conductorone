// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppEntitlementProxyBindingResourceModel) RefreshFromSharedAppEntitlementProxy(ctx context.Context, resp *shared.AppEntitlementProxy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.DstAppEntitlementID = types.StringPointerValue(resp.DstAppEntitlementID)
		r.DstAppID = types.StringPointerValue(resp.DstAppID)
		r.SrcAppEntitlementID = types.StringPointerValue(resp.SrcAppEntitlementID)
		r.SrcAppID = types.StringPointerValue(resp.SrcAppID)
		r.SystemBuiltin = types.BoolPointerValue(resp.SystemBuiltin)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *AppEntitlementProxyBindingResourceModel) ToOperationsC1APIAppV1AppEntitlementsProxyCreateRequest(ctx context.Context) (*operations.C1APIAppV1AppEntitlementsProxyCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	srcAppID := new(string)
	if !r.SrcAppID.IsUnknown() && !r.SrcAppID.IsNull() {
		*srcAppID = r.SrcAppID.ValueString()
	} else {
		srcAppID = nil
	}
	srcAppEntitlementID := new(string)
	if !r.SrcAppEntitlementID.IsUnknown() && !r.SrcAppEntitlementID.IsNull() {
		*srcAppEntitlementID = r.SrcAppEntitlementID.ValueString()
	} else {
		srcAppEntitlementID = nil
	}
	dstAppID := new(string)
	if !r.DstAppID.IsUnknown() && !r.DstAppID.IsNull() {
		*dstAppID = r.DstAppID.ValueString()
	} else {
		dstAppID = nil
	}
	dstAppEntitlementID := new(string)
	if !r.DstAppEntitlementID.IsUnknown() && !r.DstAppEntitlementID.IsNull() {
		*dstAppEntitlementID = r.DstAppEntitlementID.ValueString()
	} else {
		dstAppEntitlementID = nil
	}
	out := operations.C1APIAppV1AppEntitlementsProxyCreateRequest{
		SrcAppID:            srcAppID,
		SrcAppEntitlementID: srcAppEntitlementID,
		DstAppID:            dstAppID,
		DstAppEntitlementID: dstAppEntitlementID,
	}

	return &out, diags
}

func (r *AppEntitlementProxyBindingResourceModel) ToOperationsC1APIAppV1AppEntitlementsProxyDeleteRequest(ctx context.Context) (*operations.C1APIAppV1AppEntitlementsProxyDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	srcAppID := new(string)
	if !r.SrcAppID.IsUnknown() && !r.SrcAppID.IsNull() {
		*srcAppID = r.SrcAppID.ValueString()
	} else {
		srcAppID = nil
	}
	srcAppEntitlementID := new(string)
	if !r.SrcAppEntitlementID.IsUnknown() && !r.SrcAppEntitlementID.IsNull() {
		*srcAppEntitlementID = r.SrcAppEntitlementID.ValueString()
	} else {
		srcAppEntitlementID = nil
	}
	dstAppID := new(string)
	if !r.DstAppID.IsUnknown() && !r.DstAppID.IsNull() {
		*dstAppID = r.DstAppID.ValueString()
	} else {
		dstAppID = nil
	}
	dstAppEntitlementID := new(string)
	if !r.DstAppEntitlementID.IsUnknown() && !r.DstAppEntitlementID.IsNull() {
		*dstAppEntitlementID = r.DstAppEntitlementID.ValueString()
	} else {
		dstAppEntitlementID = nil
	}
	out := operations.C1APIAppV1AppEntitlementsProxyDeleteRequest{
		SrcAppID:            srcAppID,
		SrcAppEntitlementID: srcAppEntitlementID,
		DstAppID:            dstAppID,
		DstAppEntitlementID: dstAppEntitlementID,
	}

	return &out, diags
}

func (r *AppEntitlementProxyBindingResourceModel) ToOperationsC1APIAppV1AppEntitlementsProxyGetRequest(ctx context.Context) (*operations.C1APIAppV1AppEntitlementsProxyGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	srcAppID := new(string)
	if !r.SrcAppID.IsUnknown() && !r.SrcAppID.IsNull() {
		*srcAppID = r.SrcAppID.ValueString()
	} else {
		srcAppID = nil
	}
	srcAppEntitlementID := new(string)
	if !r.SrcAppEntitlementID.IsUnknown() && !r.SrcAppEntitlementID.IsNull() {
		*srcAppEntitlementID = r.SrcAppEntitlementID.ValueString()
	} else {
		srcAppEntitlementID = nil
	}
	dstAppID := new(string)
	if !r.DstAppID.IsUnknown() && !r.DstAppID.IsNull() {
		*dstAppID = r.DstAppID.ValueString()
	} else {
		dstAppID = nil
	}
	dstAppEntitlementID := new(string)
	if !r.DstAppEntitlementID.IsUnknown() && !r.DstAppEntitlementID.IsNull() {
		*dstAppEntitlementID = r.DstAppEntitlementID.ValueString()
	} else {
		dstAppEntitlementID = nil
	}
	out := operations.C1APIAppV1AppEntitlementsProxyGetRequest{
		SrcAppID:            srcAppID,
		SrcAppEntitlementID: srcAppEntitlementID,
		DstAppID:            dstAppID,
		DstAppEntitlementID: dstAppEntitlementID,
	}

	return &out, diags
}
