// Generated by tf-integration-gen. DO NOT EDIT.
package provider

import (
	"fmt"

	"time"

	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"

	"github.com/hashicorp/terraform-plugin-framework/types"
)

const databricksCatalogID = "2dYafA2XC9re3XRxtICxya99CC6"

func (r *IntegrationDatabricksResourceModel) ToCreateDelegatedSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	catalogID := sdk.String(databricksCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.ConnectorServiceCreateDelegatedRequest{
		DisplayName: sdk.String("DataBricks"),
		CatalogID:   catalogID,
		UserIds:     userIds,
	}
	return &out
}

func (r *IntegrationDatabricksResourceModel) ToCreateSDKType() (*shared.ConnectorServiceCreateRequest, error) {
	catalogID := sdk.String(databricksCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configOut, configSet := r.getConfig()
	if !configSet {
		return nil, fmt.Errorf("config must be set for create request")
	}

	out := shared.ConnectorServiceCreateRequest{
		CatalogID: catalogID,
		UserIds:   userIds,
		Config: &shared.ConnectorServiceCreateRequestConfig{
			AtType: sdk.String(envConfigType),
			AdditionalProperties: map[string]interface{}{
				"configuration": configOut,
			},
		},
	}
	return &out, nil
}

func (r *IntegrationDatabricksResourceModel) ToUpdateSDKType() (*shared.ConnectorInput, bool) {
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configValues := r.populateConfig()

	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}

	out := shared.ConnectorInput{
		DisplayName: sdk.String("DataBricks"),
		AppID:       sdk.String(r.AppID.ValueString()),
		CatalogID:   sdk.String(databricksCatalogID),
		ID:          sdk.String(r.ID.ValueString()),
		UserIds:     userIds,
		Config:      makeConnectorConfig(configOut),
	}

	return &out, configSet
}

func (r *IntegrationDatabricksResourceModel) populateConfig() map[string]interface{} {
	configValues := make(map[string]interface{})

	databricksAccountHostname := new(string)
	if !r.DatabricksAccountHostname.IsUnknown() && !r.DatabricksAccountHostname.IsNull() {
		*databricksAccountHostname = r.DatabricksAccountHostname.ValueString()
		configValues["databricks_account_hostname"] = databricksAccountHostname
	}

	databricksHostname := new(string)
	if !r.DatabricksHostname.IsUnknown() && !r.DatabricksHostname.IsNull() {
		*databricksHostname = r.DatabricksHostname.ValueString()
		configValues["databricks_hostname"] = databricksHostname
	}

	databricksAccountId := new(string)
	if !r.DatabricksAccountId.IsUnknown() && !r.DatabricksAccountId.IsNull() {
		*databricksAccountId = r.DatabricksAccountId.ValueString()
		configValues["databricks_account_id"] = databricksAccountId
	}

	databricksClientId := new(string)
	if !r.DatabricksClientId.IsUnknown() && !r.DatabricksClientId.IsNull() {
		*databricksClientId = r.DatabricksClientId.ValueString()
		configValues["databricks_client_id"] = databricksClientId
	}

	databricksClientSecret := new(string)
	if !r.DatabricksClientSecret.IsUnknown() && !r.DatabricksClientSecret.IsNull() {
		*databricksClientSecret = r.DatabricksClientSecret.ValueString()
		configValues["databricks_client_secret"] = databricksClientSecret
	}

	databricksAccessToken := new(string)
	if !r.DatabricksAccessToken.IsUnknown() && !r.DatabricksAccessToken.IsNull() {
		*databricksAccessToken = r.DatabricksAccessToken.ValueString()
		configValues["databricks_access_token"] = databricksAccessToken
	}

	databricksWorkspace := new(string)
	if !r.DatabricksWorkspace.IsUnknown() && !r.DatabricksWorkspace.IsNull() {
		*databricksWorkspace = r.DatabricksWorkspace.ValueString()
		configValues["databricks_workspace"] = databricksWorkspace
	}

	databricksUsername := new(string)
	if !r.DatabricksUsername.IsUnknown() && !r.DatabricksUsername.IsNull() {
		*databricksUsername = r.DatabricksUsername.ValueString()
		configValues["databricks_username"] = databricksUsername
	}

	databricksPassword := new(string)
	if !r.DatabricksPassword.IsUnknown() && !r.DatabricksPassword.IsNull() {
		*databricksPassword = r.DatabricksPassword.ValueString()
		configValues["databricks_password"] = databricksPassword
	}

	return configValues
}

func (r *IntegrationDatabricksResourceModel) getConfig() (map[string]interface{}, bool) {
	configValues := r.populateConfig()
	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}
	return configOut, configSet
}

func (r *IntegrationDatabricksResourceModel) ToGetSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationDatabricksResourceModel) ToDeleteSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationDatabricksResourceModel) RefreshFromGetResponse(resp *shared.Connector) {
	if resp == nil {
		return
	}
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}

	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if val, ok := getStringValue(values, "databricks_account_hostname"); ok {
					r.DatabricksAccountHostname = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_hostname"); ok {
					r.DatabricksHostname = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_account_id"); ok {
					r.DatabricksAccountId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_client_id"); ok {
					r.DatabricksClientId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_workspace"); ok {
					r.DatabricksWorkspace = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_username"); ok {
					r.DatabricksUsername = types.StringValue(val)
				}

			}
		}
	}
}

func (r *IntegrationDatabricksResourceModel) RefreshFromUpdateResponse(resp *shared.Connector) {
	r.RefreshFromGetResponse(resp)
}

func (r *IntegrationDatabricksResourceModel) RefreshFromCreateResponse(resp *shared.Connector) {
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if val, ok := getStringValue(values, "databricks_account_hostname"); ok {
					r.DatabricksAccountHostname = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_hostname"); ok {
					r.DatabricksHostname = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_account_id"); ok {
					r.DatabricksAccountId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_client_id"); ok {
					r.DatabricksClientId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_workspace"); ok {
					r.DatabricksWorkspace = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "databricks_username"); ok {
					r.DatabricksUsername = types.StringValue(val)
				}

			}
		}
	}
}
