// Generated by tf-integration-gen. DO NOT EDIT.
package provider

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

const databricksCatalogID = "2dYafA2XC9re3XRxtICxya99CC6"

func (r *IntegrationDatabricksResourceModel) ToCreateDelegatedSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	catalogID := sdk.String(databricksCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.ConnectorServiceCreateDelegatedRequest{
		DisplayName: sdk.String("DataBricks"),
		CatalogID:   catalogID,
		UserIds:     userIds,
	}
	return &out
}

func (r *IntegrationDatabricksResourceModel) ToCreateSDKType() (*shared.ConnectorServiceCreateRequest, error) {
	catalogID := sdk.String(databricksCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configOut, configSet := r.getConfig()
	if !configSet {
		return nil, fmt.Errorf("config must be set for create request")
	}

	out := shared.ConnectorServiceCreateRequest{
		CatalogID: catalogID,
		UserIds:   userIds,
		Config: &shared.ConnectorServiceCreateRequestConfig{
			AtType: sdk.String(envConfigType),
			AdditionalProperties: map[string]interface{}{
				"configuration": configOut,
			},
		},
	}
	return &out, nil
}

func (r *IntegrationDatabricksResourceModel) ToUpdateSDKType() (*shared.ConnectorInput, bool) {
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configValues := r.populateConfig()

	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}

	out := shared.ConnectorInput{
		DisplayName: sdk.String("DataBricks"),
		AppID:       sdk.String(r.AppID.ValueString()),
		CatalogID:   sdk.String(databricksCatalogID),
		ID:          sdk.String(r.ID.ValueString()),
		UserIds:     userIds,
		Config:      makeConnectorConfig(configOut),
	}

	return &out, configSet
}

func (r *IntegrationDatabricksResourceModel) populateConfig() map[string]interface{} {
	configValues := make(map[string]interface{})

	if !r.DatabricksGroupOauth.IsUnknown() && !r.DatabricksGroupOauth.IsNull() {
		configValues["C1_selected_field_group_name"] = "databricks_group_oauth"
		for k, v := range r.DatabricksGroupOauth.Attributes() {
			if v.IsUnknown() || v.IsNull() {
				continue
			}
			if val, ok := v.(basetypes.StringValue); ok {
				configValues[k] = val.ValueString()
			}
			if val, ok := v.(basetypes.BoolValue); ok {
				configValues[k] = strconv.FormatBool(val.ValueBool())
			}
			if val, ok := v.(basetypes.ListValue); ok {
				elements := val.Elements()
				lv := make([]string, 0, len(elements))
				for _, element := range elements {
					if e, ok := element.(basetypes.StringValue); ok {
						lv = append(lv, e.ValueString())
					}
				}
				configValues[k] = strings.Join(lv, ",")
			}
		}
	}

	if !r.DatabricksGroupToken.IsUnknown() && !r.DatabricksGroupToken.IsNull() {
		configValues["C1_selected_field_group_name"] = "databricks_group_token"
		for k, v := range r.DatabricksGroupToken.Attributes() {
			if v.IsUnknown() || v.IsNull() {
				continue
			}
			if val, ok := v.(basetypes.StringValue); ok {
				configValues[k] = val.ValueString()
			}
			if val, ok := v.(basetypes.BoolValue); ok {
				configValues[k] = strconv.FormatBool(val.ValueBool())
			}
			if val, ok := v.(basetypes.ListValue); ok {
				elements := val.Elements()
				lv := make([]string, 0, len(elements))
				for _, element := range elements {
					if e, ok := element.(basetypes.StringValue); ok {
						lv = append(lv, e.ValueString())
					}
				}
				configValues[k] = strings.Join(lv, ",")
			}
		}
	}

	if !r.DatabricksGroupPassword.IsUnknown() && !r.DatabricksGroupPassword.IsNull() {
		configValues["C1_selected_field_group_name"] = "databricks_group_password"
		for k, v := range r.DatabricksGroupPassword.Attributes() {
			if v.IsUnknown() || v.IsNull() {
				continue
			}
			if val, ok := v.(basetypes.StringValue); ok {
				configValues[k] = val.ValueString()
			}
			if val, ok := v.(basetypes.BoolValue); ok {
				configValues[k] = strconv.FormatBool(val.ValueBool())
			}
			if val, ok := v.(basetypes.ListValue); ok {
				elements := val.Elements()
				lv := make([]string, 0, len(elements))
				for _, element := range elements {
					if e, ok := element.(basetypes.StringValue); ok {
						lv = append(lv, e.ValueString())
					}
				}
				configValues[k] = strings.Join(lv, ",")
			}
		}
	}

	return configValues
}

func (r *IntegrationDatabricksResourceModel) getConfig() (map[string]interface{}, bool) {
	configValues := r.populateConfig()
	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}
	return configOut, configSet
}

func (r *IntegrationDatabricksResourceModel) ToGetSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationDatabricksResourceModel) ToDeleteSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationDatabricksResourceModel) RefreshFromGetResponse(resp *shared.Connector) {
	if resp == nil {
		return
	}
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}

	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "databricks_group_oauth" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "databricks_account_id"); ok {
							attributeTypes["databricks_account_id"] = types.StringType
							attributeValues["databricks_account_id"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_client_id"); ok {
							attributeTypes["databricks_client_id"] = types.StringType
							attributeValues["databricks_client_id"] = types.StringValue(val)
						}

						attributeTypes["databricks_client_secret"] = types.StringType
						if sv, ok := configValues["databricks_client_secret"].(string); ok {
							attributeValues["databricks_client_secret"] = types.StringValue(sv)
						} else {
							attributeValues["databricks_client_secret"] = types.StringNull()
						}

						if val, ok := getStringValue(values, "databricks_account_hostname"); ok {
							attributeTypes["databricks_account_hostname"] = types.StringType
							attributeValues["databricks_account_hostname"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_hostname"); ok {
							attributeTypes["databricks_hostname"] = types.StringType
							attributeValues["databricks_hostname"] = types.StringValue(val)
						}
						r.DatabricksGroupOauth = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "databricks_group_token" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "databricks_account_id"); ok {
							attributeTypes["databricks_account_id"] = types.StringType
							attributeValues["databricks_account_id"] = types.StringValue(val)
						}

						attributeTypes["databricks_access_token"] = types.StringType
						if sv, ok := configValues["databricks_access_token"].(string); ok {
							attributeValues["databricks_access_token"] = types.StringValue(sv)
						} else {
							attributeValues["databricks_access_token"] = types.StringNull()
						}

						if val, ok := getStringValue(values, "databricks_workspace"); ok {
							attributeTypes["databricks_workspace"] = types.StringType
							attributeValues["databricks_workspace"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_account_hostname"); ok {
							attributeTypes["databricks_account_hostname"] = types.StringType
							attributeValues["databricks_account_hostname"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_hostname"); ok {
							attributeTypes["databricks_hostname"] = types.StringType
							attributeValues["databricks_hostname"] = types.StringValue(val)
						}
						r.DatabricksGroupToken = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "databricks_group_password" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "databricks_account_id"); ok {
							attributeTypes["databricks_account_id"] = types.StringType
							attributeValues["databricks_account_id"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_username"); ok {
							attributeTypes["databricks_username"] = types.StringType
							attributeValues["databricks_username"] = types.StringValue(val)
						}

						attributeTypes["databricks_password"] = types.StringType
						if sv, ok := configValues["databricks_password"].(string); ok {
							attributeValues["databricks_password"] = types.StringValue(sv)
						} else {
							attributeValues["databricks_password"] = types.StringNull()
						}

						if val, ok := getStringValue(values, "databricks_account_hostname"); ok {
							attributeTypes["databricks_account_hostname"] = types.StringType
							attributeValues["databricks_account_hostname"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_hostname"); ok {
							attributeTypes["databricks_hostname"] = types.StringType
							attributeValues["databricks_hostname"] = types.StringValue(val)
						}
						r.DatabricksGroupPassword = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

			}
		}
	}
}

func (r *IntegrationDatabricksResourceModel) RefreshFromUpdateResponse(resp *shared.Connector) {
	r.RefreshFromGetResponse(resp)
}

func (r *IntegrationDatabricksResourceModel) RefreshFromCreateResponse(resp *shared.Connector) {
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "databricks_group_oauth" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "databricks_account_id"); ok {
							attributeTypes["databricks_account_id"] = types.StringType
							attributeValues["databricks_account_id"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_client_id"); ok {
							attributeTypes["databricks_client_id"] = types.StringType
							attributeValues["databricks_client_id"] = types.StringValue(val)
						}

						attributeTypes["databricks_client_secret"] = types.StringType
						if sv, ok := configValues["databricks_client_secret"].(string); ok {
							attributeValues["databricks_client_secret"] = types.StringValue(sv)
						} else {
							attributeValues["databricks_client_secret"] = types.StringNull()
						}

						if val, ok := getStringValue(values, "databricks_account_hostname"); ok {
							attributeTypes["databricks_account_hostname"] = types.StringType
							attributeValues["databricks_account_hostname"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_hostname"); ok {
							attributeTypes["databricks_hostname"] = types.StringType
							attributeValues["databricks_hostname"] = types.StringValue(val)
						}
						r.DatabricksGroupOauth = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "databricks_group_token" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "databricks_account_id"); ok {
							attributeTypes["databricks_account_id"] = types.StringType
							attributeValues["databricks_account_id"] = types.StringValue(val)
						}

						attributeTypes["databricks_access_token"] = types.StringType
						if sv, ok := configValues["databricks_access_token"].(string); ok {
							attributeValues["databricks_access_token"] = types.StringValue(sv)
						} else {
							attributeValues["databricks_access_token"] = types.StringNull()
						}

						if val, ok := getStringValue(values, "databricks_workspace"); ok {
							attributeTypes["databricks_workspace"] = types.StringType
							attributeValues["databricks_workspace"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_account_hostname"); ok {
							attributeTypes["databricks_account_hostname"] = types.StringType
							attributeValues["databricks_account_hostname"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_hostname"); ok {
							attributeTypes["databricks_hostname"] = types.StringType
							attributeValues["databricks_hostname"] = types.StringValue(val)
						}
						r.DatabricksGroupToken = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "databricks_group_password" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "databricks_account_id"); ok {
							attributeTypes["databricks_account_id"] = types.StringType
							attributeValues["databricks_account_id"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_username"); ok {
							attributeTypes["databricks_username"] = types.StringType
							attributeValues["databricks_username"] = types.StringValue(val)
						}

						attributeTypes["databricks_password"] = types.StringType
						if sv, ok := configValues["databricks_password"].(string); ok {
							attributeValues["databricks_password"] = types.StringValue(sv)
						} else {
							attributeValues["databricks_password"] = types.StringNull()
						}

						if val, ok := getStringValue(values, "databricks_account_hostname"); ok {
							attributeTypes["databricks_account_hostname"] = types.StringType
							attributeValues["databricks_account_hostname"] = types.StringValue(val)
						}

						if val, ok := getStringValue(values, "databricks_hostname"); ok {
							attributeTypes["databricks_hostname"] = types.StringType
							attributeValues["databricks_hostname"] = types.StringValue(val)
						}
						r.DatabricksGroupPassword = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

			}
		}
	}
}
