// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/pkg/models/shared"
	"time"
)

func (r *CatalogResourceModel) ToCreateSDKType() *shared.RequestCatalogManagementServiceCreateRequest {
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var requestCatalogExpandMask *shared.RequestCatalogExpandMask
	if r.RequestCatalogExpandMask != nil {
		var paths []string = nil
		for _, pathsItem := range r.RequestCatalogExpandMask.Paths {
			paths = append(paths, pathsItem.ValueString())
		}
		requestCatalogExpandMask = &shared.RequestCatalogExpandMask{
			Paths: paths,
		}
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	visibleToEveryone := new(bool)
	if !r.VisibleToEveryone.IsUnknown() && !r.VisibleToEveryone.IsNull() {
		*visibleToEveryone = r.VisibleToEveryone.ValueBool()
	} else {
		visibleToEveryone = nil
	}
	out := shared.RequestCatalogManagementServiceCreateRequest{
		Description:              description,
		DisplayName:              displayName,
		RequestCatalogExpandMask: requestCatalogExpandMask,
		Published:                published,
		VisibleToEveryone:        visibleToEveryone,
	}
	return &out
}

func (r *CatalogResourceModel) ToGetSDKType() *shared.RequestCatalogManagementServiceCreateRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *CatalogResourceModel) ToUpdateSDKType() *shared.RequestCatalogInput {
	var accessEntitlements []shared.AppEntitlementInput = nil
	for _, accessEntitlementsItem := range r.AccessEntitlements {
		appID := new(string)
		if !accessEntitlementsItem.AppID.IsUnknown() && !accessEntitlementsItem.AppID.IsNull() {
			*appID = accessEntitlementsItem.AppID.ValueString()
		} else {
			appID = nil
		}
		appResourceID := new(string)
		if !accessEntitlementsItem.AppResourceID.IsUnknown() && !accessEntitlementsItem.AppResourceID.IsNull() {
			*appResourceID = accessEntitlementsItem.AppResourceID.ValueString()
		} else {
			appResourceID = nil
		}
		appResourceTypeID := new(string)
		if !accessEntitlementsItem.AppResourceTypeID.IsUnknown() && !accessEntitlementsItem.AppResourceTypeID.IsNull() {
			*appResourceTypeID = accessEntitlementsItem.AppResourceTypeID.ValueString()
		} else {
			appResourceTypeID = nil
		}
		certifyPolicyID := new(string)
		if !accessEntitlementsItem.CertifyPolicyID.IsUnknown() && !accessEntitlementsItem.CertifyPolicyID.IsNull() {
			*certifyPolicyID = accessEntitlementsItem.CertifyPolicyID.ValueString()
		} else {
			certifyPolicyID = nil
		}
		var complianceFrameworkValueIds []string = nil
		for _, complianceFrameworkValueIdsItem := range accessEntitlementsItem.ComplianceFrameworkValueIds {
			complianceFrameworkValueIds = append(complianceFrameworkValueIds, complianceFrameworkValueIdsItem.ValueString())
		}
		description := new(string)
		if !accessEntitlementsItem.Description.IsUnknown() && !accessEntitlementsItem.Description.IsNull() {
			*description = accessEntitlementsItem.Description.ValueString()
		} else {
			description = nil
		}
		displayName := new(string)
		if !accessEntitlementsItem.DisplayName.IsUnknown() && !accessEntitlementsItem.DisplayName.IsNull() {
			*displayName = accessEntitlementsItem.DisplayName.ValueString()
		} else {
			displayName = nil
		}
		durationGrant := new(string)
		if !accessEntitlementsItem.DurationGrant.IsUnknown() && !accessEntitlementsItem.DurationGrant.IsNull() {
			*durationGrant = accessEntitlementsItem.DurationGrant.ValueString()
		} else {
			durationGrant = nil
		}
		var durationUnset *shared.DurationUnset
		if accessEntitlementsItem.DurationUnset != nil {
			durationUnset = &shared.DurationUnset{}
		}
		emergencyGrantEnabled := new(bool)
		if !accessEntitlementsItem.EmergencyGrantEnabled.IsUnknown() && !accessEntitlementsItem.EmergencyGrantEnabled.IsNull() {
			*emergencyGrantEnabled = accessEntitlementsItem.EmergencyGrantEnabled.ValueBool()
		} else {
			emergencyGrantEnabled = nil
		}
		emergencyGrantPolicyID := new(string)
		if !accessEntitlementsItem.EmergencyGrantPolicyID.IsUnknown() && !accessEntitlementsItem.EmergencyGrantPolicyID.IsNull() {
			*emergencyGrantPolicyID = accessEntitlementsItem.EmergencyGrantPolicyID.ValueString()
		} else {
			emergencyGrantPolicyID = nil
		}
		grantPolicyID := new(string)
		if !accessEntitlementsItem.GrantPolicyID.IsUnknown() && !accessEntitlementsItem.GrantPolicyID.IsNull() {
			*grantPolicyID = accessEntitlementsItem.GrantPolicyID.ValueString()
		} else {
			grantPolicyID = nil
		}
		var provisionPolicy *shared.ProvisionPolicy
		if accessEntitlementsItem.ProvisionPolicy != nil {
			var connectorProvision *shared.ConnectorProvision
			if accessEntitlementsItem.ProvisionPolicy.ConnectorProvision != nil {
				connectorProvision = &shared.ConnectorProvision{}
			}
			var delegatedProvision *shared.DelegatedProvision
			if accessEntitlementsItem.ProvisionPolicy.DelegatedProvision != nil {
				appId1 := new(string)
				if !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID.IsNull() {
					*appId1 = accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID.ValueString()
				} else {
					appId1 = nil
				}
				entitlementID := new(string)
				if !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID.IsNull() {
					*entitlementID = accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID.ValueString()
				} else {
					entitlementID = nil
				}
				implicit := new(bool)
				if !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit.IsNull() {
					*implicit = accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit.ValueBool()
				} else {
					implicit = nil
				}
				delegatedProvision = &shared.DelegatedProvision{
					AppID:         appId1,
					EntitlementID: entitlementID,
					Implicit:      implicit,
				}
			}
			var manualProvision *shared.ManualProvision
			if accessEntitlementsItem.ProvisionPolicy.ManualProvision != nil {
				instructions := new(string)
				if !accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions.IsNull() {
					*instructions = accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions.ValueString()
				} else {
					instructions = nil
				}
				var userIds []string = nil
				for _, userIdsItem := range accessEntitlementsItem.ProvisionPolicy.ManualProvision.UserIds {
					userIds = append(userIds, userIdsItem.ValueString())
				}
				manualProvision = &shared.ManualProvision{
					Instructions: instructions,
					UserIds:      userIds,
				}
			}
			provisionPolicy = &shared.ProvisionPolicy{
				ConnectorProvision: connectorProvision,
				DelegatedProvision: delegatedProvision,
				ManualProvision:    manualProvision,
			}
		}
		revokePolicyID := new(string)
		if !accessEntitlementsItem.RevokePolicyID.IsUnknown() && !accessEntitlementsItem.RevokePolicyID.IsNull() {
			*revokePolicyID = accessEntitlementsItem.RevokePolicyID.ValueString()
		} else {
			revokePolicyID = nil
		}
		riskLevelValueID := new(string)
		if !accessEntitlementsItem.RiskLevelValueID.IsUnknown() && !accessEntitlementsItem.RiskLevelValueID.IsNull() {
			*riskLevelValueID = accessEntitlementsItem.RiskLevelValueID.ValueString()
		} else {
			riskLevelValueID = nil
		}
		slug := new(string)
		if !accessEntitlementsItem.Slug.IsUnknown() && !accessEntitlementsItem.Slug.IsNull() {
			*slug = accessEntitlementsItem.Slug.ValueString()
		} else {
			slug = nil
		}
		userEditedMask := new(string)
		if !accessEntitlementsItem.UserEditedMask.IsUnknown() && !accessEntitlementsItem.UserEditedMask.IsNull() {
			*userEditedMask = accessEntitlementsItem.UserEditedMask.ValueString()
		} else {
			userEditedMask = nil
		}
		accessEntitlements = append(accessEntitlements, shared.AppEntitlementInput{
			AppID:                       appID,
			AppResourceID:               appResourceID,
			AppResourceTypeID:           appResourceTypeID,
			CertifyPolicyID:             certifyPolicyID,
			ComplianceFrameworkValueIds: complianceFrameworkValueIds,
			Description:                 description,
			DisplayName:                 displayName,
			DurationGrant:               durationGrant,
			DurationUnset:               durationUnset,
			EmergencyGrantEnabled:       emergencyGrantEnabled,
			EmergencyGrantPolicyID:      emergencyGrantPolicyID,
			GrantPolicyID:               grantPolicyID,
			ProvisionPolicy:             provisionPolicy,
			RevokePolicyID:              revokePolicyID,
			RiskLevelValueID:            riskLevelValueID,
			Slug:                        slug,
			UserEditedMask:              userEditedMask,
		})
	}
	var appIds []string = nil
	for _, appIdsItem := range r.AppIds {
		appIds = append(appIds, appIdsItem.ValueString())
	}
	createdByUserID := new(string)
	if !r.CreatedByUserID.IsUnknown() && !r.CreatedByUserID.IsNull() {
		*createdByUserID = r.CreatedByUserID.ValueString()
	} else {
		createdByUserID = nil
	}
	description1 := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description1 = r.Description.ValueString()
	} else {
		description1 = nil
	}
	displayName1 := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName1 = r.DisplayName.ValueString()
	} else {
		displayName1 = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	visibleToEveryone := new(bool)
	if !r.VisibleToEveryone.IsUnknown() && !r.VisibleToEveryone.IsNull() {
		*visibleToEveryone = r.VisibleToEveryone.ValueBool()
	} else {
		visibleToEveryone = nil
	}
	out := shared.RequestCatalogInput{
		AccessEntitlements: accessEntitlements,
		AppIds:             appIds,
		CreatedByUserID:    createdByUserID,
		Description:        description1,
		DisplayName:        displayName1,
		ID:                 id,
		Published:          published,
		VisibleToEveryone:  visibleToEveryone,
	}
	return &out
}

func (r *CatalogResourceModel) ToDeleteSDKType() *shared.RequestCatalogManagementServiceDeleteRequest {
	out := shared.RequestCatalogManagementServiceDeleteRequest{}
	return &out
}

func (r *CatalogResourceModel) RefreshFromGetResponse(resp *shared.RequestCatalog) {
	if len(r.AccessEntitlements) > len(resp.AccessEntitlements) {
		r.AccessEntitlements = r.AccessEntitlements[:len(resp.AccessEntitlements)]
	}
	for accessEntitlementsCount, accessEntitlementsItem := range resp.AccessEntitlements {
		var accessEntitlements1 AppEntitlement
		if accessEntitlementsItem.Alias != nil {
			accessEntitlements1.Alias = types.StringValue(*accessEntitlementsItem.Alias)
		} else {
			accessEntitlements1.Alias = types.StringNull()
		}
		if accessEntitlementsItem.AppID != nil {
			accessEntitlements1.AppID = types.StringValue(*accessEntitlementsItem.AppID)
		} else {
			accessEntitlements1.AppID = types.StringNull()
		}
		if accessEntitlementsItem.AppResourceID != nil {
			accessEntitlements1.AppResourceID = types.StringValue(*accessEntitlementsItem.AppResourceID)
		} else {
			accessEntitlements1.AppResourceID = types.StringNull()
		}
		if accessEntitlementsItem.AppResourceTypeID != nil {
			accessEntitlements1.AppResourceTypeID = types.StringValue(*accessEntitlementsItem.AppResourceTypeID)
		} else {
			accessEntitlements1.AppResourceTypeID = types.StringNull()
		}
		if accessEntitlementsItem.CertifyPolicyID != nil {
			accessEntitlements1.CertifyPolicyID = types.StringValue(*accessEntitlementsItem.CertifyPolicyID)
		} else {
			accessEntitlements1.CertifyPolicyID = types.StringNull()
		}
		accessEntitlements1.ComplianceFrameworkValueIds = nil
		for _, v := range accessEntitlementsItem.ComplianceFrameworkValueIds {
			accessEntitlements1.ComplianceFrameworkValueIds = append(accessEntitlements1.ComplianceFrameworkValueIds, types.StringValue(v))
		}
		if accessEntitlementsItem.CreatedAt != nil {
			accessEntitlements1.CreatedAt = types.StringValue(accessEntitlementsItem.CreatedAt.Format(time.RFC3339Nano))
		} else {
			accessEntitlements1.CreatedAt = types.StringNull()
		}
		if accessEntitlementsItem.DeletedAt != nil {
			accessEntitlements1.DeletedAt = types.StringValue(accessEntitlementsItem.DeletedAt.Format(time.RFC3339Nano))
		} else {
			accessEntitlements1.DeletedAt = types.StringNull()
		}
		if accessEntitlementsItem.Description != nil {
			accessEntitlements1.Description = types.StringValue(*accessEntitlementsItem.Description)
		} else {
			accessEntitlements1.Description = types.StringNull()
		}
		if accessEntitlementsItem.DisplayName != nil {
			accessEntitlements1.DisplayName = types.StringValue(*accessEntitlementsItem.DisplayName)
		} else {
			accessEntitlements1.DisplayName = types.StringNull()
		}
		if accessEntitlementsItem.DurationGrant != nil {
			accessEntitlements1.DurationGrant = types.StringValue(*accessEntitlementsItem.DurationGrant)
		} else {
			accessEntitlements1.DurationGrant = types.StringNull()
		}
		if accessEntitlementsItem.DurationUnset == nil {
			accessEntitlements1.DurationUnset = nil
		} else {
			accessEntitlements1.DurationUnset = &DurationUnset{}
		}
		if accessEntitlementsItem.EmergencyGrantEnabled != nil {
			accessEntitlements1.EmergencyGrantEnabled = types.BoolValue(*accessEntitlementsItem.EmergencyGrantEnabled)
		} else {
			accessEntitlements1.EmergencyGrantEnabled = types.BoolNull()
		}
		if accessEntitlementsItem.EmergencyGrantPolicyID != nil {
			accessEntitlements1.EmergencyGrantPolicyID = types.StringValue(*accessEntitlementsItem.EmergencyGrantPolicyID)
		} else {
			accessEntitlements1.EmergencyGrantPolicyID = types.StringNull()
		}
		if accessEntitlementsItem.GrantCount != nil {
			accessEntitlements1.GrantCount = types.StringValue(*accessEntitlementsItem.GrantCount)
		} else {
			accessEntitlements1.GrantCount = types.StringNull()
		}
		if accessEntitlementsItem.GrantPolicyID != nil {
			accessEntitlements1.GrantPolicyID = types.StringValue(*accessEntitlementsItem.GrantPolicyID)
		} else {
			accessEntitlements1.GrantPolicyID = types.StringNull()
		}
		if accessEntitlementsItem.ID != nil {
			accessEntitlements1.ID = types.StringValue(*accessEntitlementsItem.ID)
		} else {
			accessEntitlements1.ID = types.StringNull()
		}
		if accessEntitlementsItem.ProvisionPolicy == nil {
			accessEntitlements1.ProvisionPolicy = nil
		} else {
			accessEntitlements1.ProvisionPolicy = &ProvisionPolicy{}
			if accessEntitlementsItem.ProvisionPolicy.ConnectorProvision == nil {
				accessEntitlements1.ProvisionPolicy.ConnectorProvision = nil
			} else {
				accessEntitlements1.ProvisionPolicy.ConnectorProvision = &DurationUnset{}
			}
			if accessEntitlementsItem.ProvisionPolicy.DelegatedProvision == nil {
				accessEntitlements1.ProvisionPolicy.DelegatedProvision = nil
			} else {
				accessEntitlements1.ProvisionPolicy.DelegatedProvision = &DelegatedProvision{}
				if accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID != nil {
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.AppID = types.StringValue(*accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID)
				} else {
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.AppID = types.StringNull()
				}
				if accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID != nil {
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringValue(*accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID)
				} else {
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringNull()
				}
				if accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit != nil {
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.Implicit = types.BoolValue(*accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit)
				} else {
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.Implicit = types.BoolNull()
				}
			}
			if accessEntitlementsItem.ProvisionPolicy.ManualProvision == nil {
				accessEntitlements1.ProvisionPolicy.ManualProvision = nil
			} else {
				accessEntitlements1.ProvisionPolicy.ManualProvision = &ManualProvision{}
				if accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions != nil {
					accessEntitlements1.ProvisionPolicy.ManualProvision.Instructions = types.StringValue(*accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions)
				} else {
					accessEntitlements1.ProvisionPolicy.ManualProvision.Instructions = types.StringNull()
				}
				accessEntitlements1.ProvisionPolicy.ManualProvision.UserIds = nil
				for _, v := range accessEntitlementsItem.ProvisionPolicy.ManualProvision.UserIds {
					accessEntitlements1.ProvisionPolicy.ManualProvision.UserIds = append(accessEntitlements1.ProvisionPolicy.ManualProvision.UserIds, types.StringValue(v))
				}
			}
		}
		if accessEntitlementsItem.RevokePolicyID != nil {
			accessEntitlements1.RevokePolicyID = types.StringValue(*accessEntitlementsItem.RevokePolicyID)
		} else {
			accessEntitlements1.RevokePolicyID = types.StringNull()
		}
		if accessEntitlementsItem.RiskLevelValueID != nil {
			accessEntitlements1.RiskLevelValueID = types.StringValue(*accessEntitlementsItem.RiskLevelValueID)
		} else {
			accessEntitlements1.RiskLevelValueID = types.StringNull()
		}
		if accessEntitlementsItem.Slug != nil {
			accessEntitlements1.Slug = types.StringValue(*accessEntitlementsItem.Slug)
		} else {
			accessEntitlements1.Slug = types.StringNull()
		}
		if accessEntitlementsItem.SystemBuiltin != nil {
			accessEntitlements1.SystemBuiltin = types.BoolValue(*accessEntitlementsItem.SystemBuiltin)
		} else {
			accessEntitlements1.SystemBuiltin = types.BoolNull()
		}
		if accessEntitlementsItem.UpdatedAt != nil {
			accessEntitlements1.UpdatedAt = types.StringValue(accessEntitlementsItem.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			accessEntitlements1.UpdatedAt = types.StringNull()
		}
		if accessEntitlementsItem.UserEditedMask != nil {
			accessEntitlements1.UserEditedMask = types.StringValue(*accessEntitlementsItem.UserEditedMask)
		} else {
			accessEntitlements1.UserEditedMask = types.StringNull()
		}
		if accessEntitlementsCount+1 > len(r.AccessEntitlements) {
			r.AccessEntitlements = append(r.AccessEntitlements, accessEntitlements1)
		} else {
			r.AccessEntitlements[accessEntitlementsCount].Alias = accessEntitlements1.Alias
			r.AccessEntitlements[accessEntitlementsCount].AppID = accessEntitlements1.AppID
			r.AccessEntitlements[accessEntitlementsCount].AppResourceID = accessEntitlements1.AppResourceID
			r.AccessEntitlements[accessEntitlementsCount].AppResourceTypeID = accessEntitlements1.AppResourceTypeID
			r.AccessEntitlements[accessEntitlementsCount].CertifyPolicyID = accessEntitlements1.CertifyPolicyID
			r.AccessEntitlements[accessEntitlementsCount].ComplianceFrameworkValueIds = accessEntitlements1.ComplianceFrameworkValueIds
			r.AccessEntitlements[accessEntitlementsCount].CreatedAt = accessEntitlements1.CreatedAt
			r.AccessEntitlements[accessEntitlementsCount].DeletedAt = accessEntitlements1.DeletedAt
			r.AccessEntitlements[accessEntitlementsCount].Description = accessEntitlements1.Description
			r.AccessEntitlements[accessEntitlementsCount].DisplayName = accessEntitlements1.DisplayName
			r.AccessEntitlements[accessEntitlementsCount].DurationGrant = accessEntitlements1.DurationGrant
			r.AccessEntitlements[accessEntitlementsCount].DurationUnset = accessEntitlements1.DurationUnset
			r.AccessEntitlements[accessEntitlementsCount].EmergencyGrantEnabled = accessEntitlements1.EmergencyGrantEnabled
			r.AccessEntitlements[accessEntitlementsCount].EmergencyGrantPolicyID = accessEntitlements1.EmergencyGrantPolicyID
			r.AccessEntitlements[accessEntitlementsCount].GrantCount = accessEntitlements1.GrantCount
			r.AccessEntitlements[accessEntitlementsCount].GrantPolicyID = accessEntitlements1.GrantPolicyID
			r.AccessEntitlements[accessEntitlementsCount].ID = accessEntitlements1.ID
			r.AccessEntitlements[accessEntitlementsCount].ProvisionPolicy = accessEntitlements1.ProvisionPolicy
			r.AccessEntitlements[accessEntitlementsCount].RevokePolicyID = accessEntitlements1.RevokePolicyID
			r.AccessEntitlements[accessEntitlementsCount].RiskLevelValueID = accessEntitlements1.RiskLevelValueID
			r.AccessEntitlements[accessEntitlementsCount].Slug = accessEntitlements1.Slug
			r.AccessEntitlements[accessEntitlementsCount].SystemBuiltin = accessEntitlements1.SystemBuiltin
			r.AccessEntitlements[accessEntitlementsCount].UpdatedAt = accessEntitlements1.UpdatedAt
			r.AccessEntitlements[accessEntitlementsCount].UserEditedMask = accessEntitlements1.UserEditedMask
		}
	}
	r.AppIds = nil
	for _, v := range resp.AppIds {
		r.AppIds = append(r.AppIds, types.StringValue(v))
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.CreatedByUserID != nil {
		r.CreatedByUserID = types.StringValue(*resp.CreatedByUserID)
	} else {
		r.CreatedByUserID = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339Nano))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.Description != nil {
		r.Description = types.StringValue(*resp.Description)
	} else {
		r.Description = types.StringNull()
	}
	if resp.DisplayName != nil {
		r.DisplayName = types.StringValue(*resp.DisplayName)
	} else {
		r.DisplayName = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.Published != nil {
		r.Published = types.BoolValue(*resp.Published)
	} else {
		r.Published = types.BoolNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	if resp.VisibleToEveryone != nil {
		r.VisibleToEveryone = types.BoolValue(*resp.VisibleToEveryone)
	} else {
		r.VisibleToEveryone = types.BoolNull()
	}
}

func (r *CatalogResourceModel) RefreshFromCreateResponse(resp *shared.RequestCatalog) {
	r.RefreshFromGetResponse(resp)
}

func (r *CatalogResourceModel) RefreshFromUpdateResponse(resp *shared.RequestCatalog) {
	r.RefreshFromGetResponse(resp)
}
