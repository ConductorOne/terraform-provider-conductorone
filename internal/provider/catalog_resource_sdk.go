// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/shared"
	"time"
)

func (r *CatalogResourceModel) ToSharedRequestCatalogManagementServiceCreateRequest() *shared.RequestCatalogManagementServiceCreateRequest {
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var requestCatalogExpandMask *shared.RequestCatalogExpandMask
	if r.RequestCatalogExpandMask != nil {
		requestCatalogExpandMask = &shared.RequestCatalogExpandMask{}
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	requestBundle := new(bool)
	if !r.RequestBundle.IsUnknown() && !r.RequestBundle.IsNull() {
		*requestBundle = r.RequestBundle.ValueBool()
	} else {
		requestBundle = nil
	}
	visibleToEveryone := new(bool)
	if !r.VisibleToEveryone.IsUnknown() && !r.VisibleToEveryone.IsNull() {
		*visibleToEveryone = r.VisibleToEveryone.ValueBool()
	} else {
		visibleToEveryone = nil
	}
	out := shared.RequestCatalogManagementServiceCreateRequest{
		Description:              description,
		DisplayName:              displayName,
		RequestCatalogExpandMask: requestCatalogExpandMask,
		Published:                published,
		RequestBundle:            requestBundle,
		VisibleToEveryone:        visibleToEveryone,
	}
	return &out
}

func (r *CatalogResourceModel) RefreshFromSharedRequestCatalog(resp *shared.RequestCatalog) {
	if resp != nil {
		if len(r.AccessEntitlements) > len(resp.AccessEntitlements) {
			r.AccessEntitlements = r.AccessEntitlements[:len(resp.AccessEntitlements)]
		}
		for accessEntitlementsCount, accessEntitlementsItem := range resp.AccessEntitlements {
			var accessEntitlements1 tfTypes.AppEntitlement
			accessEntitlements1.Alias = types.StringPointerValue(accessEntitlementsItem.Alias)
			accessEntitlements1.AppID = types.StringPointerValue(accessEntitlementsItem.AppID)
			accessEntitlements1.AppResourceID = types.StringPointerValue(accessEntitlementsItem.AppResourceID)
			accessEntitlements1.AppResourceTypeID = types.StringPointerValue(accessEntitlementsItem.AppResourceTypeID)
			accessEntitlements1.CertifyPolicyID = types.StringPointerValue(accessEntitlementsItem.CertifyPolicyID)
			accessEntitlements1.ComplianceFrameworkValueIds = []types.String{}
			for _, v := range accessEntitlementsItem.ComplianceFrameworkValueIds {
				accessEntitlements1.ComplianceFrameworkValueIds = append(accessEntitlements1.ComplianceFrameworkValueIds, types.StringValue(v))
			}
			if accessEntitlementsItem.CreatedAt != nil {
				accessEntitlements1.CreatedAt = types.StringValue(accessEntitlementsItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				accessEntitlements1.CreatedAt = types.StringNull()
			}
			if accessEntitlementsItem.DeletedAt != nil {
				accessEntitlements1.DeletedAt = types.StringValue(accessEntitlementsItem.DeletedAt.Format(time.RFC3339Nano))
			} else {
				accessEntitlements1.DeletedAt = types.StringNull()
			}
			accessEntitlements1.Description = types.StringPointerValue(accessEntitlementsItem.Description)
			accessEntitlements1.DisplayName = types.StringPointerValue(accessEntitlementsItem.DisplayName)
			accessEntitlements1.DurationGrant = types.StringPointerValue(accessEntitlementsItem.DurationGrant)
			if accessEntitlementsItem.DurationUnset == nil {
				accessEntitlements1.DurationUnset = nil
			} else {
				accessEntitlements1.DurationUnset = &tfTypes.Three{}
			}
			accessEntitlements1.EmergencyGrantEnabled = types.BoolPointerValue(accessEntitlementsItem.EmergencyGrantEnabled)
			accessEntitlements1.EmergencyGrantPolicyID = types.StringPointerValue(accessEntitlementsItem.EmergencyGrantPolicyID)
			accessEntitlements1.GrantCount = types.StringPointerValue(accessEntitlementsItem.GrantCount)
			accessEntitlements1.GrantPolicyID = types.StringPointerValue(accessEntitlementsItem.GrantPolicyID)
			accessEntitlements1.ID = types.StringPointerValue(accessEntitlementsItem.ID)
			accessEntitlements1.IsManuallyManaged = types.BoolPointerValue(accessEntitlementsItem.IsManuallyManaged)
			if accessEntitlementsItem.ProvisionPolicy == nil {
				accessEntitlements1.ProvisionPolicy = nil
			} else {
				accessEntitlements1.ProvisionPolicy = &tfTypes.ProvisionPolicy{}
				if accessEntitlementsItem.ProvisionPolicy.ConnectorProvision == nil {
					accessEntitlements1.ProvisionPolicy.ConnectorProvision = nil
				} else {
					accessEntitlements1.ProvisionPolicy.ConnectorProvision = &tfTypes.Three{}
				}
				if accessEntitlementsItem.ProvisionPolicy.DelegatedProvision == nil {
					accessEntitlements1.ProvisionPolicy.DelegatedProvision = nil
				} else {
					accessEntitlements1.ProvisionPolicy.DelegatedProvision = &tfTypes.DelegatedProvision{}
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.AppID = types.StringPointerValue(accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID)
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringPointerValue(accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID)
					accessEntitlements1.ProvisionPolicy.DelegatedProvision.Implicit = types.BoolPointerValue(accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit)
				}
				if accessEntitlementsItem.ProvisionPolicy.ManualProvision == nil {
					accessEntitlements1.ProvisionPolicy.ManualProvision = nil
				} else {
					accessEntitlements1.ProvisionPolicy.ManualProvision = &tfTypes.ManualProvision{}
					accessEntitlements1.ProvisionPolicy.ManualProvision.Instructions = types.StringPointerValue(accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions)
					accessEntitlements1.ProvisionPolicy.ManualProvision.UserIds = []types.String{}
					for _, v := range accessEntitlementsItem.ProvisionPolicy.ManualProvision.UserIds {
						accessEntitlements1.ProvisionPolicy.ManualProvision.UserIds = append(accessEntitlements1.ProvisionPolicy.ManualProvision.UserIds, types.StringValue(v))
					}
				}
				if accessEntitlementsItem.ProvisionPolicy.WebhookProvision == nil {
					accessEntitlements1.ProvisionPolicy.WebhookProvision = nil
				} else {
					accessEntitlements1.ProvisionPolicy.WebhookProvision = &tfTypes.WebhookProvision{}
					accessEntitlements1.ProvisionPolicy.WebhookProvision.WebhookID = types.StringPointerValue(accessEntitlementsItem.ProvisionPolicy.WebhookProvision.WebhookID)
				}
			}
			accessEntitlements1.RevokePolicyID = types.StringPointerValue(accessEntitlementsItem.RevokePolicyID)
			accessEntitlements1.RiskLevelValueID = types.StringPointerValue(accessEntitlementsItem.RiskLevelValueID)
			accessEntitlements1.Slug = types.StringPointerValue(accessEntitlementsItem.Slug)
			if len(accessEntitlementsItem.SourceConnectorIds) > 0 {
				accessEntitlements1.SourceConnectorIds = make(map[string]types.String)
				for key, value := range accessEntitlementsItem.SourceConnectorIds {
					accessEntitlements1.SourceConnectorIds[key] = types.StringValue(value)
				}
			}
			accessEntitlements1.SystemBuiltin = types.BoolPointerValue(accessEntitlementsItem.SystemBuiltin)
			if accessEntitlementsItem.UpdatedAt != nil {
				accessEntitlements1.UpdatedAt = types.StringValue(accessEntitlementsItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				accessEntitlements1.UpdatedAt = types.StringNull()
			}
			accessEntitlements1.UserEditedMask = types.StringPointerValue(accessEntitlementsItem.UserEditedMask)
			if accessEntitlementsCount+1 > len(r.AccessEntitlements) {
				r.AccessEntitlements = append(r.AccessEntitlements, accessEntitlements1)
			} else {
				r.AccessEntitlements[accessEntitlementsCount].Alias = accessEntitlements1.Alias
				r.AccessEntitlements[accessEntitlementsCount].AppID = accessEntitlements1.AppID
				r.AccessEntitlements[accessEntitlementsCount].AppResourceID = accessEntitlements1.AppResourceID
				r.AccessEntitlements[accessEntitlementsCount].AppResourceTypeID = accessEntitlements1.AppResourceTypeID
				r.AccessEntitlements[accessEntitlementsCount].CertifyPolicyID = accessEntitlements1.CertifyPolicyID
				r.AccessEntitlements[accessEntitlementsCount].ComplianceFrameworkValueIds = accessEntitlements1.ComplianceFrameworkValueIds
				r.AccessEntitlements[accessEntitlementsCount].CreatedAt = accessEntitlements1.CreatedAt
				r.AccessEntitlements[accessEntitlementsCount].DeletedAt = accessEntitlements1.DeletedAt
				r.AccessEntitlements[accessEntitlementsCount].Description = accessEntitlements1.Description
				r.AccessEntitlements[accessEntitlementsCount].DisplayName = accessEntitlements1.DisplayName
				r.AccessEntitlements[accessEntitlementsCount].DurationGrant = accessEntitlements1.DurationGrant
				r.AccessEntitlements[accessEntitlementsCount].DurationUnset = accessEntitlements1.DurationUnset
				r.AccessEntitlements[accessEntitlementsCount].EmergencyGrantEnabled = accessEntitlements1.EmergencyGrantEnabled
				r.AccessEntitlements[accessEntitlementsCount].EmergencyGrantPolicyID = accessEntitlements1.EmergencyGrantPolicyID
				r.AccessEntitlements[accessEntitlementsCount].GrantCount = accessEntitlements1.GrantCount
				r.AccessEntitlements[accessEntitlementsCount].GrantPolicyID = accessEntitlements1.GrantPolicyID
				r.AccessEntitlements[accessEntitlementsCount].ID = accessEntitlements1.ID
				r.AccessEntitlements[accessEntitlementsCount].IsManuallyManaged = accessEntitlements1.IsManuallyManaged
				r.AccessEntitlements[accessEntitlementsCount].ProvisionPolicy = accessEntitlements1.ProvisionPolicy
				r.AccessEntitlements[accessEntitlementsCount].RevokePolicyID = accessEntitlements1.RevokePolicyID
				r.AccessEntitlements[accessEntitlementsCount].RiskLevelValueID = accessEntitlements1.RiskLevelValueID
				r.AccessEntitlements[accessEntitlementsCount].Slug = accessEntitlements1.Slug
				r.AccessEntitlements[accessEntitlementsCount].SourceConnectorIds = accessEntitlements1.SourceConnectorIds
				r.AccessEntitlements[accessEntitlementsCount].SystemBuiltin = accessEntitlements1.SystemBuiltin
				r.AccessEntitlements[accessEntitlementsCount].UpdatedAt = accessEntitlements1.UpdatedAt
				r.AccessEntitlements[accessEntitlementsCount].UserEditedMask = accessEntitlements1.UserEditedMask
			}
		}
		r.AppIds = []types.String{}
		for _, v := range resp.AppIds {
			r.AppIds = append(r.AppIds, types.StringValue(v))
		}
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.CreatedByUserID = types.StringPointerValue(resp.CreatedByUserID)
		if resp.DeletedAt != nil {
			r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339Nano))
		} else {
			r.DeletedAt = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ID = types.StringPointerValue(resp.ID)
		r.Published = types.BoolPointerValue(resp.Published)
		r.RequestBundle = types.BoolPointerValue(resp.RequestBundle)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
		r.VisibleToEveryone = types.BoolPointerValue(resp.VisibleToEveryone)
	}
}

func (r *CatalogResourceModel) ToSharedRequestCatalogInput() *shared.RequestCatalogInput {
	var accessEntitlements []shared.AppEntitlementInput = nil
	for _, accessEntitlementsItem := range r.AccessEntitlements {
		appID := new(string)
		if !accessEntitlementsItem.AppID.IsUnknown() && !accessEntitlementsItem.AppID.IsNull() {
			*appID = accessEntitlementsItem.AppID.ValueString()
		} else {
			appID = nil
		}
		appResourceID := new(string)
		if !accessEntitlementsItem.AppResourceID.IsUnknown() && !accessEntitlementsItem.AppResourceID.IsNull() {
			*appResourceID = accessEntitlementsItem.AppResourceID.ValueString()
		} else {
			appResourceID = nil
		}
		appResourceTypeID := new(string)
		if !accessEntitlementsItem.AppResourceTypeID.IsUnknown() && !accessEntitlementsItem.AppResourceTypeID.IsNull() {
			*appResourceTypeID = accessEntitlementsItem.AppResourceTypeID.ValueString()
		} else {
			appResourceTypeID = nil
		}
		certifyPolicyID := new(string)
		if !accessEntitlementsItem.CertifyPolicyID.IsUnknown() && !accessEntitlementsItem.CertifyPolicyID.IsNull() {
			*certifyPolicyID = accessEntitlementsItem.CertifyPolicyID.ValueString()
		} else {
			certifyPolicyID = nil
		}
		var complianceFrameworkValueIds []string = nil
		for _, complianceFrameworkValueIdsItem := range accessEntitlementsItem.ComplianceFrameworkValueIds {
			complianceFrameworkValueIds = append(complianceFrameworkValueIds, complianceFrameworkValueIdsItem.ValueString())
		}
		description := new(string)
		if !accessEntitlementsItem.Description.IsUnknown() && !accessEntitlementsItem.Description.IsNull() {
			*description = accessEntitlementsItem.Description.ValueString()
		} else {
			description = nil
		}
		displayName := new(string)
		if !accessEntitlementsItem.DisplayName.IsUnknown() && !accessEntitlementsItem.DisplayName.IsNull() {
			*displayName = accessEntitlementsItem.DisplayName.ValueString()
		} else {
			displayName = nil
		}
		durationGrant := new(string)
		if !accessEntitlementsItem.DurationGrant.IsUnknown() && !accessEntitlementsItem.DurationGrant.IsNull() {
			*durationGrant = accessEntitlementsItem.DurationGrant.ValueString()
		} else {
			durationGrant = nil
		}
		var durationUnset *shared.DurationUnset
		if accessEntitlementsItem.DurationUnset != nil {
			durationUnset = &shared.DurationUnset{}
		}
		emergencyGrantEnabled := new(bool)
		if !accessEntitlementsItem.EmergencyGrantEnabled.IsUnknown() && !accessEntitlementsItem.EmergencyGrantEnabled.IsNull() {
			*emergencyGrantEnabled = accessEntitlementsItem.EmergencyGrantEnabled.ValueBool()
		} else {
			emergencyGrantEnabled = nil
		}
		emergencyGrantPolicyID := new(string)
		if !accessEntitlementsItem.EmergencyGrantPolicyID.IsUnknown() && !accessEntitlementsItem.EmergencyGrantPolicyID.IsNull() {
			*emergencyGrantPolicyID = accessEntitlementsItem.EmergencyGrantPolicyID.ValueString()
		} else {
			emergencyGrantPolicyID = nil
		}
		grantPolicyID := new(string)
		if !accessEntitlementsItem.GrantPolicyID.IsUnknown() && !accessEntitlementsItem.GrantPolicyID.IsNull() {
			*grantPolicyID = accessEntitlementsItem.GrantPolicyID.ValueString()
		} else {
			grantPolicyID = nil
		}
		isManuallyManaged := new(bool)
		if !accessEntitlementsItem.IsManuallyManaged.IsUnknown() && !accessEntitlementsItem.IsManuallyManaged.IsNull() {
			*isManuallyManaged = accessEntitlementsItem.IsManuallyManaged.ValueBool()
		} else {
			isManuallyManaged = nil
		}
		var provisionPolicy *shared.ProvisionPolicy
		if accessEntitlementsItem.ProvisionPolicy != nil {
			var connectorProvision *shared.ConnectorProvision
			if accessEntitlementsItem.ProvisionPolicy.ConnectorProvision != nil {
				connectorProvision = &shared.ConnectorProvision{}
			}
			var delegatedProvision *shared.DelegatedProvision
			if accessEntitlementsItem.ProvisionPolicy.DelegatedProvision != nil {
				appId1 := new(string)
				if !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID.IsNull() {
					*appId1 = accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.AppID.ValueString()
				} else {
					appId1 = nil
				}
				entitlementID := new(string)
				if !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID.IsNull() {
					*entitlementID = accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.EntitlementID.ValueString()
				} else {
					entitlementID = nil
				}
				implicit := new(bool)
				if !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit.IsNull() {
					*implicit = accessEntitlementsItem.ProvisionPolicy.DelegatedProvision.Implicit.ValueBool()
				} else {
					implicit = nil
				}
				delegatedProvision = &shared.DelegatedProvision{
					AppID:         appId1,
					EntitlementID: entitlementID,
					Implicit:      implicit,
				}
			}
			var manualProvision *shared.ManualProvision
			if accessEntitlementsItem.ProvisionPolicy.ManualProvision != nil {
				instructions := new(string)
				if !accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions.IsNull() {
					*instructions = accessEntitlementsItem.ProvisionPolicy.ManualProvision.Instructions.ValueString()
				} else {
					instructions = nil
				}
				var userIds []string = nil
				for _, userIdsItem := range accessEntitlementsItem.ProvisionPolicy.ManualProvision.UserIds {
					userIds = append(userIds, userIdsItem.ValueString())
				}
				manualProvision = &shared.ManualProvision{
					Instructions: instructions,
					UserIds:      userIds,
				}
			}
			var webhookProvision *shared.WebhookProvision
			if accessEntitlementsItem.ProvisionPolicy.WebhookProvision != nil {
				webhookID := new(string)
				if !accessEntitlementsItem.ProvisionPolicy.WebhookProvision.WebhookID.IsUnknown() && !accessEntitlementsItem.ProvisionPolicy.WebhookProvision.WebhookID.IsNull() {
					*webhookID = accessEntitlementsItem.ProvisionPolicy.WebhookProvision.WebhookID.ValueString()
				} else {
					webhookID = nil
				}
				webhookProvision = &shared.WebhookProvision{
					WebhookID: webhookID,
				}
			}
			provisionPolicy = &shared.ProvisionPolicy{
				ConnectorProvision: connectorProvision,
				DelegatedProvision: delegatedProvision,
				ManualProvision:    manualProvision,
				WebhookProvision:   webhookProvision,
			}
		}
		revokePolicyID := new(string)
		if !accessEntitlementsItem.RevokePolicyID.IsUnknown() && !accessEntitlementsItem.RevokePolicyID.IsNull() {
			*revokePolicyID = accessEntitlementsItem.RevokePolicyID.ValueString()
		} else {
			revokePolicyID = nil
		}
		riskLevelValueID := new(string)
		if !accessEntitlementsItem.RiskLevelValueID.IsUnknown() && !accessEntitlementsItem.RiskLevelValueID.IsNull() {
			*riskLevelValueID = accessEntitlementsItem.RiskLevelValueID.ValueString()
		} else {
			riskLevelValueID = nil
		}
		slug := new(string)
		if !accessEntitlementsItem.Slug.IsUnknown() && !accessEntitlementsItem.Slug.IsNull() {
			*slug = accessEntitlementsItem.Slug.ValueString()
		} else {
			slug = nil
		}
		sourceConnectorIds := make(map[string]string)
		for sourceConnectorIdsKey, sourceConnectorIdsValue := range accessEntitlementsItem.SourceConnectorIds {
			sourceConnectorIdsInst := sourceConnectorIdsValue.ValueString()
			sourceConnectorIds[sourceConnectorIdsKey] = sourceConnectorIdsInst
		}
		userEditedMask := new(string)
		if !accessEntitlementsItem.UserEditedMask.IsUnknown() && !accessEntitlementsItem.UserEditedMask.IsNull() {
			*userEditedMask = accessEntitlementsItem.UserEditedMask.ValueString()
		} else {
			userEditedMask = nil
		}
		accessEntitlements = append(accessEntitlements, shared.AppEntitlementInput{
			AppID:                       appID,
			AppResourceID:               appResourceID,
			AppResourceTypeID:           appResourceTypeID,
			CertifyPolicyID:             certifyPolicyID,
			ComplianceFrameworkValueIds: complianceFrameworkValueIds,
			Description:                 description,
			DisplayName:                 displayName,
			DurationGrant:               durationGrant,
			DurationUnset:               durationUnset,
			EmergencyGrantEnabled:       emergencyGrantEnabled,
			EmergencyGrantPolicyID:      emergencyGrantPolicyID,
			GrantPolicyID:               grantPolicyID,
			IsManuallyManaged:           isManuallyManaged,
			ProvisionPolicy:             provisionPolicy,
			RevokePolicyID:              revokePolicyID,
			RiskLevelValueID:            riskLevelValueID,
			Slug:                        slug,
			SourceConnectorIds:          sourceConnectorIds,
			UserEditedMask:              userEditedMask,
		})
	}
	var appIds []string = nil
	for _, appIdsItem := range r.AppIds {
		appIds = append(appIds, appIdsItem.ValueString())
	}
	createdByUserID := new(string)
	if !r.CreatedByUserID.IsUnknown() && !r.CreatedByUserID.IsNull() {
		*createdByUserID = r.CreatedByUserID.ValueString()
	} else {
		createdByUserID = nil
	}
	description1 := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description1 = r.Description.ValueString()
	} else {
		description1 = nil
	}
	displayName1 := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName1 = r.DisplayName.ValueString()
	} else {
		displayName1 = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	requestBundle := new(bool)
	if !r.RequestBundle.IsUnknown() && !r.RequestBundle.IsNull() {
		*requestBundle = r.RequestBundle.ValueBool()
	} else {
		requestBundle = nil
	}
	visibleToEveryone := new(bool)
	if !r.VisibleToEveryone.IsUnknown() && !r.VisibleToEveryone.IsNull() {
		*visibleToEveryone = r.VisibleToEveryone.ValueBool()
	} else {
		visibleToEveryone = nil
	}
	out := shared.RequestCatalogInput{
		AccessEntitlements: accessEntitlements,
		AppIds:             appIds,
		CreatedByUserID:    createdByUserID,
		Description:        description1,
		DisplayName:        displayName1,
		ID:                 id,
		Published:          published,
		RequestBundle:      requestBundle,
		VisibleToEveryone:  visibleToEveryone,
	}
	return &out
}

func (r *CatalogResourceModel) ToSharedRequestCatalogManagementServiceDeleteRequest() *shared.RequestCatalogManagementServiceDeleteRequest {
	out := shared.RequestCatalogManagementServiceDeleteRequest{}
	return &out
}
