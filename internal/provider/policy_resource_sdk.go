// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *PolicyResourceModel) RefreshFromSharedPolicy(ctx context.Context, resp *shared.Policy) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.PolicySteps != nil {
			r.PolicySteps = make(map[string]tfTypes.PolicySteps, len(resp.PolicySteps))
			for policyStepsKey, policyStepsValue := range resp.PolicySteps {
				var policyStepsResult tfTypes.PolicySteps
				if policyStepsValue.Steps != nil {
					policyStepsResult.Steps = []tfTypes.PolicyStep{}

					for _, stepsItem := range policyStepsValue.Steps {
						var steps tfTypes.PolicyStep

						if stepsItem.Accept == nil {
							steps.Accept = nil
						} else {
							steps.Accept = &tfTypes.Accept{}
							steps.Accept.AcceptMessage = types.StringPointerValue(stepsItem.Accept.AcceptMessage)
						}
						if stepsItem.Approval == nil {
							steps.Approval = nil
						} else {
							steps.Approval = &tfTypes.Approval{}
							if stepsItem.Approval.Agent == nil {
								steps.Approval.Agent = nil
							} else {
								steps.Approval.Agent = &tfTypes.AgentApproval{}
								if stepsItem.Approval.Agent.AgentFailureAction != nil {
									steps.Approval.Agent.AgentFailureAction = types.StringValue(string(*stepsItem.Approval.Agent.AgentFailureAction))
								} else {
									steps.Approval.Agent.AgentFailureAction = types.StringNull()
								}
								if stepsItem.Approval.Agent.AgentMode != nil {
									steps.Approval.Agent.AgentMode = types.StringValue(string(*stepsItem.Approval.Agent.AgentMode))
								} else {
									steps.Approval.Agent.AgentMode = types.StringNull()
								}
								steps.Approval.Agent.AgentUserID = types.StringPointerValue(stepsItem.Approval.Agent.AgentUserID)
								steps.Approval.Agent.Instructions = types.StringPointerValue(stepsItem.Approval.Agent.Instructions)
								if stepsItem.Approval.Agent.PolicyIds != nil {
									steps.Approval.Agent.PolicyIds = make([]types.String, 0, len(stepsItem.Approval.Agent.PolicyIds))
									for _, v := range stepsItem.Approval.Agent.PolicyIds {
										steps.Approval.Agent.PolicyIds = append(steps.Approval.Agent.PolicyIds, types.StringValue(v))
									}
								}
								if stepsItem.Approval.Agent.ReassignToUserIds != nil {
									steps.Approval.Agent.ReassignToUserIds = make([]types.String, 0, len(stepsItem.Approval.Agent.ReassignToUserIds))
									for _, v := range stepsItem.Approval.Agent.ReassignToUserIds {
										steps.Approval.Agent.ReassignToUserIds = append(steps.Approval.Agent.ReassignToUserIds, types.StringValue(v))
									}
								}
							}
							steps.Approval.AllowDelegation = types.BoolPointerValue(stepsItem.Approval.AllowDelegation)
							if stepsItem.Approval.AllowedReassignees != nil {
								steps.Approval.AllowedReassignees = make([]types.String, 0, len(stepsItem.Approval.AllowedReassignees))
								for _, v := range stepsItem.Approval.AllowedReassignees {
									steps.Approval.AllowedReassignees = append(steps.Approval.AllowedReassignees, types.StringValue(v))
								}
							}
							steps.Approval.AllowReassignment = types.BoolPointerValue(stepsItem.Approval.AllowReassignment)
							if stepsItem.Approval.AppOwners == nil {
								steps.Approval.AppOwners = nil
							} else {
								steps.Approval.AppOwners = &tfTypes.AppOwnerApproval{}
								steps.Approval.AppOwners.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.AppOwners.AllowSelfApproval)
							}
							steps.Approval.Assigned = types.BoolPointerValue(stepsItem.Approval.Assigned)
							if stepsItem.Approval.EntitlementOwners == nil {
								steps.Approval.EntitlementOwners = nil
							} else {
								steps.Approval.EntitlementOwners = &tfTypes.EntitlementOwnerApproval{}
								steps.Approval.EntitlementOwners.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.EntitlementOwners.AllowSelfApproval)
								steps.Approval.EntitlementOwners.Fallback = types.BoolPointerValue(stepsItem.Approval.EntitlementOwners.Fallback)
								if stepsItem.Approval.EntitlementOwners.FallbackUserIds != nil {
									steps.Approval.EntitlementOwners.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.EntitlementOwners.FallbackUserIds))
									for _, v := range stepsItem.Approval.EntitlementOwners.FallbackUserIds {
										steps.Approval.EntitlementOwners.FallbackUserIds = append(steps.Approval.EntitlementOwners.FallbackUserIds, types.StringValue(v))
									}
								}
							}
							if stepsItem.Approval.Escalation == nil {
								steps.Approval.Escalation = nil
							} else {
								steps.Approval.Escalation = &tfTypes.Escalation{}
								steps.Approval.Escalation.EscalationComment = types.StringPointerValue(stepsItem.Approval.Escalation.EscalationComment)
								steps.Approval.Escalation.Expiration = types.StringPointerValue(stepsItem.Approval.Escalation.Expiration)
								if stepsItem.Approval.Escalation.ReassignToApprovers == nil {
									steps.Approval.Escalation.ReassignToApprovers = nil
								} else {
									steps.Approval.Escalation.ReassignToApprovers = &tfTypes.ReassignToApprovers{}
									if stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds != nil {
										steps.Approval.Escalation.ReassignToApprovers.ApproverIds = make([]types.String, 0, len(stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds))
										for _, v := range stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds {
											steps.Approval.Escalation.ReassignToApprovers.ApproverIds = append(steps.Approval.Escalation.ReassignToApprovers.ApproverIds, types.StringValue(v))
										}
									}
								}
								if stepsItem.Approval.Escalation.ReplacePolicy == nil {
									steps.Approval.Escalation.ReplacePolicy = nil
								} else {
									steps.Approval.Escalation.ReplacePolicy = &tfTypes.ReplacePolicy{}
									steps.Approval.Escalation.ReplacePolicy.PolicyID = types.StringPointerValue(stepsItem.Approval.Escalation.ReplacePolicy.PolicyID)
								}
							}
							steps.Approval.EscalationEnabled = types.BoolPointerValue(stepsItem.Approval.EscalationEnabled)
							if stepsItem.Approval.Expression == nil {
								steps.Approval.Expression = nil
							} else {
								steps.Approval.Expression = &tfTypes.ExpressionApproval{}
								steps.Approval.Expression.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.Expression.AllowSelfApproval)
								if stepsItem.Approval.Expression.AssignedUserIds != nil {
									steps.Approval.Expression.AssignedUserIds = make([]types.String, 0, len(stepsItem.Approval.Expression.AssignedUserIds))
									for _, v := range stepsItem.Approval.Expression.AssignedUserIds {
										steps.Approval.Expression.AssignedUserIds = append(steps.Approval.Expression.AssignedUserIds, types.StringValue(v))
									}
								}
								if stepsItem.Approval.Expression.Expressions != nil {
									steps.Approval.Expression.Expressions = make([]types.String, 0, len(stepsItem.Approval.Expression.Expressions))
									for _, v := range stepsItem.Approval.Expression.Expressions {
										steps.Approval.Expression.Expressions = append(steps.Approval.Expression.Expressions, types.StringValue(v))
									}
								}
								steps.Approval.Expression.Fallback = types.BoolPointerValue(stepsItem.Approval.Expression.Fallback)
								if stepsItem.Approval.Expression.FallbackUserIds != nil {
									steps.Approval.Expression.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.Expression.FallbackUserIds))
									for _, v := range stepsItem.Approval.Expression.FallbackUserIds {
										steps.Approval.Expression.FallbackUserIds = append(steps.Approval.Expression.FallbackUserIds, types.StringValue(v))
									}
								}
							}
							if stepsItem.Approval.Group == nil {
								steps.Approval.Group = nil
							} else {
								steps.Approval.Group = &tfTypes.AppGroupApproval{}
								steps.Approval.Group.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.Group.AllowSelfApproval)
								steps.Approval.Group.AppGroupID = types.StringPointerValue(stepsItem.Approval.Group.AppGroupID)
								steps.Approval.Group.AppID = types.StringPointerValue(stepsItem.Approval.Group.AppID)
								steps.Approval.Group.Fallback = types.BoolPointerValue(stepsItem.Approval.Group.Fallback)
								if stepsItem.Approval.Group.FallbackGroupIds != nil {
									steps.Approval.Group.FallbackGroupIds = []tfTypes.AppEntitlementReference{}

									for _, fallbackGroupIdsItem := range stepsItem.Approval.Group.FallbackGroupIds {
										var fallbackGroupIds tfTypes.AppEntitlementReference

										fallbackGroupIds.AppEntitlementID = types.StringPointerValue(fallbackGroupIdsItem.AppEntitlementID)
										fallbackGroupIds.AppID = types.StringPointerValue(fallbackGroupIdsItem.AppID)

										steps.Approval.Group.FallbackGroupIds = append(steps.Approval.Group.FallbackGroupIds, fallbackGroupIds)
									}
								}
								if stepsItem.Approval.Group.FallbackUserIds != nil {
									steps.Approval.Group.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.Group.FallbackUserIds))
									for _, v := range stepsItem.Approval.Group.FallbackUserIds {
										steps.Approval.Group.FallbackUserIds = append(steps.Approval.Group.FallbackUserIds, types.StringValue(v))
									}
								}
								steps.Approval.Group.IsGroupFallbackEnabled = types.BoolPointerValue(stepsItem.Approval.Group.IsGroupFallbackEnabled)
							}
							if stepsItem.Approval.Manager == nil {
								steps.Approval.Manager = nil
							} else {
								steps.Approval.Manager = &tfTypes.ManagerApproval{}
								steps.Approval.Manager.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.Manager.AllowSelfApproval)
								if stepsItem.Approval.Manager.AssignedUserIds != nil {
									steps.Approval.Manager.AssignedUserIds = make([]types.String, 0, len(stepsItem.Approval.Manager.AssignedUserIds))
									for _, v := range stepsItem.Approval.Manager.AssignedUserIds {
										steps.Approval.Manager.AssignedUserIds = append(steps.Approval.Manager.AssignedUserIds, types.StringValue(v))
									}
								}
								steps.Approval.Manager.Fallback = types.BoolPointerValue(stepsItem.Approval.Manager.Fallback)
								if stepsItem.Approval.Manager.FallbackUserIds != nil {
									steps.Approval.Manager.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.Manager.FallbackUserIds))
									for _, v := range stepsItem.Approval.Manager.FallbackUserIds {
										steps.Approval.Manager.FallbackUserIds = append(steps.Approval.Manager.FallbackUserIds, types.StringValue(v))
									}
								}
							}
							steps.Approval.RequireApprovalReason = types.BoolPointerValue(stepsItem.Approval.RequireApprovalReason)
							steps.Approval.RequireDenialReason = types.BoolPointerValue(stepsItem.Approval.RequireDenialReason)
							steps.Approval.RequireReassignmentReason = types.BoolPointerValue(stepsItem.Approval.RequireReassignmentReason)
							steps.Approval.RequiresStepUpProviderID = types.StringPointerValue(stepsItem.Approval.RequiresStepUpProviderID)
							if stepsItem.Approval.ResourceOwners == nil {
								steps.Approval.ResourceOwners = nil
							} else {
								steps.Approval.ResourceOwners = &tfTypes.ResourceOwnerApproval{}
								steps.Approval.ResourceOwners.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.ResourceOwners.AllowSelfApproval)
								steps.Approval.ResourceOwners.Fallback = types.BoolPointerValue(stepsItem.Approval.ResourceOwners.Fallback)
								if stepsItem.Approval.ResourceOwners.FallbackUserIds != nil {
									steps.Approval.ResourceOwners.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.ResourceOwners.FallbackUserIds))
									for _, v := range stepsItem.Approval.ResourceOwners.FallbackUserIds {
										steps.Approval.ResourceOwners.FallbackUserIds = append(steps.Approval.ResourceOwners.FallbackUserIds, types.StringValue(v))
									}
								}
							}
							if stepsItem.Approval.Self == nil {
								steps.Approval.Self = nil
							} else {
								steps.Approval.Self = &tfTypes.SelfApproval{}
								if stepsItem.Approval.Self.AssignedUserIds != nil {
									steps.Approval.Self.AssignedUserIds = make([]types.String, 0, len(stepsItem.Approval.Self.AssignedUserIds))
									for _, v := range stepsItem.Approval.Self.AssignedUserIds {
										steps.Approval.Self.AssignedUserIds = append(steps.Approval.Self.AssignedUserIds, types.StringValue(v))
									}
								}
								steps.Approval.Self.Fallback = types.BoolPointerValue(stepsItem.Approval.Self.Fallback)
								if stepsItem.Approval.Self.FallbackUserIds != nil {
									steps.Approval.Self.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.Self.FallbackUserIds))
									for _, v := range stepsItem.Approval.Self.FallbackUserIds {
										steps.Approval.Self.FallbackUserIds = append(steps.Approval.Self.FallbackUserIds, types.StringValue(v))
									}
								}
							}
							if stepsItem.Approval.Users == nil {
								steps.Approval.Users = nil
							} else {
								steps.Approval.Users = &tfTypes.UserApproval{}
								steps.Approval.Users.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.Users.AllowSelfApproval)
								if stepsItem.Approval.Users.UserIds != nil {
									steps.Approval.Users.UserIds = make([]types.String, 0, len(stepsItem.Approval.Users.UserIds))
									for _, v := range stepsItem.Approval.Users.UserIds {
										steps.Approval.Users.UserIds = append(steps.Approval.Users.UserIds, types.StringValue(v))
									}
								}
							}
							if stepsItem.Approval.Webhook == nil {
								steps.Approval.Webhook = nil
							} else {
								steps.Approval.Webhook = &tfTypes.WebhookApproval{}
								steps.Approval.Webhook.WebhookID = types.StringPointerValue(stepsItem.Approval.Webhook.WebhookID)
							}
						}
						if stepsItem.Form == nil {
							steps.Form = jsontypes.NewNormalizedNull()
						} else {
							formResult, _ := json.Marshal(stepsItem.Form)
							steps.Form = jsontypes.NewNormalizedValue(string(formResult))
						}
						if stepsItem.Provision == nil {
							steps.Provision = nil
						} else {
							steps.Provision = &tfTypes.Provision{}
							steps.Provision.Assigned = types.BoolPointerValue(stepsItem.Provision.Assigned)
							if stepsItem.Provision.ProvisionPolicy == nil {
								steps.Provision.ProvisionPolicy = nil
							} else {
								steps.Provision.ProvisionPolicy = &tfTypes.ProvisionPolicy{}
								if stepsItem.Provision.ProvisionPolicy.Connector == nil {
									steps.Provision.ProvisionPolicy.Connector = nil
								} else {
									steps.Provision.ProvisionPolicy.Connector = &tfTypes.ConnectorProvision{}
									if stepsItem.Provision.ProvisionPolicy.Connector.Account == nil {
										steps.Provision.ProvisionPolicy.Connector.Account = nil
									} else {
										steps.Provision.ProvisionPolicy.Connector.Account = &tfTypes.AccountProvision{}
										if stepsItem.Provision.ProvisionPolicy.Connector.Account.Config == nil {
											steps.Provision.ProvisionPolicy.Connector.Account.Config = nil
										} else {
											steps.Provision.ProvisionPolicy.Connector.Account.Config = &tfTypes.Config{}
										}
										steps.Provision.ProvisionPolicy.Connector.Account.ConnectorID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Connector.Account.ConnectorID)
										if stepsItem.Provision.ProvisionPolicy.Connector.Account.DoNotSave == nil {
											steps.Provision.ProvisionPolicy.Connector.Account.DoNotSave = nil
										} else {
											steps.Provision.ProvisionPolicy.Connector.Account.DoNotSave = &tfTypes.DoNotSave{}
										}
										if stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault == nil {
											steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault = nil
										} else {
											steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault = &tfTypes.SaveToVault{}
											if stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds != nil {
												steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds = make([]types.String, 0, len(stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds))
												for _, v := range stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds {
													steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds = append(steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds, types.StringValue(v))
												}
											}
										}
										steps.Provision.ProvisionPolicy.Connector.Account.SchemaID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Connector.Account.SchemaID)
									}
									if stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior == nil {
										steps.Provision.ProvisionPolicy.Connector.DefaultBehavior = nil
									} else {
										steps.Provision.ProvisionPolicy.Connector.DefaultBehavior = &tfTypes.DefaultBehavior{}
										steps.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID)
									}
									if stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount == nil {
										steps.Provision.ProvisionPolicy.Connector.DeleteAccount = nil
									} else {
										steps.Provision.ProvisionPolicy.Connector.DeleteAccount = &tfTypes.DeleteAccount{}
										steps.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID)
									}
								}
								if stepsItem.Provision.ProvisionPolicy.Delegated == nil {
									steps.Provision.ProvisionPolicy.Delegated = nil
								} else {
									steps.Provision.ProvisionPolicy.Delegated = &tfTypes.DelegatedProvision{}
									steps.Provision.ProvisionPolicy.Delegated.AppID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Delegated.AppID)
									steps.Provision.ProvisionPolicy.Delegated.EntitlementID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID)
								}
								if stepsItem.Provision.ProvisionPolicy.ExternalTicket == nil {
									steps.Provision.ProvisionPolicy.ExternalTicket = nil
								} else {
									steps.Provision.ProvisionPolicy.ExternalTicket = &tfTypes.ExternalTicketProvision{}
									steps.Provision.ProvisionPolicy.ExternalTicket.AppID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.ExternalTicket.AppID)
									steps.Provision.ProvisionPolicy.ExternalTicket.ConnectorID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.ExternalTicket.ConnectorID)
									steps.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID)
									steps.Provision.ProvisionPolicy.ExternalTicket.Instructions = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.ExternalTicket.Instructions)
								}
								if stepsItem.Provision.ProvisionPolicy.Manual == nil {
									steps.Provision.ProvisionPolicy.Manual = nil
								} else {
									steps.Provision.ProvisionPolicy.Manual = &tfTypes.ManualProvision{}
									steps.Provision.ProvisionPolicy.Manual.Instructions = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Manual.Instructions)
									if stepsItem.Provision.ProvisionPolicy.Manual.UserIds != nil {
										steps.Provision.ProvisionPolicy.Manual.UserIds = make([]types.String, 0, len(stepsItem.Provision.ProvisionPolicy.Manual.UserIds))
										for _, v := range stepsItem.Provision.ProvisionPolicy.Manual.UserIds {
											steps.Provision.ProvisionPolicy.Manual.UserIds = append(steps.Provision.ProvisionPolicy.Manual.UserIds, types.StringValue(v))
										}
									}
								}
								if stepsItem.Provision.ProvisionPolicy.MultiStep == nil {
									steps.Provision.ProvisionPolicy.MultiStep = jsontypes.NewNormalizedNull()
								} else {
									multiStepResult, _ := json.Marshal(stepsItem.Provision.ProvisionPolicy.MultiStep)
									steps.Provision.ProvisionPolicy.MultiStep = jsontypes.NewNormalizedValue(string(multiStepResult))
								}
								if stepsItem.Provision.ProvisionPolicy.Unconfigured == nil {
									steps.Provision.ProvisionPolicy.Unconfigured = nil
								} else {
									steps.Provision.ProvisionPolicy.Unconfigured = &tfTypes.UnconfiguredProvision{}
								}
								if stepsItem.Provision.ProvisionPolicy.Webhook == nil {
									steps.Provision.ProvisionPolicy.Webhook = nil
								} else {
									steps.Provision.ProvisionPolicy.Webhook = &tfTypes.WebhookProvision{}
									steps.Provision.ProvisionPolicy.Webhook.WebhookID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Webhook.WebhookID)
								}
							}
							if stepsItem.Provision.ProvisionTarget == nil {
								steps.Provision.ProvisionTarget = nil
							} else {
								steps.Provision.ProvisionTarget = &tfTypes.ProvisionTarget{}
								steps.Provision.ProvisionTarget.AppEntitlementID = types.StringPointerValue(stepsItem.Provision.ProvisionTarget.AppEntitlementID)
								steps.Provision.ProvisionTarget.AppID = types.StringPointerValue(stepsItem.Provision.ProvisionTarget.AppID)
								steps.Provision.ProvisionTarget.AppUserID = types.StringPointerValue(stepsItem.Provision.ProvisionTarget.AppUserID)
								steps.Provision.ProvisionTarget.GrantDuration = types.StringPointerValue(stepsItem.Provision.ProvisionTarget.GrantDuration)
							}
						}
						if stepsItem.Reject == nil {
							steps.Reject = nil
						} else {
							steps.Reject = &tfTypes.Reject{}
							steps.Reject.RejectMessage = types.StringPointerValue(stepsItem.Reject.RejectMessage)
						}
						if stepsItem.Wait == nil {
							steps.Wait = nil
						} else {
							steps.Wait = &tfTypes.Wait{}
							steps.Wait.CommentOnFirstWait = types.StringPointerValue(stepsItem.Wait.CommentOnFirstWait)
							steps.Wait.CommentOnTimeout = types.StringPointerValue(stepsItem.Wait.CommentOnTimeout)
							if stepsItem.Wait.Condition == nil {
								steps.Wait.Condition = nil
							} else {
								steps.Wait.Condition = &tfTypes.WaitCondition{}
								steps.Wait.Condition.Condition = types.StringPointerValue(stepsItem.Wait.Condition.Condition)
							}
							if stepsItem.Wait.Duration == nil {
								steps.Wait.Duration = nil
							} else {
								steps.Wait.Duration = &tfTypes.WaitDuration{}
								steps.Wait.Duration.Duration = types.StringPointerValue(stepsItem.Wait.Duration.Duration)
							}
							steps.Wait.Name = types.StringPointerValue(stepsItem.Wait.Name)
							steps.Wait.TimeoutDuration = types.StringPointerValue(stepsItem.Wait.TimeoutDuration)
							if stepsItem.Wait.UntilTime == nil {
								steps.Wait.UntilTime = nil
							} else {
								steps.Wait.UntilTime = &tfTypes.WaitUntilTime{}
								steps.Wait.UntilTime.Hours = types.Int64PointerValue(stepsItem.Wait.UntilTime.Hours)
								steps.Wait.UntilTime.Minutes = types.Int64PointerValue(stepsItem.Wait.UntilTime.Minutes)
								steps.Wait.UntilTime.Timezone = types.StringPointerValue(stepsItem.Wait.UntilTime.Timezone)
							}
						}

						policyStepsResult.Steps = append(policyStepsResult.Steps, steps)
					}
				}

				r.PolicySteps[policyStepsKey] = policyStepsResult
			}
		}
		if resp.PolicyType != nil {
			r.PolicyType = types.StringValue(string(*resp.PolicyType))
		} else {
			r.PolicyType = types.StringNull()
		}
		if resp.PostActions != nil {
			r.PostActions = []tfTypes.PolicyPostActions{}

			for _, postActionsItem := range resp.PostActions {
				var postActions tfTypes.PolicyPostActions

				postActions.CertifyRemediateImmediately = types.BoolPointerValue(postActionsItem.CertifyRemediateImmediately)

				r.PostActions = append(r.PostActions, postActions)
			}
		}
		r.ReassignTasksToDelegates = types.BoolPointerValue(resp.ReassignTasksToDelegates)
		if resp.Rules != nil {
			r.Rules = []tfTypes.Rule{}

			for _, rulesItem := range resp.Rules {
				var rules tfTypes.Rule

				rules.Condition = types.StringPointerValue(rulesItem.Condition)
				rules.PolicyKey = types.StringPointerValue(rulesItem.PolicyKey)

				r.Rules = append(r.Rules, rules)
			}
		}
		r.SystemBuiltin = types.BoolPointerValue(resp.SystemBuiltin)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *PolicyResourceModel) ToOperationsC1APIPolicyV1PoliciesDeleteRequest(ctx context.Context) (*operations.C1APIPolicyV1PoliciesDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIPolicyV1PoliciesDeleteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *PolicyResourceModel) ToOperationsC1APIPolicyV1PoliciesGetRequest(ctx context.Context) (*operations.C1APIPolicyV1PoliciesGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIPolicyV1PoliciesGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *PolicyResourceModel) ToOperationsC1APIPolicyV1PoliciesUpdateRequest(ctx context.Context) (*operations.C1APIPolicyV1PoliciesUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	updatePolicyRequest, updatePolicyRequestDiags := r.ToSharedUpdatePolicyRequest(ctx)
	diags.Append(updatePolicyRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIPolicyV1PoliciesUpdateRequest{
		ID:                  id,
		UpdatePolicyRequest: updatePolicyRequest,
	}

	return &out, diags
}

func (r *PolicyResourceModel) ToSharedCreatePolicyRequest(ctx context.Context) (*shared.CreatePolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var displayName string
	displayName = r.DisplayName.ValueString()

	policySteps := make(map[string]shared.PolicyStepsInput)
	for policyStepsKey, policyStepsValue := range r.PolicySteps {
		var steps []shared.PolicyStepInput
		if policyStepsValue.Steps != nil {
			steps = make([]shared.PolicyStepInput, 0, len(policyStepsValue.Steps))
			for _, stepsItem := range policyStepsValue.Steps {
				var accept *shared.Accept
				if stepsItem.Accept != nil {
					acceptMessage := new(string)
					if !stepsItem.Accept.AcceptMessage.IsUnknown() && !stepsItem.Accept.AcceptMessage.IsNull() {
						*acceptMessage = stepsItem.Accept.AcceptMessage.ValueString()
					} else {
						acceptMessage = nil
					}
					accept = &shared.Accept{
						AcceptMessage: acceptMessage,
					}
				}
				var approval *shared.ApprovalInput
				if stepsItem.Approval != nil {
					var agent *shared.AgentApproval
					if stepsItem.Approval.Agent != nil {
						agentFailureAction := new(shared.AgentFailureAction)
						if !stepsItem.Approval.Agent.AgentFailureAction.IsUnknown() && !stepsItem.Approval.Agent.AgentFailureAction.IsNull() {
							*agentFailureAction = shared.AgentFailureAction(stepsItem.Approval.Agent.AgentFailureAction.ValueString())
						} else {
							agentFailureAction = nil
						}
						agentMode := new(shared.AgentMode)
						if !stepsItem.Approval.Agent.AgentMode.IsUnknown() && !stepsItem.Approval.Agent.AgentMode.IsNull() {
							*agentMode = shared.AgentMode(stepsItem.Approval.Agent.AgentMode.ValueString())
						} else {
							agentMode = nil
						}
						agentUserID := new(string)
						if !stepsItem.Approval.Agent.AgentUserID.IsUnknown() && !stepsItem.Approval.Agent.AgentUserID.IsNull() {
							*agentUserID = stepsItem.Approval.Agent.AgentUserID.ValueString()
						} else {
							agentUserID = nil
						}
						instructions := new(string)
						if !stepsItem.Approval.Agent.Instructions.IsUnknown() && !stepsItem.Approval.Agent.Instructions.IsNull() {
							*instructions = stepsItem.Approval.Agent.Instructions.ValueString()
						} else {
							instructions = nil
						}
						var policyIds []string
						if stepsItem.Approval.Agent.PolicyIds != nil {
							policyIds = make([]string, 0, len(stepsItem.Approval.Agent.PolicyIds))
							for _, policyIdsItem := range stepsItem.Approval.Agent.PolicyIds {
								policyIds = append(policyIds, policyIdsItem.ValueString())
							}
						}
						var reassignToUserIds []string
						if stepsItem.Approval.Agent.ReassignToUserIds != nil {
							reassignToUserIds = make([]string, 0, len(stepsItem.Approval.Agent.ReassignToUserIds))
							for _, reassignToUserIdsItem := range stepsItem.Approval.Agent.ReassignToUserIds {
								reassignToUserIds = append(reassignToUserIds, reassignToUserIdsItem.ValueString())
							}
						}
						agent = &shared.AgentApproval{
							AgentFailureAction: agentFailureAction,
							AgentMode:          agentMode,
							AgentUserID:        agentUserID,
							Instructions:       instructions,
							PolicyIds:          policyIds,
							ReassignToUserIds:  reassignToUserIds,
						}
					}
					allowDelegation := new(bool)
					if !stepsItem.Approval.AllowDelegation.IsUnknown() && !stepsItem.Approval.AllowDelegation.IsNull() {
						*allowDelegation = stepsItem.Approval.AllowDelegation.ValueBool()
					} else {
						allowDelegation = nil
					}
					allowReassignment := new(bool)
					if !stepsItem.Approval.AllowReassignment.IsUnknown() && !stepsItem.Approval.AllowReassignment.IsNull() {
						*allowReassignment = stepsItem.Approval.AllowReassignment.ValueBool()
					} else {
						allowReassignment = nil
					}
					var allowedReassignees []string
					if stepsItem.Approval.AllowedReassignees != nil {
						allowedReassignees = make([]string, 0, len(stepsItem.Approval.AllowedReassignees))
						for _, allowedReassigneesItem := range stepsItem.Approval.AllowedReassignees {
							allowedReassignees = append(allowedReassignees, allowedReassigneesItem.ValueString())
						}
					}
					var appOwners *shared.AppOwnerApproval
					if stepsItem.Approval.AppOwners != nil {
						allowSelfApproval := new(bool)
						if !stepsItem.Approval.AppOwners.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.AppOwners.AllowSelfApproval.IsNull() {
							*allowSelfApproval = stepsItem.Approval.AppOwners.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval = nil
						}
						appOwners = &shared.AppOwnerApproval{
							AllowSelfApproval: allowSelfApproval,
						}
					}
					var entitlementOwners *shared.EntitlementOwnerApproval
					if stepsItem.Approval.EntitlementOwners != nil {
						allowSelfApproval1 := new(bool)
						if !stepsItem.Approval.EntitlementOwners.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.EntitlementOwners.AllowSelfApproval.IsNull() {
							*allowSelfApproval1 = stepsItem.Approval.EntitlementOwners.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval1 = nil
						}
						fallback := new(bool)
						if !stepsItem.Approval.EntitlementOwners.Fallback.IsUnknown() && !stepsItem.Approval.EntitlementOwners.Fallback.IsNull() {
							*fallback = stepsItem.Approval.EntitlementOwners.Fallback.ValueBool()
						} else {
							fallback = nil
						}
						var fallbackUserIds []string
						if stepsItem.Approval.EntitlementOwners.FallbackUserIds != nil {
							fallbackUserIds = make([]string, 0, len(stepsItem.Approval.EntitlementOwners.FallbackUserIds))
							for _, fallbackUserIdsItem := range stepsItem.Approval.EntitlementOwners.FallbackUserIds {
								fallbackUserIds = append(fallbackUserIds, fallbackUserIdsItem.ValueString())
							}
						}
						entitlementOwners = &shared.EntitlementOwnerApproval{
							AllowSelfApproval: allowSelfApproval1,
							Fallback:          fallback,
							FallbackUserIds:   fallbackUserIds,
						}
					}
					var escalation *shared.Escalation
					if stepsItem.Approval.Escalation != nil {
						escalationComment := new(string)
						if !stepsItem.Approval.Escalation.EscalationComment.IsUnknown() && !stepsItem.Approval.Escalation.EscalationComment.IsNull() {
							*escalationComment = stepsItem.Approval.Escalation.EscalationComment.ValueString()
						} else {
							escalationComment = nil
						}
						expiration := new(string)
						if !stepsItem.Approval.Escalation.Expiration.IsUnknown() && !stepsItem.Approval.Escalation.Expiration.IsNull() {
							*expiration = stepsItem.Approval.Escalation.Expiration.ValueString()
						} else {
							expiration = nil
						}
						var reassignToApprovers *shared.ReassignToApprovers
						if stepsItem.Approval.Escalation.ReassignToApprovers != nil {
							var approverIds []string
							if stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds != nil {
								approverIds = make([]string, 0, len(stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds))
								for _, approverIdsItem := range stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds {
									approverIds = append(approverIds, approverIdsItem.ValueString())
								}
							}
							reassignToApprovers = &shared.ReassignToApprovers{
								ApproverIds: approverIds,
							}
						}
						var replacePolicy *shared.ReplacePolicy
						if stepsItem.Approval.Escalation.ReplacePolicy != nil {
							policyID := new(string)
							if !stepsItem.Approval.Escalation.ReplacePolicy.PolicyID.IsUnknown() && !stepsItem.Approval.Escalation.ReplacePolicy.PolicyID.IsNull() {
								*policyID = stepsItem.Approval.Escalation.ReplacePolicy.PolicyID.ValueString()
							} else {
								policyID = nil
							}
							replacePolicy = &shared.ReplacePolicy{
								PolicyID: policyID,
							}
						}
						escalation = &shared.Escalation{
							EscalationComment:   escalationComment,
							Expiration:          expiration,
							ReassignToApprovers: reassignToApprovers,
							ReplacePolicy:       replacePolicy,
						}
					}
					escalationEnabled := new(bool)
					if !stepsItem.Approval.EscalationEnabled.IsUnknown() && !stepsItem.Approval.EscalationEnabled.IsNull() {
						*escalationEnabled = stepsItem.Approval.EscalationEnabled.ValueBool()
					} else {
						escalationEnabled = nil
					}
					var expression *shared.ExpressionApprovalInput
					if stepsItem.Approval.Expression != nil {
						allowSelfApproval2 := new(bool)
						if !stepsItem.Approval.Expression.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.Expression.AllowSelfApproval.IsNull() {
							*allowSelfApproval2 = stepsItem.Approval.Expression.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval2 = nil
						}
						var expressions []string
						if stepsItem.Approval.Expression.Expressions != nil {
							expressions = make([]string, 0, len(stepsItem.Approval.Expression.Expressions))
							for _, expressionsItem := range stepsItem.Approval.Expression.Expressions {
								expressions = append(expressions, expressionsItem.ValueString())
							}
						}
						fallback1 := new(bool)
						if !stepsItem.Approval.Expression.Fallback.IsUnknown() && !stepsItem.Approval.Expression.Fallback.IsNull() {
							*fallback1 = stepsItem.Approval.Expression.Fallback.ValueBool()
						} else {
							fallback1 = nil
						}
						var fallbackUserIds1 []string
						if stepsItem.Approval.Expression.FallbackUserIds != nil {
							fallbackUserIds1 = make([]string, 0, len(stepsItem.Approval.Expression.FallbackUserIds))
							for _, fallbackUserIdsItem1 := range stepsItem.Approval.Expression.FallbackUserIds {
								fallbackUserIds1 = append(fallbackUserIds1, fallbackUserIdsItem1.ValueString())
							}
						}
						expression = &shared.ExpressionApprovalInput{
							AllowSelfApproval: allowSelfApproval2,
							Expressions:       expressions,
							Fallback:          fallback1,
							FallbackUserIds:   fallbackUserIds1,
						}
					}
					var group *shared.AppGroupApproval
					if stepsItem.Approval.Group != nil {
						allowSelfApproval3 := new(bool)
						if !stepsItem.Approval.Group.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.Group.AllowSelfApproval.IsNull() {
							*allowSelfApproval3 = stepsItem.Approval.Group.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval3 = nil
						}
						appGroupID := new(string)
						if !stepsItem.Approval.Group.AppGroupID.IsUnknown() && !stepsItem.Approval.Group.AppGroupID.IsNull() {
							*appGroupID = stepsItem.Approval.Group.AppGroupID.ValueString()
						} else {
							appGroupID = nil
						}
						appID := new(string)
						if !stepsItem.Approval.Group.AppID.IsUnknown() && !stepsItem.Approval.Group.AppID.IsNull() {
							*appID = stepsItem.Approval.Group.AppID.ValueString()
						} else {
							appID = nil
						}
						fallback2 := new(bool)
						if !stepsItem.Approval.Group.Fallback.IsUnknown() && !stepsItem.Approval.Group.Fallback.IsNull() {
							*fallback2 = stepsItem.Approval.Group.Fallback.ValueBool()
						} else {
							fallback2 = nil
						}
						var fallbackGroupIds []shared.AppEntitlementReference
						if stepsItem.Approval.Group.FallbackGroupIds != nil {
							fallbackGroupIds = make([]shared.AppEntitlementReference, 0, len(stepsItem.Approval.Group.FallbackGroupIds))
							for _, fallbackGroupIdsItem := range stepsItem.Approval.Group.FallbackGroupIds {
								appEntitlementID := new(string)
								if !fallbackGroupIdsItem.AppEntitlementID.IsUnknown() && !fallbackGroupIdsItem.AppEntitlementID.IsNull() {
									*appEntitlementID = fallbackGroupIdsItem.AppEntitlementID.ValueString()
								} else {
									appEntitlementID = nil
								}
								appId1 := new(string)
								if !fallbackGroupIdsItem.AppID.IsUnknown() && !fallbackGroupIdsItem.AppID.IsNull() {
									*appId1 = fallbackGroupIdsItem.AppID.ValueString()
								} else {
									appId1 = nil
								}
								fallbackGroupIds = append(fallbackGroupIds, shared.AppEntitlementReference{
									AppEntitlementID: appEntitlementID,
									AppID:            appId1,
								})
							}
						}
						var fallbackUserIds2 []string
						if stepsItem.Approval.Group.FallbackUserIds != nil {
							fallbackUserIds2 = make([]string, 0, len(stepsItem.Approval.Group.FallbackUserIds))
							for _, fallbackUserIdsItem2 := range stepsItem.Approval.Group.FallbackUserIds {
								fallbackUserIds2 = append(fallbackUserIds2, fallbackUserIdsItem2.ValueString())
							}
						}
						isGroupFallbackEnabled := new(bool)
						if !stepsItem.Approval.Group.IsGroupFallbackEnabled.IsUnknown() && !stepsItem.Approval.Group.IsGroupFallbackEnabled.IsNull() {
							*isGroupFallbackEnabled = stepsItem.Approval.Group.IsGroupFallbackEnabled.ValueBool()
						} else {
							isGroupFallbackEnabled = nil
						}
						group = &shared.AppGroupApproval{
							AllowSelfApproval:      allowSelfApproval3,
							AppGroupID:             appGroupID,
							AppID:                  appID,
							Fallback:               fallback2,
							FallbackGroupIds:       fallbackGroupIds,
							FallbackUserIds:        fallbackUserIds2,
							IsGroupFallbackEnabled: isGroupFallbackEnabled,
						}
					}
					var manager *shared.ManagerApprovalInput
					if stepsItem.Approval.Manager != nil {
						allowSelfApproval4 := new(bool)
						if !stepsItem.Approval.Manager.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.Manager.AllowSelfApproval.IsNull() {
							*allowSelfApproval4 = stepsItem.Approval.Manager.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval4 = nil
						}
						fallback3 := new(bool)
						if !stepsItem.Approval.Manager.Fallback.IsUnknown() && !stepsItem.Approval.Manager.Fallback.IsNull() {
							*fallback3 = stepsItem.Approval.Manager.Fallback.ValueBool()
						} else {
							fallback3 = nil
						}
						var fallbackUserIds3 []string
						if stepsItem.Approval.Manager.FallbackUserIds != nil {
							fallbackUserIds3 = make([]string, 0, len(stepsItem.Approval.Manager.FallbackUserIds))
							for _, fallbackUserIdsItem3 := range stepsItem.Approval.Manager.FallbackUserIds {
								fallbackUserIds3 = append(fallbackUserIds3, fallbackUserIdsItem3.ValueString())
							}
						}
						manager = &shared.ManagerApprovalInput{
							AllowSelfApproval: allowSelfApproval4,
							Fallback:          fallback3,
							FallbackUserIds:   fallbackUserIds3,
						}
					}
					requireApprovalReason := new(bool)
					if !stepsItem.Approval.RequireApprovalReason.IsUnknown() && !stepsItem.Approval.RequireApprovalReason.IsNull() {
						*requireApprovalReason = stepsItem.Approval.RequireApprovalReason.ValueBool()
					} else {
						requireApprovalReason = nil
					}
					requireDenialReason := new(bool)
					if !stepsItem.Approval.RequireDenialReason.IsUnknown() && !stepsItem.Approval.RequireDenialReason.IsNull() {
						*requireDenialReason = stepsItem.Approval.RequireDenialReason.ValueBool()
					} else {
						requireDenialReason = nil
					}
					requireReassignmentReason := new(bool)
					if !stepsItem.Approval.RequireReassignmentReason.IsUnknown() && !stepsItem.Approval.RequireReassignmentReason.IsNull() {
						*requireReassignmentReason = stepsItem.Approval.RequireReassignmentReason.ValueBool()
					} else {
						requireReassignmentReason = nil
					}
					requiresStepUpProviderID := new(string)
					if !stepsItem.Approval.RequiresStepUpProviderID.IsUnknown() && !stepsItem.Approval.RequiresStepUpProviderID.IsNull() {
						*requiresStepUpProviderID = stepsItem.Approval.RequiresStepUpProviderID.ValueString()
					} else {
						requiresStepUpProviderID = nil
					}
					var resourceOwners *shared.ResourceOwnerApproval
					if stepsItem.Approval.ResourceOwners != nil {
						allowSelfApproval5 := new(bool)
						if !stepsItem.Approval.ResourceOwners.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.ResourceOwners.AllowSelfApproval.IsNull() {
							*allowSelfApproval5 = stepsItem.Approval.ResourceOwners.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval5 = nil
						}
						fallback4 := new(bool)
						if !stepsItem.Approval.ResourceOwners.Fallback.IsUnknown() && !stepsItem.Approval.ResourceOwners.Fallback.IsNull() {
							*fallback4 = stepsItem.Approval.ResourceOwners.Fallback.ValueBool()
						} else {
							fallback4 = nil
						}
						var fallbackUserIds4 []string
						if stepsItem.Approval.ResourceOwners.FallbackUserIds != nil {
							fallbackUserIds4 = make([]string, 0, len(stepsItem.Approval.ResourceOwners.FallbackUserIds))
							for _, fallbackUserIdsItem4 := range stepsItem.Approval.ResourceOwners.FallbackUserIds {
								fallbackUserIds4 = append(fallbackUserIds4, fallbackUserIdsItem4.ValueString())
							}
						}
						resourceOwners = &shared.ResourceOwnerApproval{
							AllowSelfApproval: allowSelfApproval5,
							Fallback:          fallback4,
							FallbackUserIds:   fallbackUserIds4,
						}
					}
					var self *shared.SelfApprovalInput
					if stepsItem.Approval.Self != nil {
						fallback5 := new(bool)
						if !stepsItem.Approval.Self.Fallback.IsUnknown() && !stepsItem.Approval.Self.Fallback.IsNull() {
							*fallback5 = stepsItem.Approval.Self.Fallback.ValueBool()
						} else {
							fallback5 = nil
						}
						var fallbackUserIds5 []string
						if stepsItem.Approval.Self.FallbackUserIds != nil {
							fallbackUserIds5 = make([]string, 0, len(stepsItem.Approval.Self.FallbackUserIds))
							for _, fallbackUserIdsItem5 := range stepsItem.Approval.Self.FallbackUserIds {
								fallbackUserIds5 = append(fallbackUserIds5, fallbackUserIdsItem5.ValueString())
							}
						}
						self = &shared.SelfApprovalInput{
							Fallback:        fallback5,
							FallbackUserIds: fallbackUserIds5,
						}
					}
					var users *shared.UserApproval
					if stepsItem.Approval.Users != nil {
						allowSelfApproval6 := new(bool)
						if !stepsItem.Approval.Users.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.Users.AllowSelfApproval.IsNull() {
							*allowSelfApproval6 = stepsItem.Approval.Users.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval6 = nil
						}
						var userIds []string
						if stepsItem.Approval.Users.UserIds != nil {
							userIds = make([]string, 0, len(stepsItem.Approval.Users.UserIds))
							for _, userIdsItem := range stepsItem.Approval.Users.UserIds {
								userIds = append(userIds, userIdsItem.ValueString())
							}
						}
						users = &shared.UserApproval{
							AllowSelfApproval: allowSelfApproval6,
							UserIds:           userIds,
						}
					}
					var webhook *shared.WebhookApproval
					if stepsItem.Approval.Webhook != nil {
						webhookID := new(string)
						if !stepsItem.Approval.Webhook.WebhookID.IsUnknown() && !stepsItem.Approval.Webhook.WebhookID.IsNull() {
							*webhookID = stepsItem.Approval.Webhook.WebhookID.ValueString()
						} else {
							webhookID = nil
						}
						webhook = &shared.WebhookApproval{
							WebhookID: webhookID,
						}
					}
					approval = &shared.ApprovalInput{
						Agent:                     agent,
						AllowDelegation:           allowDelegation,
						AllowReassignment:         allowReassignment,
						AllowedReassignees:        allowedReassignees,
						AppOwners:                 appOwners,
						EntitlementOwners:         entitlementOwners,
						Escalation:                escalation,
						EscalationEnabled:         escalationEnabled,
						Expression:                expression,
						Group:                     group,
						Manager:                   manager,
						RequireApprovalReason:     requireApprovalReason,
						RequireDenialReason:       requireDenialReason,
						RequireReassignmentReason: requireReassignmentReason,
						RequiresStepUpProviderID:  requiresStepUpProviderID,
						ResourceOwners:            resourceOwners,
						Self:                      self,
						Users:                     users,
						Webhook:                   webhook,
					}
				}
				var form interface{}
				if !stepsItem.Form.IsUnknown() && !stepsItem.Form.IsNull() {
					_ = json.Unmarshal([]byte(stepsItem.Form.ValueString()), &form)
				}
				var provision *shared.Provision
				if stepsItem.Provision != nil {
					assigned := new(bool)
					if !stepsItem.Provision.Assigned.IsUnknown() && !stepsItem.Provision.Assigned.IsNull() {
						*assigned = stepsItem.Provision.Assigned.ValueBool()
					} else {
						assigned = nil
					}
					var provisionPolicy *shared.ProvisionPolicy
					if stepsItem.Provision.ProvisionPolicy != nil {
						var connector *shared.ConnectorProvision
						if stepsItem.Provision.ProvisionPolicy.Connector != nil {
							var account *shared.AccountProvision
							if stepsItem.Provision.ProvisionPolicy.Connector.Account != nil {
								var config *shared.Config
								if stepsItem.Provision.ProvisionPolicy.Connector.Account.Config != nil {
									config = &shared.Config{}
								}
								connectorID := new(string)
								if !stepsItem.Provision.ProvisionPolicy.Connector.Account.ConnectorID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Connector.Account.ConnectorID.IsNull() {
									*connectorID = stepsItem.Provision.ProvisionPolicy.Connector.Account.ConnectorID.ValueString()
								} else {
									connectorID = nil
								}
								var doNotSave *shared.DoNotSave
								if stepsItem.Provision.ProvisionPolicy.Connector.Account.DoNotSave != nil {
									doNotSave = &shared.DoNotSave{}
								}
								var saveToVault *shared.SaveToVault
								if stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault != nil {
									var vaultIds []string
									if stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds != nil {
										vaultIds = make([]string, 0, len(stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds))
										for _, vaultIdsItem := range stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds {
											vaultIds = append(vaultIds, vaultIdsItem.ValueString())
										}
									}
									saveToVault = &shared.SaveToVault{
										VaultIds: vaultIds,
									}
								}
								schemaID := new(string)
								if !stepsItem.Provision.ProvisionPolicy.Connector.Account.SchemaID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Connector.Account.SchemaID.IsNull() {
									*schemaID = stepsItem.Provision.ProvisionPolicy.Connector.Account.SchemaID.ValueString()
								} else {
									schemaID = nil
								}
								account = &shared.AccountProvision{
									Config:      config,
									ConnectorID: connectorID,
									DoNotSave:   doNotSave,
									SaveToVault: saveToVault,
									SchemaID:    schemaID,
								}
							}
							var defaultBehavior *shared.DefaultBehavior
							if stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior != nil {
								connectorId1 := new(string)
								if !stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID.IsNull() {
									*connectorId1 = stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID.ValueString()
								} else {
									connectorId1 = nil
								}
								defaultBehavior = &shared.DefaultBehavior{
									ConnectorID: connectorId1,
								}
							}
							var deleteAccount *shared.DeleteAccount
							if stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount != nil {
								connectorId2 := new(string)
								if !stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID.IsNull() {
									*connectorId2 = stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID.ValueString()
								} else {
									connectorId2 = nil
								}
								deleteAccount = &shared.DeleteAccount{
									ConnectorID: connectorId2,
								}
							}
							connector = &shared.ConnectorProvision{
								Account:         account,
								DefaultBehavior: defaultBehavior,
								DeleteAccount:   deleteAccount,
							}
						}
						var delegated *shared.DelegatedProvision
						if stepsItem.Provision.ProvisionPolicy.Delegated != nil {
							appId2 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.Delegated.AppID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Delegated.AppID.IsNull() {
								*appId2 = stepsItem.Provision.ProvisionPolicy.Delegated.AppID.ValueString()
							} else {
								appId2 = nil
							}
							entitlementID := new(string)
							if !stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID.IsNull() {
								*entitlementID = stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID.ValueString()
							} else {
								entitlementID = nil
							}
							delegated = &shared.DelegatedProvision{
								AppID:         appId2,
								EntitlementID: entitlementID,
							}
						}
						var externalTicket *shared.ExternalTicketProvision
						if stepsItem.Provision.ProvisionPolicy.ExternalTicket != nil {
							appId3 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.ExternalTicket.AppID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.ExternalTicket.AppID.IsNull() {
								*appId3 = stepsItem.Provision.ProvisionPolicy.ExternalTicket.AppID.ValueString()
							} else {
								appId3 = nil
							}
							connectorId3 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.ExternalTicket.ConnectorID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.ExternalTicket.ConnectorID.IsNull() {
								*connectorId3 = stepsItem.Provision.ProvisionPolicy.ExternalTicket.ConnectorID.ValueString()
							} else {
								connectorId3 = nil
							}
							externalTicketProvisionerConfigID := new(string)
							if !stepsItem.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID.IsNull() {
								*externalTicketProvisionerConfigID = stepsItem.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID.ValueString()
							} else {
								externalTicketProvisionerConfigID = nil
							}
							instructions1 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.ExternalTicket.Instructions.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.ExternalTicket.Instructions.IsNull() {
								*instructions1 = stepsItem.Provision.ProvisionPolicy.ExternalTicket.Instructions.ValueString()
							} else {
								instructions1 = nil
							}
							externalTicket = &shared.ExternalTicketProvision{
								AppID:                             appId3,
								ConnectorID:                       connectorId3,
								ExternalTicketProvisionerConfigID: externalTicketProvisionerConfigID,
								Instructions:                      instructions1,
							}
						}
						var manual *shared.ManualProvision
						if stepsItem.Provision.ProvisionPolicy.Manual != nil {
							instructions2 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.Manual.Instructions.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Manual.Instructions.IsNull() {
								*instructions2 = stepsItem.Provision.ProvisionPolicy.Manual.Instructions.ValueString()
							} else {
								instructions2 = nil
							}
							var userIds1 []string
							if stepsItem.Provision.ProvisionPolicy.Manual.UserIds != nil {
								userIds1 = make([]string, 0, len(stepsItem.Provision.ProvisionPolicy.Manual.UserIds))
								for _, userIdsItem1 := range stepsItem.Provision.ProvisionPolicy.Manual.UserIds {
									userIds1 = append(userIds1, userIdsItem1.ValueString())
								}
							}
							manual = &shared.ManualProvision{
								Instructions: instructions2,
								UserIds:      userIds1,
							}
						}
						var multiStep interface{}
						if !stepsItem.Provision.ProvisionPolicy.MultiStep.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.MultiStep.IsNull() {
							_ = json.Unmarshal([]byte(stepsItem.Provision.ProvisionPolicy.MultiStep.ValueString()), &multiStep)
						}
						var unconfigured *shared.UnconfiguredProvision
						if stepsItem.Provision.ProvisionPolicy.Unconfigured != nil {
							unconfigured = &shared.UnconfiguredProvision{}
						}
						var webhook1 *shared.WebhookProvision
						if stepsItem.Provision.ProvisionPolicy.Webhook != nil {
							webhookId1 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.Webhook.WebhookID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Webhook.WebhookID.IsNull() {
								*webhookId1 = stepsItem.Provision.ProvisionPolicy.Webhook.WebhookID.ValueString()
							} else {
								webhookId1 = nil
							}
							webhook1 = &shared.WebhookProvision{
								WebhookID: webhookId1,
							}
						}
						provisionPolicy = &shared.ProvisionPolicy{
							Connector:      connector,
							Delegated:      delegated,
							ExternalTicket: externalTicket,
							Manual:         manual,
							MultiStep:      multiStep,
							Unconfigured:   unconfigured,
							Webhook:        webhook1,
						}
					}
					var provisionTarget *shared.ProvisionTarget
					if stepsItem.Provision.ProvisionTarget != nil {
						appEntitlementId1 := new(string)
						if !stepsItem.Provision.ProvisionTarget.AppEntitlementID.IsUnknown() && !stepsItem.Provision.ProvisionTarget.AppEntitlementID.IsNull() {
							*appEntitlementId1 = stepsItem.Provision.ProvisionTarget.AppEntitlementID.ValueString()
						} else {
							appEntitlementId1 = nil
						}
						appId4 := new(string)
						if !stepsItem.Provision.ProvisionTarget.AppID.IsUnknown() && !stepsItem.Provision.ProvisionTarget.AppID.IsNull() {
							*appId4 = stepsItem.Provision.ProvisionTarget.AppID.ValueString()
						} else {
							appId4 = nil
						}
						appUserID := new(string)
						if !stepsItem.Provision.ProvisionTarget.AppUserID.IsUnknown() && !stepsItem.Provision.ProvisionTarget.AppUserID.IsNull() {
							*appUserID = stepsItem.Provision.ProvisionTarget.AppUserID.ValueString()
						} else {
							appUserID = nil
						}
						grantDuration := new(string)
						if !stepsItem.Provision.ProvisionTarget.GrantDuration.IsUnknown() && !stepsItem.Provision.ProvisionTarget.GrantDuration.IsNull() {
							*grantDuration = stepsItem.Provision.ProvisionTarget.GrantDuration.ValueString()
						} else {
							grantDuration = nil
						}
						provisionTarget = &shared.ProvisionTarget{
							AppEntitlementID: appEntitlementId1,
							AppID:            appId4,
							AppUserID:        appUserID,
							GrantDuration:    grantDuration,
						}
					}
					provision = &shared.Provision{
						Assigned:        assigned,
						ProvisionPolicy: provisionPolicy,
						ProvisionTarget: provisionTarget,
					}
				}
				var reject *shared.Reject
				if stepsItem.Reject != nil {
					rejectMessage := new(string)
					if !stepsItem.Reject.RejectMessage.IsUnknown() && !stepsItem.Reject.RejectMessage.IsNull() {
						*rejectMessage = stepsItem.Reject.RejectMessage.ValueString()
					} else {
						rejectMessage = nil
					}
					reject = &shared.Reject{
						RejectMessage: rejectMessage,
					}
				}
				var wait *shared.Wait
				if stepsItem.Wait != nil {
					commentOnFirstWait := new(string)
					if !stepsItem.Wait.CommentOnFirstWait.IsUnknown() && !stepsItem.Wait.CommentOnFirstWait.IsNull() {
						*commentOnFirstWait = stepsItem.Wait.CommentOnFirstWait.ValueString()
					} else {
						commentOnFirstWait = nil
					}
					commentOnTimeout := new(string)
					if !stepsItem.Wait.CommentOnTimeout.IsUnknown() && !stepsItem.Wait.CommentOnTimeout.IsNull() {
						*commentOnTimeout = stepsItem.Wait.CommentOnTimeout.ValueString()
					} else {
						commentOnTimeout = nil
					}
					var condition *shared.WaitCondition
					if stepsItem.Wait.Condition != nil {
						condition1 := new(string)
						if !stepsItem.Wait.Condition.Condition.IsUnknown() && !stepsItem.Wait.Condition.Condition.IsNull() {
							*condition1 = stepsItem.Wait.Condition.Condition.ValueString()
						} else {
							condition1 = nil
						}
						condition = &shared.WaitCondition{
							Condition: condition1,
						}
					}
					var duration *shared.WaitDuration
					if stepsItem.Wait.Duration != nil {
						duration1 := new(string)
						if !stepsItem.Wait.Duration.Duration.IsUnknown() && !stepsItem.Wait.Duration.Duration.IsNull() {
							*duration1 = stepsItem.Wait.Duration.Duration.ValueString()
						} else {
							duration1 = nil
						}
						duration = &shared.WaitDuration{
							Duration: duration1,
						}
					}
					name := new(string)
					if !stepsItem.Wait.Name.IsUnknown() && !stepsItem.Wait.Name.IsNull() {
						*name = stepsItem.Wait.Name.ValueString()
					} else {
						name = nil
					}
					timeoutDuration := new(string)
					if !stepsItem.Wait.TimeoutDuration.IsUnknown() && !stepsItem.Wait.TimeoutDuration.IsNull() {
						*timeoutDuration = stepsItem.Wait.TimeoutDuration.ValueString()
					} else {
						timeoutDuration = nil
					}
					var untilTime *shared.WaitUntilTime
					if stepsItem.Wait.UntilTime != nil {
						hours := new(int64)
						if !stepsItem.Wait.UntilTime.Hours.IsUnknown() && !stepsItem.Wait.UntilTime.Hours.IsNull() {
							*hours = stepsItem.Wait.UntilTime.Hours.ValueInt64()
						} else {
							hours = nil
						}
						minutes := new(int64)
						if !stepsItem.Wait.UntilTime.Minutes.IsUnknown() && !stepsItem.Wait.UntilTime.Minutes.IsNull() {
							*minutes = stepsItem.Wait.UntilTime.Minutes.ValueInt64()
						} else {
							minutes = nil
						}
						timezone := new(string)
						if !stepsItem.Wait.UntilTime.Timezone.IsUnknown() && !stepsItem.Wait.UntilTime.Timezone.IsNull() {
							*timezone = stepsItem.Wait.UntilTime.Timezone.ValueString()
						} else {
							timezone = nil
						}
						untilTime = &shared.WaitUntilTime{
							Hours:    hours,
							Minutes:  minutes,
							Timezone: timezone,
						}
					}
					wait = &shared.Wait{
						CommentOnFirstWait: commentOnFirstWait,
						CommentOnTimeout:   commentOnTimeout,
						Condition:          condition,
						Duration:           duration,
						Name:               name,
						TimeoutDuration:    timeoutDuration,
						UntilTime:          untilTime,
					}
				}
				steps = append(steps, shared.PolicyStepInput{
					Accept:    accept,
					Approval:  approval,
					Form:      form,
					Provision: provision,
					Reject:    reject,
					Wait:      wait,
				})
			}
		}
		policyStepsInst := shared.PolicyStepsInput{
			Steps: steps,
		}
		policySteps[policyStepsKey] = policyStepsInst
	}
	policyType := new(shared.CreatePolicyRequestPolicyType)
	if !r.PolicyType.IsUnknown() && !r.PolicyType.IsNull() {
		*policyType = shared.CreatePolicyRequestPolicyType(r.PolicyType.ValueString())
	} else {
		policyType = nil
	}
	var postActions []shared.PolicyPostActions
	if r.PostActions != nil {
		postActions = make([]shared.PolicyPostActions, 0, len(r.PostActions))
		for _, postActionsItem := range r.PostActions {
			certifyRemediateImmediately := new(bool)
			if !postActionsItem.CertifyRemediateImmediately.IsUnknown() && !postActionsItem.CertifyRemediateImmediately.IsNull() {
				*certifyRemediateImmediately = postActionsItem.CertifyRemediateImmediately.ValueBool()
			} else {
				certifyRemediateImmediately = nil
			}
			postActions = append(postActions, shared.PolicyPostActions{
				CertifyRemediateImmediately: certifyRemediateImmediately,
			})
		}
	}
	reassignTasksToDelegates := new(bool)
	if !r.ReassignTasksToDelegates.IsUnknown() && !r.ReassignTasksToDelegates.IsNull() {
		*reassignTasksToDelegates = r.ReassignTasksToDelegates.ValueBool()
	} else {
		reassignTasksToDelegates = nil
	}
	var rules []shared.Rule
	if r.Rules != nil {
		rules = make([]shared.Rule, 0, len(r.Rules))
		for _, rulesItem := range r.Rules {
			condition2 := new(string)
			if !rulesItem.Condition.IsUnknown() && !rulesItem.Condition.IsNull() {
				*condition2 = rulesItem.Condition.ValueString()
			} else {
				condition2 = nil
			}
			policyKey := new(string)
			if !rulesItem.PolicyKey.IsUnknown() && !rulesItem.PolicyKey.IsNull() {
				*policyKey = rulesItem.PolicyKey.ValueString()
			} else {
				policyKey = nil
			}
			rules = append(rules, shared.Rule{
				Condition: condition2,
				PolicyKey: policyKey,
			})
		}
	}
	out := shared.CreatePolicyRequest{
		Description:              description,
		DisplayName:              displayName,
		PolicySteps:              policySteps,
		PolicyType:               policyType,
		PostActions:              postActions,
		ReassignTasksToDelegates: reassignTasksToDelegates,
		Rules:                    rules,
	}

	return &out, diags
}

func (r *PolicyResourceModel) ToSharedPolicyInput(ctx context.Context) (*shared.PolicyInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	policySteps := make(map[string]shared.PolicyStepsInput)
	for policyStepsKey, policyStepsValue := range r.PolicySteps {
		var steps []shared.PolicyStepInput
		if policyStepsValue.Steps != nil {
			steps = make([]shared.PolicyStepInput, 0, len(policyStepsValue.Steps))
			for _, stepsItem := range policyStepsValue.Steps {
				var accept *shared.Accept
				if stepsItem.Accept != nil {
					acceptMessage := new(string)
					if !stepsItem.Accept.AcceptMessage.IsUnknown() && !stepsItem.Accept.AcceptMessage.IsNull() {
						*acceptMessage = stepsItem.Accept.AcceptMessage.ValueString()
					} else {
						acceptMessage = nil
					}
					accept = &shared.Accept{
						AcceptMessage: acceptMessage,
					}
				}
				var approval *shared.ApprovalInput
				if stepsItem.Approval != nil {
					var agent *shared.AgentApproval
					if stepsItem.Approval.Agent != nil {
						agentFailureAction := new(shared.AgentFailureAction)
						if !stepsItem.Approval.Agent.AgentFailureAction.IsUnknown() && !stepsItem.Approval.Agent.AgentFailureAction.IsNull() {
							*agentFailureAction = shared.AgentFailureAction(stepsItem.Approval.Agent.AgentFailureAction.ValueString())
						} else {
							agentFailureAction = nil
						}
						agentMode := new(shared.AgentMode)
						if !stepsItem.Approval.Agent.AgentMode.IsUnknown() && !stepsItem.Approval.Agent.AgentMode.IsNull() {
							*agentMode = shared.AgentMode(stepsItem.Approval.Agent.AgentMode.ValueString())
						} else {
							agentMode = nil
						}
						agentUserID := new(string)
						if !stepsItem.Approval.Agent.AgentUserID.IsUnknown() && !stepsItem.Approval.Agent.AgentUserID.IsNull() {
							*agentUserID = stepsItem.Approval.Agent.AgentUserID.ValueString()
						} else {
							agentUserID = nil
						}
						instructions := new(string)
						if !stepsItem.Approval.Agent.Instructions.IsUnknown() && !stepsItem.Approval.Agent.Instructions.IsNull() {
							*instructions = stepsItem.Approval.Agent.Instructions.ValueString()
						} else {
							instructions = nil
						}
						var policyIds []string
						if stepsItem.Approval.Agent.PolicyIds != nil {
							policyIds = make([]string, 0, len(stepsItem.Approval.Agent.PolicyIds))
							for _, policyIdsItem := range stepsItem.Approval.Agent.PolicyIds {
								policyIds = append(policyIds, policyIdsItem.ValueString())
							}
						}
						var reassignToUserIds []string
						if stepsItem.Approval.Agent.ReassignToUserIds != nil {
							reassignToUserIds = make([]string, 0, len(stepsItem.Approval.Agent.ReassignToUserIds))
							for _, reassignToUserIdsItem := range stepsItem.Approval.Agent.ReassignToUserIds {
								reassignToUserIds = append(reassignToUserIds, reassignToUserIdsItem.ValueString())
							}
						}
						agent = &shared.AgentApproval{
							AgentFailureAction: agentFailureAction,
							AgentMode:          agentMode,
							AgentUserID:        agentUserID,
							Instructions:       instructions,
							PolicyIds:          policyIds,
							ReassignToUserIds:  reassignToUserIds,
						}
					}
					allowDelegation := new(bool)
					if !stepsItem.Approval.AllowDelegation.IsUnknown() && !stepsItem.Approval.AllowDelegation.IsNull() {
						*allowDelegation = stepsItem.Approval.AllowDelegation.ValueBool()
					} else {
						allowDelegation = nil
					}
					allowReassignment := new(bool)
					if !stepsItem.Approval.AllowReassignment.IsUnknown() && !stepsItem.Approval.AllowReassignment.IsNull() {
						*allowReassignment = stepsItem.Approval.AllowReassignment.ValueBool()
					} else {
						allowReassignment = nil
					}
					var allowedReassignees []string
					if stepsItem.Approval.AllowedReassignees != nil {
						allowedReassignees = make([]string, 0, len(stepsItem.Approval.AllowedReassignees))
						for _, allowedReassigneesItem := range stepsItem.Approval.AllowedReassignees {
							allowedReassignees = append(allowedReassignees, allowedReassigneesItem.ValueString())
						}
					}
					var appOwners *shared.AppOwnerApproval
					if stepsItem.Approval.AppOwners != nil {
						allowSelfApproval := new(bool)
						if !stepsItem.Approval.AppOwners.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.AppOwners.AllowSelfApproval.IsNull() {
							*allowSelfApproval = stepsItem.Approval.AppOwners.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval = nil
						}
						appOwners = &shared.AppOwnerApproval{
							AllowSelfApproval: allowSelfApproval,
						}
					}
					var entitlementOwners *shared.EntitlementOwnerApproval
					if stepsItem.Approval.EntitlementOwners != nil {
						allowSelfApproval1 := new(bool)
						if !stepsItem.Approval.EntitlementOwners.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.EntitlementOwners.AllowSelfApproval.IsNull() {
							*allowSelfApproval1 = stepsItem.Approval.EntitlementOwners.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval1 = nil
						}
						fallback := new(bool)
						if !stepsItem.Approval.EntitlementOwners.Fallback.IsUnknown() && !stepsItem.Approval.EntitlementOwners.Fallback.IsNull() {
							*fallback = stepsItem.Approval.EntitlementOwners.Fallback.ValueBool()
						} else {
							fallback = nil
						}
						var fallbackUserIds []string
						if stepsItem.Approval.EntitlementOwners.FallbackUserIds != nil {
							fallbackUserIds = make([]string, 0, len(stepsItem.Approval.EntitlementOwners.FallbackUserIds))
							for _, fallbackUserIdsItem := range stepsItem.Approval.EntitlementOwners.FallbackUserIds {
								fallbackUserIds = append(fallbackUserIds, fallbackUserIdsItem.ValueString())
							}
						}
						entitlementOwners = &shared.EntitlementOwnerApproval{
							AllowSelfApproval: allowSelfApproval1,
							Fallback:          fallback,
							FallbackUserIds:   fallbackUserIds,
						}
					}
					var escalation *shared.Escalation
					if stepsItem.Approval.Escalation != nil {
						escalationComment := new(string)
						if !stepsItem.Approval.Escalation.EscalationComment.IsUnknown() && !stepsItem.Approval.Escalation.EscalationComment.IsNull() {
							*escalationComment = stepsItem.Approval.Escalation.EscalationComment.ValueString()
						} else {
							escalationComment = nil
						}
						expiration := new(string)
						if !stepsItem.Approval.Escalation.Expiration.IsUnknown() && !stepsItem.Approval.Escalation.Expiration.IsNull() {
							*expiration = stepsItem.Approval.Escalation.Expiration.ValueString()
						} else {
							expiration = nil
						}
						var reassignToApprovers *shared.ReassignToApprovers
						if stepsItem.Approval.Escalation.ReassignToApprovers != nil {
							var approverIds []string
							if stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds != nil {
								approverIds = make([]string, 0, len(stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds))
								for _, approverIdsItem := range stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds {
									approverIds = append(approverIds, approverIdsItem.ValueString())
								}
							}
							reassignToApprovers = &shared.ReassignToApprovers{
								ApproverIds: approverIds,
							}
						}
						var replacePolicy *shared.ReplacePolicy
						if stepsItem.Approval.Escalation.ReplacePolicy != nil {
							policyID := new(string)
							if !stepsItem.Approval.Escalation.ReplacePolicy.PolicyID.IsUnknown() && !stepsItem.Approval.Escalation.ReplacePolicy.PolicyID.IsNull() {
								*policyID = stepsItem.Approval.Escalation.ReplacePolicy.PolicyID.ValueString()
							} else {
								policyID = nil
							}
							replacePolicy = &shared.ReplacePolicy{
								PolicyID: policyID,
							}
						}
						escalation = &shared.Escalation{
							EscalationComment:   escalationComment,
							Expiration:          expiration,
							ReassignToApprovers: reassignToApprovers,
							ReplacePolicy:       replacePolicy,
						}
					}
					escalationEnabled := new(bool)
					if !stepsItem.Approval.EscalationEnabled.IsUnknown() && !stepsItem.Approval.EscalationEnabled.IsNull() {
						*escalationEnabled = stepsItem.Approval.EscalationEnabled.ValueBool()
					} else {
						escalationEnabled = nil
					}
					var expression *shared.ExpressionApprovalInput
					if stepsItem.Approval.Expression != nil {
						allowSelfApproval2 := new(bool)
						if !stepsItem.Approval.Expression.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.Expression.AllowSelfApproval.IsNull() {
							*allowSelfApproval2 = stepsItem.Approval.Expression.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval2 = nil
						}
						var expressions []string
						if stepsItem.Approval.Expression.Expressions != nil {
							expressions = make([]string, 0, len(stepsItem.Approval.Expression.Expressions))
							for _, expressionsItem := range stepsItem.Approval.Expression.Expressions {
								expressions = append(expressions, expressionsItem.ValueString())
							}
						}
						fallback1 := new(bool)
						if !stepsItem.Approval.Expression.Fallback.IsUnknown() && !stepsItem.Approval.Expression.Fallback.IsNull() {
							*fallback1 = stepsItem.Approval.Expression.Fallback.ValueBool()
						} else {
							fallback1 = nil
						}
						var fallbackUserIds1 []string
						if stepsItem.Approval.Expression.FallbackUserIds != nil {
							fallbackUserIds1 = make([]string, 0, len(stepsItem.Approval.Expression.FallbackUserIds))
							for _, fallbackUserIdsItem1 := range stepsItem.Approval.Expression.FallbackUserIds {
								fallbackUserIds1 = append(fallbackUserIds1, fallbackUserIdsItem1.ValueString())
							}
						}
						expression = &shared.ExpressionApprovalInput{
							AllowSelfApproval: allowSelfApproval2,
							Expressions:       expressions,
							Fallback:          fallback1,
							FallbackUserIds:   fallbackUserIds1,
						}
					}
					var group *shared.AppGroupApproval
					if stepsItem.Approval.Group != nil {
						allowSelfApproval3 := new(bool)
						if !stepsItem.Approval.Group.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.Group.AllowSelfApproval.IsNull() {
							*allowSelfApproval3 = stepsItem.Approval.Group.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval3 = nil
						}
						appGroupID := new(string)
						if !stepsItem.Approval.Group.AppGroupID.IsUnknown() && !stepsItem.Approval.Group.AppGroupID.IsNull() {
							*appGroupID = stepsItem.Approval.Group.AppGroupID.ValueString()
						} else {
							appGroupID = nil
						}
						appID := new(string)
						if !stepsItem.Approval.Group.AppID.IsUnknown() && !stepsItem.Approval.Group.AppID.IsNull() {
							*appID = stepsItem.Approval.Group.AppID.ValueString()
						} else {
							appID = nil
						}
						fallback2 := new(bool)
						if !stepsItem.Approval.Group.Fallback.IsUnknown() && !stepsItem.Approval.Group.Fallback.IsNull() {
							*fallback2 = stepsItem.Approval.Group.Fallback.ValueBool()
						} else {
							fallback2 = nil
						}
						var fallbackGroupIds []shared.AppEntitlementReference
						if stepsItem.Approval.Group.FallbackGroupIds != nil {
							fallbackGroupIds = make([]shared.AppEntitlementReference, 0, len(stepsItem.Approval.Group.FallbackGroupIds))
							for _, fallbackGroupIdsItem := range stepsItem.Approval.Group.FallbackGroupIds {
								appEntitlementID := new(string)
								if !fallbackGroupIdsItem.AppEntitlementID.IsUnknown() && !fallbackGroupIdsItem.AppEntitlementID.IsNull() {
									*appEntitlementID = fallbackGroupIdsItem.AppEntitlementID.ValueString()
								} else {
									appEntitlementID = nil
								}
								appId1 := new(string)
								if !fallbackGroupIdsItem.AppID.IsUnknown() && !fallbackGroupIdsItem.AppID.IsNull() {
									*appId1 = fallbackGroupIdsItem.AppID.ValueString()
								} else {
									appId1 = nil
								}
								fallbackGroupIds = append(fallbackGroupIds, shared.AppEntitlementReference{
									AppEntitlementID: appEntitlementID,
									AppID:            appId1,
								})
							}
						}
						var fallbackUserIds2 []string
						if stepsItem.Approval.Group.FallbackUserIds != nil {
							fallbackUserIds2 = make([]string, 0, len(stepsItem.Approval.Group.FallbackUserIds))
							for _, fallbackUserIdsItem2 := range stepsItem.Approval.Group.FallbackUserIds {
								fallbackUserIds2 = append(fallbackUserIds2, fallbackUserIdsItem2.ValueString())
							}
						}
						isGroupFallbackEnabled := new(bool)
						if !stepsItem.Approval.Group.IsGroupFallbackEnabled.IsUnknown() && !stepsItem.Approval.Group.IsGroupFallbackEnabled.IsNull() {
							*isGroupFallbackEnabled = stepsItem.Approval.Group.IsGroupFallbackEnabled.ValueBool()
						} else {
							isGroupFallbackEnabled = nil
						}
						group = &shared.AppGroupApproval{
							AllowSelfApproval:      allowSelfApproval3,
							AppGroupID:             appGroupID,
							AppID:                  appID,
							Fallback:               fallback2,
							FallbackGroupIds:       fallbackGroupIds,
							FallbackUserIds:        fallbackUserIds2,
							IsGroupFallbackEnabled: isGroupFallbackEnabled,
						}
					}
					var manager *shared.ManagerApprovalInput
					if stepsItem.Approval.Manager != nil {
						allowSelfApproval4 := new(bool)
						if !stepsItem.Approval.Manager.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.Manager.AllowSelfApproval.IsNull() {
							*allowSelfApproval4 = stepsItem.Approval.Manager.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval4 = nil
						}
						fallback3 := new(bool)
						if !stepsItem.Approval.Manager.Fallback.IsUnknown() && !stepsItem.Approval.Manager.Fallback.IsNull() {
							*fallback3 = stepsItem.Approval.Manager.Fallback.ValueBool()
						} else {
							fallback3 = nil
						}
						var fallbackUserIds3 []string
						if stepsItem.Approval.Manager.FallbackUserIds != nil {
							fallbackUserIds3 = make([]string, 0, len(stepsItem.Approval.Manager.FallbackUserIds))
							for _, fallbackUserIdsItem3 := range stepsItem.Approval.Manager.FallbackUserIds {
								fallbackUserIds3 = append(fallbackUserIds3, fallbackUserIdsItem3.ValueString())
							}
						}
						manager = &shared.ManagerApprovalInput{
							AllowSelfApproval: allowSelfApproval4,
							Fallback:          fallback3,
							FallbackUserIds:   fallbackUserIds3,
						}
					}
					requireApprovalReason := new(bool)
					if !stepsItem.Approval.RequireApprovalReason.IsUnknown() && !stepsItem.Approval.RequireApprovalReason.IsNull() {
						*requireApprovalReason = stepsItem.Approval.RequireApprovalReason.ValueBool()
					} else {
						requireApprovalReason = nil
					}
					requireDenialReason := new(bool)
					if !stepsItem.Approval.RequireDenialReason.IsUnknown() && !stepsItem.Approval.RequireDenialReason.IsNull() {
						*requireDenialReason = stepsItem.Approval.RequireDenialReason.ValueBool()
					} else {
						requireDenialReason = nil
					}
					requireReassignmentReason := new(bool)
					if !stepsItem.Approval.RequireReassignmentReason.IsUnknown() && !stepsItem.Approval.RequireReassignmentReason.IsNull() {
						*requireReassignmentReason = stepsItem.Approval.RequireReassignmentReason.ValueBool()
					} else {
						requireReassignmentReason = nil
					}
					requiresStepUpProviderID := new(string)
					if !stepsItem.Approval.RequiresStepUpProviderID.IsUnknown() && !stepsItem.Approval.RequiresStepUpProviderID.IsNull() {
						*requiresStepUpProviderID = stepsItem.Approval.RequiresStepUpProviderID.ValueString()
					} else {
						requiresStepUpProviderID = nil
					}
					var resourceOwners *shared.ResourceOwnerApproval
					if stepsItem.Approval.ResourceOwners != nil {
						allowSelfApproval5 := new(bool)
						if !stepsItem.Approval.ResourceOwners.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.ResourceOwners.AllowSelfApproval.IsNull() {
							*allowSelfApproval5 = stepsItem.Approval.ResourceOwners.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval5 = nil
						}
						fallback4 := new(bool)
						if !stepsItem.Approval.ResourceOwners.Fallback.IsUnknown() && !stepsItem.Approval.ResourceOwners.Fallback.IsNull() {
							*fallback4 = stepsItem.Approval.ResourceOwners.Fallback.ValueBool()
						} else {
							fallback4 = nil
						}
						var fallbackUserIds4 []string
						if stepsItem.Approval.ResourceOwners.FallbackUserIds != nil {
							fallbackUserIds4 = make([]string, 0, len(stepsItem.Approval.ResourceOwners.FallbackUserIds))
							for _, fallbackUserIdsItem4 := range stepsItem.Approval.ResourceOwners.FallbackUserIds {
								fallbackUserIds4 = append(fallbackUserIds4, fallbackUserIdsItem4.ValueString())
							}
						}
						resourceOwners = &shared.ResourceOwnerApproval{
							AllowSelfApproval: allowSelfApproval5,
							Fallback:          fallback4,
							FallbackUserIds:   fallbackUserIds4,
						}
					}
					var self *shared.SelfApprovalInput
					if stepsItem.Approval.Self != nil {
						fallback5 := new(bool)
						if !stepsItem.Approval.Self.Fallback.IsUnknown() && !stepsItem.Approval.Self.Fallback.IsNull() {
							*fallback5 = stepsItem.Approval.Self.Fallback.ValueBool()
						} else {
							fallback5 = nil
						}
						var fallbackUserIds5 []string
						if stepsItem.Approval.Self.FallbackUserIds != nil {
							fallbackUserIds5 = make([]string, 0, len(stepsItem.Approval.Self.FallbackUserIds))
							for _, fallbackUserIdsItem5 := range stepsItem.Approval.Self.FallbackUserIds {
								fallbackUserIds5 = append(fallbackUserIds5, fallbackUserIdsItem5.ValueString())
							}
						}
						self = &shared.SelfApprovalInput{
							Fallback:        fallback5,
							FallbackUserIds: fallbackUserIds5,
						}
					}
					var users *shared.UserApproval
					if stepsItem.Approval.Users != nil {
						allowSelfApproval6 := new(bool)
						if !stepsItem.Approval.Users.AllowSelfApproval.IsUnknown() && !stepsItem.Approval.Users.AllowSelfApproval.IsNull() {
							*allowSelfApproval6 = stepsItem.Approval.Users.AllowSelfApproval.ValueBool()
						} else {
							allowSelfApproval6 = nil
						}
						var userIds []string
						if stepsItem.Approval.Users.UserIds != nil {
							userIds = make([]string, 0, len(stepsItem.Approval.Users.UserIds))
							for _, userIdsItem := range stepsItem.Approval.Users.UserIds {
								userIds = append(userIds, userIdsItem.ValueString())
							}
						}
						users = &shared.UserApproval{
							AllowSelfApproval: allowSelfApproval6,
							UserIds:           userIds,
						}
					}
					var webhook *shared.WebhookApproval
					if stepsItem.Approval.Webhook != nil {
						webhookID := new(string)
						if !stepsItem.Approval.Webhook.WebhookID.IsUnknown() && !stepsItem.Approval.Webhook.WebhookID.IsNull() {
							*webhookID = stepsItem.Approval.Webhook.WebhookID.ValueString()
						} else {
							webhookID = nil
						}
						webhook = &shared.WebhookApproval{
							WebhookID: webhookID,
						}
					}
					approval = &shared.ApprovalInput{
						Agent:                     agent,
						AllowDelegation:           allowDelegation,
						AllowReassignment:         allowReassignment,
						AllowedReassignees:        allowedReassignees,
						AppOwners:                 appOwners,
						EntitlementOwners:         entitlementOwners,
						Escalation:                escalation,
						EscalationEnabled:         escalationEnabled,
						Expression:                expression,
						Group:                     group,
						Manager:                   manager,
						RequireApprovalReason:     requireApprovalReason,
						RequireDenialReason:       requireDenialReason,
						RequireReassignmentReason: requireReassignmentReason,
						RequiresStepUpProviderID:  requiresStepUpProviderID,
						ResourceOwners:            resourceOwners,
						Self:                      self,
						Users:                     users,
						Webhook:                   webhook,
					}
				}
				var form interface{}
				if !stepsItem.Form.IsUnknown() && !stepsItem.Form.IsNull() {
					_ = json.Unmarshal([]byte(stepsItem.Form.ValueString()), &form)
				}
				var provision *shared.Provision
				if stepsItem.Provision != nil {
					assigned := new(bool)
					if !stepsItem.Provision.Assigned.IsUnknown() && !stepsItem.Provision.Assigned.IsNull() {
						*assigned = stepsItem.Provision.Assigned.ValueBool()
					} else {
						assigned = nil
					}
					var provisionPolicy *shared.ProvisionPolicy
					if stepsItem.Provision.ProvisionPolicy != nil {
						var connector *shared.ConnectorProvision
						if stepsItem.Provision.ProvisionPolicy.Connector != nil {
							var account *shared.AccountProvision
							if stepsItem.Provision.ProvisionPolicy.Connector.Account != nil {
								var config *shared.Config
								if stepsItem.Provision.ProvisionPolicy.Connector.Account.Config != nil {
									config = &shared.Config{}
								}
								connectorID := new(string)
								if !stepsItem.Provision.ProvisionPolicy.Connector.Account.ConnectorID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Connector.Account.ConnectorID.IsNull() {
									*connectorID = stepsItem.Provision.ProvisionPolicy.Connector.Account.ConnectorID.ValueString()
								} else {
									connectorID = nil
								}
								var doNotSave *shared.DoNotSave
								if stepsItem.Provision.ProvisionPolicy.Connector.Account.DoNotSave != nil {
									doNotSave = &shared.DoNotSave{}
								}
								var saveToVault *shared.SaveToVault
								if stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault != nil {
									var vaultIds []string
									if stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds != nil {
										vaultIds = make([]string, 0, len(stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds))
										for _, vaultIdsItem := range stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds {
											vaultIds = append(vaultIds, vaultIdsItem.ValueString())
										}
									}
									saveToVault = &shared.SaveToVault{
										VaultIds: vaultIds,
									}
								}
								schemaID := new(string)
								if !stepsItem.Provision.ProvisionPolicy.Connector.Account.SchemaID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Connector.Account.SchemaID.IsNull() {
									*schemaID = stepsItem.Provision.ProvisionPolicy.Connector.Account.SchemaID.ValueString()
								} else {
									schemaID = nil
								}
								account = &shared.AccountProvision{
									Config:      config,
									ConnectorID: connectorID,
									DoNotSave:   doNotSave,
									SaveToVault: saveToVault,
									SchemaID:    schemaID,
								}
							}
							var defaultBehavior *shared.DefaultBehavior
							if stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior != nil {
								connectorId1 := new(string)
								if !stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID.IsNull() {
									*connectorId1 = stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID.ValueString()
								} else {
									connectorId1 = nil
								}
								defaultBehavior = &shared.DefaultBehavior{
									ConnectorID: connectorId1,
								}
							}
							var deleteAccount *shared.DeleteAccount
							if stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount != nil {
								connectorId2 := new(string)
								if !stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID.IsNull() {
									*connectorId2 = stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID.ValueString()
								} else {
									connectorId2 = nil
								}
								deleteAccount = &shared.DeleteAccount{
									ConnectorID: connectorId2,
								}
							}
							connector = &shared.ConnectorProvision{
								Account:         account,
								DefaultBehavior: defaultBehavior,
								DeleteAccount:   deleteAccount,
							}
						}
						var delegated *shared.DelegatedProvision
						if stepsItem.Provision.ProvisionPolicy.Delegated != nil {
							appId2 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.Delegated.AppID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Delegated.AppID.IsNull() {
								*appId2 = stepsItem.Provision.ProvisionPolicy.Delegated.AppID.ValueString()
							} else {
								appId2 = nil
							}
							entitlementID := new(string)
							if !stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID.IsNull() {
								*entitlementID = stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID.ValueString()
							} else {
								entitlementID = nil
							}
							delegated = &shared.DelegatedProvision{
								AppID:         appId2,
								EntitlementID: entitlementID,
							}
						}
						var externalTicket *shared.ExternalTicketProvision
						if stepsItem.Provision.ProvisionPolicy.ExternalTicket != nil {
							appId3 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.ExternalTicket.AppID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.ExternalTicket.AppID.IsNull() {
								*appId3 = stepsItem.Provision.ProvisionPolicy.ExternalTicket.AppID.ValueString()
							} else {
								appId3 = nil
							}
							connectorId3 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.ExternalTicket.ConnectorID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.ExternalTicket.ConnectorID.IsNull() {
								*connectorId3 = stepsItem.Provision.ProvisionPolicy.ExternalTicket.ConnectorID.ValueString()
							} else {
								connectorId3 = nil
							}
							externalTicketProvisionerConfigID := new(string)
							if !stepsItem.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID.IsNull() {
								*externalTicketProvisionerConfigID = stepsItem.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID.ValueString()
							} else {
								externalTicketProvisionerConfigID = nil
							}
							instructions1 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.ExternalTicket.Instructions.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.ExternalTicket.Instructions.IsNull() {
								*instructions1 = stepsItem.Provision.ProvisionPolicy.ExternalTicket.Instructions.ValueString()
							} else {
								instructions1 = nil
							}
							externalTicket = &shared.ExternalTicketProvision{
								AppID:                             appId3,
								ConnectorID:                       connectorId3,
								ExternalTicketProvisionerConfigID: externalTicketProvisionerConfigID,
								Instructions:                      instructions1,
							}
						}
						var manual *shared.ManualProvision
						if stepsItem.Provision.ProvisionPolicy.Manual != nil {
							instructions2 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.Manual.Instructions.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Manual.Instructions.IsNull() {
								*instructions2 = stepsItem.Provision.ProvisionPolicy.Manual.Instructions.ValueString()
							} else {
								instructions2 = nil
							}
							var userIds1 []string
							if stepsItem.Provision.ProvisionPolicy.Manual.UserIds != nil {
								userIds1 = make([]string, 0, len(stepsItem.Provision.ProvisionPolicy.Manual.UserIds))
								for _, userIdsItem1 := range stepsItem.Provision.ProvisionPolicy.Manual.UserIds {
									userIds1 = append(userIds1, userIdsItem1.ValueString())
								}
							}
							manual = &shared.ManualProvision{
								Instructions: instructions2,
								UserIds:      userIds1,
							}
						}
						var multiStep interface{}
						if !stepsItem.Provision.ProvisionPolicy.MultiStep.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.MultiStep.IsNull() {
							_ = json.Unmarshal([]byte(stepsItem.Provision.ProvisionPolicy.MultiStep.ValueString()), &multiStep)
						}
						var unconfigured *shared.UnconfiguredProvision
						if stepsItem.Provision.ProvisionPolicy.Unconfigured != nil {
							unconfigured = &shared.UnconfiguredProvision{}
						}
						var webhook1 *shared.WebhookProvision
						if stepsItem.Provision.ProvisionPolicy.Webhook != nil {
							webhookId1 := new(string)
							if !stepsItem.Provision.ProvisionPolicy.Webhook.WebhookID.IsUnknown() && !stepsItem.Provision.ProvisionPolicy.Webhook.WebhookID.IsNull() {
								*webhookId1 = stepsItem.Provision.ProvisionPolicy.Webhook.WebhookID.ValueString()
							} else {
								webhookId1 = nil
							}
							webhook1 = &shared.WebhookProvision{
								WebhookID: webhookId1,
							}
						}
						provisionPolicy = &shared.ProvisionPolicy{
							Connector:      connector,
							Delegated:      delegated,
							ExternalTicket: externalTicket,
							Manual:         manual,
							MultiStep:      multiStep,
							Unconfigured:   unconfigured,
							Webhook:        webhook1,
						}
					}
					var provisionTarget *shared.ProvisionTarget
					if stepsItem.Provision.ProvisionTarget != nil {
						appEntitlementId1 := new(string)
						if !stepsItem.Provision.ProvisionTarget.AppEntitlementID.IsUnknown() && !stepsItem.Provision.ProvisionTarget.AppEntitlementID.IsNull() {
							*appEntitlementId1 = stepsItem.Provision.ProvisionTarget.AppEntitlementID.ValueString()
						} else {
							appEntitlementId1 = nil
						}
						appId4 := new(string)
						if !stepsItem.Provision.ProvisionTarget.AppID.IsUnknown() && !stepsItem.Provision.ProvisionTarget.AppID.IsNull() {
							*appId4 = stepsItem.Provision.ProvisionTarget.AppID.ValueString()
						} else {
							appId4 = nil
						}
						appUserID := new(string)
						if !stepsItem.Provision.ProvisionTarget.AppUserID.IsUnknown() && !stepsItem.Provision.ProvisionTarget.AppUserID.IsNull() {
							*appUserID = stepsItem.Provision.ProvisionTarget.AppUserID.ValueString()
						} else {
							appUserID = nil
						}
						grantDuration := new(string)
						if !stepsItem.Provision.ProvisionTarget.GrantDuration.IsUnknown() && !stepsItem.Provision.ProvisionTarget.GrantDuration.IsNull() {
							*grantDuration = stepsItem.Provision.ProvisionTarget.GrantDuration.ValueString()
						} else {
							grantDuration = nil
						}
						provisionTarget = &shared.ProvisionTarget{
							AppEntitlementID: appEntitlementId1,
							AppID:            appId4,
							AppUserID:        appUserID,
							GrantDuration:    grantDuration,
						}
					}
					provision = &shared.Provision{
						Assigned:        assigned,
						ProvisionPolicy: provisionPolicy,
						ProvisionTarget: provisionTarget,
					}
				}
				var reject *shared.Reject
				if stepsItem.Reject != nil {
					rejectMessage := new(string)
					if !stepsItem.Reject.RejectMessage.IsUnknown() && !stepsItem.Reject.RejectMessage.IsNull() {
						*rejectMessage = stepsItem.Reject.RejectMessage.ValueString()
					} else {
						rejectMessage = nil
					}
					reject = &shared.Reject{
						RejectMessage: rejectMessage,
					}
				}
				var wait *shared.Wait
				if stepsItem.Wait != nil {
					commentOnFirstWait := new(string)
					if !stepsItem.Wait.CommentOnFirstWait.IsUnknown() && !stepsItem.Wait.CommentOnFirstWait.IsNull() {
						*commentOnFirstWait = stepsItem.Wait.CommentOnFirstWait.ValueString()
					} else {
						commentOnFirstWait = nil
					}
					commentOnTimeout := new(string)
					if !stepsItem.Wait.CommentOnTimeout.IsUnknown() && !stepsItem.Wait.CommentOnTimeout.IsNull() {
						*commentOnTimeout = stepsItem.Wait.CommentOnTimeout.ValueString()
					} else {
						commentOnTimeout = nil
					}
					var condition *shared.WaitCondition
					if stepsItem.Wait.Condition != nil {
						condition1 := new(string)
						if !stepsItem.Wait.Condition.Condition.IsUnknown() && !stepsItem.Wait.Condition.Condition.IsNull() {
							*condition1 = stepsItem.Wait.Condition.Condition.ValueString()
						} else {
							condition1 = nil
						}
						condition = &shared.WaitCondition{
							Condition: condition1,
						}
					}
					var duration *shared.WaitDuration
					if stepsItem.Wait.Duration != nil {
						duration1 := new(string)
						if !stepsItem.Wait.Duration.Duration.IsUnknown() && !stepsItem.Wait.Duration.Duration.IsNull() {
							*duration1 = stepsItem.Wait.Duration.Duration.ValueString()
						} else {
							duration1 = nil
						}
						duration = &shared.WaitDuration{
							Duration: duration1,
						}
					}
					name := new(string)
					if !stepsItem.Wait.Name.IsUnknown() && !stepsItem.Wait.Name.IsNull() {
						*name = stepsItem.Wait.Name.ValueString()
					} else {
						name = nil
					}
					timeoutDuration := new(string)
					if !stepsItem.Wait.TimeoutDuration.IsUnknown() && !stepsItem.Wait.TimeoutDuration.IsNull() {
						*timeoutDuration = stepsItem.Wait.TimeoutDuration.ValueString()
					} else {
						timeoutDuration = nil
					}
					var untilTime *shared.WaitUntilTime
					if stepsItem.Wait.UntilTime != nil {
						hours := new(int64)
						if !stepsItem.Wait.UntilTime.Hours.IsUnknown() && !stepsItem.Wait.UntilTime.Hours.IsNull() {
							*hours = stepsItem.Wait.UntilTime.Hours.ValueInt64()
						} else {
							hours = nil
						}
						minutes := new(int64)
						if !stepsItem.Wait.UntilTime.Minutes.IsUnknown() && !stepsItem.Wait.UntilTime.Minutes.IsNull() {
							*minutes = stepsItem.Wait.UntilTime.Minutes.ValueInt64()
						} else {
							minutes = nil
						}
						timezone := new(string)
						if !stepsItem.Wait.UntilTime.Timezone.IsUnknown() && !stepsItem.Wait.UntilTime.Timezone.IsNull() {
							*timezone = stepsItem.Wait.UntilTime.Timezone.ValueString()
						} else {
							timezone = nil
						}
						untilTime = &shared.WaitUntilTime{
							Hours:    hours,
							Minutes:  minutes,
							Timezone: timezone,
						}
					}
					wait = &shared.Wait{
						CommentOnFirstWait: commentOnFirstWait,
						CommentOnTimeout:   commentOnTimeout,
						Condition:          condition,
						Duration:           duration,
						Name:               name,
						TimeoutDuration:    timeoutDuration,
						UntilTime:          untilTime,
					}
				}
				steps = append(steps, shared.PolicyStepInput{
					Accept:    accept,
					Approval:  approval,
					Form:      form,
					Provision: provision,
					Reject:    reject,
					Wait:      wait,
				})
			}
		}
		policyStepsInst := shared.PolicyStepsInput{
			Steps: steps,
		}
		policySteps[policyStepsKey] = policyStepsInst
	}
	policyType := new(shared.PolicyType)
	if !r.PolicyType.IsUnknown() && !r.PolicyType.IsNull() {
		*policyType = shared.PolicyType(r.PolicyType.ValueString())
	} else {
		policyType = nil
	}
	var postActions []shared.PolicyPostActions
	if r.PostActions != nil {
		postActions = make([]shared.PolicyPostActions, 0, len(r.PostActions))
		for _, postActionsItem := range r.PostActions {
			certifyRemediateImmediately := new(bool)
			if !postActionsItem.CertifyRemediateImmediately.IsUnknown() && !postActionsItem.CertifyRemediateImmediately.IsNull() {
				*certifyRemediateImmediately = postActionsItem.CertifyRemediateImmediately.ValueBool()
			} else {
				certifyRemediateImmediately = nil
			}
			postActions = append(postActions, shared.PolicyPostActions{
				CertifyRemediateImmediately: certifyRemediateImmediately,
			})
		}
	}
	reassignTasksToDelegates := new(bool)
	if !r.ReassignTasksToDelegates.IsUnknown() && !r.ReassignTasksToDelegates.IsNull() {
		*reassignTasksToDelegates = r.ReassignTasksToDelegates.ValueBool()
	} else {
		reassignTasksToDelegates = nil
	}
	var rules []shared.Rule
	if r.Rules != nil {
		rules = make([]shared.Rule, 0, len(r.Rules))
		for _, rulesItem := range r.Rules {
			condition2 := new(string)
			if !rulesItem.Condition.IsUnknown() && !rulesItem.Condition.IsNull() {
				*condition2 = rulesItem.Condition.ValueString()
			} else {
				condition2 = nil
			}
			policyKey := new(string)
			if !rulesItem.PolicyKey.IsUnknown() && !rulesItem.PolicyKey.IsNull() {
				*policyKey = rulesItem.PolicyKey.ValueString()
			} else {
				policyKey = nil
			}
			rules = append(rules, shared.Rule{
				Condition: condition2,
				PolicyKey: policyKey,
			})
		}
	}
	updatedAt := new(time.Time)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, r.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	out := shared.PolicyInput{
		CreatedAt:                createdAt,
		DeletedAt:                deletedAt,
		Description:              description,
		DisplayName:              displayName,
		PolicySteps:              policySteps,
		PolicyType:               policyType,
		PostActions:              postActions,
		ReassignTasksToDelegates: reassignTasksToDelegates,
		Rules:                    rules,
		UpdatedAt:                updatedAt,
	}

	return &out, diags
}

func (r *PolicyResourceModel) ToSharedUpdatePolicyRequest(ctx context.Context) (*shared.UpdatePolicyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	policy, policyDiags := r.ToSharedPolicyInput(ctx)
	diags.Append(policyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdatePolicyRequest{
		Policy: policy,
	}

	return &out, diags
}
