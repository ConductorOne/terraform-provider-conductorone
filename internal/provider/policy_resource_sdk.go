// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"conductorone/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func BoolPointer(b bool) *bool {
	return &b
}

func (r *PolicyResourceModel) ToCreateSDKType() *shared.CreatePolicyRequest {
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	policySteps := make(map[string]shared.PolicySteps)
	for policyStepsKey, policyStepsValue := range r.PolicySteps {
		steps := policySteps[policyStepsKey].Steps
		for _, step := range policyStepsValue.Steps {
			if step.Approval != nil {
				newPolicyStep := shared.PolicyStep{
					Approval: &shared.Approval{
						AllowReassignment:         step.Approval.AllowReassignment.ValueBoolPointer(),
						Assigned:                  step.Approval.Assigned.ValueBoolPointer(),
						RequireApprovalReason:     step.Approval.RequireApprovalReason.ValueBoolPointer(),
						RequireReassignmentReason: step.Approval.RequireReassignmentReason.ValueBoolPointer(),
					},
				}
				if step.Approval.AppOwnerApproval != nil {
					newPolicyStep.Approval.AppOwnerApproval = &shared.AppOwnerApproval{
						AllowSelfApproval: step.Approval.AppOwnerApproval.AllowSelfApproval.ValueBoolPointer(),
					}
				}
				if step.Approval.AppGroupApproval != nil {
					newPolicyStep.Approval.AppGroupApproval = &shared.AppGroupApproval{
						AllowSelfApproval: step.Approval.AppGroupApproval.AllowSelfApproval.ValueBoolPointer(),
						AppGroupID:        step.Approval.AppGroupApproval.AppGroupID.ValueStringPointer(),
						AppID:             step.Approval.AppGroupApproval.AppID.ValueStringPointer(),
						Fallback:          step.Approval.AppGroupApproval.Fallback.ValueBoolPointer(),
					}
					for _, v := range step.Approval.AppGroupApproval.FallbackUserIds {
						newPolicyStep.Approval.AppGroupApproval.FallbackUserIds = append(newPolicyStep.Approval.AppGroupApproval.FallbackUserIds, v.ValueString())
					}
				}
				if step.Approval.EntitlementOwnerApproval != nil {
					newPolicyStep.Approval.EntitlementOwnerApproval = &shared.EntitlementOwnerApproval{
						AllowSelfApproval: step.Approval.EntitlementOwnerApproval.AllowSelfApproval.ValueBoolPointer(),
						Fallback:          step.Approval.EntitlementOwnerApproval.Fallback.ValueBoolPointer(),
					}
					for _, v := range step.Approval.EntitlementOwnerApproval.FallbackUserIds {
						newPolicyStep.Approval.EntitlementOwnerApproval.FallbackUserIds = append(newPolicyStep.Approval.EntitlementOwnerApproval.FallbackUserIds, v.ValueString())
					}
				}
				if step.Approval.ManagerApproval != nil {
					newPolicyStep.Approval.ManagerApproval = &shared.ManagerApproval{
						AllowSelfApproval: step.Approval.ManagerApproval.AllowSelfApproval.ValueBoolPointer(),
						Fallback:          step.Approval.ManagerApproval.Fallback.ValueBoolPointer(),
					}
					for _, v := range step.Approval.ManagerApproval.FallbackUserIds {
						newPolicyStep.Approval.ManagerApproval.FallbackUserIds = append(newPolicyStep.Approval.ManagerApproval.FallbackUserIds, v.ValueString())
					}
					for _, v := range step.Approval.ManagerApproval.AssignedUserIds {
						newPolicyStep.Approval.ManagerApproval.AssignedUserIds = append(newPolicyStep.Approval.ManagerApproval.AssignedUserIds, v.ValueString())
					}
				}
				if step.Approval.SelfApproval != nil {
					newPolicyStep.Approval.SelfApproval = &shared.SelfApproval{
						Fallback: step.Approval.SelfApproval.Fallback.ValueBoolPointer(),
					}
					for _, v := range step.Approval.SelfApproval.FallbackUserIds {
						newPolicyStep.Approval.SelfApproval.FallbackUserIds = append(newPolicyStep.Approval.SelfApproval.FallbackUserIds, v.ValueString())
					}
					for _, v := range step.Approval.SelfApproval.AssignedUserIds {
						newPolicyStep.Approval.SelfApproval.AssignedUserIds = append(newPolicyStep.Approval.SelfApproval.AssignedUserIds, v.ValueString())
					}
				}
				if step.Approval.UserApproval != nil {
					newPolicyStep.Approval.UserApproval = &shared.UserApproval{
						AllowSelfApproval: step.Approval.UserApproval.AllowSelfApproval.ValueBoolPointer(),
					}
					for _, v := range step.Approval.UserApproval.UserIds {
						newPolicyStep.Approval.UserApproval.UserIds = append(newPolicyStep.Approval.UserApproval.UserIds, v.ValueString())
					}
				}
				steps = append(steps, newPolicyStep)
			}
			if step.Provision != nil {
				newPolicyStep := shared.PolicyStep{
					Provision: &shared.Provision{
						Assigned: step.Provision.Assigned.ValueBoolPointer(),
					},
				}
				if step.Provision.ProvisionPolicy != nil {
					if step.Provision.ProvisionPolicy.ConnectorProvision != nil {
						newPolicyStep.Provision.ProvisionPolicy = &shared.ProvisionPolicy{
							ConnectorProvision: &shared.ConnectorProvision{},
						}
					}
					if step.Provision.ProvisionPolicy.DelegatedProvision != nil {
						newPolicyStep.Provision.ProvisionPolicy = &shared.ProvisionPolicy{
							DelegatedProvision: &shared.DelegatedProvision{
								AppID:         step.Provision.ProvisionPolicy.DelegatedProvision.AppID.ValueStringPointer(),
								EntitlementID: step.Provision.ProvisionPolicy.DelegatedProvision.EntitlementID.ValueStringPointer(),
							},
						}
					}
					if step.Provision.ProvisionPolicy.ManualProvision != nil {
						newPolicyStep.Provision.ProvisionPolicy = &shared.ProvisionPolicy{
							ManualProvision: &shared.ManualProvision{},
						}
					}
				}
				steps = append(steps, newPolicyStep)
			}
		}
		policySteps[policyStepsKey] = shared.PolicySteps{
			Steps: steps,
		}
	}
	// Warning. This is a map, but the source tf var is not a map. This might indicate a bug.
	policyType := new(shared.CreatePolicyRequestPolicyType)
	if !r.PolicyType.IsUnknown() && !r.PolicyType.IsNull() {
		*policyType = shared.CreatePolicyRequestPolicyType(r.PolicyType.ValueString())
	} else {
		policyType = nil
	}
	postActions := make([]shared.PolicyPostActions, 0)
	for _, postActionsItem := range r.PostActions {
		certifyRemediateImmediately := new(bool)
		if !postActionsItem.CertifyRemediateImmediately.IsUnknown() && !postActionsItem.CertifyRemediateImmediately.IsNull() {
			*certifyRemediateImmediately = postActionsItem.CertifyRemediateImmediately.ValueBool()
		} else {
			certifyRemediateImmediately = nil
		}
		postActions = append(postActions, shared.PolicyPostActions{
			CertifyRemediateImmediately: certifyRemediateImmediately,
		})
	}
	reassignTasksToDelegates := new(bool)
	if !r.ReassignTasksToDelegates.IsUnknown() && !r.ReassignTasksToDelegates.IsNull() {
		*reassignTasksToDelegates = r.ReassignTasksToDelegates.ValueBool()
	} else {
		reassignTasksToDelegates = nil
	}
	out := shared.CreatePolicyRequest{
		Description:              description,
		DisplayName:              displayName,
		PolicySteps:              policySteps,
		PolicyType:               policyType,
		PostActions:              postActions,
		ReassignTasksToDelegates: reassignTasksToDelegates,
	}
	return &out
}

func (r *PolicyResourceModel) ToGetSDKType() *shared.CreatePolicyRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *PolicyResourceModel) ToUpdateSDKType() *shared.Policy {
	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	policySteps := make(map[string]shared.PolicySteps)
	for policyStepsKey, policyStepsValue := range r.PolicySteps {
		steps := policySteps[policyStepsKey].Steps
		for _, step := range policyStepsValue.Steps {
			if step.Approval != nil {
				newPolicyStep := shared.PolicyStep{
					Approval: &shared.Approval{
						AllowReassignment:         step.Approval.AllowReassignment.ValueBoolPointer(),
						Assigned:                  step.Approval.Assigned.ValueBoolPointer(),
						RequireApprovalReason:     step.Approval.RequireApprovalReason.ValueBoolPointer(),
						RequireReassignmentReason: step.Approval.RequireReassignmentReason.ValueBoolPointer(),
					},
				}
				if step.Approval.AppOwnerApproval != nil {
					newPolicyStep.Approval.AppOwnerApproval = &shared.AppOwnerApproval{
						AllowSelfApproval: step.Approval.AppOwnerApproval.AllowSelfApproval.ValueBoolPointer(),
					}
				}
				if step.Approval.AppGroupApproval != nil {
					newPolicyStep.Approval.AppGroupApproval = &shared.AppGroupApproval{
						AllowSelfApproval: step.Approval.AppGroupApproval.AllowSelfApproval.ValueBoolPointer(),
						AppGroupID:        step.Approval.AppGroupApproval.AppGroupID.ValueStringPointer(),
						AppID:             step.Approval.AppGroupApproval.AppID.ValueStringPointer(),
						Fallback:          step.Approval.AppGroupApproval.Fallback.ValueBoolPointer(),
					}
					for _, v := range step.Approval.AppGroupApproval.FallbackUserIds {
						newPolicyStep.Approval.AppGroupApproval.FallbackUserIds = append(newPolicyStep.Approval.AppGroupApproval.FallbackUserIds, v.ValueString())
					}
				}
				if step.Approval.EntitlementOwnerApproval != nil {
					newPolicyStep.Approval.EntitlementOwnerApproval = &shared.EntitlementOwnerApproval{
						AllowSelfApproval: step.Approval.EntitlementOwnerApproval.AllowSelfApproval.ValueBoolPointer(),
						Fallback:          step.Approval.EntitlementOwnerApproval.Fallback.ValueBoolPointer(),
					}
					for _, v := range step.Approval.EntitlementOwnerApproval.FallbackUserIds {
						newPolicyStep.Approval.EntitlementOwnerApproval.FallbackUserIds = append(newPolicyStep.Approval.EntitlementOwnerApproval.FallbackUserIds, v.ValueString())
					}
				}
				if step.Approval.ManagerApproval != nil {
					newPolicyStep.Approval.ManagerApproval = &shared.ManagerApproval{
						AllowSelfApproval: step.Approval.ManagerApproval.AllowSelfApproval.ValueBoolPointer(),
						Fallback:          step.Approval.ManagerApproval.Fallback.ValueBoolPointer(),
					}
					for _, v := range step.Approval.ManagerApproval.FallbackUserIds {
						newPolicyStep.Approval.ManagerApproval.FallbackUserIds = append(newPolicyStep.Approval.ManagerApproval.FallbackUserIds, v.ValueString())
					}
					for _, v := range step.Approval.ManagerApproval.AssignedUserIds {
						newPolicyStep.Approval.ManagerApproval.AssignedUserIds = append(newPolicyStep.Approval.ManagerApproval.AssignedUserIds, v.ValueString())
					}
				}
				if step.Approval.SelfApproval != nil {
					newPolicyStep.Approval.SelfApproval = &shared.SelfApproval{
						Fallback: step.Approval.SelfApproval.Fallback.ValueBoolPointer(),
					}
					for _, v := range step.Approval.SelfApproval.FallbackUserIds {
						newPolicyStep.Approval.SelfApproval.FallbackUserIds = append(newPolicyStep.Approval.SelfApproval.FallbackUserIds, v.ValueString())
					}
					for _, v := range step.Approval.SelfApproval.AssignedUserIds {
						newPolicyStep.Approval.SelfApproval.AssignedUserIds = append(newPolicyStep.Approval.SelfApproval.AssignedUserIds, v.ValueString())
					}
				}
				if step.Approval.UserApproval != nil {
					newPolicyStep.Approval.UserApproval = &shared.UserApproval{
						AllowSelfApproval: step.Approval.UserApproval.AllowSelfApproval.ValueBoolPointer(),
					}
					for _, v := range step.Approval.UserApproval.UserIds {
						newPolicyStep.Approval.UserApproval.UserIds = append(newPolicyStep.Approval.UserApproval.UserIds, v.ValueString())
					}
				}
				steps = append(steps, newPolicyStep)
			}
			if step.Provision != nil {
				newPolicyStep := shared.PolicyStep{
					Provision: &shared.Provision{
						Assigned: step.Provision.Assigned.ValueBoolPointer(),
					},
				}
				if step.Provision.ProvisionPolicy != nil {
					if step.Provision.ProvisionPolicy.ConnectorProvision != nil {
						newPolicyStep.Provision.ProvisionPolicy = &shared.ProvisionPolicy{
							ConnectorProvision: &shared.ConnectorProvision{},
						}
					}
					if step.Provision.ProvisionPolicy.DelegatedProvision != nil {
						newPolicyStep.Provision.ProvisionPolicy = &shared.ProvisionPolicy{
							DelegatedProvision: &shared.DelegatedProvision{
								AppID:         step.Provision.ProvisionPolicy.DelegatedProvision.AppID.ValueStringPointer(),
								EntitlementID: step.Provision.ProvisionPolicy.DelegatedProvision.EntitlementID.ValueStringPointer(),
							},
						}
					}
					if step.Provision.ProvisionPolicy.ManualProvision != nil {
						newPolicyStep.Provision.ProvisionPolicy = &shared.ProvisionPolicy{
							ManualProvision: &shared.ManualProvision{},
						}
					}
				}
				steps = append(steps, newPolicyStep)
			}
		}
		policySteps[policyStepsKey] = shared.PolicySteps{
			Steps: steps,
		}
	}
	// Warning. This is a map, but the source tf var is not a map. This might indicate a bug.
	policyType := new(shared.PolicyPolicyType)
	if !r.PolicyType.IsUnknown() && !r.PolicyType.IsNull() {
		*policyType = shared.PolicyPolicyType(r.PolicyType.ValueString())
	} else {
		policyType = nil
	}
	postActions := make([]shared.PolicyPostActions, 0)
	for _, postActionsItem := range r.PostActions {
		certifyRemediateImmediately := new(bool)
		if !postActionsItem.CertifyRemediateImmediately.IsUnknown() && !postActionsItem.CertifyRemediateImmediately.IsNull() {
			*certifyRemediateImmediately = postActionsItem.CertifyRemediateImmediately.ValueBool()
		} else {
			certifyRemediateImmediately = nil
		}
		postActions = append(postActions, shared.PolicyPostActions{
			CertifyRemediateImmediately: certifyRemediateImmediately,
		})
	}
	reassignTasksToDelegates := new(bool)
	if !r.ReassignTasksToDelegates.IsUnknown() && !r.ReassignTasksToDelegates.IsNull() {
		*reassignTasksToDelegates = r.ReassignTasksToDelegates.ValueBool()
	} else {
		reassignTasksToDelegates = nil
	}
	systemBuiltin := new(bool)
	if !r.SystemBuiltin.IsUnknown() && !r.SystemBuiltin.IsNull() {
		*systemBuiltin = r.SystemBuiltin.ValueBool()
	} else {
		systemBuiltin = nil
	}

	out := shared.Policy{
		CreatedAt:                createdAt,
		DeletedAt:                deletedAt,
		Description:              description,
		DisplayName:              displayName,
		ID:                       id,
		PolicySteps:              policySteps,
		PolicyType:               policyType,
		PostActions:              postActions,
		ReassignTasksToDelegates: reassignTasksToDelegates,
		SystemBuiltin:            systemBuiltin,
	}
	return &out
}

func (r *PolicyResourceModel) ToDeleteSDKType() *shared.DeletePolicyRequest {
	out := shared.DeletePolicyRequest{}
	return &out
}

func (r *PolicyResourceModel) RefreshFromGetResponse(resp *shared.Policy) {
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.Description != nil {
		r.Description = types.StringValue(*resp.Description)
	} else {
		r.Description = types.StringNull()
	}
	if resp.DisplayName != nil {
		r.DisplayName = types.StringValue(*resp.DisplayName)
	} else {
		r.DisplayName = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if r.PolicySteps == nil && len(resp.PolicySteps) > 0 {
		r.PolicySteps = make(map[string]PolicySteps)
		for policyStepsKey, policyStepsValue := range resp.PolicySteps {
			var policyStepsResult PolicySteps
			policyStepsResult.Steps = nil
			for _, stepsItem := range policyStepsValue.Steps {
				var steps1 PolicyStep
				if steps1.Approval == nil {
					steps1.Approval = &Approval{}
				}
				if stepsItem.Approval == nil {
					steps1.Approval = nil
				} else {
					steps1.Approval = &Approval{}
					if stepsItem.Approval.AllowReassignment != nil {
						steps1.Approval.AllowReassignment = types.BoolValue(*stepsItem.Approval.AllowReassignment)
					} else {
						steps1.Approval.AllowReassignment = types.BoolNull()
					}
					if steps1.Approval.AppGroupApproval == nil {
						steps1.Approval.AppGroupApproval = &AppGroupApproval{}
					}
					if stepsItem.Approval.AppGroupApproval == nil {
						steps1.Approval.AppGroupApproval = nil
					} else {
						steps1.Approval.AppGroupApproval = &AppGroupApproval{}
						if stepsItem.Approval.AppGroupApproval.AllowSelfApproval != nil {
							steps1.Approval.AppGroupApproval.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.AppGroupApproval.AllowSelfApproval)
						} else {
							steps1.Approval.AppGroupApproval.AllowSelfApproval = types.BoolNull()
						}
						if stepsItem.Approval.AppGroupApproval.AppGroupID != nil {
							steps1.Approval.AppGroupApproval.AppGroupID = types.StringValue(*stepsItem.Approval.AppGroupApproval.AppGroupID)
						} else {
							steps1.Approval.AppGroupApproval.AppGroupID = types.StringNull()
						}
						if stepsItem.Approval.AppGroupApproval.AppID != nil {
							steps1.Approval.AppGroupApproval.AppID = types.StringValue(*stepsItem.Approval.AppGroupApproval.AppID)
						} else {
							steps1.Approval.AppGroupApproval.AppID = types.StringNull()
						}
						if stepsItem.Approval.AppGroupApproval.Fallback != nil {
							steps1.Approval.AppGroupApproval.Fallback = types.BoolValue(*stepsItem.Approval.AppGroupApproval.Fallback)
						} else {
							steps1.Approval.AppGroupApproval.Fallback = types.BoolNull()
						}
						steps1.Approval.AppGroupApproval.FallbackUserIds = nil
						for _, v := range stepsItem.Approval.AppGroupApproval.FallbackUserIds {
							steps1.Approval.AppGroupApproval.FallbackUserIds = append(steps1.Approval.AppGroupApproval.FallbackUserIds, types.StringValue(v))
						}
					}
					if steps1.Approval.AppOwnerApproval == nil {
						steps1.Approval.AppOwnerApproval = &AppOwnerApproval{}
					}
					if stepsItem.Approval.AppOwnerApproval == nil {
						steps1.Approval.AppOwnerApproval = nil
					} else {
						steps1.Approval.AppOwnerApproval = &AppOwnerApproval{}
						if stepsItem.Approval.AppOwnerApproval.AllowSelfApproval != nil {
							steps1.Approval.AppOwnerApproval.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.AppOwnerApproval.AllowSelfApproval)
						} else {
							steps1.Approval.AppOwnerApproval.AllowSelfApproval = types.BoolNull()
						}
					}
					if stepsItem.Approval.Assigned != nil {
						steps1.Approval.Assigned = types.BoolValue(*stepsItem.Approval.Assigned)
					} else {
						steps1.Approval.Assigned = types.BoolNull()
					}
					if steps1.Approval.EntitlementOwnerApproval == nil {
						steps1.Approval.EntitlementOwnerApproval = &EntitlementOwnerApproval{}
					}
					if stepsItem.Approval.EntitlementOwnerApproval == nil {
						steps1.Approval.EntitlementOwnerApproval = nil
					} else {
						steps1.Approval.EntitlementOwnerApproval = &EntitlementOwnerApproval{}
						if stepsItem.Approval.EntitlementOwnerApproval.AllowSelfApproval != nil {
							steps1.Approval.EntitlementOwnerApproval.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.EntitlementOwnerApproval.AllowSelfApproval)
						} else {
							steps1.Approval.EntitlementOwnerApproval.AllowSelfApproval = types.BoolNull()
						}
						if stepsItem.Approval.EntitlementOwnerApproval.Fallback != nil {
							steps1.Approval.EntitlementOwnerApproval.Fallback = types.BoolValue(*stepsItem.Approval.EntitlementOwnerApproval.Fallback)
						} else {
							steps1.Approval.EntitlementOwnerApproval.Fallback = types.BoolNull()
						}
						steps1.Approval.EntitlementOwnerApproval.FallbackUserIds = nil
						for _, v := range stepsItem.Approval.EntitlementOwnerApproval.FallbackUserIds {
							steps1.Approval.EntitlementOwnerApproval.FallbackUserIds = append(steps1.Approval.EntitlementOwnerApproval.FallbackUserIds, types.StringValue(v))
						}
					}
					if steps1.Approval.ManagerApproval == nil {
						steps1.Approval.ManagerApproval = &ManagerApproval{}
					}
					if stepsItem.Approval.ManagerApproval == nil {
						steps1.Approval.ManagerApproval = nil
					} else {
						steps1.Approval.ManagerApproval = &ManagerApproval{}
						if stepsItem.Approval.ManagerApproval.AllowSelfApproval != nil {
							steps1.Approval.ManagerApproval.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.ManagerApproval.AllowSelfApproval)
						} else {
							steps1.Approval.ManagerApproval.AllowSelfApproval = types.BoolNull()
						}
						steps1.Approval.ManagerApproval.AssignedUserIds = nil
						for _, v := range stepsItem.Approval.ManagerApproval.AssignedUserIds {
							steps1.Approval.ManagerApproval.AssignedUserIds = append(steps1.Approval.ManagerApproval.AssignedUserIds, types.StringValue(v))
						}
						if stepsItem.Approval.ManagerApproval.Fallback != nil {
							steps1.Approval.ManagerApproval.Fallback = types.BoolValue(*stepsItem.Approval.ManagerApproval.Fallback)
						} else {
							steps1.Approval.ManagerApproval.Fallback = types.BoolNull()
						}
						steps1.Approval.ManagerApproval.FallbackUserIds = nil
						for _, v := range stepsItem.Approval.ManagerApproval.FallbackUserIds {
							steps1.Approval.ManagerApproval.FallbackUserIds = append(steps1.Approval.ManagerApproval.FallbackUserIds, types.StringValue(v))
						}
					}
					if stepsItem.Approval.RequireApprovalReason != nil {
						steps1.Approval.RequireApprovalReason = types.BoolValue(*stepsItem.Approval.RequireApprovalReason)
					} else {
						steps1.Approval.RequireApprovalReason = types.BoolNull()
					}
					if stepsItem.Approval.RequireReassignmentReason != nil {
						steps1.Approval.RequireReassignmentReason = types.BoolValue(*stepsItem.Approval.RequireReassignmentReason)
					} else {
						steps1.Approval.RequireReassignmentReason = types.BoolNull()
					}
					if steps1.Approval.SelfApproval == nil {
						steps1.Approval.SelfApproval = &SelfApproval{}
					}
					if stepsItem.Approval.SelfApproval == nil {
						steps1.Approval.SelfApproval = nil
					} else {
						steps1.Approval.SelfApproval = &SelfApproval{}
						steps1.Approval.SelfApproval.AssignedUserIds = nil
						for _, v := range stepsItem.Approval.SelfApproval.AssignedUserIds {
							steps1.Approval.SelfApproval.AssignedUserIds = append(steps1.Approval.SelfApproval.AssignedUserIds, types.StringValue(v))
						}
						if stepsItem.Approval.SelfApproval.Fallback != nil {
							steps1.Approval.SelfApproval.Fallback = types.BoolValue(*stepsItem.Approval.SelfApproval.Fallback)
						} else {
							steps1.Approval.SelfApproval.Fallback = types.BoolNull()
						}
						steps1.Approval.SelfApproval.FallbackUserIds = nil
						for _, v := range stepsItem.Approval.SelfApproval.FallbackUserIds {
							steps1.Approval.SelfApproval.FallbackUserIds = append(steps1.Approval.SelfApproval.FallbackUserIds, types.StringValue(v))
						}
					}
					if steps1.Approval.UserApproval == nil {
						steps1.Approval.UserApproval = &UserApproval{}
					}
					if stepsItem.Approval.UserApproval == nil {
						steps1.Approval.UserApproval = nil
					} else {
						steps1.Approval.UserApproval = &UserApproval{}
						if stepsItem.Approval.UserApproval.AllowSelfApproval != nil {
							steps1.Approval.UserApproval.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.UserApproval.AllowSelfApproval)
						} else {
							steps1.Approval.UserApproval.AllowSelfApproval = types.BoolNull()
						}
						steps1.Approval.UserApproval.UserIds = nil
						for _, v := range stepsItem.Approval.UserApproval.UserIds {
							steps1.Approval.UserApproval.UserIds = append(steps1.Approval.UserApproval.UserIds, types.StringValue(v))
						}
					}
				}
				if steps1.Provision == nil {
					steps1.Provision = &Provision{}
				}
				if stepsItem.Provision == nil {
					steps1.Provision = nil
				} else {
					steps1.Provision = &Provision{}
					if stepsItem.Provision.Assigned != nil {
						steps1.Provision.Assigned = types.BoolValue(*stepsItem.Provision.Assigned)
					} else {
						steps1.Provision.Assigned = types.BoolNull()
					}
					if steps1.Provision.ProvisionPolicy == nil {
						steps1.Provision.ProvisionPolicy = &ProvisionPolicy{}
					}
					if stepsItem.Provision.ProvisionPolicy == nil {
						steps1.Provision.ProvisionPolicy = nil
					} else {
						steps1.Provision.ProvisionPolicy = &ProvisionPolicy{}
						if steps1.Provision.ProvisionPolicy.ConnectorProvision == nil {
							steps1.Provision.ProvisionPolicy.ConnectorProvision = &ConnectorProvision{}
						}
						if stepsItem.Provision.ProvisionPolicy.ConnectorProvision == nil {
							steps1.Provision.ProvisionPolicy.ConnectorProvision = nil
						} else {
							steps1.Provision.ProvisionPolicy.ConnectorProvision = &ConnectorProvision{}
						}
						if steps1.Provision.ProvisionPolicy.DelegatedProvision == nil {
							steps1.Provision.ProvisionPolicy.DelegatedProvision = &DelegatedProvision{}
						}
						if stepsItem.Provision.ProvisionPolicy.DelegatedProvision == nil {
							steps1.Provision.ProvisionPolicy.DelegatedProvision = nil
						} else {
							steps1.Provision.ProvisionPolicy.DelegatedProvision = &DelegatedProvision{}
							if stepsItem.Provision.ProvisionPolicy.DelegatedProvision.AppID != nil {
								steps1.Provision.ProvisionPolicy.DelegatedProvision.AppID = types.StringValue(*stepsItem.Provision.ProvisionPolicy.DelegatedProvision.AppID)
							} else {
								steps1.Provision.ProvisionPolicy.DelegatedProvision.AppID = types.StringNull()
							}
							if stepsItem.Provision.ProvisionPolicy.DelegatedProvision.EntitlementID != nil {
								steps1.Provision.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringValue(*stepsItem.Provision.ProvisionPolicy.DelegatedProvision.EntitlementID)
							} else {
								steps1.Provision.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringNull()
							}
						}
						if steps1.Provision.ProvisionPolicy.ManualProvision == nil {
							steps1.Provision.ProvisionPolicy.ManualProvision = &ManualProvision{}
						}
						if stepsItem.Provision.ProvisionPolicy.ManualProvision == nil {
							steps1.Provision.ProvisionPolicy.ManualProvision = nil
						} else {
							steps1.Provision.ProvisionPolicy.ManualProvision = &ManualProvision{}
							if stepsItem.Provision.ProvisionPolicy.ManualProvision.Instructions != nil {
								steps1.Provision.ProvisionPolicy.ManualProvision.Instructions = types.StringValue(*stepsItem.Provision.ProvisionPolicy.ManualProvision.Instructions)
							} else {
								steps1.Provision.ProvisionPolicy.ManualProvision.Instructions = types.StringNull()
							}
							steps1.Provision.ProvisionPolicy.ManualProvision.UserIds = nil
							for _, v := range stepsItem.Provision.ProvisionPolicy.ManualProvision.UserIds {
								steps1.Provision.ProvisionPolicy.ManualProvision.UserIds = append(steps1.Provision.ProvisionPolicy.ManualProvision.UserIds, types.StringValue(v))
							}
						}
					}
				}
				policyStepsResult.Steps = append(policyStepsResult.Steps, steps1)
			}
			r.PolicySteps[policyStepsKey] = policyStepsResult
		}
	}
	if resp.PolicyType != nil {
		r.PolicyType = types.StringValue(string(*resp.PolicyType))
	} else {
		r.PolicyType = types.StringNull()
	}
	r.PostActions = nil
	for _, postActionsItem := range resp.PostActions {
		var postActions1 PolicyPostActions
		if postActionsItem.CertifyRemediateImmediately != nil {
			postActions1.CertifyRemediateImmediately = types.BoolValue(*postActionsItem.CertifyRemediateImmediately)
		} else {
			postActions1.CertifyRemediateImmediately = types.BoolNull()
		}
		r.PostActions = append(r.PostActions, postActions1)
	}
	if resp.ReassignTasksToDelegates != nil {
		r.ReassignTasksToDelegates = types.BoolValue(*resp.ReassignTasksToDelegates)
	} else {
		r.ReassignTasksToDelegates = types.BoolNull()
	}
	if resp.SystemBuiltin != nil {
		r.SystemBuiltin = types.BoolValue(*resp.SystemBuiltin)
	} else {
		r.SystemBuiltin = types.BoolNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
}

func (r *PolicyResourceModel) RefreshFromCreateResponse(resp *shared.Policy) {
	r.RefreshFromGetResponse(resp)
}

func (r *PolicyResourceModel) RefreshFromUpdateResponse(resp *shared.Policy) {
	r.RefreshFromGetResponse(resp)
}
