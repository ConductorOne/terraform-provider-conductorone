// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"terraform/internal/sdk/pkg/models/shared"
	"time"
)

func (r *PolicyResourceModel) ToCreateSDKType() *shared.CreatePolicyRequest {
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	policyType := new(shared.CreatePolicyRequestPolicyType)
	if !r.PolicyType.IsUnknown() && !r.PolicyType.IsNull() {
		*policyType = shared.CreatePolicyRequestPolicyType(r.PolicyType.ValueString())
	} else {
		policyType = nil
	}
	out := shared.CreatePolicyRequest{
		Description: description,
		DisplayName: displayName,
		PolicyType:  policyType,
	}
	return &out
}

func (r *PolicyResourceModel) ToGetSDKType() *shared.CreatePolicyRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *PolicyResourceModel) ToDeleteSDKType() *shared.CreatePolicyRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *PolicyResourceModel) RefreshFromGetResponse(resp *shared.Policy) {
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.Description != nil {
		r.Description = types.StringValue(*resp.Description)
	} else {
		r.Description = types.StringNull()
	}
	if resp.DisplayName != nil {
		r.DisplayName = types.StringValue(*resp.DisplayName)
	} else {
		r.DisplayName = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if r.PolicySteps == nil && len(resp.PolicySteps) > 0 {
		r.PolicySteps = make(map[string]PolicySteps)
		for policyStepsKey, policyStepsValue := range resp.PolicySteps {
			var policyStepsResult PolicySteps
			policyStepsResult.Steps = nil
			for _, stepsItem := range policyStepsValue.Steps {
				var steps1 PolicyStep
				if steps1.Approval == nil {
					steps1.Approval = &Approval{}
				}
				if stepsItem.Approval == nil {
					steps1.Approval = nil
				} else {
					steps1.Approval = &Approval{}
					if stepsItem.Approval.AllowReassignment != nil {
						steps1.Approval.AllowReassignment = types.BoolValue(*stepsItem.Approval.AllowReassignment)
					} else {
						steps1.Approval.AllowReassignment = types.BoolNull()
					}
					if stepsItem.Approval.Assigned != nil {
						steps1.Approval.Assigned = types.BoolValue(*stepsItem.Approval.Assigned)
					} else {
						steps1.Approval.Assigned = types.BoolNull()
					}
					if stepsItem.Approval.RequireApprovalReason != nil {
						steps1.Approval.RequireApprovalReason = types.BoolValue(*stepsItem.Approval.RequireApprovalReason)
					} else {
						steps1.Approval.RequireApprovalReason = types.BoolNull()
					}
					if stepsItem.Approval.RequireReassignmentReason != nil {
						steps1.Approval.RequireReassignmentReason = types.BoolValue(*stepsItem.Approval.RequireReassignmentReason)
					} else {
						steps1.Approval.RequireReassignmentReason = types.BoolNull()
					}
					if steps1.Approval.Typ == nil {
						steps1.Approval.Typ = &ApprovalTyp{}
					}
					if stepsItem.Approval.Typ == nil {
						steps1.Approval.Typ = nil
					} else {
						steps1.Approval.Typ = &ApprovalTyp{}
						if steps1.Approval.Typ.AppOwners == nil {
							steps1.Approval.Typ.AppOwners = &AppOwnerApproval{}
						}
						if stepsItem.Approval.Typ.AppOwners == nil {
							steps1.Approval.Typ.AppOwners = nil
						} else {
							steps1.Approval.Typ.AppOwners = &AppOwnerApproval{}
							if stepsItem.Approval.Typ.AppOwners.AllowSelfApproval != nil {
								steps1.Approval.Typ.AppOwners.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.Typ.AppOwners.AllowSelfApproval)
							} else {
								steps1.Approval.Typ.AppOwners.AllowSelfApproval = types.BoolNull()
							}
						}
						if steps1.Approval.Typ.EntitlementOwners == nil {
							steps1.Approval.Typ.EntitlementOwners = &EntitlementOwnerApproval{}
						}
						if stepsItem.Approval.Typ.EntitlementOwners == nil {
							steps1.Approval.Typ.EntitlementOwners = nil
						} else {
							steps1.Approval.Typ.EntitlementOwners = &EntitlementOwnerApproval{}
							if stepsItem.Approval.Typ.EntitlementOwners.AllowSelfApproval != nil {
								steps1.Approval.Typ.EntitlementOwners.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.Typ.EntitlementOwners.AllowSelfApproval)
							} else {
								steps1.Approval.Typ.EntitlementOwners.AllowSelfApproval = types.BoolNull()
							}
							if stepsItem.Approval.Typ.EntitlementOwners.Fallback != nil {
								steps1.Approval.Typ.EntitlementOwners.Fallback = types.BoolValue(*stepsItem.Approval.Typ.EntitlementOwners.Fallback)
							} else {
								steps1.Approval.Typ.EntitlementOwners.Fallback = types.BoolNull()
							}
							steps1.Approval.Typ.EntitlementOwners.FallbackUserIds = nil
							for _, v := range stepsItem.Approval.Typ.EntitlementOwners.FallbackUserIds {
								steps1.Approval.Typ.EntitlementOwners.FallbackUserIds = append(steps1.Approval.Typ.EntitlementOwners.FallbackUserIds, types.StringValue(v))
							}
						}
						if steps1.Approval.Typ.Group == nil {
							steps1.Approval.Typ.Group = &AppGroupApproval{}
						}
						if stepsItem.Approval.Typ.Group == nil {
							steps1.Approval.Typ.Group = nil
						} else {
							steps1.Approval.Typ.Group = &AppGroupApproval{}
							if stepsItem.Approval.Typ.Group.AllowSelfApproval != nil {
								steps1.Approval.Typ.Group.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.Typ.Group.AllowSelfApproval)
							} else {
								steps1.Approval.Typ.Group.AllowSelfApproval = types.BoolNull()
							}
							if stepsItem.Approval.Typ.Group.AppGroupID != nil {
								steps1.Approval.Typ.Group.AppGroupID = types.StringValue(*stepsItem.Approval.Typ.Group.AppGroupID)
							} else {
								steps1.Approval.Typ.Group.AppGroupID = types.StringNull()
							}
							if stepsItem.Approval.Typ.Group.AppID != nil {
								steps1.Approval.Typ.Group.AppID = types.StringValue(*stepsItem.Approval.Typ.Group.AppID)
							} else {
								steps1.Approval.Typ.Group.AppID = types.StringNull()
							}
							if stepsItem.Approval.Typ.Group.Fallback != nil {
								steps1.Approval.Typ.Group.Fallback = types.BoolValue(*stepsItem.Approval.Typ.Group.Fallback)
							} else {
								steps1.Approval.Typ.Group.Fallback = types.BoolNull()
							}
							steps1.Approval.Typ.Group.FallbackUserIds = nil
							for _, v := range stepsItem.Approval.Typ.Group.FallbackUserIds {
								steps1.Approval.Typ.Group.FallbackUserIds = append(steps1.Approval.Typ.Group.FallbackUserIds, types.StringValue(v))
							}
						}
						if steps1.Approval.Typ.Manager == nil {
							steps1.Approval.Typ.Manager = &ManagerApproval{}
						}
						if stepsItem.Approval.Typ.Manager == nil {
							steps1.Approval.Typ.Manager = nil
						} else {
							steps1.Approval.Typ.Manager = &ManagerApproval{}
							if stepsItem.Approval.Typ.Manager.AllowSelfApproval != nil {
								steps1.Approval.Typ.Manager.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.Typ.Manager.AllowSelfApproval)
							} else {
								steps1.Approval.Typ.Manager.AllowSelfApproval = types.BoolNull()
							}
							steps1.Approval.Typ.Manager.AssignedUserIds = nil
							for _, v := range stepsItem.Approval.Typ.Manager.AssignedUserIds {
								steps1.Approval.Typ.Manager.AssignedUserIds = append(steps1.Approval.Typ.Manager.AssignedUserIds, types.StringValue(v))
							}
							if stepsItem.Approval.Typ.Manager.Fallback != nil {
								steps1.Approval.Typ.Manager.Fallback = types.BoolValue(*stepsItem.Approval.Typ.Manager.Fallback)
							} else {
								steps1.Approval.Typ.Manager.Fallback = types.BoolNull()
							}
							steps1.Approval.Typ.Manager.FallbackUserIds = nil
							for _, v := range stepsItem.Approval.Typ.Manager.FallbackUserIds {
								steps1.Approval.Typ.Manager.FallbackUserIds = append(steps1.Approval.Typ.Manager.FallbackUserIds, types.StringValue(v))
							}
						}
						if steps1.Approval.Typ.Self == nil {
							steps1.Approval.Typ.Self = &SelfApproval{}
						}
						if stepsItem.Approval.Typ.Self == nil {
							steps1.Approval.Typ.Self = nil
						} else {
							steps1.Approval.Typ.Self = &SelfApproval{}
							steps1.Approval.Typ.Self.AssignedUserIds = nil
							for _, v := range stepsItem.Approval.Typ.Self.AssignedUserIds {
								steps1.Approval.Typ.Self.AssignedUserIds = append(steps1.Approval.Typ.Self.AssignedUserIds, types.StringValue(v))
							}
							if stepsItem.Approval.Typ.Self.Fallback != nil {
								steps1.Approval.Typ.Self.Fallback = types.BoolValue(*stepsItem.Approval.Typ.Self.Fallback)
							} else {
								steps1.Approval.Typ.Self.Fallback = types.BoolNull()
							}
							steps1.Approval.Typ.Self.FallbackUserIds = nil
							for _, v := range stepsItem.Approval.Typ.Self.FallbackUserIds {
								steps1.Approval.Typ.Self.FallbackUserIds = append(steps1.Approval.Typ.Self.FallbackUserIds, types.StringValue(v))
							}
						}
						if steps1.Approval.Typ.Users == nil {
							steps1.Approval.Typ.Users = &UserApproval{}
						}
						if stepsItem.Approval.Typ.Users == nil {
							steps1.Approval.Typ.Users = nil
						} else {
							steps1.Approval.Typ.Users = &UserApproval{}
							if stepsItem.Approval.Typ.Users.AllowSelfApproval != nil {
								steps1.Approval.Typ.Users.AllowSelfApproval = types.BoolValue(*stepsItem.Approval.Typ.Users.AllowSelfApproval)
							} else {
								steps1.Approval.Typ.Users.AllowSelfApproval = types.BoolNull()
							}
							steps1.Approval.Typ.Users.UserIds = nil
							for _, v := range stepsItem.Approval.Typ.Users.UserIds {
								steps1.Approval.Typ.Users.UserIds = append(steps1.Approval.Typ.Users.UserIds, types.StringValue(v))
							}
						}
					}
				}
				if steps1.Provision == nil {
					steps1.Provision = &Provision{}
				}
				if stepsItem.Provision == nil {
					steps1.Provision = nil
				} else {
					steps1.Provision = &Provision{}
					if stepsItem.Provision.Assigned != nil {
						steps1.Provision.Assigned = types.BoolValue(*stepsItem.Provision.Assigned)
					} else {
						steps1.Provision.Assigned = types.BoolNull()
					}
					if steps1.Provision.ProvisionPolicy == nil {
						steps1.Provision.ProvisionPolicy = &ProvisionPolicy{}
					}
					if stepsItem.Provision.ProvisionPolicy == nil {
						steps1.Provision.ProvisionPolicy = nil
					} else {
						steps1.Provision.ProvisionPolicy = &ProvisionPolicy{}
						if steps1.Provision.ProvisionPolicy.Connector == nil {
							steps1.Provision.ProvisionPolicy.Connector = &ConnectorProvision{}
						}
						if stepsItem.Provision.ProvisionPolicy.Connector == nil {
							steps1.Provision.ProvisionPolicy.Connector = nil
						} else {
							steps1.Provision.ProvisionPolicy.Connector = &ConnectorProvision{}
						}
						if steps1.Provision.ProvisionPolicy.Delegated == nil {
							steps1.Provision.ProvisionPolicy.Delegated = &DelegatedProvision{}
						}
						if stepsItem.Provision.ProvisionPolicy.Delegated == nil {
							steps1.Provision.ProvisionPolicy.Delegated = nil
						} else {
							steps1.Provision.ProvisionPolicy.Delegated = &DelegatedProvision{}
							if stepsItem.Provision.ProvisionPolicy.Delegated.AppID != nil {
								steps1.Provision.ProvisionPolicy.Delegated.AppID = types.StringValue(*stepsItem.Provision.ProvisionPolicy.Delegated.AppID)
							} else {
								steps1.Provision.ProvisionPolicy.Delegated.AppID = types.StringNull()
							}
							if stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID != nil {
								steps1.Provision.ProvisionPolicy.Delegated.EntitlementID = types.StringValue(*stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID)
							} else {
								steps1.Provision.ProvisionPolicy.Delegated.EntitlementID = types.StringNull()
							}
						}
						if steps1.Provision.ProvisionPolicy.Manual == nil {
							steps1.Provision.ProvisionPolicy.Manual = &ManualProvision{}
						}
						if stepsItem.Provision.ProvisionPolicy.Manual == nil {
							steps1.Provision.ProvisionPolicy.Manual = nil
						} else {
							steps1.Provision.ProvisionPolicy.Manual = &ManualProvision{}
							if stepsItem.Provision.ProvisionPolicy.Manual.Instructions != nil {
								steps1.Provision.ProvisionPolicy.Manual.Instructions = types.StringValue(*stepsItem.Provision.ProvisionPolicy.Manual.Instructions)
							} else {
								steps1.Provision.ProvisionPolicy.Manual.Instructions = types.StringNull()
							}
							steps1.Provision.ProvisionPolicy.Manual.UserIds = nil
							for _, v := range stepsItem.Provision.ProvisionPolicy.Manual.UserIds {
								steps1.Provision.ProvisionPolicy.Manual.UserIds = append(steps1.Provision.ProvisionPolicy.Manual.UserIds, types.StringValue(v))
							}
						}
					}
				}
				policyStepsResult.Steps = append(policyStepsResult.Steps, steps1)
			}
			r.PolicySteps[policyStepsKey] = policyStepsResult
		}
	}
	if resp.PolicyType != nil {
		r.PolicyType = types.StringValue(string(*resp.PolicyType))
	} else {
		r.PolicyType = types.StringNull()
	}
	r.PostActions = nil
	for _, postActionsItem := range resp.PostActions {
		var postActions1 PolicyPostActions
		if postActionsItem.CertifyRemediateImmediately != nil {
			postActions1.CertifyRemediateImmediately = types.BoolValue(*postActionsItem.CertifyRemediateImmediately)
		} else {
			postActions1.CertifyRemediateImmediately = types.BoolNull()
		}
		r.PostActions = append(r.PostActions, postActions1)
	}
	if resp.ReassignTasksToDelegates != nil {
		r.ReassignTasksToDelegates = types.BoolValue(*resp.ReassignTasksToDelegates)
	} else {
		r.ReassignTasksToDelegates = types.BoolNull()
	}
	if resp.SystemBuiltin != nil {
		r.SystemBuiltin = types.BoolValue(*resp.SystemBuiltin)
	} else {
		r.SystemBuiltin = types.BoolNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
}

func (r *PolicyResourceModel) RefreshFromCreateResponse(resp *shared.Policy) {
	r.RefreshFromGetResponse(resp)
}
