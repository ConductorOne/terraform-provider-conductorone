// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ConnectorCredentialDataSourceModel) RefreshFromSharedConnectorCredential(ctx context.Context, resp *shared.ConnectorCredential) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppID = types.StringPointerValue(resp.AppID)
		r.ClientID = types.StringPointerValue(resp.ClientID)
		r.ClientSecret = types.StringPointerValue(resp.ClientSecret)
		r.ConnectorID = types.StringPointerValue(resp.ConnectorID)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ExpiresTime = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ExpiresTime))
		r.ID = types.StringPointerValue(resp.ID)
		r.LastUsedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsedAt))
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *ConnectorCredentialDataSourceModel) ToOperationsC1APIAppV1ConnectorServiceGetCredentialsRequest(ctx context.Context) (*operations.C1APIAppV1ConnectorServiceGetCredentialsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	connectorID := new(string)
	if !r.ConnectorID.IsUnknown() && !r.ConnectorID.IsNull() {
		*connectorID = r.ConnectorID.ValueString()
	} else {
		connectorID = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIAppV1ConnectorServiceGetCredentialsRequest{
		AppID:       appID,
		ConnectorID: connectorID,
		ID:          id,
	}

	return &out, diags
}
