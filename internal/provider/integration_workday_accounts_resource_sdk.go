// Generated by tf-integration-gen. DO NOT EDIT.
package provider

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"

	"github.com/hashicorp/terraform-plugin-framework/types"
)

const workdayAccountsCatalogID = "2wMFKTDtuR2c9g4PajFbAFuKl3U"

func (r *IntegrationWorkdayAccountsResourceModel) ToCreateDelegatedSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	catalogID := sdk.String(workdayAccountsCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.ConnectorServiceCreateDelegatedRequest{
		DisplayName: sdk.String("Workday Accounts"),
		CatalogID:   catalogID,
		UserIds:     userIds,
	}
	return &out
}

func (r *IntegrationWorkdayAccountsResourceModel) ToCreateSDKType() (*shared.ConnectorServiceCreateRequest, error) {
	catalogID := sdk.String(workdayAccountsCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configOut, configSet := r.getConfig()
	if !configSet {
		return nil, fmt.Errorf("config must be set for create request")
	}

	out := shared.ConnectorServiceCreateRequest{
		CatalogID: catalogID,
		UserIds:   userIds,
		Config: &shared.ConnectorServiceCreateRequestConfig{
			AtType: sdk.String(envConfigType),
			AdditionalProperties: map[string]interface{}{
				"configuration": configOut,
			},
		},
	}
	return &out, nil
}

func (r *IntegrationWorkdayAccountsResourceModel) ToUpdateSDKType() (*shared.ConnectorInput, bool) {
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configValues := r.populateConfig()

	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}

	out := shared.ConnectorInput{
		DisplayName: sdk.String("Workday Accounts"),
		AppID:       sdk.String(r.AppID.ValueString()),
		CatalogID:   sdk.String(workdayAccountsCatalogID),
		ID:          sdk.String(r.ID.ValueString()),
		UserIds:     userIds,
		Config:      makeConnectorConfig(configOut),
	}

	return &out, configSet
}

func (r *IntegrationWorkdayAccountsResourceModel) populateConfig() map[string]interface{} {
	configValues := make(map[string]interface{})

	workdayRestApiEndpoint := new(string)
	if !r.WorkdayRestApiEndpoint.IsUnknown() && !r.WorkdayRestApiEndpoint.IsNull() {
		*workdayRestApiEndpoint = r.WorkdayRestApiEndpoint.ValueString()
		configValues["workday_rest_api_endpoint"] = workdayRestApiEndpoint
	}

	workdayClientId := new(string)
	if !r.WorkdayClientId.IsUnknown() && !r.WorkdayClientId.IsNull() {
		*workdayClientId = r.WorkdayClientId.ValueString()
		configValues["workday_client_id"] = workdayClientId
	}

	workdayClientSecret := new(string)
	if !r.WorkdayClientSecret.IsUnknown() && !r.WorkdayClientSecret.IsNull() {
		*workdayClientSecret = r.WorkdayClientSecret.ValueString()
		configValues["workday_client_secret"] = workdayClientSecret
	}

	workdayRefreshToken := new(string)
	if !r.WorkdayRefreshToken.IsUnknown() && !r.WorkdayRefreshToken.IsNull() {
		*workdayRefreshToken = r.WorkdayRefreshToken.ValueString()
		configValues["workday_refresh_token"] = workdayRefreshToken
	}

	workdaySyncServiceCenters := new(string)
	if !r.WorkdaySyncServiceCenters.IsUnknown() && !r.WorkdaySyncServiceCenters.IsNull() {
		*workdaySyncServiceCenters = strconv.FormatBool(r.WorkdaySyncServiceCenters.ValueBool())
		configValues["workday_sync_service_centers"] = workdaySyncServiceCenters
	}

	workdaySyncUserBasedSecurityGroups := new(string)
	if !r.WorkdaySyncUserBasedSecurityGroups.IsUnknown() && !r.WorkdaySyncUserBasedSecurityGroups.IsNull() {
		*workdaySyncUserBasedSecurityGroups = strconv.FormatBool(r.WorkdaySyncUserBasedSecurityGroups.ValueBool())
		configValues["workday_sync_user_based_security_groups"] = workdaySyncUserBasedSecurityGroups
	}

	workdayUserBasedSecurityGroups := make([]string, 0)
	for _, item := range r.WorkdayUserBasedSecurityGroups {
		workdayUserBasedSecurityGroups = append(workdayUserBasedSecurityGroups, item.ValueString())
	}
	if len(workdayUserBasedSecurityGroups) > 0 {
		configValues["workday_user_based_security_groups"] = strings.Join(workdayUserBasedSecurityGroups, ",")
	}

	workdaySecurityGroupTypes := make([]string, 0)
	for _, item := range r.WorkdaySecurityGroupTypes {
		workdaySecurityGroupTypes = append(workdaySecurityGroupTypes, item.ValueString())
	}
	if len(workdaySecurityGroupTypes) > 0 {
		configValues["workday_security_group_types"] = strings.Join(workdaySecurityGroupTypes, ",")
	}

	workdaySecurityGroups := make([]string, 0)
	for _, item := range r.WorkdaySecurityGroups {
		workdaySecurityGroups = append(workdaySecurityGroups, item.ValueString())
	}
	if len(workdaySecurityGroups) > 0 {
		configValues["workday_security_groups"] = strings.Join(workdaySecurityGroups, ",")
	}

	return configValues
}

func (r *IntegrationWorkdayAccountsResourceModel) getConfig() (map[string]interface{}, bool) {
	configValues := r.populateConfig()
	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}
	return configOut, configSet
}

func (r *IntegrationWorkdayAccountsResourceModel) ToGetSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationWorkdayAccountsResourceModel) ToDeleteSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationWorkdayAccountsResourceModel) RefreshFromGetResponse(resp *shared.Connector) {
	if resp == nil {
		return
	}
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}

	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if v, ok := values["workday_rest_api_endpoint"]; ok {
					if val, ok := v.(string); ok {
						r.WorkdayRestApiEndpoint = types.StringValue(val)
					}
				}

				if v, ok := values["workday_client_id"]; ok {
					if val, ok := v.(string); ok {
						r.WorkdayClientId = types.StringValue(val)
					}
				}

				if localV, ok := configValues["workday_sync_service_centers"]; ok {
					if v, ok := values["workday_sync_service_centers"]; ok {
						if val, ok := v.(string); ok {
							bv, err := strconv.ParseBool(val)
							if err == nil {
								if localV != nil || (localV == nil && !bv) {
									r.WorkdaySyncServiceCenters = types.BoolValue(bv)
								}
							}
						}
					}
				}

				if localV, ok := configValues["workday_sync_user_based_security_groups"]; ok {
					if v, ok := values["workday_sync_user_based_security_groups"]; ok {
						if val, ok := v.(string); ok {
							bv, err := strconv.ParseBool(val)
							if err == nil {
								if localV != nil || (localV == nil && !bv) {
									r.WorkdaySyncUserBasedSecurityGroups = types.BoolValue(bv)
								}
							}
						}
					}
				}

				r.WorkdayUserBasedSecurityGroups = nil
				if v, ok := values["workday_user_based_security_groups"]; ok {
					if val, ok := v.(string); ok {
						tmpList := strings.Split(val, ",")
						for _, item := range tmpList {
							r.WorkdayUserBasedSecurityGroups = append(r.WorkdayUserBasedSecurityGroups, types.StringValue(item))
						}
					}
				}

				r.WorkdaySecurityGroupTypes = nil
				if v, ok := values["workday_security_group_types"]; ok {
					if val, ok := v.(string); ok {
						tmpList := strings.Split(val, ",")
						for _, item := range tmpList {
							r.WorkdaySecurityGroupTypes = append(r.WorkdaySecurityGroupTypes, types.StringValue(item))
						}
					}
				}

				r.WorkdaySecurityGroups = nil
				if v, ok := values["workday_security_groups"]; ok {
					if val, ok := v.(string); ok {
						tmpList := strings.Split(val, ",")
						for _, item := range tmpList {
							r.WorkdaySecurityGroups = append(r.WorkdaySecurityGroups, types.StringValue(item))
						}
					}
				}

			}
		}
	}
}

func (r *IntegrationWorkdayAccountsResourceModel) RefreshFromUpdateResponse(resp *shared.Connector) {
	r.RefreshFromGetResponse(resp)
}

func (r *IntegrationWorkdayAccountsResourceModel) RefreshFromCreateResponse(resp *shared.Connector) {
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if v, ok := values["workday_rest_api_endpoint"]; ok {
					if val, ok := v.(string); ok {
						r.WorkdayRestApiEndpoint = types.StringValue(val)
					}
				}

				if v, ok := values["workday_client_id"]; ok {
					if val, ok := v.(string); ok {
						r.WorkdayClientId = types.StringValue(val)
					}
				}

				if localV, ok := configValues["workday_sync_service_centers"]; ok {
					if v, ok := values["workday_sync_service_centers"]; ok {
						if val, ok := v.(string); ok {
							bv, err := strconv.ParseBool(val)
							if err == nil {
								if localV != nil || (localV == nil && !bv) {
									r.WorkdaySyncServiceCenters = types.BoolValue(bv)
								}
							}
						}
					}
				}

				if localV, ok := configValues["workday_sync_user_based_security_groups"]; ok {
					if v, ok := values["workday_sync_user_based_security_groups"]; ok {
						if val, ok := v.(string); ok {
							bv, err := strconv.ParseBool(val)
							if err == nil {
								if localV != nil || (localV == nil && !bv) {
									r.WorkdaySyncUserBasedSecurityGroups = types.BoolValue(bv)
								}
							}
						}
					}
				}

				r.WorkdayUserBasedSecurityGroups = nil
				if v, ok := values["workday_user_based_security_groups"]; ok {
					if val, ok := v.(string); ok {
						tmpList := strings.Split(val, ",")
						for _, item := range tmpList {
							r.WorkdayUserBasedSecurityGroups = append(r.WorkdayUserBasedSecurityGroups, types.StringValue(item))
						}
					}
				}

				r.WorkdaySecurityGroupTypes = nil
				if v, ok := values["workday_security_group_types"]; ok {
					if val, ok := v.(string); ok {
						tmpList := strings.Split(val, ",")
						for _, item := range tmpList {
							r.WorkdaySecurityGroupTypes = append(r.WorkdaySecurityGroupTypes, types.StringValue(item))
						}
					}
				}

				r.WorkdaySecurityGroups = nil
				if v, ok := values["workday_security_groups"]; ok {
					if val, ok := v.(string); ok {
						tmpList := strings.Split(val, ",")
						for _, item := range tmpList {
							r.WorkdaySecurityGroups = append(r.WorkdaySecurityGroups, types.StringValue(item))
						}
					}
				}

			}
		}
	}
}
