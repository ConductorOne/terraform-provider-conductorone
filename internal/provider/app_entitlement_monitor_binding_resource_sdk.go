// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppEntitlementMonitorBindingResourceModel) RefreshFromSharedAppEntitlementMonitorBinding(ctx context.Context, resp *shared.AppEntitlementMonitorBinding) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppEntitlementID = types.StringPointerValue(resp.AppEntitlementID)
		r.AppID = types.StringPointerValue(resp.AppID)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		if resp.EntitlementGroup != nil {
			r.EntitlementGroup = types.StringValue(string(*resp.EntitlementGroup))
		} else {
			r.EntitlementGroup = types.StringNull()
		}
		r.MonitorID = types.StringPointerValue(resp.MonitorID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *AppEntitlementMonitorBindingResourceModel) ToSharedCreateAppEntitlementMonitorBindingRequest(ctx context.Context) (*shared.CreateAppEntitlementMonitorBindingRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appEntitlementID := new(string)
	if !r.AppEntitlementID.IsUnknown() && !r.AppEntitlementID.IsNull() {
		*appEntitlementID = r.AppEntitlementID.ValueString()
	} else {
		appEntitlementID = nil
	}
	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	entitlementGroup := new(shared.CreateAppEntitlementMonitorBindingRequestEntitlementGroup)
	if !r.EntitlementGroup.IsUnknown() && !r.EntitlementGroup.IsNull() {
		*entitlementGroup = shared.CreateAppEntitlementMonitorBindingRequestEntitlementGroup(r.EntitlementGroup.ValueString())
	} else {
		entitlementGroup = nil
	}
	monitorID := new(string)
	if !r.MonitorID.IsUnknown() && !r.MonitorID.IsNull() {
		*monitorID = r.MonitorID.ValueString()
	} else {
		monitorID = nil
	}
	out := shared.CreateAppEntitlementMonitorBindingRequest{
		AppEntitlementID: appEntitlementID,
		AppID:            appID,
		EntitlementGroup: entitlementGroup,
		MonitorID:        monitorID,
	}

	return &out, diags
}

func (r *AppEntitlementMonitorBindingResourceModel) ToSharedDeleteAppEntitlementMonitorBindingRequest(ctx context.Context) (*shared.DeleteAppEntitlementMonitorBindingRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appEntitlementID := new(string)
	if !r.AppEntitlementID.IsUnknown() && !r.AppEntitlementID.IsNull() {
		*appEntitlementID = r.AppEntitlementID.ValueString()
	} else {
		appEntitlementID = nil
	}
	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	entitlementGroup := new(shared.EntitlementGroup)
	if !r.EntitlementGroup.IsUnknown() && !r.EntitlementGroup.IsNull() {
		*entitlementGroup = shared.EntitlementGroup(r.EntitlementGroup.ValueString())
	} else {
		entitlementGroup = nil
	}
	monitorID := new(string)
	if !r.MonitorID.IsUnknown() && !r.MonitorID.IsNull() {
		*monitorID = r.MonitorID.ValueString()
	} else {
		monitorID = nil
	}
	out := shared.DeleteAppEntitlementMonitorBindingRequest{
		AppEntitlementID: appEntitlementID,
		AppID:            appID,
		EntitlementGroup: entitlementGroup,
		MonitorID:        monitorID,
	}

	return &out, diags
}

func (r *AppEntitlementMonitorBindingResourceModel) ToSharedGetAppEntitlementMonitorBindingRequest(ctx context.Context) (*shared.GetAppEntitlementMonitorBindingRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appEntitlementID := new(string)
	if !r.AppEntitlementID.IsUnknown() && !r.AppEntitlementID.IsNull() {
		*appEntitlementID = r.AppEntitlementID.ValueString()
	} else {
		appEntitlementID = nil
	}
	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	entitlementGroup := new(shared.GetAppEntitlementMonitorBindingRequestEntitlementGroup)
	if !r.EntitlementGroup.IsUnknown() && !r.EntitlementGroup.IsNull() {
		*entitlementGroup = shared.GetAppEntitlementMonitorBindingRequestEntitlementGroup(r.EntitlementGroup.ValueString())
	} else {
		entitlementGroup = nil
	}
	monitorID := new(string)
	if !r.MonitorID.IsUnknown() && !r.MonitorID.IsNull() {
		*monitorID = r.MonitorID.ValueString()
	} else {
		monitorID = nil
	}
	out := shared.GetAppEntitlementMonitorBindingRequest{
		AppEntitlementID: appEntitlementID,
		AppID:            appID,
		EntitlementGroup: entitlementGroup,
		MonitorID:        monitorID,
	}

	return &out, diags
}
