// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk"
	"github.com/speakeasy/terraform-provider-terraform/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &CatalogDataSource{}
var _ datasource.DataSourceWithConfigure = &CatalogDataSource{}

func NewCatalogDataSource() datasource.DataSource {
	return &CatalogDataSource{}
}

// CatalogDataSource is the data source implementation.
type CatalogDataSource struct {
	client *sdk.SDK
}

// CatalogDataSourceModel describes the data model.
type CatalogDataSourceModel struct {
	AccessEntitlements     []tfTypes.AppEntitlement `tfsdk:"access_entitlements"`
	AccessEntitlementsPath types.String             `tfsdk:"access_entitlements_path"`
	AdditionalProperties   types.String             `tfsdk:"additional_properties"`
	AppIds                 []types.String           `tfsdk:"app_ids"`
	AppPaths               types.String             `tfsdk:"app_paths"`
	AtType                 types.String             `tfsdk:"at_type"`
	CreatedAt              types.String             `tfsdk:"created_at"`
	CreatedByUserID        types.String             `tfsdk:"created_by_user_id"`
	CreatedByUserPath      types.String             `tfsdk:"created_by_user_path"`
	DeletedAt              types.String             `tfsdk:"deleted_at"`
	Description            types.String             `tfsdk:"description"`
	DisplayName            types.String             `tfsdk:"display_name"`
	ID                     types.String             `tfsdk:"id"`
	Published              types.Bool               `tfsdk:"published"`
	RequestBundle          types.Bool               `tfsdk:"request_bundle"`
	UpdatedAt              types.String             `tfsdk:"updated_at"`
	VisibleToEveryone      types.Bool               `tfsdk:"visible_to_everyone"`
}

// Metadata returns the data source type name.
func (r *CatalogDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_catalog"
}

// Schema defines the schema for the data source.
func (r *CatalogDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Catalog DataSource",

		Attributes: map[string]schema.Attribute{
			"access_entitlements": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"alias": schema.StringAttribute{
							Computed:    true,
							Description: `The alias of the app entitlement used by Cone. Also exact-match queryable.`,
						},
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the app that is associated with the app entitlement.`,
						},
						"app_resource_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the app resource that is associated with the app entitlement`,
						},
						"app_resource_type_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the app resource type that is associated with the app entitlement`,
						},
						"certify_policy_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the policy that will be used for certify tickets related to the app entitlement.`,
						},
						"compliance_framework_value_ids": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `The IDs of different compliance frameworks associated with this app entitlement ex (SOX, HIPAA, PCI, etc.)`,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"deleted_at": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `The description of the app entitlement.`,
						},
						"display_name": schema.StringAttribute{
							Computed:    true,
							Description: `The display name of the app entitlement.`,
						},
						"duration_grant": schema.StringAttribute{
							Computed: true,
						},
						"duration_unset": schema.SingleNestedAttribute{
							Computed:   true,
							Attributes: map[string]schema.Attribute{},
						},
						"emergency_grant_enabled": schema.BoolAttribute{
							Computed:    true,
							Description: `This enables tasks to be created in an emergency and use a selected emergency access policy.`,
						},
						"emergency_grant_policy_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the policy that will be used for emergency access grant tasks.`,
						},
						"grant_count": schema.StringAttribute{
							Computed:    true,
							Description: `The amount of grants open for this entitlement`,
						},
						"grant_policy_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the policy that will be used for grant tickets related to the app entitlement.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The unique ID for the App Entitlement.`,
						},
						"is_manually_managed": schema.BoolAttribute{
							Computed:    true,
							Description: `Flag to indicate if the app entitlement is manually managed.`,
						},
						"provision_policy": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"connector_provision": schema.SingleNestedAttribute{
									Computed:    true,
									Attributes:  map[string]schema.Attribute{},
									Description: `Indicates that a connector should perform the provisioning. This object has no fields.`,
								},
								"delegated_provision": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"app_id": schema.StringAttribute{
											Computed:    true,
											Description: `The AppID of the entitlement to delegate provisioning to.`,
										},
										"entitlement_id": schema.StringAttribute{
											Computed:    true,
											Description: `The ID of the entitlement we are delegating provisioning to.`,
										},
										"implicit": schema.BoolAttribute{
											Computed:    true,
											Description: `If true, a binding will be automatically created from the entitlement of the parent app.`,
										},
									},
									Description: `This provision step indicates that we should delegate provisioning to the configuration of another app entitlement. This app entitlement does not have to be one from the same app, but MUST be configured as a proxy binding leading into this entitlement.`,
								},
								"manual_provision": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"instructions": schema.StringAttribute{
											Computed:    true,
											Description: `This field indicates a text body of instructions for the provisioner to indicate.`,
										},
										"user_ids": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `An array of users that are required to provision during this step.`,
										},
									},
									Description: `Manual provisioning indicates that a human must intervene for the provisioning of this step.`,
								},
								"webhook_provision": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"webhook_id": schema.StringAttribute{
											Computed:    true,
											Description: `The ID of the webhook to call for provisioning.`,
										},
									},
									Description: `This provision step indicates that a webhook should be called to provision this entitlement.`,
								},
							},
							MarkdownDescription: `ProvisionPolicy is a oneOf that indicates how a provision step should be processed.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named typ. Only a single field of the following list may be set at a time:` + "\n" +
								`  - connector` + "\n" +
								`  - manual` + "\n" +
								`  - delegated` + "\n" +
								`  - webhook` + "\n" +
								``,
						},
						"revoke_policy_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the policy that will be used for revoke tickets related to the app entitlement`,
						},
						"risk_level_value_id": schema.StringAttribute{
							Computed:    true,
							Description: `The riskLevelValueId field.`,
						},
						"slug": schema.StringAttribute{
							Computed:    true,
							Description: `The slug is displayed as an oval next to the name in the frontend of C1, it tells you what permission the entitlement grants. See https://www.conductorone.com/docs/product/manage-access/entitlements/`,
						},
						"source_connector_ids": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `Map to tell us which connector the entitlement came from.`,
						},
						"system_builtin": schema.BoolAttribute{
							Computed:    true,
							Description: `This field indicates if this is a system builtin entitlement.`,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
						"user_edited_mask": schema.StringAttribute{
							Computed: true,
						},
					},
				},
				Description: `An array of app entitlements that, if the user has, can view the contents of this catalog.`,
			},
			"access_entitlements_path": schema.StringAttribute{
				Computed:    true,
				Description: `JSONPATH expression indicating the location of the access entitlement objects, that the request catalog allows users to request, in the array.`,
			},
			"additional_properties": schema.StringAttribute{
				Computed:    true,
				Description: `Parsed as JSON.`,
			},
			"app_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The Apps contained in this request catalog.`,
			},
			"app_paths": schema.StringAttribute{
				Computed:    true,
				Description: `JSONPATH expression indicating the location of the App object in the array.`,
			},
			"at_type": schema.StringAttribute{
				Computed:    true,
				Description: `The type of the serialized message.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"created_by_user_id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the user this request catalog was created by.`,
			},
			"created_by_user_path": schema.StringAttribute{
				Computed:    true,
				Description: `JSONPATH expression indicating the location of the User object, that created the request catalog, in the array.`,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `The description of the request catalog.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Description: `The display name of the request catalog.`,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"published": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether or not this catalog is published.`,
			},
			"request_bundle": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether all the entitlements in the catalog can be requests at once. Your tenant must have the bundles feature to use this.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"visible_to_everyone": schema.BoolAttribute{
				Computed:    true,
				Description: `If this is true, the access entitlement requirement is ignored.`,
			},
		},
	}
}

func (r *CatalogDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CatalogDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *CatalogDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	request := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceGetRequest{
		ID: id,
	}
	res, err := r.client.RequestCatalogManagement.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.RequestCatalogManagementServiceGetResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedRequestCatalog(res.RequestCatalogManagementServiceGetResponse.RequestCatalogView.RequestCatalog)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
