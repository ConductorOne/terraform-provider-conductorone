// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppDataSourceModel) ToSharedSearchAppsRequest(ctx context.Context) (*shared.SearchAppsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appIds []string = []string{}
	for _, appIdsItem := range r.AppIds {
		appIds = append(appIds, appIdsItem.ValueString())
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var excludeAppIds []string = []string{}
	for _, excludeAppIdsItem := range r.ExcludeAppIds {
		excludeAppIds = append(excludeAppIds, excludeAppIdsItem.ValueString())
	}
	onlyDirectories := new(bool)
	if !r.OnlyDirectories.IsUnknown() && !r.OnlyDirectories.IsNull() {
		*onlyDirectories = r.OnlyDirectories.ValueBool()
	} else {
		onlyDirectories = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	out := shared.SearchAppsRequest{
		AppIds:          appIds,
		DisplayName:     displayName,
		ExcludeAppIds:   excludeAppIds,
		OnlyDirectories: onlyDirectories,
		Query:           query,
	}

	return &out, diags
}

func (r *AppDataSourceModel) RefreshFromSharedApp(ctx context.Context, resp *shared.App) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AppAccountID = types.StringPointerValue(resp.AppAccountID)
	r.AppAccountName = types.StringPointerValue(resp.AppAccountName)
	r.CertifyPolicyID = types.StringPointerValue(resp.CertifyPolicyID)
	r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
	r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayName = types.StringPointerValue(resp.DisplayName)
	r.GrantPolicyID = types.StringPointerValue(resp.GrantPolicyID)
	r.ID = types.StringPointerValue(resp.ID)
	if resp.IdentityMatching != nil {
		r.IdentityMatching = types.StringValue(string(*resp.IdentityMatching))
	} else {
		r.IdentityMatching = types.StringNull()
	}
	r.IsDirectory = types.BoolPointerValue(resp.IsDirectory)
	r.IsManuallyManaged = types.BoolPointerValue(resp.IsManuallyManaged)
	r.MonthlyCostUsd = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MonthlyCostUsd))
	r.ParentAppID = types.StringPointerValue(resp.ParentAppID)
	r.RevokePolicyID = types.StringPointerValue(resp.RevokePolicyID)
	r.StrictAccessEntitlementProvisioning = types.BoolPointerValue(resp.StrictAccessEntitlementProvisioning)
	r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	r.UserCount = types.StringPointerValue(resp.UserCount)

	return diags
}
