// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *WebhooksDataSourceModel) RefreshFromSharedWebhooksSearchResponse(ctx context.Context, resp *shared.WebhooksSearchResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.List != nil {
			if r.List == nil {
				r.List = []tfTypes.Webhook1{}
			}

			for _, listItem := range resp.List {
				var list tfTypes.Webhook1

				list.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.CreatedAt))
				list.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.DeletedAt))
				list.Description = types.StringPointerValue(listItem.Description)
				list.DisplayName = types.StringPointerValue(listItem.DisplayName)
				list.ID = types.StringPointerValue(listItem.ID)
				list.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.UpdatedAt))
				list.URL = types.StringPointerValue(listItem.URL)

				r.List = append(r.List, list)
			}
		}
		r.NextPageToken = types.StringPointerValue(resp.NextPageToken)
	}

	return diags
}

func (r *WebhooksDataSourceModel) ToSharedWebhooksSearchRequest(ctx context.Context) (*shared.WebhooksSearchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var refs []shared.WebhookRef
	if r.Refs != nil {
		refs = make([]shared.WebhookRef, 0, len(r.Refs))
		for _, refsItem := range r.Refs {
			id := new(string)
			if !refsItem.ID.IsUnknown() && !refsItem.ID.IsNull() {
				*id = refsItem.ID.ValueString()
			} else {
				id = nil
			}
			refs = append(refs, shared.WebhookRef{
				ID: id,
			})
		}
	}
	out := shared.WebhooksSearchRequest{
		PageSize: pageSize,
		Query:    query,
		Refs:     refs,
	}

	return &out, diags
}
