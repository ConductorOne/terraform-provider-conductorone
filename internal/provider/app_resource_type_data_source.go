// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppResourceTypeDataSource{}
var _ datasource.DataSourceWithConfigure = &AppResourceTypeDataSource{}

func NewAppResourceTypeDataSource() datasource.DataSource {
	return &AppResourceTypeDataSource{}
}

// AppResourceTypeDataSource is the data source implementation.
type AppResourceTypeDataSource struct {
	client *sdk.ConductoroneAPI
}

// AppResourceTypeDataSourceModel describes the data model.
type AppResourceTypeDataSourceModel struct {
	AppID                       types.String   `tfsdk:"app_id"`
	AppIds                      []types.String `tfsdk:"app_ids"`
	AppUserIds                  []types.String `tfsdk:"app_user_ids"`
	CreatedAt                   types.String   `tfsdk:"created_at"`
	DeletedAt                   types.String   `tfsdk:"deleted_at"`
	DisplayName                 types.String   `tfsdk:"display_name"`
	ExcludeResourceTypeIds      []types.String `tfsdk:"exclude_resource_type_ids"`
	ExcludeResourceTypeTraitIds []types.String `tfsdk:"exclude_resource_type_trait_ids"`
	ID                          types.String   `tfsdk:"id"`
	NextPageToken               types.String   `tfsdk:"next_page_token"`
	PageSize                    types.Int32    `tfsdk:"page_size"`
	PageToken                   types.String   `tfsdk:"page_token"`
	Query                       types.String   `tfsdk:"query"`
	ResourceTypeIds             []types.String `tfsdk:"resource_type_ids"`
	ResourceTypeTraitIds        []types.String `tfsdk:"resource_type_trait_ids"`
	TraitIds                    []types.String `tfsdk:"trait_ids"`
	UpdatedAt                   types.String   `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *AppResourceTypeDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_resource_type"
}

// Schema defines the schema for the data source.
func (r *AppResourceTypeDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AppResourceType DataSource",

		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the app that is associated with the app resource type`,
			},
			"app_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of app IDs to restrict the search by.`,
			},
			"app_user_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of app user IDs to restrict the search by.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Exact match on display name`,
			},
			"exclude_resource_type_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of resource type IDs to exclude from the search.`,
			},
			"exclude_resource_type_trait_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of resource type trait IDs to exclude from the search.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique ID for the app resource type.`,
			},
			"next_page_token": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `The nextPageToken is shown for the next page if the number of results is larger than the max page size.` + "\n" +
					` The server returns one page of results and the nextPageToken until all results are retreived.` + "\n" +
					` To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.`,
			},
			"page_size": schema.Int32Attribute{
				Optional:    true,
				Description: `The pageSize where 10 <= pageSize <= 100, default 25.`,
			},
			"page_token": schema.StringAttribute{
				Optional:    true,
				Description: `The pageToken field.`,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `Fuzzy search the display name of resource types.`,
			},
			"resource_type_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of resource type IDs to restrict the search by.`,
			},
			"resource_type_trait_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of resource type trait IDs to restrict the search by.`,
			},
			"trait_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `Associated trait ids`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *AppResourceTypeDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppResourceTypeDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppResourceTypeDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToSharedSearchAppResourceTypesRequest()
	res, err := r.client.AppResourceSearch.SearchAppResourceTypes(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SearchAppResourceTypesResponse != nil && res.SearchAppResourceTypesResponse.List != nil && len(res.SearchAppResourceTypesResponse.List) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAppResourceType(&res.SearchAppResourceTypesResponse.List[0])

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
