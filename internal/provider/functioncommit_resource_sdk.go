// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FunctionCommitResourceModel) RefreshFromSharedFunctionCommit(ctx context.Context, resp *shared.FunctionCommit) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Author = types.StringPointerValue(resp.Author)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.FunctionID = types.StringPointerValue(resp.FunctionID)
		r.ID = types.StringPointerValue(resp.ID)
		r.Message = types.StringPointerValue(resp.Message)
	}

	return diags
}

func (r *FunctionCommitResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceCommitRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceCommitRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var functionID string
	functionID = r.FunctionID.ValueString()

	functionsServiceCommitRequest, functionsServiceCommitRequestDiags := r.ToSharedFunctionsServiceCommitRequest(ctx)
	diags.Append(functionsServiceCommitRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIFunctionsV1FunctionsServiceCommitRequest{
		FunctionID:                    functionID,
		FunctionsServiceCommitRequest: functionsServiceCommitRequest,
	}

	return &out, diags
}

func (r *FunctionCommitResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceListCommitsRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceListCommitsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var functionID string
	functionID = r.FunctionID.ValueString()

	out := operations.C1APIFunctionsV1FunctionsServiceListCommitsRequest{
		FunctionID: functionID,
	}

	return &out, diags
}

func (r *FunctionCommitResourceModel) ToSharedFunctionsServiceCommitRequest(ctx context.Context) (*shared.FunctionsServiceCommitRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	commitMessage := new(string)
	if !r.CommitMessage.IsUnknown() && !r.CommitMessage.IsNull() {
		*commitMessage = r.CommitMessage.ValueString()
	} else {
		commitMessage = nil
	}
	content := make(map[string]string)
	for contentKey, contentValue := range r.Content {
		var contentInst string
		contentInst = contentValue.ValueString()

		content[contentKey] = contentInst
	}
	out := shared.FunctionsServiceCommitRequest{
		CommitMessage: commitMessage,
		Content:       content,
	}

	return &out, diags
}
