// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &FunctionTagDataSource{}
var _ datasource.DataSourceWithConfigure = &FunctionTagDataSource{}

func NewFunctionTagDataSource() datasource.DataSource {
	return &FunctionTagDataSource{}
}

// FunctionTagDataSource is the data source implementation.
type FunctionTagDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// FunctionTagDataSourceModel describes the data model.
type FunctionTagDataSourceModel struct {
	FunctionID types.String                      `tfsdk:"function_id"`
	Tags       map[string]tfTypes.FunctionCommit `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (r *FunctionTagDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_function_tag"
}

// Schema defines the schema for the data source.
func (r *FunctionTagDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "FunctionTag DataSource",

		Attributes: map[string]schema.Attribute{
			"function_id": schema.StringAttribute{
				Optional: true,
			},
			"tags": schema.MapNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"author": schema.StringAttribute{
							Computed:    true,
							Description: `The author field.`,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"function_id": schema.StringAttribute{
							Computed:    true,
							Description: `The functionId field.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The id field.`,
						},
						"message": schema.StringAttribute{
							Computed:    true,
							Description: `The message field.`,
						},
					},
				},
				Description: `The tags field.`,
			},
		},
	}
}

func (r *FunctionTagDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FunctionTagDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *FunctionTagDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIFunctionsV1FunctionsServiceListTagsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Functions.ListTags(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.FunctionsServiceListTagsResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedFunctionsServiceListTagsResponse(ctx, res.FunctionsServiceListTagsResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
