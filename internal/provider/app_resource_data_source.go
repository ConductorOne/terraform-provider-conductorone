// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppResourceDataSource{}
var _ datasource.DataSourceWithConfigure = &AppResourceDataSource{}

func NewAppResourceDataSource() datasource.DataSource {
	return &AppResourceDataSource{}
}

// AppResourceDataSource is the data source implementation.
type AppResourceDataSource struct {
	client *sdk.ConductoroneAPI
}

// AppResourceDataSourceModel describes the data model.
type AppResourceDataSourceModel struct {
	AppID                   types.String                                    `tfsdk:"app_id"`
	AppResourceTypeID       types.String                                    `tfsdk:"app_resource_type_id"`
	CreatedAt               types.String                                    `tfsdk:"created_at"`
	DeletedAt               types.String                                    `tfsdk:"deleted_at"`
	Description             types.String                                    `tfsdk:"description"`
	DisplayName             types.String                                    `tfsdk:"display_name"`
	Expanded                []tfTypes.AppResourceServiceGetResponseExpanded `tfsdk:"expanded"`
	GrantCount              types.String                                    `tfsdk:"grant_count"`
	ID                      types.String                                    `tfsdk:"id"`
	ParentAppResourceID     types.String                                    `tfsdk:"parent_app_resource_id"`
	ParentAppResourceTypeID types.String                                    `tfsdk:"parent_app_resource_type_id"`
	SecretTrait             *tfTypes.SecretTrait                            `tfsdk:"secret_trait"`
	UpdatedAt               types.String                                    `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *AppResourceDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_resource"
}

// Schema defines the schema for the data source.
func (r *AppResourceDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AppResource DataSource",

		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Required: true,
			},
			"app_resource_type_id": schema.StringAttribute{
				Required: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `The description set for the resource.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Description: `The display name for this resource.`,
			},
			"expanded": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `List of serialized related objects.`,
			},
			"grant_count": schema.StringAttribute{
				Computed:    true,
				Description: `The number of grants to this resource.`,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"parent_app_resource_id": schema.StringAttribute{
				Computed:    true,
				Description: `The parent resource id, if this resource is a child of another resource.`,
			},
			"parent_app_resource_type_id": schema.StringAttribute{
				Computed:    true,
				Description: `The parent resource type id, if this resource is a child of another resource.`,
			},
			"secret_trait": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"identity_app_user_id": schema.StringAttribute{
						Computed:    true,
						Description: `The identityAppUserId field.`,
					},
					"last_used_at": schema.StringAttribute{
						Computed: true,
					},
					"secret_created_at": schema.StringAttribute{
						Computed: true,
					},
					"secret_expires_at": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `The SecretTrait message.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *AppResourceDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppResourceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppResourceDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var appID string
	appID = data.AppID.ValueString()

	var appResourceTypeID string
	appResourceTypeID = data.AppResourceTypeID.ValueString()

	var id string
	id = data.ID.ValueString()

	request := operations.C1APIAppV1AppResourceServiceGetRequest{
		AppID:             appID,
		AppResourceTypeID: appResourceTypeID,
		ID:                id,
	}
	res, err := r.client.AppResource.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AppResourceServiceGetResponse != nil && res.AppResourceServiceGetResponse.AppResourceView != nil && res.AppResourceServiceGetResponse.AppResourceView.AppResource != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAppResource(ctx, res.AppResourceServiceGetResponse.AppResourceView.AppResource)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
