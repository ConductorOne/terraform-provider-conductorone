// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AccessProfileRequestableEntriesResourceModel) ToSharedRequestCatalogManagementServiceAddAppEntitlementsRequest(ctx context.Context) (*shared.RequestCatalogManagementServiceAddAppEntitlementsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appEntitlements []shared.AppEntitlementRef
	if r.AppEntitlements != nil {
		appEntitlements = make([]shared.AppEntitlementRef, 0, len(r.AppEntitlements))
		for _, appEntitlementsItem := range r.AppEntitlements {
			appID := new(string)
			if !appEntitlementsItem.AppID.IsUnknown() && !appEntitlementsItem.AppID.IsNull() {
				*appID = appEntitlementsItem.AppID.ValueString()
			} else {
				appID = nil
			}
			id := new(string)
			if !appEntitlementsItem.ID.IsUnknown() && !appEntitlementsItem.ID.IsNull() {
				*id = appEntitlementsItem.ID.ValueString()
			} else {
				id = nil
			}
			appEntitlements = append(appEntitlements, shared.AppEntitlementRef{
				AppID: appID,
				ID:    id,
			})
		}
	}
	createRequests := new(bool)
	if !r.CreateRequests.IsUnknown() && !r.CreateRequests.IsNull() {
		*createRequests = r.CreateRequests.ValueBool()
	} else {
		createRequests = nil
	}
	out := shared.RequestCatalogManagementServiceAddAppEntitlementsRequest{
		AppEntitlements: appEntitlements,
		CreateRequests:  createRequests,
	}

	return &out, diags
}

func (r *AccessProfileRequestableEntriesResourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var catalogID string
	catalogID = r.CatalogID.ValueString()

	requestCatalogManagementServiceAddAppEntitlementsRequest, requestCatalogManagementServiceAddAppEntitlementsRequestDiags := r.ToSharedRequestCatalogManagementServiceAddAppEntitlementsRequest(ctx)
	diags.Append(requestCatalogManagementServiceAddAppEntitlementsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceAddAppEntitlementsRequest{
		CatalogID: catalogID,
		RequestCatalogManagementServiceAddAppEntitlementsRequest: requestCatalogManagementServiceAddAppEntitlementsRequest,
	}

	return &out, diags
}

func (r *AccessProfileRequestableEntriesResourceModel) ToSharedRequestCatalogManagementServiceRemoveAppEntitlementsRequest(ctx context.Context) (*shared.RequestCatalogManagementServiceRemoveAppEntitlementsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appEntitlements []shared.AppEntitlementRef
	if r.AppEntitlements != nil {
		appEntitlements = make([]shared.AppEntitlementRef, 0, len(r.AppEntitlements))
		for _, appEntitlementsItem := range r.AppEntitlements {
			appID := new(string)
			if !appEntitlementsItem.AppID.IsUnknown() && !appEntitlementsItem.AppID.IsNull() {
				*appID = appEntitlementsItem.AppID.ValueString()
			} else {
				appID = nil
			}
			id := new(string)
			if !appEntitlementsItem.ID.IsUnknown() && !appEntitlementsItem.ID.IsNull() {
				*id = appEntitlementsItem.ID.ValueString()
			} else {
				id = nil
			}
			appEntitlements = append(appEntitlements, shared.AppEntitlementRef{
				AppID: appID,
				ID:    id,
			})
		}
	}
	out := shared.RequestCatalogManagementServiceRemoveAppEntitlementsRequest{
		AppEntitlements: appEntitlements,
	}

	return &out, diags
}

func (r *AccessProfileRequestableEntriesResourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var catalogID string
	catalogID = r.CatalogID.ValueString()

	requestCatalogManagementServiceRemoveAppEntitlementsRequest, requestCatalogManagementServiceRemoveAppEntitlementsRequestDiags := r.ToSharedRequestCatalogManagementServiceRemoveAppEntitlementsRequest(ctx)
	diags.Append(requestCatalogManagementServiceRemoveAppEntitlementsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceRemoveAppEntitlementsRequest{
		CatalogID: catalogID,
		RequestCatalogManagementServiceRemoveAppEntitlementsRequest: requestCatalogManagementServiceRemoveAppEntitlementsRequest,
	}

	return &out, diags
}

func (r *AccessProfileRequestableEntriesResourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var catalogID string
	catalogID = r.CatalogID.ValueString()

	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceListEntitlementsPerCatalogRequest{
		CatalogID: catalogID,
	}

	return &out, diags
}

func (r *AccessProfileRequestableEntriesResourceModel) RefreshFromSharedRequestCatalogManagementServiceAddAppEntitlementsResponse(ctx context.Context, resp *shared.RequestCatalogManagementServiceAddAppEntitlementsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *AccessProfileRequestableEntriesResourceModel) RefreshFromSharedRequestCatalogManagementServiceListEntitlementsPerCatalogResponse(ctx context.Context, resp *shared.RequestCatalogManagementServiceListEntitlementsPerCatalogResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Expanded != nil {
		}
		if resp.List != nil {
			r.List = []tfTypes.AppEntitlementView{}
			if len(r.List) > len(resp.List) {
				r.List = r.List[:len(resp.List)]
			}
			for listCount, listItem := range resp.List {
				var list tfTypes.AppEntitlementView
				if listItem.AppEntitlement == nil {
					list.AppEntitlement = nil
				} else {
					list.AppEntitlement = &tfTypes.AppEntitlement{}
					list.AppEntitlement.Alias = types.StringPointerValue(listItem.AppEntitlement.Alias)
					list.AppEntitlement.AppID = types.StringPointerValue(listItem.AppEntitlement.AppID)
					list.AppEntitlement.AppResourceID = types.StringPointerValue(listItem.AppEntitlement.AppResourceID)
					list.AppEntitlement.AppResourceTypeID = types.StringPointerValue(listItem.AppEntitlement.AppResourceTypeID)
					list.AppEntitlement.CertifyPolicyID = types.StringPointerValue(listItem.AppEntitlement.CertifyPolicyID)
					if listItem.AppEntitlement.ComplianceFrameworkValueIds != nil {
						list.AppEntitlement.ComplianceFrameworkValueIds = make([]types.String, 0, len(listItem.AppEntitlement.ComplianceFrameworkValueIds))
						for _, v := range listItem.AppEntitlement.ComplianceFrameworkValueIds {
							list.AppEntitlement.ComplianceFrameworkValueIds = append(list.AppEntitlement.ComplianceFrameworkValueIds, types.StringValue(v))
						}
					}
					list.AppEntitlement.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.CreatedAt))
					list.AppEntitlement.DefaultValuesApplied = types.BoolPointerValue(listItem.AppEntitlement.DefaultValuesApplied)
					list.AppEntitlement.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.DeletedAt))
					list.AppEntitlement.Description = types.StringPointerValue(listItem.AppEntitlement.Description)
					list.AppEntitlement.DisplayName = types.StringPointerValue(listItem.AppEntitlement.DisplayName)
					list.AppEntitlement.DurationGrant = types.StringPointerValue(listItem.AppEntitlement.DurationGrant)
					if listItem.AppEntitlement.DurationUnset == nil {
						list.AppEntitlement.DurationUnset = nil
					} else {
						list.AppEntitlement.DurationUnset = &tfTypes.AppEntitlementDurationUnset{}
					}
					list.AppEntitlement.EmergencyGrantEnabled = types.BoolPointerValue(listItem.AppEntitlement.EmergencyGrantEnabled)
					list.AppEntitlement.EmergencyGrantPolicyID = types.StringPointerValue(listItem.AppEntitlement.EmergencyGrantPolicyID)
					list.AppEntitlement.GrantCount = types.StringPointerValue(listItem.AppEntitlement.GrantCount)
					list.AppEntitlement.GrantPolicyID = types.StringPointerValue(listItem.AppEntitlement.GrantPolicyID)
					list.AppEntitlement.ID = types.StringPointerValue(listItem.AppEntitlement.ID)
					list.AppEntitlement.IsAutomationEnabled = types.BoolPointerValue(listItem.AppEntitlement.IsAutomationEnabled)
					list.AppEntitlement.IsManuallyManaged = types.BoolPointerValue(listItem.AppEntitlement.IsManuallyManaged)
					list.AppEntitlement.MatchBatonID = types.StringPointerValue(listItem.AppEntitlement.MatchBatonID)
					list.AppEntitlement.OverrideAccessRequestsDefaults = types.BoolPointerValue(listItem.AppEntitlement.OverrideAccessRequestsDefaults)
					if listItem.AppEntitlement.ProvisionPolicy == nil {
						list.AppEntitlement.ProvisionPolicy = nil
					} else {
						list.AppEntitlement.ProvisionPolicy = &tfTypes.ProvisionPolicy{}
						if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision == nil {
							list.AppEntitlement.ProvisionPolicy.ConnectorProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.ConnectorProvision = &tfTypes.ConnectorProvision{}
							if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision == nil {
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision = nil
							} else {
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision = &tfTypes.AccountProvision{}
								if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.Config == nil {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.Config = nil
								} else {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.Config = &tfTypes.AccountProvisionConfig{}
								}
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID)
								if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.DoNotSave == nil {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.DoNotSave = nil
								} else {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.DoNotSave = &tfTypes.DoNotSave{}
								}
								if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault == nil {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault = nil
								} else {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault = &tfTypes.SaveToVault{}
									if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds != nil {
										list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds = make([]types.String, 0, len(listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds))
										for _, v := range listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds {
											list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds = append(list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds, types.StringValue(v))
										}
									}
								}
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID)
							}
							if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior == nil {
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior = nil
							} else {
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior = &tfTypes.DefaultBehavior{}
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID)
							}
						}
						if listItem.AppEntitlement.ProvisionPolicy.DelegatedProvision == nil {
							list.AppEntitlement.ProvisionPolicy.DelegatedProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.DelegatedProvision = &tfTypes.DelegatedProvision{}
							list.AppEntitlement.ProvisionPolicy.DelegatedProvision.AppID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.DelegatedProvision.AppID)
							list.AppEntitlement.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.DelegatedProvision.EntitlementID)
						}
						if listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision == nil {
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision = &tfTypes.ExternalTicketProvision{}
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.AppID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.AppID)
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.ConnectorID)
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID)
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.Instructions = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.Instructions)
						}
						if listItem.AppEntitlement.ProvisionPolicy.ManualProvision == nil {
							list.AppEntitlement.ProvisionPolicy.ManualProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.ManualProvision = &tfTypes.ManualProvision{}
							list.AppEntitlement.ProvisionPolicy.ManualProvision.Instructions = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ManualProvision.Instructions)
							if listItem.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds != nil {
								list.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds = make([]types.String, 0, len(listItem.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds))
								for _, v := range listItem.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds {
									list.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds = append(list.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds, types.StringValue(v))
								}
							}
						}
						if listItem.AppEntitlement.ProvisionPolicy.MultiStep == nil {
							list.AppEntitlement.ProvisionPolicy.MultiStep = types.StringNull()
						} else {
							multiStepResult, _ := json.Marshal(listItem.AppEntitlement.ProvisionPolicy.MultiStep)
							list.AppEntitlement.ProvisionPolicy.MultiStep = types.StringValue(string(multiStepResult))
						}
						if listItem.AppEntitlement.ProvisionPolicy.UnconfiguredProvision == nil {
							list.AppEntitlement.ProvisionPolicy.UnconfiguredProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.UnconfiguredProvision = &tfTypes.UnconfiguredProvision{}
						}
						if listItem.AppEntitlement.ProvisionPolicy.WebhookProvision == nil {
							list.AppEntitlement.ProvisionPolicy.WebhookProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.WebhookProvision = &tfTypes.WebhookProvision{}
							list.AppEntitlement.ProvisionPolicy.WebhookProvision.WebhookID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.WebhookProvision.WebhookID)
						}
					}
					if listItem.AppEntitlement.Purpose != nil {
						list.AppEntitlement.Purpose = types.StringValue(string(*listItem.AppEntitlement.Purpose))
					} else {
						list.AppEntitlement.Purpose = types.StringNull()
					}
					list.AppEntitlement.RevokePolicyID = types.StringPointerValue(listItem.AppEntitlement.RevokePolicyID)
					list.AppEntitlement.RiskLevelValueID = types.StringPointerValue(listItem.AppEntitlement.RiskLevelValueID)
					list.AppEntitlement.Slug = types.StringPointerValue(listItem.AppEntitlement.Slug)
					if len(listItem.AppEntitlement.SourceConnectorIds) > 0 {
						list.AppEntitlement.SourceConnectorIds = make(map[string]types.String, len(listItem.AppEntitlement.SourceConnectorIds))
						for key, value := range listItem.AppEntitlement.SourceConnectorIds {
							list.AppEntitlement.SourceConnectorIds[key] = types.StringValue(value)
						}
					}
					list.AppEntitlement.SystemBuiltin = types.BoolPointerValue(listItem.AppEntitlement.SystemBuiltin)
					list.AppEntitlement.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.UpdatedAt))
					if listItem.AppEntitlement.DeprovisionerPolicy == nil {
						list.AppEntitlement.DeprovisionerPolicy = nil
					} else {
						list.AppEntitlement.DeprovisionerPolicy = &tfTypes.DeprovisionerPolicy{}
						if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision = &tfTypes.ConnectorProvision{}
							if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision == nil {
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision = nil
							} else {
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision = &tfTypes.AccountProvision{}
								if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.Config == nil {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.Config = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.Config = &tfTypes.AccountProvisionConfig{}
								}
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.ConnectorID)
								if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.DoNotSave == nil {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.DoNotSave = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.DoNotSave = &tfTypes.DoNotSave{}
								}
								if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault == nil {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault = &tfTypes.SaveToVault{}
									if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds != nil {
										list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds = make([]types.String, 0, len(listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds))
										for _, v := range listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds {
											list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds = append(list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds, types.StringValue(v))
										}
									}
								}
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SchemaID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SchemaID)
							}
							if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior == nil {
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior = nil
							} else {
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior = &tfTypes.DefaultBehavior{}
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior.ConnectorID)
							}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.DelegatedProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.DelegatedProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.DelegatedProvision = &tfTypes.DelegatedProvision{}
							list.AppEntitlement.DeprovisionerPolicy.DelegatedProvision.AppID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.DelegatedProvision.AppID)
							list.AppEntitlement.DeprovisionerPolicy.DelegatedProvision.EntitlementID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.DelegatedProvision.EntitlementID)
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision = &tfTypes.ExternalTicketProvision{}
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.AppID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.AppID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.ConnectorID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.Instructions = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.Instructions)
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.ManualProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.ManualProvision = &tfTypes.ManualProvision{}
							list.AppEntitlement.DeprovisionerPolicy.ManualProvision.Instructions = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision.Instructions)
							if listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds != nil {
								list.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds = make([]types.String, 0, len(listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds))
								for _, v := range listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds {
									list.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds = append(list.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds, types.StringValue(v))
								}
							}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.MultiStep == nil {
							list.AppEntitlement.DeprovisionerPolicy.MultiStep = types.StringNull()
						} else {
							multiStepResult1, _ := json.Marshal(listItem.AppEntitlement.DeprovisionerPolicy.MultiStep)
							list.AppEntitlement.DeprovisionerPolicy.MultiStep = types.StringValue(string(multiStepResult1))
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.UnconfiguredProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.UnconfiguredProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.UnconfiguredProvision = &tfTypes.UnconfiguredProvision{}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.WebhookProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.WebhookProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.WebhookProvision = &tfTypes.WebhookProvision{}
							list.AppEntitlement.DeprovisionerPolicy.WebhookProvision.WebhookID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.WebhookProvision.WebhookID)
						}
					}
				}
				if listCount+1 > len(r.List) {
					r.List = append(r.List, list)
				} else {
					r.List[listCount].AppEntitlement = list.AppEntitlement
				}
			}
		}
		r.NextPageToken = types.StringPointerValue(resp.NextPageToken)
	}

	return diags
}
