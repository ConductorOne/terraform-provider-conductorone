// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FunctionDataSourceModel) RefreshFromSharedFunction(ctx context.Context, resp *shared.Function) diag.Diagnostics {
	var diags diag.Diagnostics

	r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
	r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayName = types.StringPointerValue(resp.DisplayName)
	if resp.FunctionType != nil {
		r.FunctionType = types.StringValue(string(*resp.FunctionType))
	} else {
		r.FunctionType = types.StringNull()
	}
	r.Head = types.StringPointerValue(resp.Head)
	r.ID = types.StringPointerValue(resp.ID)
	r.IsDraft = types.BoolPointerValue(resp.IsDraft)
	r.PublishedCommitID = types.StringPointerValue(resp.PublishedCommitID)
	r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))

	return diags
}

func (r *FunctionDataSourceModel) ToSharedFunctionsSearchRequest(ctx context.Context) (*shared.FunctionsSearchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var functionTypes []shared.FunctionTypes
	if r.FunctionTypes != nil {
		functionTypes = make([]shared.FunctionTypes, 0, len(r.FunctionTypes))
		for _, functionTypesItem := range r.FunctionTypes {
			functionTypes = append(functionTypes, shared.FunctionTypes(functionTypesItem.ValueString()))
		}
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	pageToken := new(string)
	if !r.PageToken.IsUnknown() && !r.PageToken.IsNull() {
		*pageToken = r.PageToken.ValueString()
	} else {
		pageToken = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	out := shared.FunctionsSearchRequest{
		FunctionTypes: functionTypes,
		PageSize:      pageSize,
		PageToken:     pageToken,
		Query:         query,
	}

	return &out, diags
}
