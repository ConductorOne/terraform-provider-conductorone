// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PolicyDataSourceModel) RefreshFromSharedPolicy(ctx context.Context, resp *shared.Policy) diag.Diagnostics {
	var diags diag.Diagnostics

	r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
	r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayName = types.StringPointerValue(resp.DisplayName)
	r.ID = types.StringPointerValue(resp.ID)
	if resp.PolicySteps != nil {
		r.PolicySteps = make(map[string]tfTypes.PolicySteps, len(resp.PolicySteps))
		for policyStepsKey, policyStepsValue := range resp.PolicySteps {
			var policyStepsResult tfTypes.PolicySteps
			if policyStepsValue.Steps != nil {
				if policyStepsResult.Steps == nil {
					policyStepsResult.Steps = []tfTypes.PolicyStep{}
				}

				for _, stepsItem := range policyStepsValue.Steps {
					var steps tfTypes.PolicyStep

					if stepsItem.Accept == nil {
						steps.Accept = nil
					} else {
						steps.Accept = &tfTypes.Accept{}
						steps.Accept.AcceptMessage = types.StringPointerValue(stepsItem.Accept.AcceptMessage)
					}
					if stepsItem.Approval == nil {
						steps.Approval = nil
					} else {
						steps.Approval = &tfTypes.Approval{}
						if stepsItem.Approval.Agent == nil {
							steps.Approval.Agent = nil
						} else {
							steps.Approval.Agent = &tfTypes.AgentApproval{}
							if stepsItem.Approval.Agent.AgentFailureAction != nil {
								steps.Approval.Agent.AgentFailureAction = types.StringValue(string(*stepsItem.Approval.Agent.AgentFailureAction))
							} else {
								steps.Approval.Agent.AgentFailureAction = types.StringNull()
							}
							if stepsItem.Approval.Agent.AgentMode != nil {
								steps.Approval.Agent.AgentMode = types.StringValue(string(*stepsItem.Approval.Agent.AgentMode))
							} else {
								steps.Approval.Agent.AgentMode = types.StringNull()
							}
							steps.Approval.Agent.AgentUserID = types.StringPointerValue(stepsItem.Approval.Agent.AgentUserID)
							steps.Approval.Agent.Instructions = types.StringPointerValue(stepsItem.Approval.Agent.Instructions)
							if stepsItem.Approval.Agent.PolicyIds != nil {
								if steps.Approval.Agent.PolicyIds == nil {
									steps.Approval.Agent.PolicyIds = make([]types.String, 0, len(stepsItem.Approval.Agent.PolicyIds))
								}
								for _, v := range stepsItem.Approval.Agent.PolicyIds {
									steps.Approval.Agent.PolicyIds = append(steps.Approval.Agent.PolicyIds, types.StringValue(v))
								}
							}
							if stepsItem.Approval.Agent.ReassignToUserIds != nil {
								if steps.Approval.Agent.ReassignToUserIds == nil {
									steps.Approval.Agent.ReassignToUserIds = make([]types.String, 0, len(stepsItem.Approval.Agent.ReassignToUserIds))
								}
								for _, v := range stepsItem.Approval.Agent.ReassignToUserIds {
									steps.Approval.Agent.ReassignToUserIds = append(steps.Approval.Agent.ReassignToUserIds, types.StringValue(v))
								}
							}
						}
						steps.Approval.AllowDelegation = types.BoolPointerValue(stepsItem.Approval.AllowDelegation)
						if stepsItem.Approval.AllowedReassignees != nil {
							if steps.Approval.AllowedReassignees == nil {
								steps.Approval.AllowedReassignees = make([]types.String, 0, len(stepsItem.Approval.AllowedReassignees))
							}
							for _, v := range stepsItem.Approval.AllowedReassignees {
								steps.Approval.AllowedReassignees = append(steps.Approval.AllowedReassignees, types.StringValue(v))
							}
						}
						steps.Approval.AllowReassignment = types.BoolPointerValue(stepsItem.Approval.AllowReassignment)
						if stepsItem.Approval.AppOwners == nil {
							steps.Approval.AppOwners = nil
						} else {
							steps.Approval.AppOwners = &tfTypes.AppOwnerApproval{}
							steps.Approval.AppOwners.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.AppOwners.AllowSelfApproval)
						}
						steps.Approval.Assigned = types.BoolPointerValue(stepsItem.Approval.Assigned)
						if stepsItem.Approval.EntitlementOwners == nil {
							steps.Approval.EntitlementOwners = nil
						} else {
							steps.Approval.EntitlementOwners = &tfTypes.EntitlementOwnerApproval{}
							steps.Approval.EntitlementOwners.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.EntitlementOwners.AllowSelfApproval)
							steps.Approval.EntitlementOwners.Fallback = types.BoolPointerValue(stepsItem.Approval.EntitlementOwners.Fallback)
							if stepsItem.Approval.EntitlementOwners.FallbackUserIds != nil {
								if steps.Approval.EntitlementOwners.FallbackUserIds == nil {
									steps.Approval.EntitlementOwners.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.EntitlementOwners.FallbackUserIds))
								}
								for _, v := range stepsItem.Approval.EntitlementOwners.FallbackUserIds {
									steps.Approval.EntitlementOwners.FallbackUserIds = append(steps.Approval.EntitlementOwners.FallbackUserIds, types.StringValue(v))
								}
							}
						}
						if stepsItem.Approval.Escalation == nil {
							steps.Approval.Escalation = nil
						} else {
							steps.Approval.Escalation = &tfTypes.Escalation{}
							steps.Approval.Escalation.EscalationComment = types.StringPointerValue(stepsItem.Approval.Escalation.EscalationComment)
							steps.Approval.Escalation.Expiration = types.StringPointerValue(stepsItem.Approval.Escalation.Expiration)
							if stepsItem.Approval.Escalation.ReassignToApprovers == nil {
								steps.Approval.Escalation.ReassignToApprovers = nil
							} else {
								steps.Approval.Escalation.ReassignToApprovers = &tfTypes.ReassignToApprovers{}
								if stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds != nil {
									if steps.Approval.Escalation.ReassignToApprovers.ApproverIds == nil {
										steps.Approval.Escalation.ReassignToApprovers.ApproverIds = make([]types.String, 0, len(stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds))
									}
									for _, v := range stepsItem.Approval.Escalation.ReassignToApprovers.ApproverIds {
										steps.Approval.Escalation.ReassignToApprovers.ApproverIds = append(steps.Approval.Escalation.ReassignToApprovers.ApproverIds, types.StringValue(v))
									}
								}
							}
							if stepsItem.Approval.Escalation.ReplacePolicy == nil {
								steps.Approval.Escalation.ReplacePolicy = nil
							} else {
								steps.Approval.Escalation.ReplacePolicy = &tfTypes.ReplacePolicy{}
								steps.Approval.Escalation.ReplacePolicy.PolicyID = types.StringPointerValue(stepsItem.Approval.Escalation.ReplacePolicy.PolicyID)
							}
						}
						steps.Approval.EscalationEnabled = types.BoolPointerValue(stepsItem.Approval.EscalationEnabled)
						if stepsItem.Approval.Expression == nil {
							steps.Approval.Expression = nil
						} else {
							steps.Approval.Expression = &tfTypes.ExpressionApproval{}
							steps.Approval.Expression.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.Expression.AllowSelfApproval)
							if stepsItem.Approval.Expression.AssignedUserIds != nil {
								if steps.Approval.Expression.AssignedUserIds == nil {
									steps.Approval.Expression.AssignedUserIds = make([]types.String, 0, len(stepsItem.Approval.Expression.AssignedUserIds))
								}
								for _, v := range stepsItem.Approval.Expression.AssignedUserIds {
									steps.Approval.Expression.AssignedUserIds = append(steps.Approval.Expression.AssignedUserIds, types.StringValue(v))
								}
							}
							if stepsItem.Approval.Expression.Expressions != nil {
								if steps.Approval.Expression.Expressions == nil {
									steps.Approval.Expression.Expressions = make([]types.String, 0, len(stepsItem.Approval.Expression.Expressions))
								}
								for _, v := range stepsItem.Approval.Expression.Expressions {
									steps.Approval.Expression.Expressions = append(steps.Approval.Expression.Expressions, types.StringValue(v))
								}
							}
							steps.Approval.Expression.Fallback = types.BoolPointerValue(stepsItem.Approval.Expression.Fallback)
							if stepsItem.Approval.Expression.FallbackUserIds != nil {
								if steps.Approval.Expression.FallbackUserIds == nil {
									steps.Approval.Expression.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.Expression.FallbackUserIds))
								}
								for _, v := range stepsItem.Approval.Expression.FallbackUserIds {
									steps.Approval.Expression.FallbackUserIds = append(steps.Approval.Expression.FallbackUserIds, types.StringValue(v))
								}
							}
						}
						if stepsItem.Approval.Group == nil {
							steps.Approval.Group = nil
						} else {
							steps.Approval.Group = &tfTypes.AppGroupApproval{}
							steps.Approval.Group.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.Group.AllowSelfApproval)
							steps.Approval.Group.AppGroupID = types.StringPointerValue(stepsItem.Approval.Group.AppGroupID)
							steps.Approval.Group.AppID = types.StringPointerValue(stepsItem.Approval.Group.AppID)
							steps.Approval.Group.Fallback = types.BoolPointerValue(stepsItem.Approval.Group.Fallback)
							if stepsItem.Approval.Group.FallbackGroupIds != nil {
								if steps.Approval.Group.FallbackGroupIds == nil {
									steps.Approval.Group.FallbackGroupIds = []tfTypes.AppEntitlementReference{}
								}

								for _, fallbackGroupIdsItem := range stepsItem.Approval.Group.FallbackGroupIds {
									var fallbackGroupIds tfTypes.AppEntitlementReference

									fallbackGroupIds.AppEntitlementID = types.StringPointerValue(fallbackGroupIdsItem.AppEntitlementID)
									fallbackGroupIds.AppID = types.StringPointerValue(fallbackGroupIdsItem.AppID)

									steps.Approval.Group.FallbackGroupIds = append(steps.Approval.Group.FallbackGroupIds, fallbackGroupIds)
								}
							}
							if stepsItem.Approval.Group.FallbackUserIds != nil {
								if steps.Approval.Group.FallbackUserIds == nil {
									steps.Approval.Group.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.Group.FallbackUserIds))
								}
								for _, v := range stepsItem.Approval.Group.FallbackUserIds {
									steps.Approval.Group.FallbackUserIds = append(steps.Approval.Group.FallbackUserIds, types.StringValue(v))
								}
							}
							steps.Approval.Group.IsGroupFallbackEnabled = types.BoolPointerValue(stepsItem.Approval.Group.IsGroupFallbackEnabled)
						}
						if stepsItem.Approval.Manager == nil {
							steps.Approval.Manager = nil
						} else {
							steps.Approval.Manager = &tfTypes.ManagerApproval{}
							steps.Approval.Manager.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.Manager.AllowSelfApproval)
							if stepsItem.Approval.Manager.AssignedUserIds != nil {
								if steps.Approval.Manager.AssignedUserIds == nil {
									steps.Approval.Manager.AssignedUserIds = make([]types.String, 0, len(stepsItem.Approval.Manager.AssignedUserIds))
								}
								for _, v := range stepsItem.Approval.Manager.AssignedUserIds {
									steps.Approval.Manager.AssignedUserIds = append(steps.Approval.Manager.AssignedUserIds, types.StringValue(v))
								}
							}
							steps.Approval.Manager.Fallback = types.BoolPointerValue(stepsItem.Approval.Manager.Fallback)
							if stepsItem.Approval.Manager.FallbackUserIds != nil {
								if steps.Approval.Manager.FallbackUserIds == nil {
									steps.Approval.Manager.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.Manager.FallbackUserIds))
								}
								for _, v := range stepsItem.Approval.Manager.FallbackUserIds {
									steps.Approval.Manager.FallbackUserIds = append(steps.Approval.Manager.FallbackUserIds, types.StringValue(v))
								}
							}
						}
						steps.Approval.RequireApprovalReason = types.BoolPointerValue(stepsItem.Approval.RequireApprovalReason)
						steps.Approval.RequireDenialReason = types.BoolPointerValue(stepsItem.Approval.RequireDenialReason)
						steps.Approval.RequireReassignmentReason = types.BoolPointerValue(stepsItem.Approval.RequireReassignmentReason)
						steps.Approval.RequiresStepUpProviderID = types.StringPointerValue(stepsItem.Approval.RequiresStepUpProviderID)
						if stepsItem.Approval.ResourceOwners == nil {
							steps.Approval.ResourceOwners = nil
						} else {
							steps.Approval.ResourceOwners = &tfTypes.ResourceOwnerApproval{}
							steps.Approval.ResourceOwners.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.ResourceOwners.AllowSelfApproval)
							steps.Approval.ResourceOwners.Fallback = types.BoolPointerValue(stepsItem.Approval.ResourceOwners.Fallback)
							if stepsItem.Approval.ResourceOwners.FallbackUserIds != nil {
								if steps.Approval.ResourceOwners.FallbackUserIds == nil {
									steps.Approval.ResourceOwners.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.ResourceOwners.FallbackUserIds))
								}
								for _, v := range stepsItem.Approval.ResourceOwners.FallbackUserIds {
									steps.Approval.ResourceOwners.FallbackUserIds = append(steps.Approval.ResourceOwners.FallbackUserIds, types.StringValue(v))
								}
							}
						}
						if stepsItem.Approval.Self == nil {
							steps.Approval.Self = nil
						} else {
							steps.Approval.Self = &tfTypes.SelfApproval{}
							if stepsItem.Approval.Self.AssignedUserIds != nil {
								if steps.Approval.Self.AssignedUserIds == nil {
									steps.Approval.Self.AssignedUserIds = make([]types.String, 0, len(stepsItem.Approval.Self.AssignedUserIds))
								}
								for _, v := range stepsItem.Approval.Self.AssignedUserIds {
									steps.Approval.Self.AssignedUserIds = append(steps.Approval.Self.AssignedUserIds, types.StringValue(v))
								}
							}
							steps.Approval.Self.Fallback = types.BoolPointerValue(stepsItem.Approval.Self.Fallback)
							if stepsItem.Approval.Self.FallbackUserIds != nil {
								if steps.Approval.Self.FallbackUserIds == nil {
									steps.Approval.Self.FallbackUserIds = make([]types.String, 0, len(stepsItem.Approval.Self.FallbackUserIds))
								}
								for _, v := range stepsItem.Approval.Self.FallbackUserIds {
									steps.Approval.Self.FallbackUserIds = append(steps.Approval.Self.FallbackUserIds, types.StringValue(v))
								}
							}
						}
						if stepsItem.Approval.Users == nil {
							steps.Approval.Users = nil
						} else {
							steps.Approval.Users = &tfTypes.UserApproval{}
							steps.Approval.Users.AllowSelfApproval = types.BoolPointerValue(stepsItem.Approval.Users.AllowSelfApproval)
							if stepsItem.Approval.Users.UserIds != nil {
								if steps.Approval.Users.UserIds == nil {
									steps.Approval.Users.UserIds = make([]types.String, 0, len(stepsItem.Approval.Users.UserIds))
								}
								for _, v := range stepsItem.Approval.Users.UserIds {
									steps.Approval.Users.UserIds = append(steps.Approval.Users.UserIds, types.StringValue(v))
								}
							}
						}
						if stepsItem.Approval.Webhook == nil {
							steps.Approval.Webhook = nil
						} else {
							steps.Approval.Webhook = &tfTypes.WebhookApproval{}
							steps.Approval.Webhook.WebhookID = types.StringPointerValue(stepsItem.Approval.Webhook.WebhookID)
						}
					}
					if stepsItem.Form == nil {
						steps.Form = jsontypes.NewNormalizedNull()
					} else {
						formResult, _ := json.Marshal(stepsItem.Form)
						steps.Form = jsontypes.NewNormalizedValue(string(formResult))
					}
					if stepsItem.Provision == nil {
						steps.Provision = nil
					} else {
						steps.Provision = &tfTypes.Provision{}
						steps.Provision.Assigned = types.BoolPointerValue(stepsItem.Provision.Assigned)
						if stepsItem.Provision.ProvisionPolicy == nil {
							steps.Provision.ProvisionPolicy = nil
						} else {
							steps.Provision.ProvisionPolicy = &tfTypes.ProvisionPolicy{}
							if stepsItem.Provision.ProvisionPolicy.Connector == nil {
								steps.Provision.ProvisionPolicy.Connector = nil
							} else {
								steps.Provision.ProvisionPolicy.Connector = &tfTypes.ConnectorProvision{}
								if stepsItem.Provision.ProvisionPolicy.Connector.Account == nil {
									steps.Provision.ProvisionPolicy.Connector.Account = nil
								} else {
									steps.Provision.ProvisionPolicy.Connector.Account = &tfTypes.AccountProvision{}
									if stepsItem.Provision.ProvisionPolicy.Connector.Account.Config == nil {
										steps.Provision.ProvisionPolicy.Connector.Account.Config = nil
									} else {
										steps.Provision.ProvisionPolicy.Connector.Account.Config = &tfTypes.Config{}
									}
									steps.Provision.ProvisionPolicy.Connector.Account.ConnectorID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Connector.Account.ConnectorID)
									if stepsItem.Provision.ProvisionPolicy.Connector.Account.DoNotSave == nil {
										steps.Provision.ProvisionPolicy.Connector.Account.DoNotSave = nil
									} else {
										steps.Provision.ProvisionPolicy.Connector.Account.DoNotSave = &tfTypes.DoNotSave{}
									}
									if stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault == nil {
										steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault = nil
									} else {
										steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault = &tfTypes.SaveToVault{}
										if stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds != nil {
											if steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds == nil {
												steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds = make([]types.String, 0, len(stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds))
											}
											for _, v := range stepsItem.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds {
												steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds = append(steps.Provision.ProvisionPolicy.Connector.Account.SaveToVault.VaultIds, types.StringValue(v))
											}
										}
									}
									steps.Provision.ProvisionPolicy.Connector.Account.SchemaID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Connector.Account.SchemaID)
								}
								if stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior == nil {
									steps.Provision.ProvisionPolicy.Connector.DefaultBehavior = nil
								} else {
									steps.Provision.ProvisionPolicy.Connector.DefaultBehavior = &tfTypes.DefaultBehavior{}
									steps.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Connector.DefaultBehavior.ConnectorID)
								}
								if stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount == nil {
									steps.Provision.ProvisionPolicy.Connector.DeleteAccount = nil
								} else {
									steps.Provision.ProvisionPolicy.Connector.DeleteAccount = &tfTypes.DeleteAccount{}
									steps.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Connector.DeleteAccount.ConnectorID)
								}
							}
							if stepsItem.Provision.ProvisionPolicy.Delegated == nil {
								steps.Provision.ProvisionPolicy.Delegated = nil
							} else {
								steps.Provision.ProvisionPolicy.Delegated = &tfTypes.DelegatedProvision{}
								steps.Provision.ProvisionPolicy.Delegated.AppID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Delegated.AppID)
								steps.Provision.ProvisionPolicy.Delegated.EntitlementID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Delegated.EntitlementID)
							}
							if stepsItem.Provision.ProvisionPolicy.ExternalTicket == nil {
								steps.Provision.ProvisionPolicy.ExternalTicket = nil
							} else {
								steps.Provision.ProvisionPolicy.ExternalTicket = &tfTypes.ExternalTicketProvision{}
								steps.Provision.ProvisionPolicy.ExternalTicket.AppID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.ExternalTicket.AppID)
								steps.Provision.ProvisionPolicy.ExternalTicket.ConnectorID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.ExternalTicket.ConnectorID)
								steps.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.ExternalTicket.ExternalTicketProvisionerConfigID)
								steps.Provision.ProvisionPolicy.ExternalTicket.Instructions = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.ExternalTicket.Instructions)
							}
							if stepsItem.Provision.ProvisionPolicy.Manual == nil {
								steps.Provision.ProvisionPolicy.Manual = nil
							} else {
								steps.Provision.ProvisionPolicy.Manual = &tfTypes.ManualProvision{}
								steps.Provision.ProvisionPolicy.Manual.Instructions = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Manual.Instructions)
								if stepsItem.Provision.ProvisionPolicy.Manual.UserIds != nil {
									if steps.Provision.ProvisionPolicy.Manual.UserIds == nil {
										steps.Provision.ProvisionPolicy.Manual.UserIds = make([]types.String, 0, len(stepsItem.Provision.ProvisionPolicy.Manual.UserIds))
									}
									for _, v := range stepsItem.Provision.ProvisionPolicy.Manual.UserIds {
										steps.Provision.ProvisionPolicy.Manual.UserIds = append(steps.Provision.ProvisionPolicy.Manual.UserIds, types.StringValue(v))
									}
								}
							}
							if stepsItem.Provision.ProvisionPolicy.MultiStep == nil {
								steps.Provision.ProvisionPolicy.MultiStep = jsontypes.NewNormalizedNull()
							} else {
								multiStepResult, _ := json.Marshal(stepsItem.Provision.ProvisionPolicy.MultiStep)
								steps.Provision.ProvisionPolicy.MultiStep = jsontypes.NewNormalizedValue(string(multiStepResult))
							}
							if stepsItem.Provision.ProvisionPolicy.Unconfigured == nil {
								steps.Provision.ProvisionPolicy.Unconfigured = nil
							} else {
								steps.Provision.ProvisionPolicy.Unconfigured = &tfTypes.UnconfiguredProvision{}
							}
							if stepsItem.Provision.ProvisionPolicy.Webhook == nil {
								steps.Provision.ProvisionPolicy.Webhook = nil
							} else {
								steps.Provision.ProvisionPolicy.Webhook = &tfTypes.WebhookProvision{}
								steps.Provision.ProvisionPolicy.Webhook.WebhookID = types.StringPointerValue(stepsItem.Provision.ProvisionPolicy.Webhook.WebhookID)
							}
						}
						if stepsItem.Provision.ProvisionTarget == nil {
							steps.Provision.ProvisionTarget = nil
						} else {
							steps.Provision.ProvisionTarget = &tfTypes.ProvisionTarget{}
							steps.Provision.ProvisionTarget.AppEntitlementID = types.StringPointerValue(stepsItem.Provision.ProvisionTarget.AppEntitlementID)
							steps.Provision.ProvisionTarget.AppID = types.StringPointerValue(stepsItem.Provision.ProvisionTarget.AppID)
							steps.Provision.ProvisionTarget.AppUserID = types.StringPointerValue(stepsItem.Provision.ProvisionTarget.AppUserID)
							steps.Provision.ProvisionTarget.GrantDuration = types.StringPointerValue(stepsItem.Provision.ProvisionTarget.GrantDuration)
						}
					}
					if stepsItem.Reject == nil {
						steps.Reject = nil
					} else {
						steps.Reject = &tfTypes.Reject{}
						steps.Reject.RejectMessage = types.StringPointerValue(stepsItem.Reject.RejectMessage)
					}
					if stepsItem.Wait == nil {
						steps.Wait = nil
					} else {
						steps.Wait = &tfTypes.Wait{}
						steps.Wait.CommentOnFirstWait = types.StringPointerValue(stepsItem.Wait.CommentOnFirstWait)
						steps.Wait.CommentOnTimeout = types.StringPointerValue(stepsItem.Wait.CommentOnTimeout)
						if stepsItem.Wait.Condition == nil {
							steps.Wait.Condition = nil
						} else {
							steps.Wait.Condition = &tfTypes.WaitCondition{}
							steps.Wait.Condition.Condition = types.StringPointerValue(stepsItem.Wait.Condition.Condition)
						}
						if stepsItem.Wait.Duration == nil {
							steps.Wait.Duration = nil
						} else {
							steps.Wait.Duration = &tfTypes.WaitDuration{}
							steps.Wait.Duration.Duration = types.StringPointerValue(stepsItem.Wait.Duration.Duration)
						}
						steps.Wait.Name = types.StringPointerValue(stepsItem.Wait.Name)
						steps.Wait.TimeoutDuration = types.StringPointerValue(stepsItem.Wait.TimeoutDuration)
						if stepsItem.Wait.UntilTime == nil {
							steps.Wait.UntilTime = nil
						} else {
							steps.Wait.UntilTime = &tfTypes.WaitUntilTime{}
							steps.Wait.UntilTime.Hours = types.Int64PointerValue(stepsItem.Wait.UntilTime.Hours)
							steps.Wait.UntilTime.Minutes = types.Int64PointerValue(stepsItem.Wait.UntilTime.Minutes)
							steps.Wait.UntilTime.Timezone = types.StringPointerValue(stepsItem.Wait.UntilTime.Timezone)
						}
					}

					policyStepsResult.Steps = append(policyStepsResult.Steps, steps)
				}
			}

			r.PolicySteps[policyStepsKey] = policyStepsResult
		}
	}
	if resp.PolicyType != nil {
		r.PolicyType = types.StringValue(string(*resp.PolicyType))
	} else {
		r.PolicyType = types.StringNull()
	}
	if resp.PostActions != nil {
		if r.PostActions == nil {
			r.PostActions = []tfTypes.PolicyPostActions{}
		}

		for _, postActionsItem := range resp.PostActions {
			var postActions tfTypes.PolicyPostActions

			postActions.CertifyRemediateImmediately = types.BoolPointerValue(postActionsItem.CertifyRemediateImmediately)

			r.PostActions = append(r.PostActions, postActions)
		}
	}
	r.ReassignTasksToDelegates = types.BoolPointerValue(resp.ReassignTasksToDelegates)
	if resp.Rules != nil {
		if r.Rules == nil {
			r.Rules = []tfTypes.Rule{}
		}

		for _, rulesItem := range resp.Rules {
			var rules tfTypes.Rule

			rules.Condition = types.StringPointerValue(rulesItem.Condition)
			rules.PolicyKey = types.StringPointerValue(rulesItem.PolicyKey)

			r.Rules = append(r.Rules, rules)
		}
	}
	r.SystemBuiltin = types.BoolPointerValue(resp.SystemBuiltin)
	r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))

	return diags
}

func (r *PolicyDataSourceModel) ToSharedSearchPoliciesRequest(ctx context.Context) (*shared.SearchPoliciesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var excludePolicyIds []string
	if r.ExcludePolicyIds != nil {
		excludePolicyIds = make([]string, 0, len(r.ExcludePolicyIds))
		for _, excludePolicyIdsItem := range r.ExcludePolicyIds {
			excludePolicyIds = append(excludePolicyIds, excludePolicyIdsItem.ValueString())
		}
	}
	includeDeleted := new(bool)
	if !r.IncludeDeleted.IsUnknown() && !r.IncludeDeleted.IsNull() {
		*includeDeleted = r.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	var policyTypes []shared.PolicyTypes
	if r.PolicyTypes != nil {
		policyTypes = make([]shared.PolicyTypes, 0, len(r.PolicyTypes))
		for _, policyTypesItem := range r.PolicyTypes {
			policyTypes = append(policyTypes, shared.PolicyTypes(policyTypesItem.ValueString()))
		}
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var refs []shared.PolicyRef
	if r.Refs != nil {
		refs = make([]shared.PolicyRef, 0, len(r.Refs))
		for _, refsItem := range r.Refs {
			id := new(string)
			if !refsItem.ID.IsUnknown() && !refsItem.ID.IsNull() {
				*id = refsItem.ID.ValueString()
			} else {
				id = nil
			}
			refs = append(refs, shared.PolicyRef{
				ID: id,
			})
		}
	}
	out := shared.SearchPoliciesRequest{
		DisplayName:      displayName,
		ExcludePolicyIds: excludePolicyIds,
		IncludeDeleted:   includeDeleted,
		PageSize:         pageSize,
		PolicyTypes:      policyTypes,
		Query:            query,
		Refs:             refs,
	}

	return &out, diags
}
