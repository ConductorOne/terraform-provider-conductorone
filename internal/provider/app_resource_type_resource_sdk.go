// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AppResourceTypeResourceModel) RefreshFromSharedAppResourceType(ctx context.Context, resp *shared.AppResourceType) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppID = types.StringPointerValue(resp.AppID)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.TraitIds != nil {
			r.TraitIds = make([]types.String, 0, len(resp.TraitIds))
			for _, v := range resp.TraitIds {
				r.TraitIds = append(r.TraitIds, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *AppResourceTypeResourceModel) ToOperationsC1APIAppV1AppResourceTypeServiceCreateManuallyManagedResourceTypeRequest(ctx context.Context) (*operations.C1APIAppV1AppResourceTypeServiceCreateManuallyManagedResourceTypeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	createManuallyManagedResourceTypeRequest, createManuallyManagedResourceTypeRequestDiags := r.ToSharedCreateManuallyManagedResourceTypeRequest(ctx)
	diags.Append(createManuallyManagedResourceTypeRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAppV1AppResourceTypeServiceCreateManuallyManagedResourceTypeRequest{
		AppID:                                    appID,
		CreateManuallyManagedResourceTypeRequest: createManuallyManagedResourceTypeRequest,
	}

	return &out, diags
}

func (r *AppResourceTypeResourceModel) ToOperationsC1APIAppV1AppResourceTypeServiceDeleteManuallyManagedResourceTypeRequest(ctx context.Context) (*operations.C1APIAppV1AppResourceTypeServiceDeleteManuallyManagedResourceTypeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIAppV1AppResourceTypeServiceDeleteManuallyManagedResourceTypeRequest{
		AppID: appID,
		ID:    id,
	}

	return &out, diags
}

func (r *AppResourceTypeResourceModel) ToOperationsC1APIAppV1AppResourceTypeServiceGetRequest(ctx context.Context) (*operations.C1APIAppV1AppResourceTypeServiceGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIAppV1AppResourceTypeServiceGetRequest{
		AppID: appID,
		ID:    id,
	}

	return &out, diags
}

func (r *AppResourceTypeResourceModel) ToOperationsC1APIAppV1AppResourceTypeServiceUpdateManuallyManagedResourceTypeRequest(ctx context.Context) (*operations.C1APIAppV1AppResourceTypeServiceUpdateManuallyManagedResourceTypeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	updateManuallyManagedResourceTypeRequest, updateManuallyManagedResourceTypeRequestDiags := r.ToSharedUpdateManuallyManagedResourceTypeRequest(ctx)
	diags.Append(updateManuallyManagedResourceTypeRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAppV1AppResourceTypeServiceUpdateManuallyManagedResourceTypeRequest{
		AppID:                                    appID,
		ID:                                       id,
		UpdateManuallyManagedResourceTypeRequest: updateManuallyManagedResourceTypeRequest,
	}

	return &out, diags
}

func (r *AppResourceTypeResourceModel) ToSharedAppResourceTypeInput(ctx context.Context) (*shared.AppResourceTypeInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var traitIds []string
	if r.TraitIds != nil {
		traitIds = make([]string, 0, len(r.TraitIds))
		for _, traitIdsItem := range r.TraitIds {
			traitIds = append(traitIds, traitIdsItem.ValueString())
		}
	}
	updatedAt := new(time.Time)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, r.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	out := shared.AppResourceTypeInput{
		CreatedAt:   createdAt,
		DeletedAt:   deletedAt,
		DisplayName: displayName,
		TraitIds:    traitIds,
		UpdatedAt:   updatedAt,
	}

	return &out, diags
}

func (r *AppResourceTypeResourceModel) ToSharedCreateManuallyManagedResourceTypeRequest(ctx context.Context) (*shared.CreateManuallyManagedResourceTypeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var displayName string
	displayName = r.DisplayName.ValueString()

	resourceType := shared.ResourceType(r.ResourceType.ValueString())
	out := shared.CreateManuallyManagedResourceTypeRequest{
		DisplayName:  displayName,
		ResourceType: resourceType,
	}

	return &out, diags
}

func (r *AppResourceTypeResourceModel) ToSharedUpdateManuallyManagedResourceTypeRequest(ctx context.Context) (*shared.UpdateManuallyManagedResourceTypeRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appResourceType, appResourceTypeDiags := r.ToSharedAppResourceTypeInput(ctx)
	diags.Append(appResourceTypeDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateManuallyManagedResourceTypeRequest{
		AppResourceType: appResourceType,
	}

	return &out, diags
}
