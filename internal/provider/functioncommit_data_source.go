// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &FunctionCommitDataSource{}
var _ datasource.DataSourceWithConfigure = &FunctionCommitDataSource{}

func NewFunctionCommitDataSource() datasource.DataSource {
	return &FunctionCommitDataSource{}
}

// FunctionCommitDataSource is the data source implementation.
type FunctionCommitDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// FunctionCommitDataSourceModel describes the data model.
type FunctionCommitDataSourceModel struct {
	Author        types.String `tfsdk:"author"`
	CreatedAt     types.String `tfsdk:"created_at"`
	FunctionID    types.String `tfsdk:"function_id"`
	ID            types.String `tfsdk:"id"`
	Message       types.String `tfsdk:"message"`
	NextPageToken types.String `tfsdk:"next_page_token"`
}

// Metadata returns the data source type name.
func (r *FunctionCommitDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_function_commit"
}

// Schema defines the schema for the data source.
func (r *FunctionCommitDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "FunctionCommit DataSource",

		Attributes: map[string]schema.Attribute{
			"author": schema.StringAttribute{
				Computed:    true,
				Description: `The author field.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"function_id": schema.StringAttribute{
				Required: true,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id field.`,
			},
			"message": schema.StringAttribute{
				Computed:    true,
				Description: `The message field.`,
			},
			"next_page_token": schema.StringAttribute{
				Computed:    true,
				Description: `The nextPageToken field.`,
			},
		},
	}
}

func (r *FunctionCommitDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FunctionCommitDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *FunctionCommitDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIFunctionsV1FunctionsServiceListCommitsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Functions.ListCommits(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.FunctionsServiceListCommitsResponse != nil && res.FunctionsServiceListCommitsResponse.List != nil && len(res.FunctionsServiceListCommitsResponse.List) > 0) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedFunctionCommit(ctx, &res.FunctionsServiceListCommitsResponse.List[0])...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
