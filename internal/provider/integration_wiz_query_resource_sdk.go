// Generated by tf-integration-gen. DO NOT EDIT.
package provider

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"

	"github.com/hashicorp/terraform-plugin-framework/types"
)

const wizQueryCatalogID = "2qSnZmcK1FhLu6slGEJF7dG0i6o"

func (r *IntegrationWizQueryResourceModel) ToCreateDelegatedSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	catalogID := sdk.String(wizQueryCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.ConnectorServiceCreateDelegatedRequest{
		DisplayName: sdk.String("Wiz Query"),
		CatalogID:   catalogID,
		UserIds:     userIds,
	}
	return &out
}

func (r *IntegrationWizQueryResourceModel) ToCreateSDKType() (*shared.ConnectorServiceCreateRequest, error) {
	catalogID := sdk.String(wizQueryCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configOut, configSet := r.getConfig()
	if !configSet {
		return nil, fmt.Errorf("config must be set for create request")
	}

	out := shared.ConnectorServiceCreateRequest{
		CatalogID: catalogID,
		UserIds:   userIds,
		Config: &shared.ConnectorServiceCreateRequestConfig{
			AtType: sdk.String(envConfigType),
			AdditionalProperties: map[string]interface{}{
				"configuration": configOut,
			},
		},
	}
	return &out, nil
}

func (r *IntegrationWizQueryResourceModel) ToUpdateSDKType() (*shared.ConnectorInput, bool) {
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configValues := r.populateConfig()

	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}

	out := shared.ConnectorInput{
		DisplayName: sdk.String("Wiz Query"),
		AppID:       sdk.String(r.AppID.ValueString()),
		CatalogID:   sdk.String(wizQueryCatalogID),
		ID:          sdk.String(r.ID.ValueString()),
		UserIds:     userIds,
		Config:      makeConnectorConfig(configOut),
	}

	return &out, configSet
}

func (r *IntegrationWizQueryResourceModel) populateConfig() map[string]interface{} {
	configValues := make(map[string]interface{})

	wizClientId := new(string)
	if !r.WizClientId.IsUnknown() && !r.WizClientId.IsNull() {
		*wizClientId = r.WizClientId.ValueString()
		configValues["wiz_client_id"] = wizClientId
	}

	wizClientSecret := new(string)
	if !r.WizClientSecret.IsUnknown() && !r.WizClientSecret.IsNull() {
		*wizClientSecret = r.WizClientSecret.ValueString()
		configValues["wiz_client_secret"] = wizClientSecret
	}

	endpointUrl := new(string)
	if !r.EndpointUrl.IsUnknown() && !r.EndpointUrl.IsNull() {
		*endpointUrl = r.EndpointUrl.ValueString()
		configValues["endpoint_url"] = endpointUrl
	}

	authUrl := new(string)
	if !r.AuthUrl.IsUnknown() && !r.AuthUrl.IsNull() {
		*authUrl = r.AuthUrl.ValueString()
		configValues["auth_url"] = authUrl
	}

	audience := new(string)
	if !r.Audience.IsUnknown() && !r.Audience.IsNull() {
		*audience = r.Audience.ValueString()
		configValues["audience"] = audience
	}

	projectId := new(string)
	if !r.ProjectId.IsUnknown() && !r.ProjectId.IsNull() {
		*projectId = r.ProjectId.ValueString()
		configValues["project_id"] = projectId
	}

	resourceIds := make([]string, 0)
	for _, item := range r.ResourceIds {
		resourceIds = append(resourceIds, item.ValueString())
	}
	if len(resourceIds) > 0 {
		configValues["resource_ids"] = strings.Join(resourceIds, ",")
	}

	resourceTags := new(string)
	if !r.ResourceTags.IsUnknown() && !r.ResourceTags.IsNull() {
		*resourceTags = r.ResourceTags.ValueString()
		configValues["resource_tags"] = resourceTags
	}

	resourceTypes := make([]string, 0)
	for _, item := range r.ResourceTypes {
		resourceTypes = append(resourceTypes, item.ValueString())
	}
	if len(resourceTypes) > 0 {
		configValues["resource_types"] = strings.Join(resourceTypes, ",")
	}

	enableSyncIdentities := new(string)
	if !r.EnableSyncIdentities.IsUnknown() && !r.EnableSyncIdentities.IsNull() {
		*enableSyncIdentities = strconv.FormatBool(r.EnableSyncIdentities.ValueBool())
		configValues["enable_sync_identities"] = enableSyncIdentities
	}

	enableSyncServiceAccounts := new(string)
	if !r.EnableSyncServiceAccounts.IsUnknown() && !r.EnableSyncServiceAccounts.IsNull() {
		*enableSyncServiceAccounts = strconv.FormatBool(r.EnableSyncServiceAccounts.ValueBool())
		configValues["enable_sync_service_accounts"] = enableSyncServiceAccounts
	}

	return configValues
}

func (r *IntegrationWizQueryResourceModel) getConfig() (map[string]interface{}, bool) {
	configValues := r.populateConfig()
	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}
	return configOut, configSet
}

func (r *IntegrationWizQueryResourceModel) ToGetSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationWizQueryResourceModel) ToDeleteSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationWizQueryResourceModel) RefreshFromGetResponse(resp *shared.Connector) {
	if resp == nil {
		return
	}
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}

	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if val, ok := getStringValue(values, "wiz_client_id"); ok {
					r.WizClientId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "endpoint_url"); ok {
					r.EndpointUrl = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "auth_url"); ok {
					r.AuthUrl = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "audience"); ok {
					r.Audience = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "project_id"); ok {
					r.ProjectId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "resource_ids"); ok {
					var valLists []types.String
					tmpList := strings.Split(val, ",")
					for _, item := range tmpList {
						item = strings.TrimSpace(item)
						if item != "" {
							valLists = append(valLists, types.StringValue(item))
						}
					}
					r.ResourceIds = valLists
				}

				if val, ok := getStringValue(values, "resource_tags"); ok {
					r.ResourceTags = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "resource_types"); ok {
					var valLists []types.String
					tmpList := strings.Split(val, ",")
					for _, item := range tmpList {
						item = strings.TrimSpace(item)
						if item != "" {
							valLists = append(valLists, types.StringValue(item))
						}
					}
					r.ResourceTypes = valLists
				}

				if _, ok := configValues["enable_sync_identities"]; ok {
					if val, ok := getStringValue(values, "enable_sync_identities"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.EnableSyncIdentities = types.BoolValue(bv)
						}
					}
				}

				if _, ok := configValues["enable_sync_service_accounts"]; ok {
					if val, ok := getStringValue(values, "enable_sync_service_accounts"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.EnableSyncServiceAccounts = types.BoolValue(bv)
						}
					}
				}

			}
		}
	}
}

func (r *IntegrationWizQueryResourceModel) RefreshFromUpdateResponse(resp *shared.Connector) {
	r.RefreshFromGetResponse(resp)
}

func (r *IntegrationWizQueryResourceModel) RefreshFromCreateResponse(resp *shared.Connector) {
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if val, ok := getStringValue(values, "wiz_client_id"); ok {
					r.WizClientId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "endpoint_url"); ok {
					r.EndpointUrl = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "auth_url"); ok {
					r.AuthUrl = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "audience"); ok {
					r.Audience = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "project_id"); ok {
					r.ProjectId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "resource_ids"); ok {
					var valLists []types.String
					tmpList := strings.Split(val, ",")
					for _, item := range tmpList {
						item = strings.TrimSpace(item)
						if item != "" {
							valLists = append(valLists, types.StringValue(item))
						}
					}
					r.ResourceIds = valLists
				}

				if val, ok := getStringValue(values, "resource_tags"); ok {
					r.ResourceTags = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "resource_types"); ok {
					var valLists []types.String
					tmpList := strings.Split(val, ",")
					for _, item := range tmpList {
						item = strings.TrimSpace(item)
						if item != "" {
							valLists = append(valLists, types.StringValue(item))
						}
					}
					r.ResourceTypes = valLists
				}

				if _, ok := configValues["enable_sync_identities"]; ok {
					if val, ok := getStringValue(values, "enable_sync_identities"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.EnableSyncIdentities = types.BoolValue(bv)
						}
					}
				}

				if _, ok := configValues["enable_sync_service_accounts"]; ok {
					if val, ok := getStringValue(values, "enable_sync_service_accounts"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.EnableSyncServiceAccounts = types.BoolValue(bv)
						}
					}
				}

			}
		}
	}
}
