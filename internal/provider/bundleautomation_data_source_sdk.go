// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *BundleAutomationDataSourceModel) RefreshFromSharedBundleAutomation(ctx context.Context, resp *shared.BundleAutomation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.BundleAutomationCircuitBreaker == nil {
			r.BundleAutomationCircuitBreaker = nil
		} else {
			r.BundleAutomationCircuitBreaker = &tfTypes.BundleAutomationCircuitBreaker{}
			r.BundleAutomationCircuitBreaker.RemovedMembersThresholdPercentage = types.StringPointerValue(resp.BundleAutomationCircuitBreaker.RemovedMembersThresholdPercentage)
			if resp.BundleAutomationCircuitBreaker.State != nil {
				r.BundleAutomationCircuitBreaker.State = types.StringValue(string(*resp.BundleAutomationCircuitBreaker.State))
			} else {
				r.BundleAutomationCircuitBreaker.State = types.StringNull()
			}
			r.BundleAutomationCircuitBreaker.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.BundleAutomationCircuitBreaker.UpdatedAt))
			if resp.BundleAutomationCircuitBreaker.UserRef == nil {
				r.BundleAutomationCircuitBreaker.UserRef = nil
			} else {
				r.BundleAutomationCircuitBreaker.UserRef = &tfTypes.UserRef{}
				r.BundleAutomationCircuitBreaker.UserRef.ID = types.StringPointerValue(resp.BundleAutomationCircuitBreaker.UserRef.ID)
			}
		}
		if resp.BundleAutomationLastRunState == nil {
			r.BundleAutomationLastRunState = nil
		} else {
			r.BundleAutomationLastRunState = &tfTypes.BundleAutomationLastRunState{}
			r.BundleAutomationLastRunState.ErrorMessage = types.StringPointerValue(resp.BundleAutomationLastRunState.ErrorMessage)
			r.BundleAutomationLastRunState.LastRunAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.BundleAutomationLastRunState.LastRunAt))
			if resp.BundleAutomationLastRunState.Status != nil {
				r.BundleAutomationLastRunState.Status = types.StringValue(string(*resp.BundleAutomationLastRunState.Status))
			} else {
				r.BundleAutomationLastRunState.Status = types.StringNull()
			}
		}
		if resp.BundleAutomationRuleEntitlement == nil {
			r.BundleAutomationRuleEntitlement = nil
		} else {
			r.BundleAutomationRuleEntitlement = &tfTypes.BundleAutomationRuleEntitlement{}
			if resp.BundleAutomationRuleEntitlement.EntitlementRefs != nil {
				r.BundleAutomationRuleEntitlement.EntitlementRefs = []tfTypes.AppEntitlementRef{}

				for _, entitlementRefsItem := range resp.BundleAutomationRuleEntitlement.EntitlementRefs {
					var entitlementRefs tfTypes.AppEntitlementRef

					entitlementRefs.AppID = types.StringPointerValue(entitlementRefsItem.AppID)
					entitlementRefs.ID = types.StringPointerValue(entitlementRefsItem.ID)

					r.BundleAutomationRuleEntitlement.EntitlementRefs = append(r.BundleAutomationRuleEntitlement.EntitlementRefs, entitlementRefs)
				}
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CreateTasks = types.BoolPointerValue(resp.CreateTasks)
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.DisableCircuitBreaker = types.BoolPointerValue(resp.DisableCircuitBreaker)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.RequestCatalogID = types.StringPointerValue(resp.RequestCatalogID)
		r.TenantID = types.StringPointerValue(resp.TenantID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *BundleAutomationDataSourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var requestCatalogID string
	requestCatalogID = r.RequestCatalogID.ValueString()

	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest{
		RequestCatalogID: requestCatalogID,
	}

	return &out, diags
}
