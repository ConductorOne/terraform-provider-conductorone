// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *BundleAutomationDataSourceModel) RefreshFromSharedBundleAutomation(ctx context.Context, resp *shared.BundleAutomation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.CircuitBreaker == nil {
			r.CircuitBreaker = nil
		} else {
			r.CircuitBreaker = &tfTypes.BundleAutomationCircuitBreaker{}
			r.CircuitBreaker.RemovedMembersThresholdPercentage = types.StringPointerValue(resp.CircuitBreaker.RemovedMembersThresholdPercentage)
			if resp.CircuitBreaker.State != nil {
				r.CircuitBreaker.State = types.StringValue(string(*resp.CircuitBreaker.State))
			} else {
				r.CircuitBreaker.State = types.StringNull()
			}
			r.CircuitBreaker.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CircuitBreaker.UpdatedAt))
			if resp.CircuitBreaker.UserRef == nil {
				r.CircuitBreaker.UserRef = nil
			} else {
				r.CircuitBreaker.UserRef = &tfTypes.UserRef{}
				r.CircuitBreaker.UserRef.ID = types.StringPointerValue(resp.CircuitBreaker.UserRef.ID)
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CreateTasks = types.BoolPointerValue(resp.CreateTasks)
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.DisableCircuitBreaker = types.BoolPointerValue(resp.DisableCircuitBreaker)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		if resp.Entitlements == nil {
			r.Entitlements = nil
		} else {
			r.Entitlements = &tfTypes.BundleAutomationRuleEntitlement{}
			if resp.Entitlements.EntitlementRefs != nil {
				r.Entitlements.EntitlementRefs = []tfTypes.AppEntitlementRef{}

				for _, entitlementRefsItem := range resp.Entitlements.EntitlementRefs {
					var entitlementRefs tfTypes.AppEntitlementRef

					entitlementRefs.AppID = types.StringPointerValue(entitlementRefsItem.AppID)
					entitlementRefs.ID = types.StringPointerValue(entitlementRefsItem.ID)

					r.Entitlements.EntitlementRefs = append(r.Entitlements.EntitlementRefs, entitlementRefs)
				}
			}
		}
		r.RequestCatalogID = types.StringPointerValue(resp.RequestCatalogID)
		if resp.State == nil {
			r.State = nil
		} else {
			r.State = &tfTypes.BundleAutomationLastRunState{}
			r.State.ErrorMessage = types.StringPointerValue(resp.State.ErrorMessage)
			r.State.LastRunAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.State.LastRunAt))
			if resp.State.Status != nil {
				r.State.Status = types.StringValue(string(*resp.State.Status))
			} else {
				r.State.Status = types.StringNull()
			}
		}
		r.TenantID = types.StringPointerValue(resp.TenantID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *BundleAutomationDataSourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	requestCatalogID := new(string)
	if !r.RequestCatalogID.IsUnknown() && !r.RequestCatalogID.IsNull() {
		*requestCatalogID = r.RequestCatalogID.ValueString()
	} else {
		requestCatalogID = nil
	}
	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest{
		RequestCatalogID: requestCatalogID,
	}

	return &out, diags
}
