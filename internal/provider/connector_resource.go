// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"conductorone/internal/sdk"
	"conductorone/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"conductorone/internal/sdk/pkg/models/shared"
	"conductorone/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ConnectorResource{}
var _ resource.ResourceWithImportState = &ConnectorResource{}

func NewConnectorResource() resource.Resource {
	return &ConnectorResource{}
}

// ConnectorResource defines the resource implementation.
type ConnectorResource struct {
	client *sdk.ConductoroneAPI
}

// ConnectorResourceModel describes the resource data model.
type ConnectorResourceModel struct {
	AppID               types.String                          `tfsdk:"app_id"`
	AppPath             types.String                          `tfsdk:"app_path"`
	CatalogID           types.String                          `tfsdk:"catalog_id"`
	Config              *ConnectorConfig                      `tfsdk:"config"`
	ConnectorExpandMask *ConnectorExpandMask                  `tfsdk:"connector_expand_mask"`
	ConnectorStatus     *ConnectorStatus                      `tfsdk:"connector_status"`
	ConnectorView       *ConnectorView                        `tfsdk:"connector_view"`
	CreatedAt           types.String                          `tfsdk:"created_at"`
	DeletedAt           types.String                          `tfsdk:"deleted_at"`
	Description         types.String                          `tfsdk:"description"`
	DisplayName         types.String                          `tfsdk:"display_name"`
	DownloadURL         types.String                          `tfsdk:"download_url"`
	Expanded            []ConnectorServiceGetResponseExpanded `tfsdk:"expanded"`
	ID                  types.String                          `tfsdk:"id"`
	OAuth2AuthorizedAs  *OAuth2AuthorizedAs1                  `tfsdk:"o_auth2_authorized_as"`
	UpdatedAt           types.String                          `tfsdk:"updated_at"`
	UserIds             []types.String                        `tfsdk:"user_ids"`
	UsersPath           types.String                          `tfsdk:"users_path"`
}

func (r *ConnectorResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_connector"
}

func (r *ConnectorResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Connector Resource",

		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `The appId field.`,
			},
			"app_path": schema.StringAttribute{
				Computed:    true,
				Description: `The appPath field.`,
			},
			"catalog_id": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `The catalogId field.`,
			},
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"at_type": schema.StringAttribute{
						Computed:    true,
						Description: `The type of the serialized message.`,
					},
					"additional_properties": schema.StringAttribute{
						Optional: true,
						Validators: []validator.String{
							validators.IsValidJSON(),
						},
						Description: `Parsed as JSON.`,
					},
				},
				Description: `Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.`,
			},
			"connector_expand_mask": schema.SingleNestedAttribute{
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"paths": schema.ListAttribute{
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplace(),
						},
						Optional:    true,
						ElementType: types.StringType,
						Description: `The paths field.`,
					},
				},
				Description: `The ConnectorExpandMask message.`,
			},
			"connector_status": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"completed_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"last_error": schema.StringAttribute{
						Computed:    true,
						Description: `The lastError field.`,
					},
					"started_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"status": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"SYNC_STATUS_UNSPECIFIED",
								"SYNC_STATUS_RUNNING",
								"SYNC_STATUS_DONE",
								"SYNC_STATUS_ERROR",
							),
						},
						MarkdownDescription: `must be one of [SYNC_STATUS_UNSPECIFIED, SYNC_STATUS_RUNNING, SYNC_STATUS_DONE, SYNC_STATUS_ERROR]` + "\n" +
							`The status field.`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
				},
				Description: `The ConnectorStatus message.`,
			},
			"connector_view": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"connector": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"connector_status": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"completed_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"last_error": schema.StringAttribute{
										Computed:    true,
										Description: `The lastError field.`,
									},
									"started_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
									"status": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"SYNC_STATUS_UNSPECIFIED",
												"SYNC_STATUS_RUNNING",
												"SYNC_STATUS_DONE",
												"SYNC_STATUS_ERROR",
											),
										},
										MarkdownDescription: `must be one of [SYNC_STATUS_UNSPECIFIED, SYNC_STATUS_RUNNING, SYNC_STATUS_DONE, SYNC_STATUS_ERROR]` + "\n" +
											`The status field.`,
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
								},
								Description: `The ConnectorStatus message.`,
							},
							"o_auth2_authorized_as": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"auth_email": schema.StringAttribute{
										Computed:    true,
										Description: `The authEmail field.`,
									},
									"authorized_at": schema.StringAttribute{
										Computed: true,
										Validators: []validator.String{
											validators.IsRFC3339(),
										},
									},
								},
								Description: `The OAuth2AuthorizedAs message.`,
							},
							"app_id": schema.StringAttribute{
								Computed:    true,
								Description: `The appId field.`,
							},
							"catalog_id": schema.StringAttribute{
								Computed:    true,
								Description: `The catalogId field.`,
							},
							"config": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"at_type": schema.StringAttribute{
										Computed:    true,
										Description: `The type of the serialized message.`,
									},
									"additional_properties": schema.StringAttribute{
										Optional: true,
										Validators: []validator.String{
											validators.IsValidJSON(),
										},
										Description: `Parsed as JSON.`,
									},
								},
								Description: `Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.`,
							},
							"created_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"deleted_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"description": schema.StringAttribute{
								Computed:    true,
								Description: `The description field.`,
							},
							"display_name": schema.StringAttribute{
								Computed:    true,
								Description: `The displayName field.`,
							},
							"download_url": schema.StringAttribute{
								Computed:    true,
								Description: `The downloadUrl field.`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `The id field.`,
							},
							"updated_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"user_ids": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `The userIds field.`,
							},
						},
						Description: `The Connector message.`,
					},
					"app_path": schema.StringAttribute{
						Computed:    true,
						Description: `The appPath field.`,
					},
					"users_path": schema.StringAttribute{
						Computed:    true,
						Description: `The usersPath field.`,
					},
				},
				Description: `The ConnectorView message.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"description": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `The description field.`,
			},
			"display_name": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				Description: `The displayName field.`,
			},
			"download_url": schema.StringAttribute{
				Computed:    true,
				Description: `The downloadUrl field.`,
			},
			"expanded": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"at_type": schema.StringAttribute{
							Computed:    true,
							Description: `The type of the serialized message.`,
						},
					},
				},
				Description: `The expanded field.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id field.`,
			},
			"o_auth2_authorized_as": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"auth_email": schema.StringAttribute{
						Computed:    true,
						Description: `The authEmail field.`,
					},
					"authorized_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
				},
				Description: `The OAuth2AuthorizedAs message.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"user_ids": schema.ListAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplace(),
				},
				Optional:    true,
				ElementType: types.StringType,
				Description: `The userIds field.`,
			},
			"users_path": schema.StringAttribute{
				Computed:    true,
				Description: `The usersPath field.`,
			},
		},
	}
}

func (r *ConnectorResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ConnectorResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ConnectorResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	connectorServiceCreateDelegatedRequest := data.ToCreateSDKType()
	appID := data.AppID.ValueString()
	request := operations.C1APIAppV1ConnectorServiceCreateDelegatedRequest{
		ConnectorServiceCreateDelegatedRequest: connectorServiceCreateDelegatedRequest,
		AppID:                                  appID,
	}
	res, err := r.client.Connector.CreateDelegated(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ConnectorServiceCreateResponse.ConnectorView == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.ConnectorServiceCreateResponse.ConnectorView.Connector)
	if res.ConnectorServiceCreateResponse.ConnectorView.AppPath != nil {
		data.AppPath = types.StringValue(*res.ConnectorServiceCreateResponse.ConnectorView.AppPath)
	} else {
		data.AppPath = types.StringNull()
	}
	if res.ConnectorServiceCreateResponse.ConnectorView.UsersPath != nil {
		data.UsersPath = types.StringValue(*res.ConnectorServiceCreateResponse.ConnectorView.UsersPath)
	} else {
		data.UsersPath = types.StringNull()
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectorResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ConnectorResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	appID := data.AppID.ValueString()
	id := data.ID.ValueString()
	request := operations.C1APIAppV1ConnectorServiceGetRequest{
		AppID: appID,
		ID:    id,
	}
	res, err := r.client.Connector.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.ConnectorServiceGetResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.ConnectorServiceGetResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectorResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ConnectorResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ConnectorResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ConnectorResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var connectorServiceDeleteRequest *shared.ConnectorServiceDeleteRequest
	connectorServiceDeleteRequest = &shared.ConnectorServiceDeleteRequest{}
	appID := data.AppID.ValueString()
	id := data.ID.ValueString()
	request := operations.C1APIAppV1ConnectorServiceDeleteRequest{
		ConnectorServiceDeleteRequest: connectorServiceDeleteRequest,
		AppID:                         appID,
		ID:                            id,
	}
	res, err := r.client.Connector.Delete(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ConnectorResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource connector.")
}
