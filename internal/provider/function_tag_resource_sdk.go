// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FunctionTagResourceModel) RefreshFromSharedFunctionsServiceCreateTagResponse(ctx context.Context, resp *shared.FunctionsServiceCreateTagResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *FunctionTagResourceModel) RefreshFromSharedFunctionsServiceListTagsResponse(ctx context.Context, resp *shared.FunctionsServiceListTagsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Tags != nil {
			r.Tags = make(map[string]tfTypes.FunctionCommit, len(resp.Tags))
			for functionCommitKey, functionCommitValue := range resp.Tags {
				var functionCommitResult tfTypes.FunctionCommit
				functionCommitResult.Author = types.StringPointerValue(functionCommitValue.Author)
				functionCommitResult.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(functionCommitValue.CreatedAt))
				functionCommitResult.FunctionID = types.StringPointerValue(functionCommitValue.FunctionID)
				functionCommitResult.ID = types.StringPointerValue(functionCommitValue.ID)
				functionCommitResult.Message = types.StringPointerValue(functionCommitValue.Message)

				r.Tags[functionCommitKey] = functionCommitResult
			}
		}
	}

	return diags
}

func (r *FunctionTagResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceCreateTagRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceCreateTagRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	functionID := new(string)
	if !r.FunctionID.IsUnknown() && !r.FunctionID.IsNull() {
		*functionID = r.FunctionID.ValueString()
	} else {
		functionID = nil
	}
	functionsServiceCreateTagRequest, functionsServiceCreateTagRequestDiags := r.ToSharedFunctionsServiceCreateTagRequest(ctx)
	diags.Append(functionsServiceCreateTagRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIFunctionsV1FunctionsServiceCreateTagRequest{
		FunctionID:                       functionID,
		FunctionsServiceCreateTagRequest: functionsServiceCreateTagRequest,
	}

	return &out, diags
}

func (r *FunctionTagResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceListTagsRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceListTagsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	functionID := new(string)
	if !r.FunctionID.IsUnknown() && !r.FunctionID.IsNull() {
		*functionID = r.FunctionID.ValueString()
	} else {
		functionID = nil
	}
	out := operations.C1APIFunctionsV1FunctionsServiceListTagsRequest{
		FunctionID: functionID,
	}

	return &out, diags
}

func (r *FunctionTagResourceModel) ToSharedFunctionsServiceCreateTagRequest(ctx context.Context) (*shared.FunctionsServiceCreateTagRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	commitID := new(string)
	if !r.CommitID.IsUnknown() && !r.CommitID.IsNull() {
		*commitID = r.CommitID.ValueString()
	} else {
		commitID = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	out := shared.FunctionsServiceCreateTagRequest{
		CommitID: commitID,
		Name:     name,
	}

	return &out, diags
}
