// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppsDataSource{}
var _ datasource.DataSourceWithConfigure = &AppsDataSource{}

func NewAppsDataSource() datasource.DataSource {
	return &AppsDataSource{}
}

// AppsDataSource is the data source implementation.
type AppsDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// AppsDataSourceModel describes the data model.
type AppsDataSourceModel struct {
	AppIds          []types.String      `tfsdk:"app_ids"`
	DisplayName     types.String        `tfsdk:"display_name"`
	ExcludeAppIds   []types.String      `tfsdk:"exclude_app_ids"`
	List            []tfTypes.App       `tfsdk:"list"`
	NextPageToken   types.String        `tfsdk:"next_page_token"`
	OnlyDirectories types.Bool          `tfsdk:"only_directories"`
	PageSize        types.Int32         `tfsdk:"page_size"`
	PageToken       types.String        `tfsdk:"page_token"`
	PolicyRefs      []tfTypes.PolicyRef `tfsdk:"policy_refs"`
	Query           types.String        `tfsdk:"query"`
}

// Metadata returns the data source type name.
func (r *AppsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_apps"
}

// Schema defines the schema for the data source.
func (r *AppsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Apps DataSource",

		Attributes: map[string]schema.Attribute{
			"app_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of app IDs to restrict the search to.`,
			},
			"display_name": schema.StringAttribute{
				Optional:    true,
				Description: `Search for apps with a case insensitive match on the display name.`,
			},
			"exclude_app_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `A list of app IDs to remove from the results.`,
			},
			"list": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_account_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the Account named by AccountName.`,
						},
						"app_account_name": schema.StringAttribute{
							Computed:    true,
							Description: `The AccountName of the app. For example, AWS is AccountID, Github is Org Name, and Okta is Okta Subdomain.`,
						},
						"certify_policy_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the Certify Policy associated with this App.`,
						},
						"connector_version": schema.Int64Attribute{
							Computed:    true,
							Description: `The connectorVersion field.`,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"default_request_catalog_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID for the default request catalog for this app.`,
						},
						"deleted_at": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `The app's description.`,
						},
						"display_name": schema.StringAttribute{
							Computed:    true,
							Description: `The app's display name.`,
						},
						"grant_policy_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the Grant Policy associated with this App.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the app.`,
						},
						"identity_matching": schema.StringAttribute{
							Computed:    true,
							Description: `The identityMatching field.`,
						},
						"instructions": schema.StringAttribute{
							Computed:    true,
							Description: `If you add instructions here, they will be shown to users in the access request form when requesting access for this app.`,
						},
						"is_directory": schema.BoolAttribute{
							Computed:    true,
							Description: `Specifies if the app is a directory.`,
						},
						"is_manually_managed": schema.BoolAttribute{
							Computed:    true,
							Description: `The isManuallyManaged field.`,
						},
						"monthly_cost_usd": schema.Int32Attribute{
							Computed:    true,
							Description: `The cost of an app per-seat, so that total cost can be calculated by the grant count.`,
						},
						"parent_app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the app that created this app, if any.`,
						},
						"revoke_policy_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the Revoke Policy associated with this App.`,
						},
						"strict_access_entitlement_provisioning": schema.BoolAttribute{
							Computed:    true,
							Description: `The strictAccessEntitlementProvisioning field.`,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
						"user_count": schema.StringAttribute{
							Computed:    true,
							Description: `The number of users with grants to this app.`,
						},
					},
				},
				Description: `The list of results containing up to X results, where X is the page size defined in the request.`,
			},
			"next_page_token": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `The nextPageToken is shown for the next page if the number of results is larger than the max page size.` + "\n" +
					` The server returns one page of results and the nextPageToken until all results are retreived.` + "\n" +
					` To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.`,
			},
			"only_directories": schema.BoolAttribute{
				Optional:    true,
				Description: `Only return apps which are directories`,
			},
			"page_size": schema.Int32Attribute{
				Optional:    true,
				Description: `The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)`,
			},
			"page_token": schema.StringAttribute{
				Optional:    true,
				Description: `The pageToken field.`,
			},
			"policy_refs": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Optional:    true,
							Description: `The id field.`,
						},
					},
				},
				Description: `Search for apps that use any of these policies.`,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `Query the apps with a fuzzy search on display name and description.`,
			},
		},
	}
}

func (r *AppsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedSearchAppsRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppSearch.Search(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SearchAppsResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSearchAppsResponse(ctx, res.SearchAppsResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}
	for {
		res, err := res.Next()

		if err != nil {
			resp.Diagnostics.AddError(fmt.Sprintf("failed to retrieve next page of results: %v", err), debugResponse(res.RawResponse))
			return
		}

		if res == nil {
			break
		}

		resp.Diagnostics.Append(data.RefreshFromSharedSearchAppsResponse(ctx, res.SearchAppsResponse)...)

		if resp.Diagnostics.HasError() {
			return
		}
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
