// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FunctionCommitResourceModel) RefreshFromSharedFunctionsServiceCommitResponse(ctx context.Context, resp *shared.FunctionsServiceCommitResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Commit == nil {
			r.Commit = nil
		} else {
			r.Commit = &tfTypes.FunctionCommit{}
			r.Commit.Author = types.StringPointerValue(resp.Commit.Author)
			r.Commit.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Commit.CreatedAt))
			r.Commit.FunctionID = types.StringPointerValue(resp.Commit.FunctionID)
			r.Commit.ID = types.StringPointerValue(resp.Commit.ID)
			r.Commit.Message = types.StringPointerValue(resp.Commit.Message)
		}
	}

	return diags
}

func (r *FunctionCommitResourceModel) RefreshFromSharedFunctionsServiceGetCommitResponse(ctx context.Context, resp *shared.FunctionsServiceGetCommitResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Commit == nil {
			r.Commit = nil
		} else {
			r.Commit = &tfTypes.FunctionCommit{}
			r.Commit.Author = types.StringPointerValue(resp.Commit.Author)
			r.Commit.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.Commit.CreatedAt))
			r.Commit.FunctionID = types.StringPointerValue(resp.Commit.FunctionID)
			r.Commit.ID = types.StringPointerValue(resp.Commit.ID)
			r.Commit.Message = types.StringPointerValue(resp.Commit.Message)
		}
		if resp.Content != nil {
			r.Content = make(map[string]types.String, len(resp.Content))
			for key, value := range resp.Content {
				r.Content[key] = types.StringValue(value)
			}
		}
	}

	return diags
}

func (r *FunctionCommitResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceCommitRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceCommitRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	functionID := new(string)
	if !r.FunctionID.IsUnknown() && !r.FunctionID.IsNull() {
		*functionID = r.FunctionID.ValueString()
	} else {
		functionID = nil
	}
	functionsServiceCommitRequest, functionsServiceCommitRequestDiags := r.ToSharedFunctionsServiceCommitRequest(ctx)
	diags.Append(functionsServiceCommitRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIFunctionsV1FunctionsServiceCommitRequest{
		FunctionID:                    functionID,
		FunctionsServiceCommitRequest: functionsServiceCommitRequest,
	}

	return &out, diags
}

func (r *FunctionCommitResourceModel) ToOperationsC1APIFunctionsV1FunctionsServiceGetCommitRequest(ctx context.Context) (*operations.C1APIFunctionsV1FunctionsServiceGetCommitRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	functionID := new(string)
	if !r.FunctionID.IsUnknown() && !r.FunctionID.IsNull() {
		*functionID = r.FunctionID.ValueString()
	} else {
		functionID = nil
	}
	id := new(string)
	if !r.Commit.ID.IsUnknown() && !r.Commit.ID.IsNull() {
		*id = r.Commit.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIFunctionsV1FunctionsServiceGetCommitRequest{
		FunctionID: functionID,
		ID:         id,
	}

	return &out, diags
}

func (r *FunctionCommitResourceModel) ToSharedFunctionsServiceCommitRequest(ctx context.Context) (*shared.FunctionsServiceCommitRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	commitMessage := new(string)
	if !r.CommitMessage.IsUnknown() && !r.CommitMessage.IsNull() {
		*commitMessage = r.CommitMessage.ValueString()
	} else {
		commitMessage = nil
	}
	content := make(map[string]string)
	for contentKey, contentValue := range r.Content {
		var contentInst string
		contentInst = contentValue.ValueString()

		content[contentKey] = contentInst
	}
	out := shared.FunctionsServiceCommitRequest{
		CommitMessage: commitMessage,
		Content:       content,
	}

	return &out, diags
}
