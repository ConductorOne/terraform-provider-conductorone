// Generated by tf-integration-gen. DO NOT EDIT.
package provider

import (
	"fmt"
	"strconv"
	"time"

	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"

	"github.com/hashicorp/terraform-plugin-framework/types"
)

const azureInfrastructureCatalogID = "2tMxr4AY9cMBAgP9Apjv0d7UQUu"

func (r *IntegrationAzureInfrastructureResourceModel) ToCreateDelegatedSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	catalogID := sdk.String(azureInfrastructureCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.ConnectorServiceCreateDelegatedRequest{
		DisplayName: sdk.String("Azure Infrastructure"),
		CatalogID:   catalogID,
		UserIds:     userIds,
	}
	return &out
}

func (r *IntegrationAzureInfrastructureResourceModel) ToCreateSDKType() (*shared.ConnectorServiceCreateRequest, error) {
	catalogID := sdk.String(azureInfrastructureCatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configOut, configSet := r.getConfig()
	if !configSet {
		return nil, fmt.Errorf("config must be set for create request")
	}

	out := shared.ConnectorServiceCreateRequest{
		CatalogID: catalogID,
		UserIds:   userIds,
		Config: &shared.ConnectorServiceCreateRequestConfig{
			AtType: sdk.String(envConfigType),
			AdditionalProperties: map[string]interface{}{
				"configuration": configOut,
			},
		},
	}
	return &out, nil
}

func (r *IntegrationAzureInfrastructureResourceModel) ToUpdateSDKType() (*shared.ConnectorInput, bool) {
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configValues := r.populateConfig()

	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}

	out := shared.ConnectorInput{
		DisplayName: sdk.String("Azure Infrastructure"),
		AppID:       sdk.String(r.AppID.ValueString()),
		CatalogID:   sdk.String(azureInfrastructureCatalogID),
		ID:          sdk.String(r.ID.ValueString()),
		UserIds:     userIds,
		Config:      makeConnectorConfig(configOut),
	}

	return &out, configSet
}

func (r *IntegrationAzureInfrastructureResourceModel) populateConfig() map[string]interface{} {
	configValues := make(map[string]interface{})

	azureClientId := new(string)
	if !r.AzureClientId.IsUnknown() && !r.AzureClientId.IsNull() {
		*azureClientId = r.AzureClientId.ValueString()
		configValues["azure-client-id"] = azureClientId
	}

	azureClientSecret := new(string)
	if !r.AzureClientSecret.IsUnknown() && !r.AzureClientSecret.IsNull() {
		*azureClientSecret = r.AzureClientSecret.ValueString()
		configValues["azure-client-secret"] = azureClientSecret
	}

	azureTenantId := new(string)
	if !r.AzureTenantId.IsUnknown() && !r.AzureTenantId.IsNull() {
		*azureTenantId = r.AzureTenantId.ValueString()
		configValues["azure-tenant-id"] = azureTenantId
	}

	mailboxSettings := new(string)
	if !r.MailboxSettings.IsUnknown() && !r.MailboxSettings.IsNull() {
		*mailboxSettings = strconv.FormatBool(r.MailboxSettings.ValueBool())
		configValues["mailboxSettings"] = mailboxSettings
	}

	skipAdGroups := new(string)
	if !r.SkipAdGroups.IsUnknown() && !r.SkipAdGroups.IsNull() {
		*skipAdGroups = strconv.FormatBool(r.SkipAdGroups.ValueBool())
		configValues["skip-ad-groups"] = skipAdGroups
	}

	graphDomain := new(string)
	if !r.GraphDomain.IsUnknown() && !r.GraphDomain.IsNull() {
		*graphDomain = r.GraphDomain.ValueString()
		configValues["graph-domain"] = graphDomain
	}

	skipUnusedRoles := new(string)
	if !r.SkipUnusedRoles.IsUnknown() && !r.SkipUnusedRoles.IsNull() {
		*skipUnusedRoles = strconv.FormatBool(r.SkipUnusedRoles.ValueBool())
		configValues["skip-unused-roles"] = skipUnusedRoles
	}

	skipSyncStorageContainers := new(string)
	if !r.SkipSyncStorageContainers.IsUnknown() && !r.SkipSyncStorageContainers.IsNull() {
		*skipSyncStorageContainers = strconv.FormatBool(r.SkipSyncStorageContainers.ValueBool())
		configValues["skip-sync-storage-containers"] = skipSyncStorageContainers
	}

	return configValues
}

func (r *IntegrationAzureInfrastructureResourceModel) getConfig() (map[string]interface{}, bool) {
	configValues := r.populateConfig()
	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}
	return configOut, configSet
}

func (r *IntegrationAzureInfrastructureResourceModel) ToGetSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationAzureInfrastructureResourceModel) ToDeleteSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationAzureInfrastructureResourceModel) RefreshFromGetResponse(resp *shared.Connector) {
	if resp == nil {
		return
	}
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}

	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if val, ok := getStringValue(values, "azure-client-id"); ok {
					r.AzureClientId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "azure-tenant-id"); ok {
					r.AzureTenantId = types.StringValue(val)
				}

				if _, ok := configValues["mailboxSettings"]; ok {
					if val, ok := getStringValue(values, "mailboxSettings"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.MailboxSettings = types.BoolValue(bv)
						}
					}
				}

				if _, ok := configValues["skip-ad-groups"]; ok {
					if val, ok := getStringValue(values, "skip-ad-groups"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.SkipAdGroups = types.BoolValue(bv)
						}
					}
				}

				if val, ok := getStringValue(values, "graph-domain"); ok {
					r.GraphDomain = types.StringValue(val)
				}

				if _, ok := configValues["skip-unused-roles"]; ok {
					if val, ok := getStringValue(values, "skip-unused-roles"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.SkipUnusedRoles = types.BoolValue(bv)
						}
					}
				}

				if _, ok := configValues["skip-sync-storage-containers"]; ok {
					if val, ok := getStringValue(values, "skip-sync-storage-containers"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.SkipSyncStorageContainers = types.BoolValue(bv)
						}
					}
				}

			}
		}
	}
}

func (r *IntegrationAzureInfrastructureResourceModel) RefreshFromUpdateResponse(resp *shared.Connector) {
	r.RefreshFromGetResponse(resp)
}

func (r *IntegrationAzureInfrastructureResourceModel) RefreshFromCreateResponse(resp *shared.Connector) {
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if val, ok := getStringValue(values, "azure-client-id"); ok {
					r.AzureClientId = types.StringValue(val)
				}

				if val, ok := getStringValue(values, "azure-tenant-id"); ok {
					r.AzureTenantId = types.StringValue(val)
				}

				if _, ok := configValues["mailboxSettings"]; ok {
					if val, ok := getStringValue(values, "mailboxSettings"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.MailboxSettings = types.BoolValue(bv)
						}
					}
				}

				if _, ok := configValues["skip-ad-groups"]; ok {
					if val, ok := getStringValue(values, "skip-ad-groups"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.SkipAdGroups = types.BoolValue(bv)
						}
					}
				}

				if val, ok := getStringValue(values, "graph-domain"); ok {
					r.GraphDomain = types.StringValue(val)
				}

				if _, ok := configValues["skip-unused-roles"]; ok {
					if val, ok := getStringValue(values, "skip-unused-roles"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.SkipUnusedRoles = types.BoolValue(bv)
						}
					}
				}

				if _, ok := configValues["skip-sync-storage-containers"]; ok {
					if val, ok := getStringValue(values, "skip-sync-storage-containers"); ok {
						bv, err := strconv.ParseBool(val)
						if err == nil {
							r.SkipSyncStorageContainers = types.BoolValue(bv)
						}
					}
				}

			}
		}
	}
}
