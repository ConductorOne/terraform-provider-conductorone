// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AccessReviewTemplateResourceModel) RefreshFromSharedAccessReviewTemplate(ctx context.Context, resp *shared.AccessReviewTemplate) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AccessReviewDuration = types.StringPointerValue(resp.AccessReviewDuration)
		if resp.AccessReviewInclusionScope == nil {
			r.AccessReviewInclusionScope = nil
		} else {
			r.AccessReviewInclusionScope = &tfTypes.AccessReviewInclusionScope{}
			if resp.AccessReviewInclusionScope.AppUserStatuses != nil {
				r.AccessReviewInclusionScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewInclusionScope.AppUserStatuses))
				for _, v := range resp.AccessReviewInclusionScope.AppUserStatuses {
					r.AccessReviewInclusionScope.AppUserStatuses = append(r.AccessReviewInclusionScope.AppUserStatuses, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewInclusionScope.AppUserTypes != nil {
				r.AccessReviewInclusionScope.AppUserTypes = make([]types.String, 0, len(resp.AccessReviewInclusionScope.AppUserTypes))
				for _, v := range resp.AccessReviewInclusionScope.AppUserTypes {
					r.AccessReviewInclusionScope.AppUserTypes = append(r.AccessReviewInclusionScope.AppUserTypes, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewInclusionScope.ManagerIds != nil {
				r.AccessReviewInclusionScope.ManagerIds = make([]types.String, 0, len(resp.AccessReviewInclusionScope.ManagerIds))
				for _, v := range resp.AccessReviewInclusionScope.ManagerIds {
					r.AccessReviewInclusionScope.ManagerIds = append(r.AccessReviewInclusionScope.ManagerIds, types.StringValue(v))
				}
			}
			if len(resp.AccessReviewInclusionScope.MultiUserProfileAttributes) > 0 {
				r.AccessReviewInclusionScope.MultiUserProfileAttributes = make(map[string]tfTypes.IncludedUserAttributeValues, len(resp.AccessReviewInclusionScope.MultiUserProfileAttributes))
				for includedUserAttributeValuesKey, includedUserAttributeValuesValue := range resp.AccessReviewInclusionScope.MultiUserProfileAttributes {
					var includedUserAttributeValuesResult tfTypes.IncludedUserAttributeValues
					if includedUserAttributeValuesValue.Values != nil {
						includedUserAttributeValuesResult.Values = []tfTypes.IncludedUserAttributeValue{}

						for _, valuesItem := range includedUserAttributeValuesValue.Values {
							var values tfTypes.IncludedUserAttributeValue

							values.Value = types.StringPointerValue(valuesItem.Value)

							includedUserAttributeValuesResult.Values = append(includedUserAttributeValuesResult.Values, values)
						}
					}

					r.AccessReviewInclusionScope.MultiUserProfileAttributes[includedUserAttributeValuesKey] = includedUserAttributeValuesResult
				}
			}
			r.AccessReviewInclusionScope.NoAccountOwners = types.BoolPointerValue(resp.AccessReviewInclusionScope.NoAccountOwners)
			if resp.AccessReviewInclusionScope.UserIds != nil {
				r.AccessReviewInclusionScope.UserIds = make([]types.String, 0, len(resp.AccessReviewInclusionScope.UserIds))
				for _, v := range resp.AccessReviewInclusionScope.UserIds {
					r.AccessReviewInclusionScope.UserIds = append(r.AccessReviewInclusionScope.UserIds, types.StringValue(v))
				}
			}
			if resp.AccessReviewInclusionScope.UserStatuses != nil {
				r.AccessReviewInclusionScope.UserStatuses = make([]types.String, 0, len(resp.AccessReviewInclusionScope.UserStatuses))
				for _, v := range resp.AccessReviewInclusionScope.UserStatuses {
					r.AccessReviewInclusionScope.UserStatuses = append(r.AccessReviewInclusionScope.UserStatuses, types.StringValue(string(v)))
				}
			}
		}
		if resp.AccessReviewScopeV2 == nil {
			r.AccessReviewScopeV2 = nil
		} else {
			r.AccessReviewScopeV2 = &tfTypes.AccessReviewScopeV2{}
			if resp.AccessReviewScopeV2.AccountCriteriaScope == nil {
				r.AccessReviewScopeV2.AccountCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.AccountCriteriaScope = &tfTypes.AccountCriteriaScope{}
				if resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes != nil {
					r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes = make([]types.String, 0, len(resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes))
					for _, v := range resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes {
						r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes = append(r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes, types.StringValue(string(v)))
					}
				}
				if resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses != nil {
					r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses))
					for _, v := range resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses {
						r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses = append(r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses, types.StringValue(string(v)))
					}
				}
				r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner = types.BoolPointerValue(resp.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner)
			}
			if resp.AccessReviewScopeV2.AllAccountsScope == nil {
				r.AccessReviewScopeV2.AllAccountsScope = nil
			} else {
				r.AccessReviewScopeV2.AllAccountsScope = &tfTypes.AllAccountsScope{}
			}
			if resp.AccessReviewScopeV2.AllGrantsScope == nil {
				r.AccessReviewScopeV2.AllGrantsScope = nil
			} else {
				r.AccessReviewScopeV2.AllGrantsScope = &tfTypes.AllGrantsScope{}
			}
			if resp.AccessReviewScopeV2.AllUsersScope == nil {
				r.AccessReviewScopeV2.AllUsersScope = nil
			} else {
				r.AccessReviewScopeV2.AllUsersScope = &tfTypes.AllUsersScope{}
			}
			if resp.AccessReviewScopeV2.ApplicationAccessScope == nil {
				r.AccessReviewScopeV2.ApplicationAccessScope = nil
			} else {
				r.AccessReviewScopeV2.ApplicationAccessScope = &tfTypes.ApplicationAccessScope{}
			}
			if resp.AccessReviewScopeV2.AppSelectionCriteriaScope == nil {
				r.AccessReviewScopeV2.AppSelectionCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.AppSelectionCriteriaScope = &tfTypes.AppSelectionCriteriaScope{}
			}
			if resp.AccessReviewScopeV2.GrantsByCriteriaScope == nil {
				r.AccessReviewScopeV2.GrantsByCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.GrantsByCriteriaScope = &tfTypes.GrantsByCriteriaScope{}
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded)
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed)
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed)
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter == nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter = nil
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter = &tfTypes.GrantAccessProfileFilter{}
					if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds != nil {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds))
						for _, v := range resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds {
							r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds = append(r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds, types.StringValue(v))
						}
					}
					if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType != nil {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType))
					} else {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType = types.StringNull()
					}
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween == nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween = nil
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween = &tfTypes.GrantsAddedBetween{}
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate))
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate))
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter != nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter))
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter = types.StringNull()
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter != nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter))
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter = types.StringNull()
				}
			}
			if resp.AccessReviewScopeV2.ResourceTypeSelectionScope == nil {
				r.AccessReviewScopeV2.ResourceTypeSelectionScope = nil
			} else {
				r.AccessReviewScopeV2.ResourceTypeSelectionScope = &tfTypes.ResourceTypeSelectionScope{}
			}
			if resp.AccessReviewScopeV2.SelectedUsersScope == nil {
				r.AccessReviewScopeV2.SelectedUsersScope = nil
			} else {
				r.AccessReviewScopeV2.SelectedUsersScope = &tfTypes.SelectedUsersScope{}
				if resp.AccessReviewScopeV2.SelectedUsersScope.UserIds != nil {
					r.AccessReviewScopeV2.SelectedUsersScope.UserIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.SelectedUsersScope.UserIds))
					for _, v := range resp.AccessReviewScopeV2.SelectedUsersScope.UserIds {
						r.AccessReviewScopeV2.SelectedUsersScope.UserIds = append(r.AccessReviewScopeV2.SelectedUsersScope.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.AccessReviewScopeV2.SpecificResourcesScope == nil {
				r.AccessReviewScopeV2.SpecificResourcesScope = nil
			} else {
				r.AccessReviewScopeV2.SpecificResourcesScope = &tfTypes.SpecificResourcesScope{}
			}
			if resp.AccessReviewScopeV2.UserCriteriaScope == nil {
				r.AccessReviewScopeV2.UserCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.UserCriteriaScope = &tfTypes.UserCriteriaScope{}
				if resp.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef = []tfTypes.AppEntitlementRef{}

					for _, groupAppEntitlementsRefItem := range resp.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef {
						var groupAppEntitlementsRef tfTypes.AppEntitlementRef

						groupAppEntitlementsRef.AppID = types.StringPointerValue(groupAppEntitlementsRefItem.AppID)
						groupAppEntitlementsRef.ID = types.StringPointerValue(groupAppEntitlementsRefItem.ID)

						r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef = append(r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef, groupAppEntitlementsRef)
					}
				}
				if resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds))
					for _, v := range resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds {
						r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds = append(r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds, types.StringValue(v))
					}
				}
				if len(resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes) > 0 {
					r.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes = make(map[string]tfTypes.IncludedUserAttributeValues, len(resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes))
					for includedUserAttributeValuesKey1, includedUserAttributeValuesValue1 := range resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes {
						var includedUserAttributeValuesResult1 tfTypes.IncludedUserAttributeValues
						if includedUserAttributeValuesValue1.Values != nil {
							includedUserAttributeValuesResult1.Values = []tfTypes.IncludedUserAttributeValue{}

							for _, valuesItem1 := range includedUserAttributeValuesValue1.Values {
								var values1 tfTypes.IncludedUserAttributeValue

								values1.Value = types.StringPointerValue(valuesItem1.Value)

								includedUserAttributeValuesResult1.Values = append(includedUserAttributeValuesResult1.Values, values1)
							}
						}

						r.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes[includedUserAttributeValuesKey1] = includedUserAttributeValuesResult1
					}
				}
				if resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.UserStatus = make([]types.String, 0, len(resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus))
					for _, v := range resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus {
						r.AccessReviewScopeV2.UserCriteriaScope.UserStatus = append(r.AccessReviewScopeV2.UserCriteriaScope.UserStatus, types.StringValue(string(v)))
					}
				}
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.DefaultView != nil {
			r.DefaultView = types.StringValue(string(*resp.DefaultView))
		} else {
			r.DefaultView = types.StringNull()
		}
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsCampaignScheduleEnabled = types.BoolPointerValue(resp.IsCampaignScheduleEnabled)
		r.NextScheduledCampaignAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.NextScheduledCampaignAt))
		r.Occurrences = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.Occurrences))
		r.PolicyID = types.StringPointerValue(resp.PolicyID)
		if resp.RecurrenceRule == nil {
			r.RecurrenceRule = nil
		} else {
			r.RecurrenceRule = &tfTypes.RecurrenceRule{}
			r.RecurrenceRule.EndDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.RecurrenceRule.EndDate))
			if resp.RecurrenceRule.Frequency != nil {
				r.RecurrenceRule.Frequency = types.StringValue(string(*resp.RecurrenceRule.Frequency))
			} else {
				r.RecurrenceRule.Frequency = types.StringNull()
			}
			r.RecurrenceRule.Interval = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.RecurrenceRule.Interval))
			r.RecurrenceRule.Occurrences = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.RecurrenceRule.Occurrences))
			r.RecurrenceRule.StartDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.RecurrenceRule.StartDate))
		}
		r.ReviewInstructions = types.StringPointerValue(resp.ReviewInstructions)
		if resp.SlackChannel == nil {
			r.SlackChannel = nil
		} else {
			r.SlackChannel = &tfTypes.SlackChannel{}
			r.SlackChannel.Description = types.StringPointerValue(resp.SlackChannel.Description)
			r.SlackChannel.Name = types.StringPointerValue(resp.SlackChannel.Name)
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.UsePolicyOverride = types.BoolPointerValue(resp.UsePolicyOverride)
	}

	return diags
}

func (r *AccessReviewTemplateResourceModel) ToOperationsC1APIAccessreviewV1AccessReviewTemplateServiceDeleteRequest(ctx context.Context) (*operations.C1APIAccessreviewV1AccessReviewTemplateServiceDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIAccessreviewV1AccessReviewTemplateServiceDeleteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AccessReviewTemplateResourceModel) ToOperationsC1APIAccessreviewV1AccessReviewTemplateServiceGetRequest(ctx context.Context) (*operations.C1APIAccessreviewV1AccessReviewTemplateServiceGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIAccessreviewV1AccessReviewTemplateServiceGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AccessReviewTemplateResourceModel) ToOperationsC1APIAccessreviewV1AccessReviewTemplateServiceUpdateRequest(ctx context.Context) (*operations.C1APIAccessreviewV1AccessReviewTemplateServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	accessReviewTemplateServiceUpdateRequest, accessReviewTemplateServiceUpdateRequestDiags := r.ToSharedAccessReviewTemplateServiceUpdateRequest(ctx)
	diags.Append(accessReviewTemplateServiceUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAccessreviewV1AccessReviewTemplateServiceUpdateRequest{
		ID:                                       id,
		AccessReviewTemplateServiceUpdateRequest: accessReviewTemplateServiceUpdateRequest,
	}

	return &out, diags
}

func (r *AccessReviewTemplateResourceModel) ToSharedAccessReviewTemplateInput(ctx context.Context) (*shared.AccessReviewTemplateInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessReviewDuration := new(string)
	if !r.AccessReviewDuration.IsUnknown() && !r.AccessReviewDuration.IsNull() {
		*accessReviewDuration = r.AccessReviewDuration.ValueString()
	} else {
		accessReviewDuration = nil
	}
	defaultView := new(shared.AccessReviewTemplateDefaultView)
	if !r.DefaultView.IsUnknown() && !r.DefaultView.IsNull() {
		*defaultView = shared.AccessReviewTemplateDefaultView(r.DefaultView.ValueString())
	} else {
		defaultView = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var accessReviewInclusionScope *shared.AccessReviewInclusionScope
	if r.AccessReviewInclusionScope != nil {
		var appUserStatuses []shared.AccessReviewInclusionScopeAppUserStatuses
		if r.AccessReviewInclusionScope.AppUserStatuses != nil {
			appUserStatuses = make([]shared.AccessReviewInclusionScopeAppUserStatuses, 0, len(r.AccessReviewInclusionScope.AppUserStatuses))
			for _, appUserStatusesItem := range r.AccessReviewInclusionScope.AppUserStatuses {
				appUserStatuses = append(appUserStatuses, shared.AccessReviewInclusionScopeAppUserStatuses(appUserStatusesItem.ValueString()))
			}
		}
		var appUserTypes []shared.AccessReviewInclusionScopeAppUserTypes
		if r.AccessReviewInclusionScope.AppUserTypes != nil {
			appUserTypes = make([]shared.AccessReviewInclusionScopeAppUserTypes, 0, len(r.AccessReviewInclusionScope.AppUserTypes))
			for _, appUserTypesItem := range r.AccessReviewInclusionScope.AppUserTypes {
				appUserTypes = append(appUserTypes, shared.AccessReviewInclusionScopeAppUserTypes(appUserTypesItem.ValueString()))
			}
		}
		var managerIds []string
		if r.AccessReviewInclusionScope.ManagerIds != nil {
			managerIds = make([]string, 0, len(r.AccessReviewInclusionScope.ManagerIds))
			for _, managerIdsItem := range r.AccessReviewInclusionScope.ManagerIds {
				managerIds = append(managerIds, managerIdsItem.ValueString())
			}
		}
		multiUserProfileAttributes := make(map[string]shared.IncludedUserAttributeValues)
		for multiUserProfileAttributesKey, multiUserProfileAttributesValue := range r.AccessReviewInclusionScope.MultiUserProfileAttributes {
			var values []shared.IncludedUserAttributeValue
			if multiUserProfileAttributesValue.Values != nil {
				values = make([]shared.IncludedUserAttributeValue, 0, len(multiUserProfileAttributesValue.Values))
				for _, valuesItem := range multiUserProfileAttributesValue.Values {
					value := new(string)
					if !valuesItem.Value.IsUnknown() && !valuesItem.Value.IsNull() {
						*value = valuesItem.Value.ValueString()
					} else {
						value = nil
					}
					values = append(values, shared.IncludedUserAttributeValue{
						Value: value,
					})
				}
			}
			multiUserProfileAttributesInst := shared.IncludedUserAttributeValues{
				Values: values,
			}
			multiUserProfileAttributes[multiUserProfileAttributesKey] = multiUserProfileAttributesInst
		}
		noAccountOwners := new(bool)
		if !r.AccessReviewInclusionScope.NoAccountOwners.IsUnknown() && !r.AccessReviewInclusionScope.NoAccountOwners.IsNull() {
			*noAccountOwners = r.AccessReviewInclusionScope.NoAccountOwners.ValueBool()
		} else {
			noAccountOwners = nil
		}
		var userIds []string
		if r.AccessReviewInclusionScope.UserIds != nil {
			userIds = make([]string, 0, len(r.AccessReviewInclusionScope.UserIds))
			for _, userIdsItem := range r.AccessReviewInclusionScope.UserIds {
				userIds = append(userIds, userIdsItem.ValueString())
			}
		}
		var userStatuses []shared.UserStatuses
		if r.AccessReviewInclusionScope.UserStatuses != nil {
			userStatuses = make([]shared.UserStatuses, 0, len(r.AccessReviewInclusionScope.UserStatuses))
			for _, userStatusesItem := range r.AccessReviewInclusionScope.UserStatuses {
				userStatuses = append(userStatuses, shared.UserStatuses(userStatusesItem.ValueString()))
			}
		}
		accessReviewInclusionScope = &shared.AccessReviewInclusionScope{
			AppUserStatuses:            appUserStatuses,
			AppUserTypes:               appUserTypes,
			ManagerIds:                 managerIds,
			MultiUserProfileAttributes: multiUserProfileAttributes,
			NoAccountOwners:            noAccountOwners,
			UserIds:                    userIds,
			UserStatuses:               userStatuses,
		}
	}
	isCampaignScheduleEnabled := new(bool)
	if !r.IsCampaignScheduleEnabled.IsUnknown() && !r.IsCampaignScheduleEnabled.IsNull() {
		*isCampaignScheduleEnabled = r.IsCampaignScheduleEnabled.ValueBool()
	} else {
		isCampaignScheduleEnabled = nil
	}
	nextScheduledCampaignAt := new(time.Time)
	if !r.NextScheduledCampaignAt.IsUnknown() && !r.NextScheduledCampaignAt.IsNull() {
		*nextScheduledCampaignAt, _ = time.Parse(time.RFC3339Nano, r.NextScheduledCampaignAt.ValueString())
	} else {
		nextScheduledCampaignAt = nil
	}
	occurrences := new(int)
	if !r.Occurrences.IsUnknown() && !r.Occurrences.IsNull() {
		*occurrences = int(r.Occurrences.ValueInt32())
	} else {
		occurrences = nil
	}
	policyID := new(string)
	if !r.PolicyID.IsUnknown() && !r.PolicyID.IsNull() {
		*policyID = r.PolicyID.ValueString()
	} else {
		policyID = nil
	}
	var recurrenceRule *shared.RecurrenceRule
	if r.RecurrenceRule != nil {
		endDate := new(time.Time)
		if !r.RecurrenceRule.EndDate.IsUnknown() && !r.RecurrenceRule.EndDate.IsNull() {
			*endDate, _ = time.Parse(time.RFC3339Nano, r.RecurrenceRule.EndDate.ValueString())
		} else {
			endDate = nil
		}
		frequency := new(shared.Frequency)
		if !r.RecurrenceRule.Frequency.IsUnknown() && !r.RecurrenceRule.Frequency.IsNull() {
			*frequency = shared.Frequency(r.RecurrenceRule.Frequency.ValueString())
		} else {
			frequency = nil
		}
		interval := new(int)
		if !r.RecurrenceRule.Interval.IsUnknown() && !r.RecurrenceRule.Interval.IsNull() {
			*interval = int(r.RecurrenceRule.Interval.ValueInt32())
		} else {
			interval = nil
		}
		occurrences1 := new(int)
		if !r.RecurrenceRule.Occurrences.IsUnknown() && !r.RecurrenceRule.Occurrences.IsNull() {
			*occurrences1 = int(r.RecurrenceRule.Occurrences.ValueInt32())
		} else {
			occurrences1 = nil
		}
		startDate := new(time.Time)
		if !r.RecurrenceRule.StartDate.IsUnknown() && !r.RecurrenceRule.StartDate.IsNull() {
			*startDate, _ = time.Parse(time.RFC3339Nano, r.RecurrenceRule.StartDate.ValueString())
		} else {
			startDate = nil
		}
		recurrenceRule = &shared.RecurrenceRule{
			EndDate:     endDate,
			Frequency:   frequency,
			Interval:    interval,
			Occurrences: occurrences1,
			StartDate:   startDate,
		}
	}
	reviewInstructions := new(string)
	if !r.ReviewInstructions.IsUnknown() && !r.ReviewInstructions.IsNull() {
		*reviewInstructions = r.ReviewInstructions.ValueString()
	} else {
		reviewInstructions = nil
	}
	var accessReviewScopeV2 *shared.AccessReviewScopeV2
	if r.AccessReviewScopeV2 != nil {
		var accountCriteriaScope *shared.AccountCriteriaScope
		if r.AccessReviewScopeV2.AccountCriteriaScope != nil {
			var accountTypes []shared.AccountTypes
			if r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes != nil {
				accountTypes = make([]shared.AccountTypes, 0, len(r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes))
				for _, accountTypesItem := range r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes {
					accountTypes = append(accountTypes, shared.AccountTypes(accountTypesItem.ValueString()))
				}
			}
			var appUserStatuses1 []shared.AccountCriteriaScopeAppUserStatuses
			if r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses != nil {
				appUserStatuses1 = make([]shared.AccountCriteriaScopeAppUserStatuses, 0, len(r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses))
				for _, appUserStatusesItem1 := range r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses {
					appUserStatuses1 = append(appUserStatuses1, shared.AccountCriteriaScopeAppUserStatuses(appUserStatusesItem1.ValueString()))
				}
			}
			noAccountOwner := new(bool)
			if !r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner.IsUnknown() && !r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner.IsNull() {
				*noAccountOwner = r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner.ValueBool()
			} else {
				noAccountOwner = nil
			}
			accountCriteriaScope = &shared.AccountCriteriaScope{
				AccountTypes:    accountTypes,
				AppUserStatuses: appUserStatuses1,
				NoAccountOwner:  noAccountOwner,
			}
		}
		var allAccountsScope *shared.AllAccountsScope
		if r.AccessReviewScopeV2.AllAccountsScope != nil {
			allAccountsScope = &shared.AllAccountsScope{}
		}
		var allGrantsScope *shared.AllGrantsScope
		if r.AccessReviewScopeV2.AllGrantsScope != nil {
			allGrantsScope = &shared.AllGrantsScope{}
		}
		var allUsersScope *shared.AllUsersScope
		if r.AccessReviewScopeV2.AllUsersScope != nil {
			allUsersScope = &shared.AllUsersScope{}
		}
		var applicationAccessScope *shared.ApplicationAccessScope
		if r.AccessReviewScopeV2.ApplicationAccessScope != nil {
			applicationAccessScope = &shared.ApplicationAccessScope{}
		}
		var appSelectionCriteriaScope *shared.AppSelectionCriteriaScope
		if r.AccessReviewScopeV2.AppSelectionCriteriaScope != nil {
			appSelectionCriteriaScope = &shared.AppSelectionCriteriaScope{}
		}
		var grantsByCriteriaScope *shared.GrantsByCriteriaScope
		if r.AccessReviewScopeV2.GrantsByCriteriaScope != nil {
			var grantAccessProfileFilter *shared.GrantAccessProfileFilter
			if r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter != nil {
				var excludedAccessProfileIds []string
				if r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds != nil {
					excludedAccessProfileIds = make([]string, 0, len(r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds))
					for _, excludedAccessProfileIdsItem := range r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds {
						excludedAccessProfileIds = append(excludedAccessProfileIds, excludedAccessProfileIdsItem.ValueString())
					}
				}
				filterType := new(shared.FilterType)
				if !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType.IsNull() {
					*filterType = shared.FilterType(r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType.ValueString())
				} else {
					filterType = nil
				}
				grantAccessProfileFilter = &shared.GrantAccessProfileFilter{
					ExcludedAccessProfileIds: excludedAccessProfileIds,
					FilterType:               filterType,
				}
			}
			daysSinceAdded := new(string)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded.IsNull() {
				*daysSinceAdded = r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded.ValueString()
			} else {
				daysSinceAdded = nil
			}
			daysSinceLastUsed := new(string)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed.IsNull() {
				*daysSinceLastUsed = r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed.ValueString()
			} else {
				daysSinceLastUsed = nil
			}
			daysSinceReviewed := new(string)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed.IsNull() {
				*daysSinceReviewed = r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed.ValueString()
			} else {
				daysSinceReviewed = nil
			}
			var grantsAddedBetween *shared.GrantsAddedBetween
			if r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween != nil {
				endDate1 := new(time.Time)
				if !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate.IsNull() {
					*endDate1, _ = time.Parse(time.RFC3339Nano, r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate.ValueString())
				} else {
					endDate1 = nil
				}
				startDate1 := new(time.Time)
				if !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate.IsNull() {
					*startDate1, _ = time.Parse(time.RFC3339Nano, r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate.ValueString())
				} else {
					startDate1 = nil
				}
				grantsAddedBetween = &shared.GrantsAddedBetween{
					EndDate:   endDate1,
					StartDate: startDate1,
				}
			}
			sourceFilter := new(shared.SourceFilter)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter.IsNull() {
				*sourceFilter = shared.SourceFilter(r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter.ValueString())
			} else {
				sourceFilter = nil
			}
			typeFilter := new(shared.TypeFilter)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter.IsNull() {
				*typeFilter = shared.TypeFilter(r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter.ValueString())
			} else {
				typeFilter = nil
			}
			grantsByCriteriaScope = &shared.GrantsByCriteriaScope{
				GrantAccessProfileFilter: grantAccessProfileFilter,
				DaysSinceAdded:           daysSinceAdded,
				DaysSinceLastUsed:        daysSinceLastUsed,
				DaysSinceReviewed:        daysSinceReviewed,
				GrantsAddedBetween:       grantsAddedBetween,
				SourceFilter:             sourceFilter,
				TypeFilter:               typeFilter,
			}
		}
		var resourceTypeSelectionScope *shared.ResourceTypeSelectionScope
		if r.AccessReviewScopeV2.ResourceTypeSelectionScope != nil {
			resourceTypeSelectionScope = &shared.ResourceTypeSelectionScope{}
		}
		var selectedUsersScope *shared.SelectedUsersScope
		if r.AccessReviewScopeV2.SelectedUsersScope != nil {
			var userIds1 []string
			if r.AccessReviewScopeV2.SelectedUsersScope.UserIds != nil {
				userIds1 = make([]string, 0, len(r.AccessReviewScopeV2.SelectedUsersScope.UserIds))
				for _, userIdsItem1 := range r.AccessReviewScopeV2.SelectedUsersScope.UserIds {
					userIds1 = append(userIds1, userIdsItem1.ValueString())
				}
			}
			selectedUsersScope = &shared.SelectedUsersScope{
				UserIds: userIds1,
			}
		}
		var specificResourcesScope *shared.SpecificResourcesScope
		if r.AccessReviewScopeV2.SpecificResourcesScope != nil {
			specificResourcesScope = &shared.SpecificResourcesScope{}
		}
		var userCriteriaScope *shared.UserCriteriaScope
		if r.AccessReviewScopeV2.UserCriteriaScope != nil {
			var groupAppEntitlementsRef []shared.AppEntitlementRef
			if r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef != nil {
				groupAppEntitlementsRef = make([]shared.AppEntitlementRef, 0, len(r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef))
				for _, groupAppEntitlementsRefItem := range r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef {
					appID := new(string)
					if !groupAppEntitlementsRefItem.AppID.IsUnknown() && !groupAppEntitlementsRefItem.AppID.IsNull() {
						*appID = groupAppEntitlementsRefItem.AppID.ValueString()
					} else {
						appID = nil
					}
					id1 := new(string)
					if !groupAppEntitlementsRefItem.ID.IsUnknown() && !groupAppEntitlementsRefItem.ID.IsNull() {
						*id1 = groupAppEntitlementsRefItem.ID.ValueString()
					} else {
						id1 = nil
					}
					groupAppEntitlementsRef = append(groupAppEntitlementsRef, shared.AppEntitlementRef{
						AppID: appID,
						ID:    id1,
					})
				}
			}
			var managerUserIds []string
			if r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds != nil {
				managerUserIds = make([]string, 0, len(r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds))
				for _, managerUserIdsItem := range r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds {
					managerUserIds = append(managerUserIds, managerUserIdsItem.ValueString())
				}
			}
			multiUserProfileAttributes1 := make(map[string]shared.IncludedUserAttributeValues)
			for multiUserProfileAttributesKey1, multiUserProfileAttributesValue1 := range r.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes {
				var values1 []shared.IncludedUserAttributeValue
				if multiUserProfileAttributesValue1.Values != nil {
					values1 = make([]shared.IncludedUserAttributeValue, 0, len(multiUserProfileAttributesValue1.Values))
					for _, valuesItem1 := range multiUserProfileAttributesValue1.Values {
						value1 := new(string)
						if !valuesItem1.Value.IsUnknown() && !valuesItem1.Value.IsNull() {
							*value1 = valuesItem1.Value.ValueString()
						} else {
							value1 = nil
						}
						values1 = append(values1, shared.IncludedUserAttributeValue{
							Value: value1,
						})
					}
				}
				multiUserProfileAttributesInst1 := shared.IncludedUserAttributeValues{
					Values: values1,
				}
				multiUserProfileAttributes1[multiUserProfileAttributesKey1] = multiUserProfileAttributesInst1
			}
			var userStatus []shared.UserStatus
			if r.AccessReviewScopeV2.UserCriteriaScope.UserStatus != nil {
				userStatus = make([]shared.UserStatus, 0, len(r.AccessReviewScopeV2.UserCriteriaScope.UserStatus))
				for _, userStatusItem := range r.AccessReviewScopeV2.UserCriteriaScope.UserStatus {
					userStatus = append(userStatus, shared.UserStatus(userStatusItem.ValueString()))
				}
			}
			userCriteriaScope = &shared.UserCriteriaScope{
				GroupAppEntitlementsRef:    groupAppEntitlementsRef,
				ManagerUserIds:             managerUserIds,
				MultiUserProfileAttributes: multiUserProfileAttributes1,
				UserStatus:                 userStatus,
			}
		}
		accessReviewScopeV2 = &shared.AccessReviewScopeV2{
			AccountCriteriaScope:       accountCriteriaScope,
			AllAccountsScope:           allAccountsScope,
			AllGrantsScope:             allGrantsScope,
			AllUsersScope:              allUsersScope,
			ApplicationAccessScope:     applicationAccessScope,
			AppSelectionCriteriaScope:  appSelectionCriteriaScope,
			GrantsByCriteriaScope:      grantsByCriteriaScope,
			ResourceTypeSelectionScope: resourceTypeSelectionScope,
			SelectedUsersScope:         selectedUsersScope,
			SpecificResourcesScope:     specificResourcesScope,
			UserCriteriaScope:          userCriteriaScope,
		}
	}
	var slackChannel *shared.SlackChannel
	if r.SlackChannel != nil {
		description1 := new(string)
		if !r.SlackChannel.Description.IsUnknown() && !r.SlackChannel.Description.IsNull() {
			*description1 = r.SlackChannel.Description.ValueString()
		} else {
			description1 = nil
		}
		name := new(string)
		if !r.SlackChannel.Name.IsUnknown() && !r.SlackChannel.Name.IsNull() {
			*name = r.SlackChannel.Name.ValueString()
		} else {
			name = nil
		}
		slackChannel = &shared.SlackChannel{
			Description: description1,
			Name:        name,
		}
	}
	usePolicyOverride := new(bool)
	if !r.UsePolicyOverride.IsUnknown() && !r.UsePolicyOverride.IsNull() {
		*usePolicyOverride = r.UsePolicyOverride.ValueBool()
	} else {
		usePolicyOverride = nil
	}
	out := shared.AccessReviewTemplateInput{
		AccessReviewDuration:       accessReviewDuration,
		DefaultView:                defaultView,
		Description:                description,
		DisplayName:                displayName,
		ID:                         id,
		AccessReviewInclusionScope: accessReviewInclusionScope,
		IsCampaignScheduleEnabled:  isCampaignScheduleEnabled,
		NextScheduledCampaignAt:    nextScheduledCampaignAt,
		Occurrences:                occurrences,
		PolicyID:                   policyID,
		RecurrenceRule:             recurrenceRule,
		ReviewInstructions:         reviewInstructions,
		AccessReviewScopeV2:        accessReviewScopeV2,
		SlackChannel:               slackChannel,
		UsePolicyOverride:          usePolicyOverride,
	}

	return &out, diags
}

func (r *AccessReviewTemplateResourceModel) ToSharedAccessReviewTemplateServiceCreateRequest(ctx context.Context) (*shared.AccessReviewTemplateServiceCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessReviewDuration := new(string)
	if !r.AccessReviewDuration.IsUnknown() && !r.AccessReviewDuration.IsNull() {
		*accessReviewDuration = r.AccessReviewDuration.ValueString()
	} else {
		accessReviewDuration = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var ownerIds []string
	if r.OwnerIds != nil {
		ownerIds = make([]string, 0, len(r.OwnerIds))
		for _, ownerIdsItem := range r.OwnerIds {
			ownerIds = append(ownerIds, ownerIdsItem.ValueString())
		}
	}
	policyID := new(string)
	if !r.PolicyID.IsUnknown() && !r.PolicyID.IsNull() {
		*policyID = r.PolicyID.ValueString()
	} else {
		policyID = nil
	}
	out := shared.AccessReviewTemplateServiceCreateRequest{
		AccessReviewDuration: accessReviewDuration,
		Description:          description,
		DisplayName:          displayName,
		OwnerIds:             ownerIds,
		PolicyID:             policyID,
	}

	return &out, diags
}

func (r *AccessReviewTemplateResourceModel) ToSharedAccessReviewTemplateServiceUpdateRequest(ctx context.Context) (*shared.AccessReviewTemplateServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessReviewTemplate, accessReviewTemplateDiags := r.ToSharedAccessReviewTemplateInput(ctx)
	diags.Append(accessReviewTemplateDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.AccessReviewTemplateServiceUpdateRequest{
		AccessReviewTemplate: accessReviewTemplate,
	}

	return &out, diags
}
