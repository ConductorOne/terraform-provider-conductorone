// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *FunctionSearchDataSourceModel) RefreshFromSharedFunctionsSearchResponse(ctx context.Context, resp *shared.FunctionsSearchResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.List != nil {
			r.List = []tfTypes.Function{}

			for _, listItem := range resp.List {
				var list tfTypes.Function

				list.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.CreatedAt))
				list.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.DeletedAt))
				list.Description = types.StringPointerValue(listItem.Description)
				list.DisplayName = types.StringPointerValue(listItem.DisplayName)
				if listItem.FunctionType != nil {
					list.FunctionType = types.StringValue(string(*listItem.FunctionType))
				} else {
					list.FunctionType = types.StringNull()
				}
				list.ID = types.StringPointerValue(listItem.ID)
				list.PublishedCommitID = types.StringPointerValue(listItem.PublishedCommitID)
				list.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.UpdatedAt))

				r.List = append(r.List, list)
			}
		}
		r.NextPageToken = types.StringPointerValue(resp.NextPageToken)
	}

	return diags
}

func (r *FunctionSearchDataSourceModel) ToSharedFunctionsSearchRequest(ctx context.Context) (*shared.FunctionsSearchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var functionTypes []shared.FunctionTypes
	if r.FunctionTypes != nil {
		functionTypes = make([]shared.FunctionTypes, 0, len(r.FunctionTypes))
		for _, functionTypesItem := range r.FunctionTypes {
			functionTypes = append(functionTypes, shared.FunctionTypes(functionTypesItem.ValueString()))
		}
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	pageToken := new(string)
	if !r.PageToken.IsUnknown() && !r.PageToken.IsNull() {
		*pageToken = r.PageToken.ValueString()
	} else {
		pageToken = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	out := shared.FunctionsSearchRequest{
		FunctionTypes: functionTypes,
		PageSize:      pageSize,
		PageToken:     pageToken,
		Query:         query,
	}

	return &out, diags
}
