// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AccessReviewDataSourceModel) RefreshFromSharedAccessReview(ctx context.Context, resp *shared.AccessReview) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AccessReviewExclusionScope == nil {
			r.AccessReviewExclusionScope = nil
		} else {
			r.AccessReviewExclusionScope = &tfTypes.AccessReviewExclusionScope{}
			if resp.AccessReviewExclusionScope.AppUserStatuses != nil {
				r.AccessReviewExclusionScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewExclusionScope.AppUserStatuses))
				for _, v := range resp.AccessReviewExclusionScope.AppUserStatuses {
					r.AccessReviewExclusionScope.AppUserStatuses = append(r.AccessReviewExclusionScope.AppUserStatuses, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewExclusionScope.AppUserTypes != nil {
				r.AccessReviewExclusionScope.AppUserTypes = make([]types.String, 0, len(resp.AccessReviewExclusionScope.AppUserTypes))
				for _, v := range resp.AccessReviewExclusionScope.AppUserTypes {
					r.AccessReviewExclusionScope.AppUserTypes = append(r.AccessReviewExclusionScope.AppUserTypes, types.StringValue(string(v)))
				}
			}
		}
		if resp.AccessReviewInclusionScope == nil {
			r.AccessReviewInclusionScope = nil
		} else {
			r.AccessReviewInclusionScope = &tfTypes.AccessReviewInclusionScope{}
			if resp.AccessReviewInclusionScope.AppUserStatuses != nil {
				r.AccessReviewInclusionScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewInclusionScope.AppUserStatuses))
				for _, v := range resp.AccessReviewInclusionScope.AppUserStatuses {
					r.AccessReviewInclusionScope.AppUserStatuses = append(r.AccessReviewInclusionScope.AppUserStatuses, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewInclusionScope.AppUserTypes != nil {
				r.AccessReviewInclusionScope.AppUserTypes = make([]types.String, 0, len(resp.AccessReviewInclusionScope.AppUserTypes))
				for _, v := range resp.AccessReviewInclusionScope.AppUserTypes {
					r.AccessReviewInclusionScope.AppUserTypes = append(r.AccessReviewInclusionScope.AppUserTypes, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewInclusionScope.ManagerIds != nil {
				r.AccessReviewInclusionScope.ManagerIds = make([]types.String, 0, len(resp.AccessReviewInclusionScope.ManagerIds))
				for _, v := range resp.AccessReviewInclusionScope.ManagerIds {
					r.AccessReviewInclusionScope.ManagerIds = append(r.AccessReviewInclusionScope.ManagerIds, types.StringValue(v))
				}
			}
			if len(resp.AccessReviewInclusionScope.MultiUserProfileAttributes) > 0 {
				r.AccessReviewInclusionScope.MultiUserProfileAttributes = make(map[string]tfTypes.IncludedUserAttributeValues, len(resp.AccessReviewInclusionScope.MultiUserProfileAttributes))
				for includedUserAttributeValuesKey, includedUserAttributeValuesValue := range resp.AccessReviewInclusionScope.MultiUserProfileAttributes {
					var includedUserAttributeValuesResult tfTypes.IncludedUserAttributeValues
					if includedUserAttributeValuesValue.Values != nil {
						includedUserAttributeValuesResult.Values = []tfTypes.IncludedUserAttributeValue{}

						for _, valuesItem := range includedUserAttributeValuesValue.Values {
							var values tfTypes.IncludedUserAttributeValue

							values.Value = types.StringPointerValue(valuesItem.Value)

							includedUserAttributeValuesResult.Values = append(includedUserAttributeValuesResult.Values, values)
						}
					}

					r.AccessReviewInclusionScope.MultiUserProfileAttributes[includedUserAttributeValuesKey] = includedUserAttributeValuesResult
				}
			}
			r.AccessReviewInclusionScope.NoAccountOwners = types.BoolPointerValue(resp.AccessReviewInclusionScope.NoAccountOwners)
			if resp.AccessReviewInclusionScope.UserIds != nil {
				r.AccessReviewInclusionScope.UserIds = make([]types.String, 0, len(resp.AccessReviewInclusionScope.UserIds))
				for _, v := range resp.AccessReviewInclusionScope.UserIds {
					r.AccessReviewInclusionScope.UserIds = append(r.AccessReviewInclusionScope.UserIds, types.StringValue(v))
				}
			}
			if resp.AccessReviewInclusionScope.UserStatuses != nil {
				r.AccessReviewInclusionScope.UserStatuses = make([]types.String, 0, len(resp.AccessReviewInclusionScope.UserStatuses))
				for _, v := range resp.AccessReviewInclusionScope.UserStatuses {
					r.AccessReviewInclusionScope.UserStatuses = append(r.AccessReviewInclusionScope.UserStatuses, types.StringValue(string(v)))
				}
			}
		}
		if resp.AccessReviewScope == nil {
			r.AccessReviewScope = nil
		} else {
			r.AccessReviewScope = &tfTypes.AccessReviewScope{}
			if resp.AccessReviewScope.AppUserStatuses != nil {
				r.AccessReviewScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewScope.AppUserStatuses))
				for _, v := range resp.AccessReviewScope.AppUserStatuses {
					r.AccessReviewScope.AppUserStatuses = append(r.AccessReviewScope.AppUserStatuses, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewScope.AppUserTypes != nil {
				r.AccessReviewScope.AppUserTypes = make([]types.String, 0, len(resp.AccessReviewScope.AppUserTypes))
				for _, v := range resp.AccessReviewScope.AppUserTypes {
					r.AccessReviewScope.AppUserTypes = append(r.AccessReviewScope.AppUserTypes, types.StringValue(string(v)))
				}
			}
		}
		if resp.AccessReviewScopeV2 == nil {
			r.AccessReviewScopeV2 = nil
		} else {
			r.AccessReviewScopeV2 = &tfTypes.AccessReviewScopeV2{}
			if resp.AccessReviewScopeV2.AccountCriteriaScope == nil {
				r.AccessReviewScopeV2.AccountCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.AccountCriteriaScope = &tfTypes.AccountCriteriaScope{}
				if resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes != nil {
					r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes = make([]types.String, 0, len(resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes))
					for _, v := range resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes {
						r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes = append(r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes, types.StringValue(string(v)))
					}
				}
				if resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses != nil {
					r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses))
					for _, v := range resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses {
						r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses = append(r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses, types.StringValue(string(v)))
					}
				}
				r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner = types.BoolPointerValue(resp.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner)
			}
			if resp.AccessReviewScopeV2.AllAccountsScope == nil {
				r.AccessReviewScopeV2.AllAccountsScope = nil
			} else {
				r.AccessReviewScopeV2.AllAccountsScope = &tfTypes.AllAccountsScope{}
			}
			if resp.AccessReviewScopeV2.AllGrantsScope == nil {
				r.AccessReviewScopeV2.AllGrantsScope = nil
			} else {
				r.AccessReviewScopeV2.AllGrantsScope = &tfTypes.AllGrantsScope{}
			}
			if resp.AccessReviewScopeV2.AllUsersScope == nil {
				r.AccessReviewScopeV2.AllUsersScope = nil
			} else {
				r.AccessReviewScopeV2.AllUsersScope = &tfTypes.AllUsersScope{}
			}
			if resp.AccessReviewScopeV2.ApplicationAccessScope == nil {
				r.AccessReviewScopeV2.ApplicationAccessScope = nil
			} else {
				r.AccessReviewScopeV2.ApplicationAccessScope = &tfTypes.ApplicationAccessScope{}
			}
			if resp.AccessReviewScopeV2.AppSelectionCriteriaScope == nil {
				r.AccessReviewScopeV2.AppSelectionCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.AppSelectionCriteriaScope = &tfTypes.AppSelectionCriteriaScope{}
			}
			if resp.AccessReviewScopeV2.GrantsByCriteriaScope == nil {
				r.AccessReviewScopeV2.GrantsByCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.GrantsByCriteriaScope = &tfTypes.GrantsByCriteriaScope{}
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded)
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed)
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed)
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter == nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter = nil
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter = &tfTypes.GrantAccessProfileFilter{}
					if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds != nil {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds))
						for _, v := range resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds {
							r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds = append(r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds, types.StringValue(v))
						}
					}
					if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType != nil {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType))
					} else {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType = types.StringNull()
					}
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween == nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween = nil
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween = &tfTypes.GrantsAddedBetween{}
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate))
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate))
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter != nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter))
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter = types.StringNull()
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter != nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter))
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter = types.StringNull()
				}
			}
			if resp.AccessReviewScopeV2.ResourceTypeSelectionScope == nil {
				r.AccessReviewScopeV2.ResourceTypeSelectionScope = nil
			} else {
				r.AccessReviewScopeV2.ResourceTypeSelectionScope = &tfTypes.ResourceTypeSelectionScope{}
			}
			if resp.AccessReviewScopeV2.SelectedUsersScope == nil {
				r.AccessReviewScopeV2.SelectedUsersScope = nil
			} else {
				r.AccessReviewScopeV2.SelectedUsersScope = &tfTypes.SelectedUsersScope{}
				if resp.AccessReviewScopeV2.SelectedUsersScope.UserIds != nil {
					r.AccessReviewScopeV2.SelectedUsersScope.UserIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.SelectedUsersScope.UserIds))
					for _, v := range resp.AccessReviewScopeV2.SelectedUsersScope.UserIds {
						r.AccessReviewScopeV2.SelectedUsersScope.UserIds = append(r.AccessReviewScopeV2.SelectedUsersScope.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.AccessReviewScopeV2.SpecificResourcesScope == nil {
				r.AccessReviewScopeV2.SpecificResourcesScope = nil
			} else {
				r.AccessReviewScopeV2.SpecificResourcesScope = &tfTypes.SpecificResourcesScope{}
			}
			if resp.AccessReviewScopeV2.UserCriteriaScope == nil {
				r.AccessReviewScopeV2.UserCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.UserCriteriaScope = &tfTypes.UserCriteriaScope{}
				if resp.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef = []tfTypes.AppEntitlementRef{}

					for _, groupAppEntitlementsRefItem := range resp.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef {
						var groupAppEntitlementsRef tfTypes.AppEntitlementRef

						groupAppEntitlementsRef.AppID = types.StringPointerValue(groupAppEntitlementsRefItem.AppID)
						groupAppEntitlementsRef.ID = types.StringPointerValue(groupAppEntitlementsRefItem.ID)

						r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef = append(r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef, groupAppEntitlementsRef)
					}
				}
				if resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds))
					for _, v := range resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds {
						r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds = append(r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds, types.StringValue(v))
					}
				}
				if len(resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes) > 0 {
					r.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes = make(map[string]tfTypes.IncludedUserAttributeValues, len(resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes))
					for includedUserAttributeValuesKey1, includedUserAttributeValuesValue1 := range resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes {
						var includedUserAttributeValuesResult1 tfTypes.IncludedUserAttributeValues
						if includedUserAttributeValuesValue1.Values != nil {
							includedUserAttributeValuesResult1.Values = []tfTypes.IncludedUserAttributeValue{}

							for _, valuesItem1 := range includedUserAttributeValuesValue1.Values {
								var values1 tfTypes.IncludedUserAttributeValue

								values1.Value = types.StringPointerValue(valuesItem1.Value)

								includedUserAttributeValuesResult1.Values = append(includedUserAttributeValuesResult1.Values, values1)
							}
						}

						r.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes[includedUserAttributeValuesKey1] = includedUserAttributeValuesResult1
					}
				}
				if resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.UserStatus = make([]types.String, 0, len(resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus))
					for _, v := range resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus {
						r.AccessReviewScopeV2.UserCriteriaScope.UserStatus = append(r.AccessReviewScopeV2.UserCriteriaScope.UserStatus, types.StringValue(string(v)))
					}
				}
			}
		}
		r.AccessReviewTemplateID = types.StringPointerValue(resp.AccessReviewTemplateID)
		r.AutoResolve = types.BoolPointerValue(resp.AutoResolve)
		if resp.BindingObjectSetup == nil {
			r.BindingObjectSetup = nil
		} else {
			r.BindingObjectSetup = &tfTypes.BindingObjectSetup{}
		}
		r.ClosedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ClosedAt))
		r.CompletionDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CompletionDate))
		r.ConnectorSourcesFrozenAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ConnectorSourcesFrozenAt))
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CreatedByID = types.StringPointerValue(resp.CreatedByID)
		if resp.DefaultView != nil {
			r.DefaultView = types.StringValue(string(*resp.DefaultView))
		} else {
			r.DefaultView = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ExpectedTicketCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ExpectedTicketCount))
		r.HasAccuracySupport = types.BoolPointerValue(resp.HasAccuracySupport)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.MultiAppSetup == nil {
			r.MultiAppSetup = nil
		} else {
			r.MultiAppSetup = &tfTypes.MultiAppSetup{}
			if len(resp.MultiAppSetup.AppEntitlementDetails) > 0 {
				r.MultiAppSetup.AppEntitlementDetails = make(map[string]tfTypes.EntitlementToDetails, len(resp.MultiAppSetup.AppEntitlementDetails))
				for entitlementToDetailsKey, entitlementToDetailsValue := range resp.MultiAppSetup.AppEntitlementDetails {
					var entitlementToDetailsResult tfTypes.EntitlementToDetails
					if len(entitlementToDetailsValue.EntitlementDetails) > 0 {
						entitlementToDetailsResult.EntitlementDetails = make(map[string]tfTypes.CampaignEntitlementDetails, len(entitlementToDetailsValue.EntitlementDetails))
						for campaignEntitlementDetailsKey, campaignEntitlementDetailsValue := range entitlementToDetailsValue.EntitlementDetails {
							var campaignEntitlementDetailsResult tfTypes.CampaignEntitlementDetails
							campaignEntitlementDetailsResult.AppID = types.StringPointerValue(campaignEntitlementDetailsValue.AppID)
							campaignEntitlementDetailsResult.EntitlementID = types.StringPointerValue(campaignEntitlementDetailsValue.EntitlementID)
							campaignEntitlementDetailsResult.PolicyID = types.StringPointerValue(campaignEntitlementDetailsValue.PolicyID)

							entitlementToDetailsResult.EntitlementDetails[campaignEntitlementDetailsKey] = campaignEntitlementDetailsResult
						}
					}

					r.MultiAppSetup.AppEntitlementDetails[entitlementToDetailsKey] = entitlementToDetailsResult
				}
			}
			if len(resp.MultiAppSetup.AppEntitlements) > 0 {
				r.MultiAppSetup.AppEntitlements = make(map[string]tfTypes.MultiAppEntitlement, len(resp.MultiAppSetup.AppEntitlements))
				for multiAppEntitlementKey, multiAppEntitlementValue := range resp.MultiAppSetup.AppEntitlements {
					var multiAppEntitlementResult tfTypes.MultiAppEntitlement
					multiAppEntitlementResult.AppID = types.StringPointerValue(multiAppEntitlementValue.AppID)
					if multiAppEntitlementValue.EntitlementIds != nil {
						multiAppEntitlementResult.EntitlementIds = make([]types.String, 0, len(multiAppEntitlementValue.EntitlementIds))
						for _, v := range multiAppEntitlementValue.EntitlementIds {
							multiAppEntitlementResult.EntitlementIds = append(multiAppEntitlementResult.EntitlementIds, types.StringValue(v))
						}
					}

					r.MultiAppSetup.AppEntitlements[multiAppEntitlementKey] = multiAppEntitlementResult
				}
			}
		}
		r.PolicyID = types.StringPointerValue(resp.PolicyID)
		r.ReviewInstructions = types.StringPointerValue(resp.ReviewInstructions)
		r.ScopingVersion = types.StringPointerValue(resp.ScopingVersion)
		if resp.SingleAppSetup == nil {
			r.SingleAppSetup = nil
		} else {
			r.SingleAppSetup = &tfTypes.SingleAppSetup{}
			r.SingleAppSetup.AppID = types.StringPointerValue(resp.SingleAppSetup.AppID)
		}
		r.StartedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.StartedAt))
		if resp.State != nil {
			r.State = types.StringValue(string(*resp.State))
		} else {
			r.State = types.StringNull()
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.UsePolicyOverride = types.BoolPointerValue(resp.UsePolicyOverride)
	}

	return diags
}

func (r *AccessReviewDataSourceModel) ToOperationsC1APIAccessreviewV1AccessReviewServiceGetRequest(ctx context.Context) (*operations.C1APIAccessreviewV1AccessReviewServiceGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIAccessreviewV1AccessReviewServiceGetRequest{
		ID: id,
	}

	return &out, diags
}
