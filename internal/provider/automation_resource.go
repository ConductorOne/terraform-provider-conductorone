// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/validators"
	speakeasy_int64validators "github.com/conductorone/terraform-provider-conductorone/internal/validators/int64validators"
	speakeasy_objectvalidators "github.com/conductorone/terraform-provider-conductorone/internal/validators/objectvalidators"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &AutomationResource{}
var _ resource.ResourceWithImportState = &AutomationResource{}

func NewAutomationResource() resource.Resource {
	return &AutomationResource{}
}

// AutomationResource defines the resource implementation.
type AutomationResource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// AutomationResourceModel describes the resource data model.
type AutomationResourceModel struct {
	AppID                        types.String                          `tfsdk:"app_id"`
	AutomationContext            *tfTypes.AutomationContext            `tfsdk:"automation_context"`
	AutomationSteps              []tfTypes.AutomationStep              `tfsdk:"automation_steps"`
	CreatedAt                    types.String                          `tfsdk:"created_at"`
	CurrentVersion               types.String                          `tfsdk:"current_version"`
	Description                  types.String                          `tfsdk:"description"`
	DisabledReasonCircuitBreaker *tfTypes.DisabledReasonCircuitBreaker `tfsdk:"disabled_reason_circuit_breaker"`
	DisplayName                  types.String                          `tfsdk:"display_name"`
	DraftAutomationSteps         []tfTypes.AutomationStep              `tfsdk:"draft_automation_steps"`
	DraftTriggers                []tfTypes.AutomationTrigger           `tfsdk:"draft_triggers"`
	Enabled                      types.Bool                            `tfsdk:"enabled"`
	ID                           types.String                          `tfsdk:"id"`
	IsDraft                      types.Bool                            `tfsdk:"is_draft"`
	LastExecutedAt               types.String                          `tfsdk:"last_executed_at"`
	PrimaryTriggerType           types.String                          `tfsdk:"primary_trigger_type"`
	Triggers                     []tfTypes.AutomationTrigger           `tfsdk:"triggers"`
	WebhookHmacSecret            types.String                          `tfsdk:"webhook_hmac_secret"`
}

func (r *AutomationResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_automation"
}

func (r *AutomationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Automation Resource",
		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `the app id this workflow_template belongs to`,
			},
			"automation_context": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"context": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `The AutomationContext message.`,
			},
			"automation_steps": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"account_lifecycle_action": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"account_in_context": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The AccountInContext message.`,
								},
								"account_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"account_id_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The accountIdCel field.`,
										},
									},
									Description: `The AccountRef message.`,
								},
								"action_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The actionName field.`,
								},
								"connector_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"app_id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The appId field.`,
										},
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id field.`,
										},
									},
									Description: `The ConnectorRef message.`,
								},
							},
							MarkdownDescription: `The AccountLifecycleAction message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named account_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - accountRef` + "\n" +
								`  - accountInContext`,
						},
						"call_function": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"args": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `The args field.`,
								},
								"function_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The functionId field.`,
								},
							},
							Description: `The CallFunction message.`,
						},
						"connector_action": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"action_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The actionName field.`,
								},
								"args_template": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
								},
								"connector_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"app_id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The appId field.`,
										},
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id field.`,
										},
									},
									Description: `The ConnectorRef message.`,
								},
							},
							MarkdownDescription: `The ConnectorAction message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named connector_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - connectorRef`,
						},
						"connector_create_account": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"connector_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"app_id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The appId field.`,
										},
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id field.`,
										},
									},
									Description: `The ConnectorRef message.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The userIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `create_account_arguments` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.ConnectorCreateAccount` + "`" + ` for more details.`,
								},
								"user_properties": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"display_name_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The displayNameCel field.`,
										},
										"email_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The emailCel field.`,
										},
										"profile_attribute_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The profileAttributeCel field.`,
										},
										"username_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The usernameCel field.`,
										},
									},
									Description: `The UserProperties message.`,
								},
							},
							MarkdownDescription: `The ConnectorCreateAccount message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named create_account_arguments. Only a single field of the following list may be set at a time:` + "\n" +
								`  - userIdCel` + "\n" +
								`  - userProperties`,
						},
						"create_access_review": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"access_review_template_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The accessReviewTemplateCel field.`,
								},
								"access_review_template_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The accessReviewTemplateId field.`,
								},
								"campaign_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Optional campaign name. If not provided, the campaign name will be the access review template name.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_ids_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdsCel field.`,
								},
								"user_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id of the user.`,
											},
										},
									},
									Description: `The userRefs field.`,
								},
							},
							Description: `The CreateAccessReview message.`,
						},
						"create_revoke_tasks": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_entitlement_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The appEntitlementRefs field.`,
								},
								"app_entitlement_refs_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The appEntitlementRefsCel field.`,
								},
								"excluded_app_entitlement_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The excludedAppEntitlementRefs field.`,
								},
								"excluded_app_entitlement_refs_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The excludedAppEntitlementRefsCel field.`,
								},
								"revoke_all": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The revokeAll field.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdCel field.`,
								},
								"user_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
							},
							Description: `The CreateRevokeTasks message.`,
						},
						"grant_entitlements": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_entitlement_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The appEntitlementRefs field.`,
								},
								"app_entitlement_refs_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The appEntitlementRefsCel field.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdCel field.`,
								},
								"user_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
							},
							Description: `The GrantEntitlements message.`,
						},
						"remove_from_delegation": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"replacement_user_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The user who will replace the target user's delegation` + "\n" +
										`This field is part of the ` + "`" + `replacement_user` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.RemoveFromDelegation` + "`" + ` for more details.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdCel field.`,
								},
								"user_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
								"user_ref1": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
							},
							MarkdownDescription: `RemoveFromDelegation: find all users that have the target user as their delegated user, and modify the delegation.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named replacement_user. Only a single field of the following list may be set at a time:` + "\n" +
								`  - replacementUserIdCel` + "\n" +
								`  - replacementUserRef`,
						},
						"run_automation": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"automation_context": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"context": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `The AutomationContext message.`,
								},
								"automation_template_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The automationTemplateIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `automation_template` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.RunAutomation` + "`" + ` for more details.`,
								},
								"automation_template_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id field.`,
										},
									},
									Description: `The AutomationTemplateRef message.`,
								},
							},
							MarkdownDescription: `RunAutomation: kick off the execution of an automation template.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named automation_template. Only a single field of the following list may be set at a time:` + "\n" +
								`  - automationTemplateRef` + "\n" +
								`  - automationTemplateIdCel`,
						},
						"send_email": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The body field.`,
								},
								"subject": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The subject field.`,
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The title field.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_ids_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdsCel field.`,
								},
								"user_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id of the user.`,
											},
										},
									},
									Description: `The userRefs field.`,
								},
							},
							Description: `The SendEmail message.`,
						},
						"send_slack_message": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The body field.`,
								},
								"channel_name": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The channelName field.` + "\n" +
										`This field is part of the ` + "`" + `channel` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.SendSlackMessage` + "`" + ` for more details.`,
								},
								"channel_name_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The channelNameCel field.` + "\n" +
										`This field is part of the ` + "`" + `channel` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.SendSlackMessage` + "`" + ` for more details.`,
								},
							},
							MarkdownDescription: `The SendSlackMessage message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named channel. Only a single field of the following list may be set at a time:` + "\n" +
								`  - channelName` + "\n" +
								`  - channelNameCel`,
						},
						"skip_if_true_cel": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The skipIfTrueCel field.`,
						},
						"step_display_name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The stepDisplayName field.`,
						},
						"step_name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The stepName field.`,
						},
						"task_action": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"close_action": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"use_subject_user": schema.BoolAttribute{
											Computed:    true,
											Optional:    true,
											Description: `If true, the step will use the subject user of the automation as the subject.`,
										},
										"user_id_cel": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `The userIdCel field.` + "\n" +
												`This field is part of the ` + "`" + `user_identifier` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `c1.api.automations.v1.CloseAction` + "`" + ` for more details.`,
										},
										"user_ref": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The id of the user.`,
												},
											},
											Description: `A reference to a user.`,
										},
									},
									MarkdownDescription: `The CloseAction message.` + "\n" +
										`` + "\n" +
										`This message contains a oneof named user_identifier. Only a single field of the following list may be set at a time:` + "\n" +
										`  - userIdCel` + "\n" +
										`  - userRef`,
								},
								"reassign_action": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"assignee_user_id_cel": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `The assigneeUserIdCel field.` + "\n" +
												`This field is part of the ` + "`" + `assignee_user_identifier` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `c1.api.automations.v1.ReassignAction` + "`" + ` for more details.`,
										},
										"subject_user_id_cel": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `The subjectUserIdCel field.` + "\n" +
												`This field is part of the ` + "`" + `subject_user_identifier` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `c1.api.automations.v1.ReassignAction` + "`" + ` for more details.`,
										},
										"use_subject_user": schema.BoolAttribute{
											Computed:    true,
											Optional:    true,
											Description: `If true, the step will use the subject user of the automation as the subject.`,
										},
										"user_ref": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The id of the user.`,
												},
											},
											Description: `A reference to a user.`,
										},
										"user_ref1": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The id of the user.`,
												},
											},
											Description: `A reference to a user.`,
										},
									},
									MarkdownDescription: `The ReassignAction message.` + "\n" +
										`` + "\n" +
										`This message contains a oneof named assignee_user_identifier. Only a single field of the following list may be set at a time:` + "\n" +
										`  - assigneeUserIdCel` + "\n" +
										`  - assigneeUserRef` + "\n" +
										`` + "\n" +
										`` + "\n" +
										`This message contains a oneof named subject_user_identifier. Only a single field of the following list may be set at a time:` + "\n" +
										`  - subjectUserIdCel` + "\n" +
										`  - subjectUserRef`,
								},
								"task_types": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `The taskTypes field.`,
								},
								"task_user_relation": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The taskUserRelation field. must be one of ["TASK_USER_RELATION_UNSPECIFIED", "TASK_USER_RELATION_ASSIGNEE", "TASK_USER_RELATION_SUBJECT"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"TASK_USER_RELATION_UNSPECIFIED",
											"TASK_USER_RELATION_ASSIGNEE",
											"TASK_USER_RELATION_SUBJECT",
										),
									},
								},
							},
							MarkdownDescription: `The TaskAction message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named action. Only a single field of the following list may be set at a time:` + "\n" +
								`  - close` + "\n" +
								`  - reassign`,
						},
						"unenroll_from_all_access_profiles": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"catalog_ids": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `Optional list of catalog IDs to unenroll from. If empty, unenroll from all catalogs.`,
								},
								"catalog_ids_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `CEL expression to dynamically select catalog IDs. If provided, overrides catalog_ids.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_ids_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdsCel field.`,
								},
								"user_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id of the user.`,
											},
										},
									},
									Description: `The userRefs field.`,
								},
							},
							Description: `The UnenrollFromAllAccessProfiles message.`,
						},
						"update_user": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The userIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `user` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.UpdateUser` + "`" + ` for more details.`,
								},
								"user_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
								"user_status_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The userStatusCel field.` + "\n" +
										`This field is part of the ` + "`" + `user_status` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.UpdateUser` + "`" + ` for more details.`,
								},
								"user_status_enum": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The userStatusEnum field.` + "\n" +
										`This field is part of the ` + "`" + `user_status` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.UpdateUser` + "`" + ` for more details.` + "\n" +
										`must be one of ["UNKNOWN", "ENABLED", "DISABLED", "DELETED"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"UNKNOWN",
											"ENABLED",
											"DISABLED",
											"DELETED",
										),
									},
								},
							},
							MarkdownDescription: `The UpdateUser message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named user. Only a single field of the following list may be set at a time:` + "\n" +
								`  - userIdCel` + "\n" +
								`  - userRef` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named user_status. Only a single field of the following list may be set at a time:` + "\n" +
								`  - userStatusEnum` + "\n" +
								`  - userStatusCel`,
						},
						"wait_for_duration": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"duration": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `The WaitForDuration message.`,
						},
						"webhook": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"payload": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
								},
								"webhook_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The webhookId field.` + "\n" +
										`This field is part of the ` + "`" + `webhook_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.Webhook` + "`" + ` for more details.`,
								},
								"webhook_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The webhookIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `webhook_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.Webhook` + "`" + ` for more details.`,
								},
							},
							MarkdownDescription: `The Webhook message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named webhook_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - webhookId` + "\n" +
								`  - webhookIdCel`,
						},
					},
				},
				Description: `The automationSteps field.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"current_version": schema.StringAttribute{
				Computed:    true,
				Description: `The currentVersion field.`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The description field.`,
			},
			"disabled_reason_circuit_breaker": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `The DisabledReasonCircuitBreaker message.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The displayName field.`,
			},
			"draft_automation_steps": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"account_lifecycle_action": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"account_in_context": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The AccountInContext message.`,
								},
								"account_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"account_id_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The accountIdCel field.`,
										},
									},
									Description: `The AccountRef message.`,
								},
								"action_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The actionName field.`,
								},
								"connector_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"app_id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The appId field.`,
										},
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id field.`,
										},
									},
									Description: `The ConnectorRef message.`,
								},
							},
							MarkdownDescription: `The AccountLifecycleAction message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named account_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - accountRef` + "\n" +
								`  - accountInContext`,
						},
						"call_function": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"args": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `The args field.`,
								},
								"function_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The functionId field.`,
								},
							},
							Description: `The CallFunction message.`,
						},
						"connector_action": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"action_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The actionName field.`,
								},
								"args_template": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
								},
								"connector_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"app_id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The appId field.`,
										},
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id field.`,
										},
									},
									Description: `The ConnectorRef message.`,
								},
							},
							MarkdownDescription: `The ConnectorAction message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named connector_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - connectorRef`,
						},
						"connector_create_account": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"connector_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"app_id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The appId field.`,
										},
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id field.`,
										},
									},
									Description: `The ConnectorRef message.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The userIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `create_account_arguments` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.ConnectorCreateAccount` + "`" + ` for more details.`,
								},
								"user_properties": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"display_name_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The displayNameCel field.`,
										},
										"email_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The emailCel field.`,
										},
										"profile_attribute_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The profileAttributeCel field.`,
										},
										"username_cel": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The usernameCel field.`,
										},
									},
									Description: `The UserProperties message.`,
								},
							},
							MarkdownDescription: `The ConnectorCreateAccount message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named create_account_arguments. Only a single field of the following list may be set at a time:` + "\n" +
								`  - userIdCel` + "\n" +
								`  - userProperties`,
						},
						"create_access_review": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"access_review_template_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The accessReviewTemplateCel field.`,
								},
								"access_review_template_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The accessReviewTemplateId field.`,
								},
								"campaign_name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Optional campaign name. If not provided, the campaign name will be the access review template name.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_ids_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdsCel field.`,
								},
								"user_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id of the user.`,
											},
										},
									},
									Description: `The userRefs field.`,
								},
							},
							Description: `The CreateAccessReview message.`,
						},
						"create_revoke_tasks": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_entitlement_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The appEntitlementRefs field.`,
								},
								"app_entitlement_refs_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The appEntitlementRefsCel field.`,
								},
								"excluded_app_entitlement_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The excludedAppEntitlementRefs field.`,
								},
								"excluded_app_entitlement_refs_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The excludedAppEntitlementRefsCel field.`,
								},
								"revoke_all": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The revokeAll field.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdCel field.`,
								},
								"user_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
							},
							Description: `The CreateRevokeTasks message.`,
						},
						"grant_entitlements": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_entitlement_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The appEntitlementRefs field.`,
								},
								"app_entitlement_refs_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The appEntitlementRefsCel field.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdCel field.`,
								},
								"user_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
							},
							Description: `The GrantEntitlements message.`,
						},
						"remove_from_delegation": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"replacement_user_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The user who will replace the target user's delegation` + "\n" +
										`This field is part of the ` + "`" + `replacement_user` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.RemoveFromDelegation` + "`" + ` for more details.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdCel field.`,
								},
								"user_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
								"user_ref1": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
							},
							MarkdownDescription: `RemoveFromDelegation: find all users that have the target user as their delegated user, and modify the delegation.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named replacement_user. Only a single field of the following list may be set at a time:` + "\n" +
								`  - replacementUserIdCel` + "\n" +
								`  - replacementUserRef`,
						},
						"run_automation": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"automation_context": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"context": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Description: `The AutomationContext message.`,
								},
								"automation_template_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The automationTemplateIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `automation_template` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.RunAutomation` + "`" + ` for more details.`,
								},
								"automation_template_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id field.`,
										},
									},
									Description: `The AutomationTemplateRef message.`,
								},
							},
							MarkdownDescription: `RunAutomation: kick off the execution of an automation template.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named automation_template. Only a single field of the following list may be set at a time:` + "\n" +
								`  - automationTemplateRef` + "\n" +
								`  - automationTemplateIdCel`,
						},
						"send_email": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The body field.`,
								},
								"subject": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The subject field.`,
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The title field.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_ids_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdsCel field.`,
								},
								"user_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id of the user.`,
											},
										},
									},
									Description: `The userRefs field.`,
								},
							},
							Description: `The SendEmail message.`,
						},
						"send_slack_message": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"body": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The body field.`,
								},
								"channel_name": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The channelName field.` + "\n" +
										`This field is part of the ` + "`" + `channel` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.SendSlackMessage` + "`" + ` for more details.`,
								},
								"channel_name_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The channelNameCel field.` + "\n" +
										`This field is part of the ` + "`" + `channel` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.SendSlackMessage` + "`" + ` for more details.`,
								},
							},
							MarkdownDescription: `The SendSlackMessage message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named channel. Only a single field of the following list may be set at a time:` + "\n" +
								`  - channelName` + "\n" +
								`  - channelNameCel`,
						},
						"skip_if_true_cel": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The skipIfTrueCel field.`,
						},
						"step_display_name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The stepDisplayName field.`,
						},
						"step_name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The stepName field.`,
						},
						"task_action": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"close_action": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"use_subject_user": schema.BoolAttribute{
											Computed:    true,
											Optional:    true,
											Description: `If true, the step will use the subject user of the automation as the subject.`,
										},
										"user_id_cel": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `The userIdCel field.` + "\n" +
												`This field is part of the ` + "`" + `user_identifier` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `c1.api.automations.v1.CloseAction` + "`" + ` for more details.`,
										},
										"user_ref": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The id of the user.`,
												},
											},
											Description: `A reference to a user.`,
										},
									},
									MarkdownDescription: `The CloseAction message.` + "\n" +
										`` + "\n" +
										`This message contains a oneof named user_identifier. Only a single field of the following list may be set at a time:` + "\n" +
										`  - userIdCel` + "\n" +
										`  - userRef`,
								},
								"reassign_action": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"assignee_user_id_cel": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `The assigneeUserIdCel field.` + "\n" +
												`This field is part of the ` + "`" + `assignee_user_identifier` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `c1.api.automations.v1.ReassignAction` + "`" + ` for more details.`,
										},
										"subject_user_id_cel": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `The subjectUserIdCel field.` + "\n" +
												`This field is part of the ` + "`" + `subject_user_identifier` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `c1.api.automations.v1.ReassignAction` + "`" + ` for more details.`,
										},
										"use_subject_user": schema.BoolAttribute{
											Computed:    true,
											Optional:    true,
											Description: `If true, the step will use the subject user of the automation as the subject.`,
										},
										"user_ref": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The id of the user.`,
												},
											},
											Description: `A reference to a user.`,
										},
										"user_ref1": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The id of the user.`,
												},
											},
											Description: `A reference to a user.`,
										},
									},
									MarkdownDescription: `The ReassignAction message.` + "\n" +
										`` + "\n" +
										`This message contains a oneof named assignee_user_identifier. Only a single field of the following list may be set at a time:` + "\n" +
										`  - assigneeUserIdCel` + "\n" +
										`  - assigneeUserRef` + "\n" +
										`` + "\n" +
										`` + "\n" +
										`This message contains a oneof named subject_user_identifier. Only a single field of the following list may be set at a time:` + "\n" +
										`  - subjectUserIdCel` + "\n" +
										`  - subjectUserRef`,
								},
								"task_types": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `The taskTypes field.`,
								},
								"task_user_relation": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The taskUserRelation field. must be one of ["TASK_USER_RELATION_UNSPECIFIED", "TASK_USER_RELATION_ASSIGNEE", "TASK_USER_RELATION_SUBJECT"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"TASK_USER_RELATION_UNSPECIFIED",
											"TASK_USER_RELATION_ASSIGNEE",
											"TASK_USER_RELATION_SUBJECT",
										),
									},
								},
							},
							MarkdownDescription: `The TaskAction message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named action. Only a single field of the following list may be set at a time:` + "\n" +
								`  - close` + "\n" +
								`  - reassign`,
						},
						"unenroll_from_all_access_profiles": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"catalog_ids": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `Optional list of catalog IDs to unenroll from. If empty, unenroll from all catalogs.`,
								},
								"catalog_ids_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `CEL expression to dynamically select catalog IDs. If provided, overrides catalog_ids.`,
								},
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_ids_cel": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The userIdsCel field.`,
								},
								"user_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id of the user.`,
											},
										},
									},
									Description: `The userRefs field.`,
								},
							},
							Description: `The UnenrollFromAllAccessProfiles message.`,
						},
						"update_user": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"use_subject_user": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `If true, the step will use the subject user of the automation as the subject.`,
								},
								"user_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The userIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `user` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.UpdateUser` + "`" + ` for more details.`,
								},
								"user_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The id of the user.`,
										},
									},
									Description: `A reference to a user.`,
								},
								"user_status_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The userStatusCel field.` + "\n" +
										`This field is part of the ` + "`" + `user_status` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.UpdateUser` + "`" + ` for more details.`,
								},
								"user_status_enum": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The userStatusEnum field.` + "\n" +
										`This field is part of the ` + "`" + `user_status` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.UpdateUser` + "`" + ` for more details.` + "\n" +
										`must be one of ["UNKNOWN", "ENABLED", "DISABLED", "DELETED"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"UNKNOWN",
											"ENABLED",
											"DISABLED",
											"DELETED",
										),
									},
								},
							},
							MarkdownDescription: `The UpdateUser message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named user. Only a single field of the following list may be set at a time:` + "\n" +
								`  - userIdCel` + "\n" +
								`  - userRef` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named user_status. Only a single field of the following list may be set at a time:` + "\n" +
								`  - userStatusEnum` + "\n" +
								`  - userStatusCel`,
						},
						"wait_for_duration": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"duration": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `The WaitForDuration message.`,
						},
						"webhook": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"payload": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
								},
								"webhook_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The webhookId field.` + "\n" +
										`This field is part of the ` + "`" + `webhook_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.Webhook` + "`" + ` for more details.`,
								},
								"webhook_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The webhookIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `webhook_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.Webhook` + "`" + ` for more details.`,
								},
							},
							MarkdownDescription: `The Webhook message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named webhook_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - webhookId` + "\n" +
								`  - webhookIdCel`,
						},
					},
				},
				Description: `The draftAutomationSteps field.`,
			},
			"draft_triggers": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"app_user_created_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The appId field.` + "\n" +
										`This field is part of the ` + "`" + `app_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.AppUserCreatedTrigger` + "`" + ` for more details.`,
								},
								"app_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The appIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `app_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.AppUserCreatedTrigger` + "`" + ` for more details.`,
								},
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
							},
							MarkdownDescription: `The AppUserCreatedTrigger message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named app_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - appId` + "\n" +
								`  - appIdCel`,
						},
						"app_user_updated_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The appId field.` + "\n" +
										`This field is part of the ` + "`" + `app_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.AppUserUpdatedTrigger` + "`" + ` for more details.`,
								},
								"app_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The appIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `app_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.AppUserUpdatedTrigger` + "`" + ` for more details.`,
								},
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
							},
							MarkdownDescription: `The AppUserUpdatedTrigger message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named app_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - appId` + "\n" +
								`  - appIdCel`,
						},
						"form_trigger": schema.StringAttribute{
							CustomType:  jsontypes.NormalizedType{},
							Computed:    true,
							Optional:    true,
							Description: `The FormTrigger message. Parsed as JSON.`,
						},
						"grant_deleted_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"grant_trigger_filter": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"account_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"account_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The accountType field. must be one of ["APP_USER_TYPE_UNSPECIFIED", "APP_USER_TYPE_USER", "APP_USER_TYPE_SERVICE_ACCOUNT", "APP_USER_TYPE_SYSTEM_ACCOUNT"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"APP_USER_TYPE_UNSPECIFIED",
															"APP_USER_TYPE_USER",
															"APP_USER_TYPE_SERVICE_ACCOUNT",
															"APP_USER_TYPE_SYSTEM_ACCOUNT",
														),
													},
												},
											},
											Description: `The AccountFilter message.`,
										},
										"entitlement_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"app_entitlement_refs": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"app_id": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The appId field.`,
															},
															"id": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The id field.`,
															},
														},
													},
													Description: `The appEntitlementRefs field.`,
												},
												"app_entitlement_refs_cel": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The appEntitlementRefsCel field.`,
												},
												"app_id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The appId field.`,
												},
											},
											Description: `The EntitlementFilter message.`,
										},
										"grant_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"grant_filter_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantFilterType field. must be one of ["GRANT_FILTER_TYPE_UNSPECIFIED", "GRANT_FILTER_TYPE_PERMANENT", "GRANT_FILTER_TYPE_TEMPORARY"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_FILTER_TYPE_UNSPECIFIED",
															"GRANT_FILTER_TYPE_PERMANENT",
															"GRANT_FILTER_TYPE_TEMPORARY",
														),
													},
												},
												"grant_justification_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantJustificationType field. must be one of ["GRANT_JUSTIFICATION_TYPE_UNSPECIFIED", "GRANT_JUSTIFICATION_TYPE_ALL", "GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE", "GRANT_JUSTIFICATION_TYPE_DIRECT"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_JUSTIFICATION_TYPE_UNSPECIFIED",
															"GRANT_JUSTIFICATION_TYPE_ALL",
															"GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE",
															"GRANT_JUSTIFICATION_TYPE_DIRECT",
														),
													},
												},
												"grant_source_filter": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantSourceFilter field. must be one of ["GRANT_SOURCE_FILTER_UNSPECIFIED", "GRANT_SOURCE_FILTER_DIRECT", "GRANT_SOURCE_FILTER_INHERITED"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_SOURCE_FILTER_UNSPECIFIED",
															"GRANT_SOURCE_FILTER_DIRECT",
															"GRANT_SOURCE_FILTER_INHERITED",
														),
													},
												},
											},
											Description: `The GrantFilter message.`,
										},
									},
									Description: `The GrantTriggerFilter message.`,
								},
							},
							Description: `The GrantDeletedTrigger message.`,
						},
						"grant_found_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"grant_trigger_filter": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"account_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"account_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The accountType field. must be one of ["APP_USER_TYPE_UNSPECIFIED", "APP_USER_TYPE_USER", "APP_USER_TYPE_SERVICE_ACCOUNT", "APP_USER_TYPE_SYSTEM_ACCOUNT"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"APP_USER_TYPE_UNSPECIFIED",
															"APP_USER_TYPE_USER",
															"APP_USER_TYPE_SERVICE_ACCOUNT",
															"APP_USER_TYPE_SYSTEM_ACCOUNT",
														),
													},
												},
											},
											Description: `The AccountFilter message.`,
										},
										"entitlement_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"app_entitlement_refs": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"app_id": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The appId field.`,
															},
															"id": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The id field.`,
															},
														},
													},
													Description: `The appEntitlementRefs field.`,
												},
												"app_entitlement_refs_cel": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The appEntitlementRefsCel field.`,
												},
												"app_id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The appId field.`,
												},
											},
											Description: `The EntitlementFilter message.`,
										},
										"grant_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"grant_filter_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantFilterType field. must be one of ["GRANT_FILTER_TYPE_UNSPECIFIED", "GRANT_FILTER_TYPE_PERMANENT", "GRANT_FILTER_TYPE_TEMPORARY"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_FILTER_TYPE_UNSPECIFIED",
															"GRANT_FILTER_TYPE_PERMANENT",
															"GRANT_FILTER_TYPE_TEMPORARY",
														),
													},
												},
												"grant_justification_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantJustificationType field. must be one of ["GRANT_JUSTIFICATION_TYPE_UNSPECIFIED", "GRANT_JUSTIFICATION_TYPE_ALL", "GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE", "GRANT_JUSTIFICATION_TYPE_DIRECT"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_JUSTIFICATION_TYPE_UNSPECIFIED",
															"GRANT_JUSTIFICATION_TYPE_ALL",
															"GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE",
															"GRANT_JUSTIFICATION_TYPE_DIRECT",
														),
													},
												},
												"grant_source_filter": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantSourceFilter field. must be one of ["GRANT_SOURCE_FILTER_UNSPECIFIED", "GRANT_SOURCE_FILTER_DIRECT", "GRANT_SOURCE_FILTER_INHERITED"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_SOURCE_FILTER_UNSPECIFIED",
															"GRANT_SOURCE_FILTER_DIRECT",
															"GRANT_SOURCE_FILTER_INHERITED",
														),
													},
												},
											},
											Description: `The GrantFilter message.`,
										},
									},
									Description: `The GrantTriggerFilter message.`,
								},
							},
							Description: `The GrantFoundTrigger message.`,
						},
						"manual_automation_trigger": schema.SingleNestedAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The ManualAutomationTrigger message.`,
						},
						"schedule_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"advanced": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The advanced field.`,
								},
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
								"cron_spec": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The cronSpec field.`,
								},
								"skip_if_true_cel": schema.StringAttribute{
									Computed:           true,
									Optional:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									Description:        `The skipIfTrueCel field.`,
								},
								"start": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
							Description: `The ScheduleTrigger message.`,
						},
						"usage_based_revocation_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The appId field.`,
								},
								"enabled_at": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"excluded_group_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The excludedGroupRefs field.`,
								},
								"excluded_user_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id of the user.`,
											},
										},
									},
									Description: `The excludedUserRefs field.`,
								},
								"include_users_with_no_activity": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The includeUsersWithNoActivity field.`,
								},
								"run_delayed": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"cold_start_delay_days": schema.Int64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `The coldStartDelayDays field. Not Null`,
											Validators: []validator.Int64{
												speakeasy_int64validators.NotNull(),
											},
										},
									},
									Description: `The RunDelayed message.`,
								},
								"run_immediately": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `No fields needed; this just indicates the trigger should run immediately`,
								},
								"targeted_app_user_types": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `The targetedAppUserTypes field.`,
								},
								"targeted_entitlement_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The targetedEntitlementRefs field.`,
								},
								"unused_for_days": schema.Int64Attribute{
									Computed:    true,
									Optional:    true,
									Description: `The unusedForDays field.`,
								},
							},
							MarkdownDescription: `The UsageBasedRevocationTrigger message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named cold_start_schedule. Only a single field of the following list may be set at a time:` + "\n" +
								`  - runImmediately` + "\n" +
								`  - runDelayed`,
						},
						"user_created_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
							},
							Description: `The UserCreatedTrigger message.`,
						},
						"user_profile_change_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
							},
							Description: `The UserProfileChangeTrigger message.`,
						},
						"webhook_automation_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"listener_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Optional existing listener ID (hidden field from frontend)`,
								},
								"webhook_listener_auth_hmac": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The WebhookListenerAuthHMAC message.`,
								},
								"webhook_listener_auth_jwt": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"jwks_url": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The jwksUrl field.`,
										},
									},
									Description: `The WebhookListenerAuthJWT message.`,
								},
							},
							MarkdownDescription: `The WebhookAutomationTrigger message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named auth_config. Only a single field of the following list may be set at a time:` + "\n" +
								`  - jwt` + "\n" +
								`  - hmac`,
						},
					},
				},
				Description: `The draftTriggers field.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The enabled field.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id field.`,
			},
			"is_draft": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The isDraft field.`,
			},
			"last_executed_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"primary_trigger_type": schema.StringAttribute{
				Computed:    true,
				Description: `The primaryTriggerType field. must be one of ["TRIGGER_TYPE_UNSPECIFIED", "TRIGGER_TYPE_USER_PROFILE_CHANGE", "TRIGGER_TYPE_APP_USER_CREATE", "TRIGGER_TYPE_APP_USER_UPDATE", "TRIGGER_TYPE_UNUSED_ACCESS", "TRIGGER_TYPE_USER_CREATED", "TRIGGER_TYPE_GRANT_FOUND", "TRIGGER_TYPE_GRANT_DELETED", "TRIGGER_TYPE_WEBHOOK", "TRIGGER_TYPE_SCHEDULE", "TRIGGER_TYPE_FORM"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"TRIGGER_TYPE_UNSPECIFIED",
						"TRIGGER_TYPE_USER_PROFILE_CHANGE",
						"TRIGGER_TYPE_APP_USER_CREATE",
						"TRIGGER_TYPE_APP_USER_UPDATE",
						"TRIGGER_TYPE_UNUSED_ACCESS",
						"TRIGGER_TYPE_USER_CREATED",
						"TRIGGER_TYPE_GRANT_FOUND",
						"TRIGGER_TYPE_GRANT_DELETED",
						"TRIGGER_TYPE_WEBHOOK",
						"TRIGGER_TYPE_SCHEDULE",
						"TRIGGER_TYPE_FORM",
					),
				},
			},
			"triggers": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"app_user_created_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The appId field.` + "\n" +
										`This field is part of the ` + "`" + `app_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.AppUserCreatedTrigger` + "`" + ` for more details.`,
								},
								"app_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The appIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `app_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.AppUserCreatedTrigger` + "`" + ` for more details.`,
								},
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
							},
							MarkdownDescription: `The AppUserCreatedTrigger message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named app_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - appId` + "\n" +
								`  - appIdCel`,
						},
						"app_user_updated_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The appId field.` + "\n" +
										`This field is part of the ` + "`" + `app_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.AppUserUpdatedTrigger` + "`" + ` for more details.`,
								},
								"app_id_cel": schema.StringAttribute{
									Computed: true,
									Optional: true,
									MarkdownDescription: `The appIdCel field.` + "\n" +
										`This field is part of the ` + "`" + `app_identifier` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.automations.v1.AppUserUpdatedTrigger` + "`" + ` for more details.`,
								},
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
							},
							MarkdownDescription: `The AppUserUpdatedTrigger message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named app_identifier. Only a single field of the following list may be set at a time:` + "\n" +
								`  - appId` + "\n" +
								`  - appIdCel`,
						},
						"form_trigger": schema.StringAttribute{
							CustomType:  jsontypes.NormalizedType{},
							Computed:    true,
							Optional:    true,
							Description: `The FormTrigger message. Parsed as JSON.`,
						},
						"grant_deleted_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"grant_trigger_filter": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"account_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"account_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The accountType field. must be one of ["APP_USER_TYPE_UNSPECIFIED", "APP_USER_TYPE_USER", "APP_USER_TYPE_SERVICE_ACCOUNT", "APP_USER_TYPE_SYSTEM_ACCOUNT"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"APP_USER_TYPE_UNSPECIFIED",
															"APP_USER_TYPE_USER",
															"APP_USER_TYPE_SERVICE_ACCOUNT",
															"APP_USER_TYPE_SYSTEM_ACCOUNT",
														),
													},
												},
											},
											Description: `The AccountFilter message.`,
										},
										"entitlement_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"app_entitlement_refs": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"app_id": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The appId field.`,
															},
															"id": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The id field.`,
															},
														},
													},
													Description: `The appEntitlementRefs field.`,
												},
												"app_entitlement_refs_cel": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The appEntitlementRefsCel field.`,
												},
												"app_id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The appId field.`,
												},
											},
											Description: `The EntitlementFilter message.`,
										},
										"grant_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"grant_filter_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantFilterType field. must be one of ["GRANT_FILTER_TYPE_UNSPECIFIED", "GRANT_FILTER_TYPE_PERMANENT", "GRANT_FILTER_TYPE_TEMPORARY"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_FILTER_TYPE_UNSPECIFIED",
															"GRANT_FILTER_TYPE_PERMANENT",
															"GRANT_FILTER_TYPE_TEMPORARY",
														),
													},
												},
												"grant_justification_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantJustificationType field. must be one of ["GRANT_JUSTIFICATION_TYPE_UNSPECIFIED", "GRANT_JUSTIFICATION_TYPE_ALL", "GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE", "GRANT_JUSTIFICATION_TYPE_DIRECT"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_JUSTIFICATION_TYPE_UNSPECIFIED",
															"GRANT_JUSTIFICATION_TYPE_ALL",
															"GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE",
															"GRANT_JUSTIFICATION_TYPE_DIRECT",
														),
													},
												},
												"grant_source_filter": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantSourceFilter field. must be one of ["GRANT_SOURCE_FILTER_UNSPECIFIED", "GRANT_SOURCE_FILTER_DIRECT", "GRANT_SOURCE_FILTER_INHERITED"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_SOURCE_FILTER_UNSPECIFIED",
															"GRANT_SOURCE_FILTER_DIRECT",
															"GRANT_SOURCE_FILTER_INHERITED",
														),
													},
												},
											},
											Description: `The GrantFilter message.`,
										},
									},
									Description: `The GrantTriggerFilter message.`,
								},
							},
							Description: `The GrantDeletedTrigger message.`,
						},
						"grant_found_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"grant_trigger_filter": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"account_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"account_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The accountType field. must be one of ["APP_USER_TYPE_UNSPECIFIED", "APP_USER_TYPE_USER", "APP_USER_TYPE_SERVICE_ACCOUNT", "APP_USER_TYPE_SYSTEM_ACCOUNT"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"APP_USER_TYPE_UNSPECIFIED",
															"APP_USER_TYPE_USER",
															"APP_USER_TYPE_SERVICE_ACCOUNT",
															"APP_USER_TYPE_SYSTEM_ACCOUNT",
														),
													},
												},
											},
											Description: `The AccountFilter message.`,
										},
										"entitlement_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"app_entitlement_refs": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"app_id": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The appId field.`,
															},
															"id": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `The id field.`,
															},
														},
													},
													Description: `The appEntitlementRefs field.`,
												},
												"app_entitlement_refs_cel": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The appEntitlementRefsCel field.`,
												},
												"app_id": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The appId field.`,
												},
											},
											Description: `The EntitlementFilter message.`,
										},
										"grant_filter": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"grant_filter_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantFilterType field. must be one of ["GRANT_FILTER_TYPE_UNSPECIFIED", "GRANT_FILTER_TYPE_PERMANENT", "GRANT_FILTER_TYPE_TEMPORARY"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_FILTER_TYPE_UNSPECIFIED",
															"GRANT_FILTER_TYPE_PERMANENT",
															"GRANT_FILTER_TYPE_TEMPORARY",
														),
													},
												},
												"grant_justification_type": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantJustificationType field. must be one of ["GRANT_JUSTIFICATION_TYPE_UNSPECIFIED", "GRANT_JUSTIFICATION_TYPE_ALL", "GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE", "GRANT_JUSTIFICATION_TYPE_DIRECT"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_JUSTIFICATION_TYPE_UNSPECIFIED",
															"GRANT_JUSTIFICATION_TYPE_ALL",
															"GRANT_JUSTIFICATION_TYPE_CONDUCTOR_ONE",
															"GRANT_JUSTIFICATION_TYPE_DIRECT",
														),
													},
												},
												"grant_source_filter": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Description: `The grantSourceFilter field. must be one of ["GRANT_SOURCE_FILTER_UNSPECIFIED", "GRANT_SOURCE_FILTER_DIRECT", "GRANT_SOURCE_FILTER_INHERITED"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"GRANT_SOURCE_FILTER_UNSPECIFIED",
															"GRANT_SOURCE_FILTER_DIRECT",
															"GRANT_SOURCE_FILTER_INHERITED",
														),
													},
												},
											},
											Description: `The GrantFilter message.`,
										},
									},
									Description: `The GrantTriggerFilter message.`,
								},
							},
							Description: `The GrantFoundTrigger message.`,
						},
						"manual_automation_trigger": schema.SingleNestedAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The ManualAutomationTrigger message.`,
						},
						"schedule_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"advanced": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The advanced field.`,
								},
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
								"cron_spec": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The cronSpec field.`,
								},
								"skip_if_true_cel": schema.StringAttribute{
									Computed:           true,
									Optional:           true,
									DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
									Description:        `The skipIfTrueCel field.`,
								},
								"start": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
							Description: `The ScheduleTrigger message.`,
						},
						"usage_based_revocation_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The appId field.`,
								},
								"enabled_at": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"excluded_group_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The excludedGroupRefs field.`,
								},
								"excluded_user_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id of the user.`,
											},
										},
									},
									Description: `The excludedUserRefs field.`,
								},
								"include_users_with_no_activity": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The includeUsersWithNoActivity field.`,
								},
								"run_delayed": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"cold_start_delay_days": schema.Int64Attribute{
											Computed:    true,
											Optional:    true,
											Description: `The coldStartDelayDays field. Not Null`,
											Validators: []validator.Int64{
												speakeasy_int64validators.NotNull(),
											},
										},
									},
									Description: `The RunDelayed message.`,
								},
								"run_immediately": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `No fields needed; this just indicates the trigger should run immediately`,
								},
								"targeted_app_user_types": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Description: `The targetedAppUserTypes field.`,
								},
								"targeted_entitlement_refs": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The appId field.`,
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The id field.`,
											},
										},
									},
									Description: `The targetedEntitlementRefs field.`,
								},
								"unused_for_days": schema.Int64Attribute{
									Computed:    true,
									Optional:    true,
									Description: `The unusedForDays field.`,
								},
							},
							MarkdownDescription: `The UsageBasedRevocationTrigger message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named cold_start_schedule. Only a single field of the following list may be set at a time:` + "\n" +
								`  - runImmediately` + "\n" +
								`  - runDelayed`,
						},
						"user_created_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
							},
							Description: `The UserCreatedTrigger message.`,
						},
						"user_profile_change_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"condition": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The condition field.`,
								},
							},
							Description: `The UserProfileChangeTrigger message.`,
						},
						"webhook_automation_trigger": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"listener_id": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Optional existing listener ID (hidden field from frontend)`,
								},
								"webhook_listener_auth_hmac": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The WebhookListenerAuthHMAC message.`,
								},
								"webhook_listener_auth_jwt": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"jwks_url": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The jwksUrl field.`,
										},
									},
									Description: `The WebhookListenerAuthJWT message.`,
								},
							},
							MarkdownDescription: `The WebhookAutomationTrigger message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named auth_config. Only a single field of the following list may be set at a time:` + "\n" +
								`  - jwt` + "\n" +
								`  - hmac`,
						},
					},
				},
				Description: `The triggers field.`,
			},
			"webhook_hmac_secret": schema.StringAttribute{
				Computed:    true,
				Description: `If we create a new trigger with an HMAC secret we return the HMAC on this field`,
			},
		},
	}
}

func (r *AutomationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AutomationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *AutomationResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedCreateAutomationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Automation.CreateAutomation(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CreateAutomationResponse != nil && res.CreateAutomationResponse.Automation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAutomation(ctx, res.CreateAutomationResponse.Automation)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AutomationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *AutomationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIAutomationsV1AutomationServiceGetAutomationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Automation.GetAutomation(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.GetAutomationResponse != nil && res.GetAutomationResponse.Automation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAutomation(ctx, res.GetAutomationResponse.Automation)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AutomationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *AutomationResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIAutomationsV1AutomationServiceUpdateAutomationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Automation.UpdateAutomation(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.UpdateAutomationResponse != nil && res.UpdateAutomationResponse.Automation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAutomation(ctx, res.UpdateAutomationResponse.Automation)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsC1APIAutomationsV1AutomationServiceGetAutomationRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.Automation.GetAutomation(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.GetAutomationResponse != nil && res1.GetAutomationResponse.Automation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAutomation(ctx, res1.GetAutomationResponse.Automation)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AutomationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *AutomationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIAutomationsV1AutomationServiceDeleteAutomationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Automation.DeleteAutomation(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *AutomationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
