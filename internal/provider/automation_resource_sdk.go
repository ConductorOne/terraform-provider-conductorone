// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AutomationResourceModel) RefreshFromSharedAutomation(ctx context.Context, resp *shared.Automation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppID = types.StringPointerValue(resp.AppID)
		if resp.AutomationSteps != nil {
			r.AutomationSteps = []tfTypes.AutomationStep{}

			for _, automationStepsItem := range resp.AutomationSteps {
				var automationSteps tfTypes.AutomationStep

				if automationStepsItem.CallFunction == nil {
					automationSteps.CallFunction = nil
				} else {
					automationSteps.CallFunction = &tfTypes.CallFunction{}
					if automationStepsItem.CallFunction.Args != nil {
						automationSteps.CallFunction.Args = make(map[string]types.String, len(automationStepsItem.CallFunction.Args))
						for key, value := range automationStepsItem.CallFunction.Args {
							automationSteps.CallFunction.Args[key] = types.StringValue(value)
						}
					}
					automationSteps.CallFunction.FunctionID = types.StringPointerValue(automationStepsItem.CallFunction.FunctionID)
				}
				if automationStepsItem.ConnectorAction == nil {
					automationSteps.ConnectorAction = nil
				} else {
					automationSteps.ConnectorAction = &tfTypes.ConnectorAction{}
					automationSteps.ConnectorAction.ActionName = types.StringPointerValue(automationStepsItem.ConnectorAction.ActionName)
					if automationStepsItem.ConnectorAction.ArgsTemplate == nil {
						automationSteps.ConnectorAction.ArgsTemplate = nil
					} else {
						automationSteps.ConnectorAction.ArgsTemplate = &tfTypes.ArgsTemplate{}
					}
					if automationStepsItem.ConnectorAction.ConnectorRef == nil {
						automationSteps.ConnectorAction.ConnectorRef = nil
					} else {
						automationSteps.ConnectorAction.ConnectorRef = &tfTypes.ConnectorRef{}
						automationSteps.ConnectorAction.ConnectorRef.AppID = types.StringPointerValue(automationStepsItem.ConnectorAction.ConnectorRef.AppID)
						automationSteps.ConnectorAction.ConnectorRef.ID = types.StringPointerValue(automationStepsItem.ConnectorAction.ConnectorRef.ID)
					}
				}
				if automationStepsItem.ConnectorCreateAccount == nil {
					automationSteps.ConnectorCreateAccount = nil
				} else {
					automationSteps.ConnectorCreateAccount = &tfTypes.ConnectorCreateAccount{}
					if automationStepsItem.ConnectorCreateAccount.ConnectorRef == nil {
						automationSteps.ConnectorCreateAccount.ConnectorRef = nil
					} else {
						automationSteps.ConnectorCreateAccount.ConnectorRef = &tfTypes.ConnectorRef{}
						automationSteps.ConnectorCreateAccount.ConnectorRef.AppID = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID)
						automationSteps.ConnectorCreateAccount.ConnectorRef.ID = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID)
					}
					automationSteps.ConnectorCreateAccount.UserIDCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserIDCel)
					if automationStepsItem.ConnectorCreateAccount.UserProperties == nil {
						automationSteps.ConnectorCreateAccount.UserProperties = nil
					} else {
						automationSteps.ConnectorCreateAccount.UserProperties = &tfTypes.UserProperties{}
						automationSteps.ConnectorCreateAccount.UserProperties.DisplayNameCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel)
						automationSteps.ConnectorCreateAccount.UserProperties.EmailCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel)
						automationSteps.ConnectorCreateAccount.UserProperties.ProfileAttributeCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel)
						automationSteps.ConnectorCreateAccount.UserProperties.UsernameCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel)
					}
				}
				if automationStepsItem.CreateAccessReview == nil {
					automationSteps.CreateAccessReview = nil
				} else {
					automationSteps.CreateAccessReview = &tfTypes.CreateAccessReview{}
					automationSteps.CreateAccessReview.AccessReviewTemplateCel = types.StringPointerValue(automationStepsItem.CreateAccessReview.AccessReviewTemplateCel)
					automationSteps.CreateAccessReview.AccessReviewTemplateID = types.StringPointerValue(automationStepsItem.CreateAccessReview.AccessReviewTemplateID)
					automationSteps.CreateAccessReview.CampaignName = types.StringPointerValue(automationStepsItem.CreateAccessReview.CampaignName)
					automationSteps.CreateAccessReview.UserIdsCel = types.StringPointerValue(automationStepsItem.CreateAccessReview.UserIdsCel)
					if automationStepsItem.CreateAccessReview.UserRefs != nil {
						automationSteps.CreateAccessReview.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem := range automationStepsItem.CreateAccessReview.UserRefs {
							var userRefs tfTypes.UserRef

							userRefs.ID = types.StringPointerValue(userRefsItem.ID)

							automationSteps.CreateAccessReview.UserRefs = append(automationSteps.CreateAccessReview.UserRefs, userRefs)
						}
					}
					automationSteps.CreateAccessReview.UseSubjectUser = types.BoolPointerValue(automationStepsItem.CreateAccessReview.UseSubjectUser)
				}
				if automationStepsItem.CreateRevokeTasks == nil {
					automationSteps.CreateRevokeTasks = nil
				} else {
					automationSteps.CreateRevokeTasks = &tfTypes.CreateRevokeTasks{}
					if automationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
						automationSteps.CreateRevokeTasks.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, appEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
							var appEntitlementRefs tfTypes.AppEntitlementRef

							appEntitlementRefs.AppID = types.StringPointerValue(appEntitlementRefsItem.AppID)
							appEntitlementRefs.ID = types.StringPointerValue(appEntitlementRefsItem.ID)

							automationSteps.CreateRevokeTasks.AppEntitlementRefs = append(automationSteps.CreateRevokeTasks.AppEntitlementRefs, appEntitlementRefs)
						}
					}
					automationSteps.CreateRevokeTasks.AppEntitlementRefsCel = types.StringPointerValue(automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel)
					automationSteps.CreateRevokeTasks.RevokeAll = types.BoolPointerValue(automationStepsItem.CreateRevokeTasks.RevokeAll)
					automationSteps.CreateRevokeTasks.UserIDCel = types.StringPointerValue(automationStepsItem.CreateRevokeTasks.UserIDCel)
					if automationStepsItem.CreateRevokeTasks.UserRef == nil {
						automationSteps.CreateRevokeTasks.UserRef = nil
					} else {
						automationSteps.CreateRevokeTasks.UserRef = &tfTypes.UserRef{}
						automationSteps.CreateRevokeTasks.UserRef.ID = types.StringPointerValue(automationStepsItem.CreateRevokeTasks.UserRef.ID)
					}
					automationSteps.CreateRevokeTasks.UseSubjectUser = types.BoolPointerValue(automationStepsItem.CreateRevokeTasks.UseSubjectUser)
				}
				if automationStepsItem.GrantEntitlements == nil {
					automationSteps.GrantEntitlements = nil
				} else {
					automationSteps.GrantEntitlements = &tfTypes.GrantEntitlements{}
					if automationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
						automationSteps.GrantEntitlements.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, appEntitlementRefsItem1 := range automationStepsItem.GrantEntitlements.AppEntitlementRefs {
							var appEntitlementRefs1 tfTypes.AppEntitlementRef

							appEntitlementRefs1.AppID = types.StringPointerValue(appEntitlementRefsItem1.AppID)
							appEntitlementRefs1.ID = types.StringPointerValue(appEntitlementRefsItem1.ID)

							automationSteps.GrantEntitlements.AppEntitlementRefs = append(automationSteps.GrantEntitlements.AppEntitlementRefs, appEntitlementRefs1)
						}
					}
					automationSteps.GrantEntitlements.AppEntitlementRefsCel = types.StringPointerValue(automationStepsItem.GrantEntitlements.AppEntitlementRefsCel)
					automationSteps.GrantEntitlements.UserIDCel = types.StringPointerValue(automationStepsItem.GrantEntitlements.UserIDCel)
					if automationStepsItem.GrantEntitlements.UserRef == nil {
						automationSteps.GrantEntitlements.UserRef = nil
					} else {
						automationSteps.GrantEntitlements.UserRef = &tfTypes.UserRef{}
						automationSteps.GrantEntitlements.UserRef.ID = types.StringPointerValue(automationStepsItem.GrantEntitlements.UserRef.ID)
					}
					automationSteps.GrantEntitlements.UseSubjectUser = types.BoolPointerValue(automationStepsItem.GrantEntitlements.UseSubjectUser)
				}
				if automationStepsItem.RemoveFromDelegation == nil {
					automationSteps.RemoveFromDelegation = nil
				} else {
					automationSteps.RemoveFromDelegation = &tfTypes.RemoveFromDelegation{}
					automationSteps.RemoveFromDelegation.ReplacementUserIDCel = types.StringPointerValue(automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel)
					if automationStepsItem.RemoveFromDelegation.ReplacementUserRef == nil {
						automationSteps.RemoveFromDelegation.ReplacementUserRef = nil
					} else {
						automationSteps.RemoveFromDelegation.ReplacementUserRef = &tfTypes.UserRef{}
						automationSteps.RemoveFromDelegation.ReplacementUserRef.ID = types.StringPointerValue(automationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID)
					}
					automationSteps.RemoveFromDelegation.UserIDCel = types.StringPointerValue(automationStepsItem.RemoveFromDelegation.UserIDCel)
					if automationStepsItem.RemoveFromDelegation.UserRef == nil {
						automationSteps.RemoveFromDelegation.UserRef = nil
					} else {
						automationSteps.RemoveFromDelegation.UserRef = &tfTypes.UserRef{}
						automationSteps.RemoveFromDelegation.UserRef.ID = types.StringPointerValue(automationStepsItem.RemoveFromDelegation.UserRef.ID)
					}
					automationSteps.RemoveFromDelegation.UseSubjectUser = types.BoolPointerValue(automationStepsItem.RemoveFromDelegation.UseSubjectUser)
				}
				if automationStepsItem.RunAutomation == nil {
					automationSteps.RunAutomation = nil
				} else {
					automationSteps.RunAutomation = &tfTypes.RunAutomation{}
					automationSteps.RunAutomation.AutomationTemplateIDCel = types.StringPointerValue(automationStepsItem.RunAutomation.AutomationTemplateIDCel)
					if automationStepsItem.RunAutomation.AutomationTemplateRef == nil {
						automationSteps.RunAutomation.AutomationTemplateRef = nil
					} else {
						automationSteps.RunAutomation.AutomationTemplateRef = &tfTypes.AutomationTemplateRef{}
						automationSteps.RunAutomation.AutomationTemplateRef.ID = types.StringPointerValue(automationStepsItem.RunAutomation.AutomationTemplateRef.ID)
					}
					if automationStepsItem.RunAutomation.Context == nil {
						automationSteps.RunAutomation.Context = nil
					} else {
						automationSteps.RunAutomation.Context = &tfTypes.AutomationContext{}
						if automationStepsItem.RunAutomation.Context.Context == nil {
							automationSteps.RunAutomation.Context.Context = nil
						} else {
							automationSteps.RunAutomation.Context.Context = &tfTypes.Context{}
						}
					}
				}
				if automationStepsItem.SendEmail == nil {
					automationSteps.SendEmail = nil
				} else {
					automationSteps.SendEmail = &tfTypes.SendEmail{}
					automationSteps.SendEmail.Body = types.StringPointerValue(automationStepsItem.SendEmail.Body)
					automationSteps.SendEmail.Subject = types.StringPointerValue(automationStepsItem.SendEmail.Subject)
					automationSteps.SendEmail.Title = types.StringPointerValue(automationStepsItem.SendEmail.Title)
					automationSteps.SendEmail.UserIdsCel = types.StringPointerValue(automationStepsItem.SendEmail.UserIdsCel)
					if automationStepsItem.SendEmail.UserRefs != nil {
						automationSteps.SendEmail.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem1 := range automationStepsItem.SendEmail.UserRefs {
							var userRefs1 tfTypes.UserRef

							userRefs1.ID = types.StringPointerValue(userRefsItem1.ID)

							automationSteps.SendEmail.UserRefs = append(automationSteps.SendEmail.UserRefs, userRefs1)
						}
					}
					automationSteps.SendEmail.UseSubjectUser = types.BoolPointerValue(automationStepsItem.SendEmail.UseSubjectUser)
				}
				if automationStepsItem.SendSlackMessage == nil {
					automationSteps.SendSlackMessage = nil
				} else {
					automationSteps.SendSlackMessage = &tfTypes.SendSlackMessage{}
					automationSteps.SendSlackMessage.Body = types.StringPointerValue(automationStepsItem.SendSlackMessage.Body)
					automationSteps.SendSlackMessage.ChannelName = types.StringPointerValue(automationStepsItem.SendSlackMessage.ChannelName)
					automationSteps.SendSlackMessage.ChannelNameCel = types.StringPointerValue(automationStepsItem.SendSlackMessage.ChannelNameCel)
				}
				automationSteps.SkipIfTrueCel = types.StringPointerValue(automationStepsItem.SkipIfTrueCel)
				automationSteps.StepDisplayName = types.StringPointerValue(automationStepsItem.StepDisplayName)
				automationSteps.StepName = types.StringPointerValue(automationStepsItem.StepName)
				if automationStepsItem.TaskAction == nil {
					automationSteps.TaskAction = nil
				} else {
					automationSteps.TaskAction = &tfTypes.TaskAction{}
					if automationStepsItem.TaskAction.Close == nil {
						automationSteps.TaskAction.Close = nil
					} else {
						automationSteps.TaskAction.Close = &tfTypes.CloseAction{}
						automationSteps.TaskAction.Close.UserIDCel = types.StringPointerValue(automationStepsItem.TaskAction.Close.UserIDCel)
						if automationStepsItem.TaskAction.Close.UserRef == nil {
							automationSteps.TaskAction.Close.UserRef = nil
						} else {
							automationSteps.TaskAction.Close.UserRef = &tfTypes.UserRef{}
							automationSteps.TaskAction.Close.UserRef.ID = types.StringPointerValue(automationStepsItem.TaskAction.Close.UserRef.ID)
						}
						automationSteps.TaskAction.Close.UseSubjectUser = types.BoolPointerValue(automationStepsItem.TaskAction.Close.UseSubjectUser)
					}
					if automationStepsItem.TaskAction.Reassign == nil {
						automationSteps.TaskAction.Reassign = nil
					} else {
						automationSteps.TaskAction.Reassign = &tfTypes.ReassignAction{}
						automationSteps.TaskAction.Reassign.AssigneeUserIDCel = types.StringPointerValue(automationStepsItem.TaskAction.Reassign.AssigneeUserIDCel)
						if automationStepsItem.TaskAction.Reassign.AssigneeUserRef == nil {
							automationSteps.TaskAction.Reassign.AssigneeUserRef = nil
						} else {
							automationSteps.TaskAction.Reassign.AssigneeUserRef = &tfTypes.UserRef{}
							automationSteps.TaskAction.Reassign.AssigneeUserRef.ID = types.StringPointerValue(automationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID)
						}
						automationSteps.TaskAction.Reassign.SubjectUserIDCel = types.StringPointerValue(automationStepsItem.TaskAction.Reassign.SubjectUserIDCel)
						if automationStepsItem.TaskAction.Reassign.SubjectUserRef == nil {
							automationSteps.TaskAction.Reassign.SubjectUserRef = nil
						} else {
							automationSteps.TaskAction.Reassign.SubjectUserRef = &tfTypes.UserRef{}
							automationSteps.TaskAction.Reassign.SubjectUserRef.ID = types.StringPointerValue(automationStepsItem.TaskAction.Reassign.SubjectUserRef.ID)
						}
						automationSteps.TaskAction.Reassign.UseSubjectUser = types.BoolPointerValue(automationStepsItem.TaskAction.Reassign.UseSubjectUser)
					}
					if automationStepsItem.TaskAction.TaskTypes != nil {
						automationSteps.TaskAction.TaskTypes = make([]types.String, 0, len(automationStepsItem.TaskAction.TaskTypes))
						for _, v := range automationStepsItem.TaskAction.TaskTypes {
							automationSteps.TaskAction.TaskTypes = append(automationSteps.TaskAction.TaskTypes, types.StringValue(string(v)))
						}
					}
					if automationStepsItem.TaskAction.TaskUserRelation != nil {
						automationSteps.TaskAction.TaskUserRelation = types.StringValue(string(*automationStepsItem.TaskAction.TaskUserRelation))
					} else {
						automationSteps.TaskAction.TaskUserRelation = types.StringNull()
					}
				}
				if automationStepsItem.UnenrollFromAllAccessProfiles == nil {
					automationSteps.UnenrollFromAllAccessProfiles = nil
				} else {
					automationSteps.UnenrollFromAllAccessProfiles = &tfTypes.UnenrollFromAllAccessProfiles{}
					if automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
						automationSteps.UnenrollFromAllAccessProfiles.CatalogIds = make([]types.String, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
						for _, v := range automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
							automationSteps.UnenrollFromAllAccessProfiles.CatalogIds = append(automationSteps.UnenrollFromAllAccessProfiles.CatalogIds, types.StringValue(v))
						}
					}
					automationSteps.UnenrollFromAllAccessProfiles.CatalogIdsCel = types.StringPointerValue(automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel)
					automationSteps.UnenrollFromAllAccessProfiles.UserIdsCel = types.StringPointerValue(automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel)
					if automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
						automationSteps.UnenrollFromAllAccessProfiles.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem2 := range automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
							var userRefs2 tfTypes.UserRef

							userRefs2.ID = types.StringPointerValue(userRefsItem2.ID)

							automationSteps.UnenrollFromAllAccessProfiles.UserRefs = append(automationSteps.UnenrollFromAllAccessProfiles.UserRefs, userRefs2)
						}
					}
					automationSteps.UnenrollFromAllAccessProfiles.UseSubjectUser = types.BoolPointerValue(automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser)
				}
				if automationStepsItem.UpdateUser == nil {
					automationSteps.UpdateUser = nil
				} else {
					automationSteps.UpdateUser = &tfTypes.UpdateUser{}
					automationSteps.UpdateUser.UserIDCel = types.StringPointerValue(automationStepsItem.UpdateUser.UserIDCel)
					if automationStepsItem.UpdateUser.UserRef == nil {
						automationSteps.UpdateUser.UserRef = nil
					} else {
						automationSteps.UpdateUser.UserRef = &tfTypes.UserRef{}
						automationSteps.UpdateUser.UserRef.ID = types.StringPointerValue(automationStepsItem.UpdateUser.UserRef.ID)
					}
					automationSteps.UpdateUser.UserStatusCel = types.StringPointerValue(automationStepsItem.UpdateUser.UserStatusCel)
					if automationStepsItem.UpdateUser.UserStatusEnum != nil {
						automationSteps.UpdateUser.UserStatusEnum = types.StringValue(string(*automationStepsItem.UpdateUser.UserStatusEnum))
					} else {
						automationSteps.UpdateUser.UserStatusEnum = types.StringNull()
					}
					automationSteps.UpdateUser.UseSubjectUser = types.BoolPointerValue(automationStepsItem.UpdateUser.UseSubjectUser)
				}
				if automationStepsItem.WaitForDuration == nil {
					automationSteps.WaitForDuration = nil
				} else {
					automationSteps.WaitForDuration = &tfTypes.WaitForDuration{}
					automationSteps.WaitForDuration.Duration = types.StringPointerValue(automationStepsItem.WaitForDuration.Duration)
				}
				if automationStepsItem.Webhook == nil {
					automationSteps.Webhook = nil
				} else {
					automationSteps.Webhook = &tfTypes.Webhook{}
					if automationStepsItem.Webhook.Payload == nil {
						automationSteps.Webhook.Payload = nil
					} else {
						automationSteps.Webhook.Payload = &tfTypes.Payload{}
					}
					automationSteps.Webhook.WebhookID = types.StringPointerValue(automationStepsItem.Webhook.WebhookID)
					automationSteps.Webhook.WebhookIDCel = types.StringPointerValue(automationStepsItem.Webhook.WebhookIDCel)
				}

				r.AutomationSteps = append(r.AutomationSteps, automationSteps)
			}
		}
		if resp.CircuitBreaker == nil {
			r.CircuitBreaker = nil
		} else {
			r.CircuitBreaker = &tfTypes.DisabledReasonCircuitBreaker{}
		}
		if resp.Context == nil {
			r.Context = nil
		} else {
			r.Context = &tfTypes.AutomationContext{}
			if resp.Context.Context == nil {
				r.Context.Context = nil
			} else {
				r.Context.Context = &tfTypes.Context{}
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CurrentVersion = types.StringPointerValue(resp.CurrentVersion)
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		if resp.DraftAutomationSteps != nil {
			r.DraftAutomationSteps = []tfTypes.AutomationStep{}

			for _, draftAutomationStepsItem := range resp.DraftAutomationSteps {
				var draftAutomationSteps tfTypes.AutomationStep

				if draftAutomationStepsItem.CallFunction == nil {
					draftAutomationSteps.CallFunction = nil
				} else {
					draftAutomationSteps.CallFunction = &tfTypes.CallFunction{}
					if draftAutomationStepsItem.CallFunction.Args != nil {
						draftAutomationSteps.CallFunction.Args = make(map[string]types.String, len(draftAutomationStepsItem.CallFunction.Args))
						for key1, value1 := range draftAutomationStepsItem.CallFunction.Args {
							draftAutomationSteps.CallFunction.Args[key1] = types.StringValue(value1)
						}
					}
					draftAutomationSteps.CallFunction.FunctionID = types.StringPointerValue(draftAutomationStepsItem.CallFunction.FunctionID)
				}
				if draftAutomationStepsItem.ConnectorAction == nil {
					draftAutomationSteps.ConnectorAction = nil
				} else {
					draftAutomationSteps.ConnectorAction = &tfTypes.ConnectorAction{}
					draftAutomationSteps.ConnectorAction.ActionName = types.StringPointerValue(draftAutomationStepsItem.ConnectorAction.ActionName)
					if draftAutomationStepsItem.ConnectorAction.ArgsTemplate == nil {
						draftAutomationSteps.ConnectorAction.ArgsTemplate = nil
					} else {
						draftAutomationSteps.ConnectorAction.ArgsTemplate = &tfTypes.ArgsTemplate{}
					}
					if draftAutomationStepsItem.ConnectorAction.ConnectorRef == nil {
						draftAutomationSteps.ConnectorAction.ConnectorRef = nil
					} else {
						draftAutomationSteps.ConnectorAction.ConnectorRef = &tfTypes.ConnectorRef{}
						draftAutomationSteps.ConnectorAction.ConnectorRef.AppID = types.StringPointerValue(draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID)
						draftAutomationSteps.ConnectorAction.ConnectorRef.ID = types.StringPointerValue(draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID)
					}
				}
				if draftAutomationStepsItem.ConnectorCreateAccount == nil {
					draftAutomationSteps.ConnectorCreateAccount = nil
				} else {
					draftAutomationSteps.ConnectorCreateAccount = &tfTypes.ConnectorCreateAccount{}
					if draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef == nil {
						draftAutomationSteps.ConnectorCreateAccount.ConnectorRef = nil
					} else {
						draftAutomationSteps.ConnectorCreateAccount.ConnectorRef = &tfTypes.ConnectorRef{}
						draftAutomationSteps.ConnectorCreateAccount.ConnectorRef.AppID = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID)
						draftAutomationSteps.ConnectorCreateAccount.ConnectorRef.ID = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID)
					}
					draftAutomationSteps.ConnectorCreateAccount.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel)
					if draftAutomationStepsItem.ConnectorCreateAccount.UserProperties == nil {
						draftAutomationSteps.ConnectorCreateAccount.UserProperties = nil
					} else {
						draftAutomationSteps.ConnectorCreateAccount.UserProperties = &tfTypes.UserProperties{}
						draftAutomationSteps.ConnectorCreateAccount.UserProperties.DisplayNameCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel)
						draftAutomationSteps.ConnectorCreateAccount.UserProperties.EmailCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel)
						draftAutomationSteps.ConnectorCreateAccount.UserProperties.ProfileAttributeCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel)
						draftAutomationSteps.ConnectorCreateAccount.UserProperties.UsernameCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel)
					}
				}
				if draftAutomationStepsItem.CreateAccessReview == nil {
					draftAutomationSteps.CreateAccessReview = nil
				} else {
					draftAutomationSteps.CreateAccessReview = &tfTypes.CreateAccessReview{}
					draftAutomationSteps.CreateAccessReview.AccessReviewTemplateCel = types.StringPointerValue(draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel)
					draftAutomationSteps.CreateAccessReview.AccessReviewTemplateID = types.StringPointerValue(draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID)
					draftAutomationSteps.CreateAccessReview.CampaignName = types.StringPointerValue(draftAutomationStepsItem.CreateAccessReview.CampaignName)
					draftAutomationSteps.CreateAccessReview.UserIdsCel = types.StringPointerValue(draftAutomationStepsItem.CreateAccessReview.UserIdsCel)
					if draftAutomationStepsItem.CreateAccessReview.UserRefs != nil {
						draftAutomationSteps.CreateAccessReview.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem3 := range draftAutomationStepsItem.CreateAccessReview.UserRefs {
							var userRefs3 tfTypes.UserRef

							userRefs3.ID = types.StringPointerValue(userRefsItem3.ID)

							draftAutomationSteps.CreateAccessReview.UserRefs = append(draftAutomationSteps.CreateAccessReview.UserRefs, userRefs3)
						}
					}
					draftAutomationSteps.CreateAccessReview.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.CreateAccessReview.UseSubjectUser)
				}
				if draftAutomationStepsItem.CreateRevokeTasks == nil {
					draftAutomationSteps.CreateRevokeTasks = nil
				} else {
					draftAutomationSteps.CreateRevokeTasks = &tfTypes.CreateRevokeTasks{}
					if draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
						draftAutomationSteps.CreateRevokeTasks.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, appEntitlementRefsItem2 := range draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
							var appEntitlementRefs2 tfTypes.AppEntitlementRef

							appEntitlementRefs2.AppID = types.StringPointerValue(appEntitlementRefsItem2.AppID)
							appEntitlementRefs2.ID = types.StringPointerValue(appEntitlementRefsItem2.ID)

							draftAutomationSteps.CreateRevokeTasks.AppEntitlementRefs = append(draftAutomationSteps.CreateRevokeTasks.AppEntitlementRefs, appEntitlementRefs2)
						}
					}
					draftAutomationSteps.CreateRevokeTasks.AppEntitlementRefsCel = types.StringPointerValue(draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel)
					draftAutomationSteps.CreateRevokeTasks.RevokeAll = types.BoolPointerValue(draftAutomationStepsItem.CreateRevokeTasks.RevokeAll)
					draftAutomationSteps.CreateRevokeTasks.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.CreateRevokeTasks.UserIDCel)
					if draftAutomationStepsItem.CreateRevokeTasks.UserRef == nil {
						draftAutomationSteps.CreateRevokeTasks.UserRef = nil
					} else {
						draftAutomationSteps.CreateRevokeTasks.UserRef = &tfTypes.UserRef{}
						draftAutomationSteps.CreateRevokeTasks.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID)
					}
					draftAutomationSteps.CreateRevokeTasks.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser)
				}
				if draftAutomationStepsItem.GrantEntitlements == nil {
					draftAutomationSteps.GrantEntitlements = nil
				} else {
					draftAutomationSteps.GrantEntitlements = &tfTypes.GrantEntitlements{}
					if draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
						draftAutomationSteps.GrantEntitlements.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, appEntitlementRefsItem3 := range draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs {
							var appEntitlementRefs3 tfTypes.AppEntitlementRef

							appEntitlementRefs3.AppID = types.StringPointerValue(appEntitlementRefsItem3.AppID)
							appEntitlementRefs3.ID = types.StringPointerValue(appEntitlementRefsItem3.ID)

							draftAutomationSteps.GrantEntitlements.AppEntitlementRefs = append(draftAutomationSteps.GrantEntitlements.AppEntitlementRefs, appEntitlementRefs3)
						}
					}
					draftAutomationSteps.GrantEntitlements.AppEntitlementRefsCel = types.StringPointerValue(draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel)
					draftAutomationSteps.GrantEntitlements.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.GrantEntitlements.UserIDCel)
					if draftAutomationStepsItem.GrantEntitlements.UserRef == nil {
						draftAutomationSteps.GrantEntitlements.UserRef = nil
					} else {
						draftAutomationSteps.GrantEntitlements.UserRef = &tfTypes.UserRef{}
						draftAutomationSteps.GrantEntitlements.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.GrantEntitlements.UserRef.ID)
					}
					draftAutomationSteps.GrantEntitlements.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.GrantEntitlements.UseSubjectUser)
				}
				if draftAutomationStepsItem.RemoveFromDelegation == nil {
					draftAutomationSteps.RemoveFromDelegation = nil
				} else {
					draftAutomationSteps.RemoveFromDelegation = &tfTypes.RemoveFromDelegation{}
					draftAutomationSteps.RemoveFromDelegation.ReplacementUserIDCel = types.StringPointerValue(draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel)
					if draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef == nil {
						draftAutomationSteps.RemoveFromDelegation.ReplacementUserRef = nil
					} else {
						draftAutomationSteps.RemoveFromDelegation.ReplacementUserRef = &tfTypes.UserRef{}
						draftAutomationSteps.RemoveFromDelegation.ReplacementUserRef.ID = types.StringPointerValue(draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID)
					}
					draftAutomationSteps.RemoveFromDelegation.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.RemoveFromDelegation.UserIDCel)
					if draftAutomationStepsItem.RemoveFromDelegation.UserRef == nil {
						draftAutomationSteps.RemoveFromDelegation.UserRef = nil
					} else {
						draftAutomationSteps.RemoveFromDelegation.UserRef = &tfTypes.UserRef{}
						draftAutomationSteps.RemoveFromDelegation.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID)
					}
					draftAutomationSteps.RemoveFromDelegation.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser)
				}
				if draftAutomationStepsItem.RunAutomation == nil {
					draftAutomationSteps.RunAutomation = nil
				} else {
					draftAutomationSteps.RunAutomation = &tfTypes.RunAutomation{}
					draftAutomationSteps.RunAutomation.AutomationTemplateIDCel = types.StringPointerValue(draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel)
					if draftAutomationStepsItem.RunAutomation.AutomationTemplateRef == nil {
						draftAutomationSteps.RunAutomation.AutomationTemplateRef = nil
					} else {
						draftAutomationSteps.RunAutomation.AutomationTemplateRef = &tfTypes.AutomationTemplateRef{}
						draftAutomationSteps.RunAutomation.AutomationTemplateRef.ID = types.StringPointerValue(draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID)
					}
					if draftAutomationStepsItem.RunAutomation.Context == nil {
						draftAutomationSteps.RunAutomation.Context = nil
					} else {
						draftAutomationSteps.RunAutomation.Context = &tfTypes.AutomationContext{}
						if draftAutomationStepsItem.RunAutomation.Context.Context == nil {
							draftAutomationSteps.RunAutomation.Context.Context = nil
						} else {
							draftAutomationSteps.RunAutomation.Context.Context = &tfTypes.Context{}
						}
					}
				}
				if draftAutomationStepsItem.SendEmail == nil {
					draftAutomationSteps.SendEmail = nil
				} else {
					draftAutomationSteps.SendEmail = &tfTypes.SendEmail{}
					draftAutomationSteps.SendEmail.Body = types.StringPointerValue(draftAutomationStepsItem.SendEmail.Body)
					draftAutomationSteps.SendEmail.Subject = types.StringPointerValue(draftAutomationStepsItem.SendEmail.Subject)
					draftAutomationSteps.SendEmail.Title = types.StringPointerValue(draftAutomationStepsItem.SendEmail.Title)
					draftAutomationSteps.SendEmail.UserIdsCel = types.StringPointerValue(draftAutomationStepsItem.SendEmail.UserIdsCel)
					if draftAutomationStepsItem.SendEmail.UserRefs != nil {
						draftAutomationSteps.SendEmail.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem4 := range draftAutomationStepsItem.SendEmail.UserRefs {
							var userRefs4 tfTypes.UserRef

							userRefs4.ID = types.StringPointerValue(userRefsItem4.ID)

							draftAutomationSteps.SendEmail.UserRefs = append(draftAutomationSteps.SendEmail.UserRefs, userRefs4)
						}
					}
					draftAutomationSteps.SendEmail.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.SendEmail.UseSubjectUser)
				}
				if draftAutomationStepsItem.SendSlackMessage == nil {
					draftAutomationSteps.SendSlackMessage = nil
				} else {
					draftAutomationSteps.SendSlackMessage = &tfTypes.SendSlackMessage{}
					draftAutomationSteps.SendSlackMessage.Body = types.StringPointerValue(draftAutomationStepsItem.SendSlackMessage.Body)
					draftAutomationSteps.SendSlackMessage.ChannelName = types.StringPointerValue(draftAutomationStepsItem.SendSlackMessage.ChannelName)
					draftAutomationSteps.SendSlackMessage.ChannelNameCel = types.StringPointerValue(draftAutomationStepsItem.SendSlackMessage.ChannelNameCel)
				}
				draftAutomationSteps.SkipIfTrueCel = types.StringPointerValue(draftAutomationStepsItem.SkipIfTrueCel)
				draftAutomationSteps.StepDisplayName = types.StringPointerValue(draftAutomationStepsItem.StepDisplayName)
				draftAutomationSteps.StepName = types.StringPointerValue(draftAutomationStepsItem.StepName)
				if draftAutomationStepsItem.TaskAction == nil {
					draftAutomationSteps.TaskAction = nil
				} else {
					draftAutomationSteps.TaskAction = &tfTypes.TaskAction{}
					if draftAutomationStepsItem.TaskAction.Close == nil {
						draftAutomationSteps.TaskAction.Close = nil
					} else {
						draftAutomationSteps.TaskAction.Close = &tfTypes.CloseAction{}
						draftAutomationSteps.TaskAction.Close.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.TaskAction.Close.UserIDCel)
						if draftAutomationStepsItem.TaskAction.Close.UserRef == nil {
							draftAutomationSteps.TaskAction.Close.UserRef = nil
						} else {
							draftAutomationSteps.TaskAction.Close.UserRef = &tfTypes.UserRef{}
							draftAutomationSteps.TaskAction.Close.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.TaskAction.Close.UserRef.ID)
						}
						draftAutomationSteps.TaskAction.Close.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.TaskAction.Close.UseSubjectUser)
					}
					if draftAutomationStepsItem.TaskAction.Reassign == nil {
						draftAutomationSteps.TaskAction.Reassign = nil
					} else {
						draftAutomationSteps.TaskAction.Reassign = &tfTypes.ReassignAction{}
						draftAutomationSteps.TaskAction.Reassign.AssigneeUserIDCel = types.StringPointerValue(draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserIDCel)
						if draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef == nil {
							draftAutomationSteps.TaskAction.Reassign.AssigneeUserRef = nil
						} else {
							draftAutomationSteps.TaskAction.Reassign.AssigneeUserRef = &tfTypes.UserRef{}
							draftAutomationSteps.TaskAction.Reassign.AssigneeUserRef.ID = types.StringPointerValue(draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID)
						}
						draftAutomationSteps.TaskAction.Reassign.SubjectUserIDCel = types.StringPointerValue(draftAutomationStepsItem.TaskAction.Reassign.SubjectUserIDCel)
						if draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef == nil {
							draftAutomationSteps.TaskAction.Reassign.SubjectUserRef = nil
						} else {
							draftAutomationSteps.TaskAction.Reassign.SubjectUserRef = &tfTypes.UserRef{}
							draftAutomationSteps.TaskAction.Reassign.SubjectUserRef.ID = types.StringPointerValue(draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef.ID)
						}
						draftAutomationSteps.TaskAction.Reassign.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.TaskAction.Reassign.UseSubjectUser)
					}
					if draftAutomationStepsItem.TaskAction.TaskTypes != nil {
						draftAutomationSteps.TaskAction.TaskTypes = make([]types.String, 0, len(draftAutomationStepsItem.TaskAction.TaskTypes))
						for _, v := range draftAutomationStepsItem.TaskAction.TaskTypes {
							draftAutomationSteps.TaskAction.TaskTypes = append(draftAutomationSteps.TaskAction.TaskTypes, types.StringValue(string(v)))
						}
					}
					if draftAutomationStepsItem.TaskAction.TaskUserRelation != nil {
						draftAutomationSteps.TaskAction.TaskUserRelation = types.StringValue(string(*draftAutomationStepsItem.TaskAction.TaskUserRelation))
					} else {
						draftAutomationSteps.TaskAction.TaskUserRelation = types.StringNull()
					}
				}
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles == nil {
					draftAutomationSteps.UnenrollFromAllAccessProfiles = nil
				} else {
					draftAutomationSteps.UnenrollFromAllAccessProfiles = &tfTypes.UnenrollFromAllAccessProfiles{}
					if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
						draftAutomationSteps.UnenrollFromAllAccessProfiles.CatalogIds = make([]types.String, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
						for _, v := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
							draftAutomationSteps.UnenrollFromAllAccessProfiles.CatalogIds = append(draftAutomationSteps.UnenrollFromAllAccessProfiles.CatalogIds, types.StringValue(v))
						}
					}
					draftAutomationSteps.UnenrollFromAllAccessProfiles.CatalogIdsCel = types.StringPointerValue(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel)
					draftAutomationSteps.UnenrollFromAllAccessProfiles.UserIdsCel = types.StringPointerValue(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel)
					if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
						draftAutomationSteps.UnenrollFromAllAccessProfiles.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem5 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
							var userRefs5 tfTypes.UserRef

							userRefs5.ID = types.StringPointerValue(userRefsItem5.ID)

							draftAutomationSteps.UnenrollFromAllAccessProfiles.UserRefs = append(draftAutomationSteps.UnenrollFromAllAccessProfiles.UserRefs, userRefs5)
						}
					}
					draftAutomationSteps.UnenrollFromAllAccessProfiles.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser)
				}
				if draftAutomationStepsItem.UpdateUser == nil {
					draftAutomationSteps.UpdateUser = nil
				} else {
					draftAutomationSteps.UpdateUser = &tfTypes.UpdateUser{}
					draftAutomationSteps.UpdateUser.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.UpdateUser.UserIDCel)
					if draftAutomationStepsItem.UpdateUser.UserRef == nil {
						draftAutomationSteps.UpdateUser.UserRef = nil
					} else {
						draftAutomationSteps.UpdateUser.UserRef = &tfTypes.UserRef{}
						draftAutomationSteps.UpdateUser.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.UpdateUser.UserRef.ID)
					}
					draftAutomationSteps.UpdateUser.UserStatusCel = types.StringPointerValue(draftAutomationStepsItem.UpdateUser.UserStatusCel)
					if draftAutomationStepsItem.UpdateUser.UserStatusEnum != nil {
						draftAutomationSteps.UpdateUser.UserStatusEnum = types.StringValue(string(*draftAutomationStepsItem.UpdateUser.UserStatusEnum))
					} else {
						draftAutomationSteps.UpdateUser.UserStatusEnum = types.StringNull()
					}
					draftAutomationSteps.UpdateUser.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.UpdateUser.UseSubjectUser)
				}
				if draftAutomationStepsItem.WaitForDuration == nil {
					draftAutomationSteps.WaitForDuration = nil
				} else {
					draftAutomationSteps.WaitForDuration = &tfTypes.WaitForDuration{}
					draftAutomationSteps.WaitForDuration.Duration = types.StringPointerValue(draftAutomationStepsItem.WaitForDuration.Duration)
				}
				if draftAutomationStepsItem.Webhook == nil {
					draftAutomationSteps.Webhook = nil
				} else {
					draftAutomationSteps.Webhook = &tfTypes.Webhook{}
					if draftAutomationStepsItem.Webhook.Payload == nil {
						draftAutomationSteps.Webhook.Payload = nil
					} else {
						draftAutomationSteps.Webhook.Payload = &tfTypes.Payload{}
					}
					draftAutomationSteps.Webhook.WebhookID = types.StringPointerValue(draftAutomationStepsItem.Webhook.WebhookID)
					draftAutomationSteps.Webhook.WebhookIDCel = types.StringPointerValue(draftAutomationStepsItem.Webhook.WebhookIDCel)
				}

				r.DraftAutomationSteps = append(r.DraftAutomationSteps, draftAutomationSteps)
			}
		}
		if resp.DraftTriggers != nil {
			r.DraftTriggers = []tfTypes.AutomationTrigger{}

			for _, draftTriggersItem := range resp.DraftTriggers {
				var draftTriggers tfTypes.AutomationTrigger

				if draftTriggersItem.AppUserCreated == nil {
					draftTriggers.AppUserCreated = nil
				} else {
					draftTriggers.AppUserCreated = &tfTypes.AppUserCreatedTrigger{}
					draftTriggers.AppUserCreated.AppID = types.StringPointerValue(draftTriggersItem.AppUserCreated.AppID)
					draftTriggers.AppUserCreated.AppIDCel = types.StringPointerValue(draftTriggersItem.AppUserCreated.AppIDCel)
					draftTriggers.AppUserCreated.Condition = types.StringPointerValue(draftTriggersItem.AppUserCreated.Condition)
				}
				if draftTriggersItem.AppUserUpdated == nil {
					draftTriggers.AppUserUpdated = nil
				} else {
					draftTriggers.AppUserUpdated = &tfTypes.AppUserUpdatedTrigger{}
					draftTriggers.AppUserUpdated.AppID = types.StringPointerValue(draftTriggersItem.AppUserUpdated.AppID)
					draftTriggers.AppUserUpdated.AppIDCel = types.StringPointerValue(draftTriggersItem.AppUserUpdated.AppIDCel)
					draftTriggers.AppUserUpdated.Condition = types.StringPointerValue(draftTriggersItem.AppUserUpdated.Condition)
				}
				if draftTriggersItem.Form == nil {
					draftTriggers.Form = jsontypes.NewNormalizedNull()
				} else {
					formResult, _ := json.Marshal(draftTriggersItem.Form)
					draftTriggers.Form = jsontypes.NewNormalizedValue(string(formResult))
				}
				if draftTriggersItem.GrantDeleted == nil {
					draftTriggers.GrantDeleted = nil
				} else {
					draftTriggers.GrantDeleted = &tfTypes.GrantDeletedTrigger{}
					if draftTriggersItem.GrantDeleted.GrantTriggerFilter == nil {
						draftTriggers.GrantDeleted.GrantTriggerFilter = nil
					} else {
						draftTriggers.GrantDeleted.GrantTriggerFilter = &tfTypes.GrantTriggerFilter{}
						if draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter == nil {
							draftTriggers.GrantDeleted.GrantTriggerFilter.AccountFilter = nil
						} else {
							draftTriggers.GrantDeleted.GrantTriggerFilter.AccountFilter = &tfTypes.AccountFilter{}
							if draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType != nil {
								draftTriggers.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType = types.StringValue(string(*draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType))
							} else {
								draftTriggers.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType = types.StringNull()
							}
						}
						if draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter == nil {
							draftTriggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter = nil
						} else {
							draftTriggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter = &tfTypes.EntitlementFilter{}
							if draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
								draftTriggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

								for _, appEntitlementRefsItem4 := range draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
									var appEntitlementRefs4 tfTypes.AppEntitlementRef

									appEntitlementRefs4.AppID = types.StringPointerValue(appEntitlementRefsItem4.AppID)
									appEntitlementRefs4.ID = types.StringPointerValue(appEntitlementRefsItem4.ID)

									draftTriggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = append(draftTriggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs, appEntitlementRefs4)
								}
							}
							draftTriggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel = types.StringPointerValue(draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel)
							draftTriggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID = types.StringPointerValue(draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID)
						}
						if draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter == nil {
							draftTriggers.GrantDeleted.GrantTriggerFilter.GrantFilter = nil
						} else {
							draftTriggers.GrantDeleted.GrantTriggerFilter.GrantFilter = &tfTypes.GrantFilter{}
							if draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType != nil {
								draftTriggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringValue(string(*draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType))
							} else {
								draftTriggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringNull()
							}
							if draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType != nil {
								draftTriggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringValue(string(*draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType))
							} else {
								draftTriggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringNull()
							}
							if draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter != nil {
								draftTriggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringValue(string(*draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter))
							} else {
								draftTriggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringNull()
							}
						}
					}
				}
				if draftTriggersItem.GrantFound == nil {
					draftTriggers.GrantFound = nil
				} else {
					draftTriggers.GrantFound = &tfTypes.GrantFoundTrigger{}
					if draftTriggersItem.GrantFound.GrantTriggerFilter == nil {
						draftTriggers.GrantFound.GrantTriggerFilter = nil
					} else {
						draftTriggers.GrantFound.GrantTriggerFilter = &tfTypes.GrantTriggerFilter{}
						if draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter == nil {
							draftTriggers.GrantFound.GrantTriggerFilter.AccountFilter = nil
						} else {
							draftTriggers.GrantFound.GrantTriggerFilter.AccountFilter = &tfTypes.AccountFilter{}
							if draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType != nil {
								draftTriggers.GrantFound.GrantTriggerFilter.AccountFilter.AccountType = types.StringValue(string(*draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType))
							} else {
								draftTriggers.GrantFound.GrantTriggerFilter.AccountFilter.AccountType = types.StringNull()
							}
						}
						if draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter == nil {
							draftTriggers.GrantFound.GrantTriggerFilter.EntitlementFilter = nil
						} else {
							draftTriggers.GrantFound.GrantTriggerFilter.EntitlementFilter = &tfTypes.EntitlementFilter{}
							if draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
								draftTriggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

								for _, appEntitlementRefsItem5 := range draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
									var appEntitlementRefs5 tfTypes.AppEntitlementRef

									appEntitlementRefs5.AppID = types.StringPointerValue(appEntitlementRefsItem5.AppID)
									appEntitlementRefs5.ID = types.StringPointerValue(appEntitlementRefsItem5.ID)

									draftTriggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = append(draftTriggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs, appEntitlementRefs5)
								}
							}
							draftTriggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel = types.StringPointerValue(draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel)
							draftTriggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID = types.StringPointerValue(draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID)
						}
						if draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter == nil {
							draftTriggers.GrantFound.GrantTriggerFilter.GrantFilter = nil
						} else {
							draftTriggers.GrantFound.GrantTriggerFilter.GrantFilter = &tfTypes.GrantFilter{}
							if draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType != nil {
								draftTriggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringValue(string(*draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType))
							} else {
								draftTriggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringNull()
							}
							if draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType != nil {
								draftTriggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringValue(string(*draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType))
							} else {
								draftTriggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringNull()
							}
							if draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter != nil {
								draftTriggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringValue(string(*draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter))
							} else {
								draftTriggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringNull()
							}
						}
					}
				}
				if draftTriggersItem.Manual == nil {
					draftTriggers.Manual = nil
				} else {
					draftTriggers.Manual = &tfTypes.ManualAutomationTrigger{}
				}
				if draftTriggersItem.Schedule == nil {
					draftTriggers.Schedule = nil
				} else {
					draftTriggers.Schedule = &tfTypes.ScheduleTrigger{}
					draftTriggers.Schedule.Advanced = types.BoolPointerValue(draftTriggersItem.Schedule.Advanced)
					draftTriggers.Schedule.CronSpec = types.StringPointerValue(draftTriggersItem.Schedule.CronSpec)
					draftTriggers.Schedule.SkipIfTrueCel = types.StringPointerValue(draftTriggersItem.Schedule.SkipIfTrueCel)
					draftTriggers.Schedule.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(draftTriggersItem.Schedule.Start))
				}
				if draftTriggersItem.UsageBasedRevocation == nil {
					draftTriggers.UsageBasedRevocation = nil
				} else {
					draftTriggers.UsageBasedRevocation = &tfTypes.UsageBasedRevocationTrigger{}
					draftTriggers.UsageBasedRevocation.AppID = types.StringPointerValue(draftTriggersItem.UsageBasedRevocation.AppID)
					draftTriggers.UsageBasedRevocation.EnabledAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(draftTriggersItem.UsageBasedRevocation.EnabledAt))
					if draftTriggersItem.UsageBasedRevocation.ExcludedGroupRefs != nil {
						draftTriggers.UsageBasedRevocation.ExcludedGroupRefs = []tfTypes.AppEntitlementRef{}

						for _, excludedGroupRefsItem := range draftTriggersItem.UsageBasedRevocation.ExcludedGroupRefs {
							var excludedGroupRefs tfTypes.AppEntitlementRef

							excludedGroupRefs.AppID = types.StringPointerValue(excludedGroupRefsItem.AppID)
							excludedGroupRefs.ID = types.StringPointerValue(excludedGroupRefsItem.ID)

							draftTriggers.UsageBasedRevocation.ExcludedGroupRefs = append(draftTriggers.UsageBasedRevocation.ExcludedGroupRefs, excludedGroupRefs)
						}
					}
					if draftTriggersItem.UsageBasedRevocation.ExcludedUserRefs != nil {
						draftTriggers.UsageBasedRevocation.ExcludedUserRefs = []tfTypes.UserRef{}

						for _, excludedUserRefsItem := range draftTriggersItem.UsageBasedRevocation.ExcludedUserRefs {
							var excludedUserRefs tfTypes.UserRef

							excludedUserRefs.ID = types.StringPointerValue(excludedUserRefsItem.ID)

							draftTriggers.UsageBasedRevocation.ExcludedUserRefs = append(draftTriggers.UsageBasedRevocation.ExcludedUserRefs, excludedUserRefs)
						}
					}
					draftTriggers.UsageBasedRevocation.IncludeUsersWithNoActivity = types.BoolPointerValue(draftTriggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity)
					if draftTriggersItem.UsageBasedRevocation.RunDelayed == nil {
						draftTriggers.UsageBasedRevocation.RunDelayed = nil
					} else {
						draftTriggers.UsageBasedRevocation.RunDelayed = &tfTypes.RunDelayed{}
						draftTriggers.UsageBasedRevocation.RunDelayed.ColdStartDelayDays = types.Int64Value(draftTriggersItem.UsageBasedRevocation.RunDelayed.ColdStartDelayDays)
					}
					if draftTriggersItem.UsageBasedRevocation.RunImmediately == nil {
						draftTriggers.UsageBasedRevocation.RunImmediately = nil
					} else {
						draftTriggers.UsageBasedRevocation.RunImmediately = &tfTypes.RunImmediately{}
					}
					if draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes != nil {
						draftTriggers.UsageBasedRevocation.TargetedAppUserTypes = make([]types.String, 0, len(draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes))
						for _, v := range draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes {
							draftTriggers.UsageBasedRevocation.TargetedAppUserTypes = append(draftTriggers.UsageBasedRevocation.TargetedAppUserTypes, types.StringValue(string(v)))
						}
					}
					if draftTriggersItem.UsageBasedRevocation.TargetedEntitlementRefs != nil {
						draftTriggers.UsageBasedRevocation.TargetedEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, targetedEntitlementRefsItem := range draftTriggersItem.UsageBasedRevocation.TargetedEntitlementRefs {
							var targetedEntitlementRefs tfTypes.AppEntitlementRef

							targetedEntitlementRefs.AppID = types.StringPointerValue(targetedEntitlementRefsItem.AppID)
							targetedEntitlementRefs.ID = types.StringPointerValue(targetedEntitlementRefsItem.ID)

							draftTriggers.UsageBasedRevocation.TargetedEntitlementRefs = append(draftTriggers.UsageBasedRevocation.TargetedEntitlementRefs, targetedEntitlementRefs)
						}
					}
					draftTriggers.UsageBasedRevocation.UnusedForDays = types.Int64PointerValue(draftTriggersItem.UsageBasedRevocation.UnusedForDays)
				}
				if draftTriggersItem.UserCreated == nil {
					draftTriggers.UserCreated = nil
				} else {
					draftTriggers.UserCreated = &tfTypes.UserCreatedTrigger{}
					draftTriggers.UserCreated.Condition = types.StringPointerValue(draftTriggersItem.UserCreated.Condition)
				}
				if draftTriggersItem.UserProfileChange == nil {
					draftTriggers.UserProfileChange = nil
				} else {
					draftTriggers.UserProfileChange = &tfTypes.UserProfileChangeTrigger{}
					draftTriggers.UserProfileChange.Condition = types.StringPointerValue(draftTriggersItem.UserProfileChange.Condition)
				}
				if draftTriggersItem.Webhook == nil {
					draftTriggers.Webhook = nil
				} else {
					draftTriggers.Webhook = &tfTypes.WebhookAutomationTrigger{}
					if draftTriggersItem.Webhook.Hmac == nil {
						draftTriggers.Webhook.Hmac = nil
					} else {
						draftTriggers.Webhook.Hmac = &tfTypes.WebhookListenerAuthHMAC{}
					}
					if draftTriggersItem.Webhook.Jwt == nil {
						draftTriggers.Webhook.Jwt = nil
					} else {
						draftTriggers.Webhook.Jwt = &tfTypes.WebhookListenerAuthJWT{}
						draftTriggers.Webhook.Jwt.JwksURL = types.StringPointerValue(draftTriggersItem.Webhook.Jwt.JwksURL)
					}
					draftTriggers.Webhook.ListenerID = types.StringPointerValue(draftTriggersItem.Webhook.ListenerID)
				}

				r.DraftTriggers = append(r.DraftTriggers, draftTriggers)
			}
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsDraft = types.BoolPointerValue(resp.IsDraft)
		r.LastExecutedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastExecutedAt))
		if resp.PrimaryTriggerType != nil {
			r.PrimaryTriggerType = types.StringValue(string(*resp.PrimaryTriggerType))
		} else {
			r.PrimaryTriggerType = types.StringNull()
		}
		if resp.Triggers != nil {
			r.Triggers = []tfTypes.AutomationTrigger{}

			for _, triggersItem := range resp.Triggers {
				var triggers tfTypes.AutomationTrigger

				if triggersItem.AppUserCreated == nil {
					triggers.AppUserCreated = nil
				} else {
					triggers.AppUserCreated = &tfTypes.AppUserCreatedTrigger{}
					triggers.AppUserCreated.AppID = types.StringPointerValue(triggersItem.AppUserCreated.AppID)
					triggers.AppUserCreated.AppIDCel = types.StringPointerValue(triggersItem.AppUserCreated.AppIDCel)
					triggers.AppUserCreated.Condition = types.StringPointerValue(triggersItem.AppUserCreated.Condition)
				}
				if triggersItem.AppUserUpdated == nil {
					triggers.AppUserUpdated = nil
				} else {
					triggers.AppUserUpdated = &tfTypes.AppUserUpdatedTrigger{}
					triggers.AppUserUpdated.AppID = types.StringPointerValue(triggersItem.AppUserUpdated.AppID)
					triggers.AppUserUpdated.AppIDCel = types.StringPointerValue(triggersItem.AppUserUpdated.AppIDCel)
					triggers.AppUserUpdated.Condition = types.StringPointerValue(triggersItem.AppUserUpdated.Condition)
				}
				if triggersItem.Form == nil {
					triggers.Form = jsontypes.NewNormalizedNull()
				} else {
					formResult1, _ := json.Marshal(triggersItem.Form)
					triggers.Form = jsontypes.NewNormalizedValue(string(formResult1))
				}
				if triggersItem.GrantDeleted == nil {
					triggers.GrantDeleted = nil
				} else {
					triggers.GrantDeleted = &tfTypes.GrantDeletedTrigger{}
					if triggersItem.GrantDeleted.GrantTriggerFilter == nil {
						triggers.GrantDeleted.GrantTriggerFilter = nil
					} else {
						triggers.GrantDeleted.GrantTriggerFilter = &tfTypes.GrantTriggerFilter{}
						if triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter == nil {
							triggers.GrantDeleted.GrantTriggerFilter.AccountFilter = nil
						} else {
							triggers.GrantDeleted.GrantTriggerFilter.AccountFilter = &tfTypes.AccountFilter{}
							if triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType != nil {
								triggers.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType = types.StringValue(string(*triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType))
							} else {
								triggers.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType = types.StringNull()
							}
						}
						if triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter == nil {
							triggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter = nil
						} else {
							triggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter = &tfTypes.EntitlementFilter{}
							if triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
								triggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

								for _, appEntitlementRefsItem6 := range triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
									var appEntitlementRefs6 tfTypes.AppEntitlementRef

									appEntitlementRefs6.AppID = types.StringPointerValue(appEntitlementRefsItem6.AppID)
									appEntitlementRefs6.ID = types.StringPointerValue(appEntitlementRefsItem6.ID)

									triggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = append(triggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs, appEntitlementRefs6)
								}
							}
							triggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel = types.StringPointerValue(triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel)
							triggers.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID = types.StringPointerValue(triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID)
						}
						if triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter == nil {
							triggers.GrantDeleted.GrantTriggerFilter.GrantFilter = nil
						} else {
							triggers.GrantDeleted.GrantTriggerFilter.GrantFilter = &tfTypes.GrantFilter{}
							if triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType != nil {
								triggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringValue(string(*triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType))
							} else {
								triggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringNull()
							}
							if triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType != nil {
								triggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringValue(string(*triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType))
							} else {
								triggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringNull()
							}
							if triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter != nil {
								triggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringValue(string(*triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter))
							} else {
								triggers.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringNull()
							}
						}
					}
				}
				if triggersItem.GrantFound == nil {
					triggers.GrantFound = nil
				} else {
					triggers.GrantFound = &tfTypes.GrantFoundTrigger{}
					if triggersItem.GrantFound.GrantTriggerFilter == nil {
						triggers.GrantFound.GrantTriggerFilter = nil
					} else {
						triggers.GrantFound.GrantTriggerFilter = &tfTypes.GrantTriggerFilter{}
						if triggersItem.GrantFound.GrantTriggerFilter.AccountFilter == nil {
							triggers.GrantFound.GrantTriggerFilter.AccountFilter = nil
						} else {
							triggers.GrantFound.GrantTriggerFilter.AccountFilter = &tfTypes.AccountFilter{}
							if triggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType != nil {
								triggers.GrantFound.GrantTriggerFilter.AccountFilter.AccountType = types.StringValue(string(*triggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType))
							} else {
								triggers.GrantFound.GrantTriggerFilter.AccountFilter.AccountType = types.StringNull()
							}
						}
						if triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter == nil {
							triggers.GrantFound.GrantTriggerFilter.EntitlementFilter = nil
						} else {
							triggers.GrantFound.GrantTriggerFilter.EntitlementFilter = &tfTypes.EntitlementFilter{}
							if triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
								triggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

								for _, appEntitlementRefsItem7 := range triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
									var appEntitlementRefs7 tfTypes.AppEntitlementRef

									appEntitlementRefs7.AppID = types.StringPointerValue(appEntitlementRefsItem7.AppID)
									appEntitlementRefs7.ID = types.StringPointerValue(appEntitlementRefsItem7.ID)

									triggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = append(triggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs, appEntitlementRefs7)
								}
							}
							triggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel = types.StringPointerValue(triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel)
							triggers.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID = types.StringPointerValue(triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID)
						}
						if triggersItem.GrantFound.GrantTriggerFilter.GrantFilter == nil {
							triggers.GrantFound.GrantTriggerFilter.GrantFilter = nil
						} else {
							triggers.GrantFound.GrantTriggerFilter.GrantFilter = &tfTypes.GrantFilter{}
							if triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType != nil {
								triggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringValue(string(*triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType))
							} else {
								triggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringNull()
							}
							if triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType != nil {
								triggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringValue(string(*triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType))
							} else {
								triggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringNull()
							}
							if triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter != nil {
								triggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringValue(string(*triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter))
							} else {
								triggers.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringNull()
							}
						}
					}
				}
				if triggersItem.Manual == nil {
					triggers.Manual = nil
				} else {
					triggers.Manual = &tfTypes.ManualAutomationTrigger{}
				}
				if triggersItem.Schedule == nil {
					triggers.Schedule = nil
				} else {
					triggers.Schedule = &tfTypes.ScheduleTrigger{}
					triggers.Schedule.Advanced = types.BoolPointerValue(triggersItem.Schedule.Advanced)
					triggers.Schedule.CronSpec = types.StringPointerValue(triggersItem.Schedule.CronSpec)
					triggers.Schedule.SkipIfTrueCel = types.StringPointerValue(triggersItem.Schedule.SkipIfTrueCel)
					triggers.Schedule.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(triggersItem.Schedule.Start))
				}
				if triggersItem.UsageBasedRevocation == nil {
					triggers.UsageBasedRevocation = nil
				} else {
					triggers.UsageBasedRevocation = &tfTypes.UsageBasedRevocationTrigger{}
					triggers.UsageBasedRevocation.AppID = types.StringPointerValue(triggersItem.UsageBasedRevocation.AppID)
					triggers.UsageBasedRevocation.EnabledAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(triggersItem.UsageBasedRevocation.EnabledAt))
					if triggersItem.UsageBasedRevocation.ExcludedGroupRefs != nil {
						triggers.UsageBasedRevocation.ExcludedGroupRefs = []tfTypes.AppEntitlementRef{}

						for _, excludedGroupRefsItem1 := range triggersItem.UsageBasedRevocation.ExcludedGroupRefs {
							var excludedGroupRefs1 tfTypes.AppEntitlementRef

							excludedGroupRefs1.AppID = types.StringPointerValue(excludedGroupRefsItem1.AppID)
							excludedGroupRefs1.ID = types.StringPointerValue(excludedGroupRefsItem1.ID)

							triggers.UsageBasedRevocation.ExcludedGroupRefs = append(triggers.UsageBasedRevocation.ExcludedGroupRefs, excludedGroupRefs1)
						}
					}
					if triggersItem.UsageBasedRevocation.ExcludedUserRefs != nil {
						triggers.UsageBasedRevocation.ExcludedUserRefs = []tfTypes.UserRef{}

						for _, excludedUserRefsItem1 := range triggersItem.UsageBasedRevocation.ExcludedUserRefs {
							var excludedUserRefs1 tfTypes.UserRef

							excludedUserRefs1.ID = types.StringPointerValue(excludedUserRefsItem1.ID)

							triggers.UsageBasedRevocation.ExcludedUserRefs = append(triggers.UsageBasedRevocation.ExcludedUserRefs, excludedUserRefs1)
						}
					}
					triggers.UsageBasedRevocation.IncludeUsersWithNoActivity = types.BoolPointerValue(triggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity)
					if triggersItem.UsageBasedRevocation.RunDelayed == nil {
						triggers.UsageBasedRevocation.RunDelayed = nil
					} else {
						triggers.UsageBasedRevocation.RunDelayed = &tfTypes.RunDelayed{}
						triggers.UsageBasedRevocation.RunDelayed.ColdStartDelayDays = types.Int64Value(triggersItem.UsageBasedRevocation.RunDelayed.ColdStartDelayDays)
					}
					if triggersItem.UsageBasedRevocation.RunImmediately == nil {
						triggers.UsageBasedRevocation.RunImmediately = nil
					} else {
						triggers.UsageBasedRevocation.RunImmediately = &tfTypes.RunImmediately{}
					}
					if triggersItem.UsageBasedRevocation.TargetedAppUserTypes != nil {
						triggers.UsageBasedRevocation.TargetedAppUserTypes = make([]types.String, 0, len(triggersItem.UsageBasedRevocation.TargetedAppUserTypes))
						for _, v := range triggersItem.UsageBasedRevocation.TargetedAppUserTypes {
							triggers.UsageBasedRevocation.TargetedAppUserTypes = append(triggers.UsageBasedRevocation.TargetedAppUserTypes, types.StringValue(string(v)))
						}
					}
					if triggersItem.UsageBasedRevocation.TargetedEntitlementRefs != nil {
						triggers.UsageBasedRevocation.TargetedEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, targetedEntitlementRefsItem1 := range triggersItem.UsageBasedRevocation.TargetedEntitlementRefs {
							var targetedEntitlementRefs1 tfTypes.AppEntitlementRef

							targetedEntitlementRefs1.AppID = types.StringPointerValue(targetedEntitlementRefsItem1.AppID)
							targetedEntitlementRefs1.ID = types.StringPointerValue(targetedEntitlementRefsItem1.ID)

							triggers.UsageBasedRevocation.TargetedEntitlementRefs = append(triggers.UsageBasedRevocation.TargetedEntitlementRefs, targetedEntitlementRefs1)
						}
					}
					triggers.UsageBasedRevocation.UnusedForDays = types.Int64PointerValue(triggersItem.UsageBasedRevocation.UnusedForDays)
				}
				if triggersItem.UserCreated == nil {
					triggers.UserCreated = nil
				} else {
					triggers.UserCreated = &tfTypes.UserCreatedTrigger{}
					triggers.UserCreated.Condition = types.StringPointerValue(triggersItem.UserCreated.Condition)
				}
				if triggersItem.UserProfileChange == nil {
					triggers.UserProfileChange = nil
				} else {
					triggers.UserProfileChange = &tfTypes.UserProfileChangeTrigger{}
					triggers.UserProfileChange.Condition = types.StringPointerValue(triggersItem.UserProfileChange.Condition)
				}
				if triggersItem.Webhook == nil {
					triggers.Webhook = nil
				} else {
					triggers.Webhook = &tfTypes.WebhookAutomationTrigger{}
					if triggersItem.Webhook.Hmac == nil {
						triggers.Webhook.Hmac = nil
					} else {
						triggers.Webhook.Hmac = &tfTypes.WebhookListenerAuthHMAC{}
					}
					if triggersItem.Webhook.Jwt == nil {
						triggers.Webhook.Jwt = nil
					} else {
						triggers.Webhook.Jwt = &tfTypes.WebhookListenerAuthJWT{}
						triggers.Webhook.Jwt.JwksURL = types.StringPointerValue(triggersItem.Webhook.Jwt.JwksURL)
					}
					triggers.Webhook.ListenerID = types.StringPointerValue(triggersItem.Webhook.ListenerID)
				}

				r.Triggers = append(r.Triggers, triggers)
			}
		}
		r.WebhookHmacSecret = types.StringPointerValue(resp.WebhookHmacSecret)
	}

	return diags
}

func (r *AutomationResourceModel) ToOperationsC1APIAutomationsV1AutomationServiceDeleteAutomationRequest(ctx context.Context) (*operations.C1APIAutomationsV1AutomationServiceDeleteAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIAutomationsV1AutomationServiceDeleteAutomationRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToOperationsC1APIAutomationsV1AutomationServiceGetAutomationRequest(ctx context.Context) (*operations.C1APIAutomationsV1AutomationServiceGetAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIAutomationsV1AutomationServiceGetAutomationRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToOperationsC1APIAutomationsV1AutomationServiceUpdateAutomationRequest(ctx context.Context) (*operations.C1APIAutomationsV1AutomationServiceUpdateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	updateAutomationRequest, updateAutomationRequestDiags := r.ToSharedUpdateAutomationRequest(ctx)
	diags.Append(updateAutomationRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAutomationsV1AutomationServiceUpdateAutomationRequest{
		ID:                      id,
		UpdateAutomationRequest: updateAutomationRequest,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToSharedAutomationInput(ctx context.Context) (*shared.AutomationInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	var automationSteps []shared.AutomationStep
	if r.AutomationSteps != nil {
		automationSteps = make([]shared.AutomationStep, 0, len(r.AutomationSteps))
		for _, automationStepsItem := range r.AutomationSteps {
			var callFunction *shared.CallFunction
			if automationStepsItem.CallFunction != nil {
				args := make(map[string]string)
				for argsKey, argsValue := range automationStepsItem.CallFunction.Args {
					var argsInst string
					argsInst = argsValue.ValueString()

					args[argsKey] = argsInst
				}
				functionID := new(string)
				if !automationStepsItem.CallFunction.FunctionID.IsUnknown() && !automationStepsItem.CallFunction.FunctionID.IsNull() {
					*functionID = automationStepsItem.CallFunction.FunctionID.ValueString()
				} else {
					functionID = nil
				}
				callFunction = &shared.CallFunction{
					Args:       args,
					FunctionID: functionID,
				}
			}
			var connectorAction *shared.ConnectorAction
			if automationStepsItem.ConnectorAction != nil {
				actionName := new(string)
				if !automationStepsItem.ConnectorAction.ActionName.IsUnknown() && !automationStepsItem.ConnectorAction.ActionName.IsNull() {
					*actionName = automationStepsItem.ConnectorAction.ActionName.ValueString()
				} else {
					actionName = nil
				}
				var argsTemplate *shared.ArgsTemplate
				if automationStepsItem.ConnectorAction.ArgsTemplate != nil {
					argsTemplate = &shared.ArgsTemplate{}
				}
				var connectorRef *shared.ConnectorRef
				if automationStepsItem.ConnectorAction.ConnectorRef != nil {
					appId1 := new(string)
					if !automationStepsItem.ConnectorAction.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.ConnectorAction.ConnectorRef.AppID.IsNull() {
						*appId1 = automationStepsItem.ConnectorAction.ConnectorRef.AppID.ValueString()
					} else {
						appId1 = nil
					}
					id := new(string)
					if !automationStepsItem.ConnectorAction.ConnectorRef.ID.IsUnknown() && !automationStepsItem.ConnectorAction.ConnectorRef.ID.IsNull() {
						*id = automationStepsItem.ConnectorAction.ConnectorRef.ID.ValueString()
					} else {
						id = nil
					}
					connectorRef = &shared.ConnectorRef{
						AppID: appId1,
						ID:    id,
					}
				}
				connectorAction = &shared.ConnectorAction{
					ActionName:   actionName,
					ArgsTemplate: argsTemplate,
					ConnectorRef: connectorRef,
				}
			}
			var connectorCreateAccount *shared.ConnectorCreateAccount
			if automationStepsItem.ConnectorCreateAccount != nil {
				var connectorRef1 *shared.ConnectorRef
				if automationStepsItem.ConnectorCreateAccount.ConnectorRef != nil {
					appId2 := new(string)
					if !automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsNull() {
						*appId2 = automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.ValueString()
					} else {
						appId2 = nil
					}
					id1 := new(string)
					if !automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsNull() {
						*id1 = automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.ValueString()
					} else {
						id1 = nil
					}
					connectorRef1 = &shared.ConnectorRef{
						AppID: appId2,
						ID:    id1,
					}
				}
				userIDCel := new(string)
				if !automationStepsItem.ConnectorCreateAccount.UserIDCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserIDCel.IsNull() {
					*userIDCel = automationStepsItem.ConnectorCreateAccount.UserIDCel.ValueString()
				} else {
					userIDCel = nil
				}
				var userProperties *shared.UserProperties
				if automationStepsItem.ConnectorCreateAccount.UserProperties != nil {
					displayNameCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsNull() {
						*displayNameCel = automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.ValueString()
					} else {
						displayNameCel = nil
					}
					emailCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsNull() {
						*emailCel = automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.ValueString()
					} else {
						emailCel = nil
					}
					profileAttributeCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsNull() {
						*profileAttributeCel = automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.ValueString()
					} else {
						profileAttributeCel = nil
					}
					usernameCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsNull() {
						*usernameCel = automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.ValueString()
					} else {
						usernameCel = nil
					}
					userProperties = &shared.UserProperties{
						DisplayNameCel:      displayNameCel,
						EmailCel:            emailCel,
						ProfileAttributeCel: profileAttributeCel,
						UsernameCel:         usernameCel,
					}
				}
				connectorCreateAccount = &shared.ConnectorCreateAccount{
					ConnectorRef:   connectorRef1,
					UserIDCel:      userIDCel,
					UserProperties: userProperties,
				}
			}
			var createAccessReview *shared.CreateAccessReview
			if automationStepsItem.CreateAccessReview != nil {
				accessReviewTemplateCel := new(string)
				if !automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsUnknown() && !automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsNull() {
					*accessReviewTemplateCel = automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.ValueString()
				} else {
					accessReviewTemplateCel = nil
				}
				accessReviewTemplateID := new(string)
				if !automationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsUnknown() && !automationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsNull() {
					*accessReviewTemplateID = automationStepsItem.CreateAccessReview.AccessReviewTemplateID.ValueString()
				} else {
					accessReviewTemplateID = nil
				}
				campaignName := new(string)
				if !automationStepsItem.CreateAccessReview.CampaignName.IsUnknown() && !automationStepsItem.CreateAccessReview.CampaignName.IsNull() {
					*campaignName = automationStepsItem.CreateAccessReview.CampaignName.ValueString()
				} else {
					campaignName = nil
				}
				useSubjectUser := new(bool)
				if !automationStepsItem.CreateAccessReview.UseSubjectUser.IsUnknown() && !automationStepsItem.CreateAccessReview.UseSubjectUser.IsNull() {
					*useSubjectUser = automationStepsItem.CreateAccessReview.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser = nil
				}
				userIdsCel := new(string)
				if !automationStepsItem.CreateAccessReview.UserIdsCel.IsUnknown() && !automationStepsItem.CreateAccessReview.UserIdsCel.IsNull() {
					*userIdsCel = automationStepsItem.CreateAccessReview.UserIdsCel.ValueString()
				} else {
					userIdsCel = nil
				}
				var userRefs []shared.UserRef
				if automationStepsItem.CreateAccessReview.UserRefs != nil {
					userRefs = make([]shared.UserRef, 0, len(automationStepsItem.CreateAccessReview.UserRefs))
					for _, userRefsItem := range automationStepsItem.CreateAccessReview.UserRefs {
						id2 := new(string)
						if !userRefsItem.ID.IsUnknown() && !userRefsItem.ID.IsNull() {
							*id2 = userRefsItem.ID.ValueString()
						} else {
							id2 = nil
						}
						userRefs = append(userRefs, shared.UserRef{
							ID: id2,
						})
					}
				}
				createAccessReview = &shared.CreateAccessReview{
					AccessReviewTemplateCel: accessReviewTemplateCel,
					AccessReviewTemplateID:  accessReviewTemplateID,
					CampaignName:            campaignName,
					UseSubjectUser:          useSubjectUser,
					UserIdsCel:              userIdsCel,
					UserRefs:                userRefs,
				}
			}
			var createRevokeTasks *shared.CreateRevokeTasks
			if automationStepsItem.CreateRevokeTasks != nil {
				var appEntitlementRefs []shared.AppEntitlementRef
				if automationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
					appEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.CreateRevokeTasks.AppEntitlementRefs))
					for _, appEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
						appId3 := new(string)
						if !appEntitlementRefsItem.AppID.IsUnknown() && !appEntitlementRefsItem.AppID.IsNull() {
							*appId3 = appEntitlementRefsItem.AppID.ValueString()
						} else {
							appId3 = nil
						}
						id3 := new(string)
						if !appEntitlementRefsItem.ID.IsUnknown() && !appEntitlementRefsItem.ID.IsNull() {
							*id3 = appEntitlementRefsItem.ID.ValueString()
						} else {
							id3 = nil
						}
						appEntitlementRefs = append(appEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId3,
							ID:    id3,
						})
					}
				}
				appEntitlementRefsCel := new(string)
				if !automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel = automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel = nil
				}
				revokeAll := new(bool)
				if !automationStepsItem.CreateRevokeTasks.RevokeAll.IsUnknown() && !automationStepsItem.CreateRevokeTasks.RevokeAll.IsNull() {
					*revokeAll = automationStepsItem.CreateRevokeTasks.RevokeAll.ValueBool()
				} else {
					revokeAll = nil
				}
				useSubjectUser1 := new(bool)
				if !automationStepsItem.CreateRevokeTasks.UseSubjectUser.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UseSubjectUser.IsNull() {
					*useSubjectUser1 = automationStepsItem.CreateRevokeTasks.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser1 = nil
				}
				userIDCel1 := new(string)
				if !automationStepsItem.CreateRevokeTasks.UserIDCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UserIDCel.IsNull() {
					*userIDCel1 = automationStepsItem.CreateRevokeTasks.UserIDCel.ValueString()
				} else {
					userIDCel1 = nil
				}
				var userRef *shared.UserRef
				if automationStepsItem.CreateRevokeTasks.UserRef != nil {
					id4 := new(string)
					if !automationStepsItem.CreateRevokeTasks.UserRef.ID.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UserRef.ID.IsNull() {
						*id4 = automationStepsItem.CreateRevokeTasks.UserRef.ID.ValueString()
					} else {
						id4 = nil
					}
					userRef = &shared.UserRef{
						ID: id4,
					}
				}
				createRevokeTasks = &shared.CreateRevokeTasks{
					AppEntitlementRefs:    appEntitlementRefs,
					AppEntitlementRefsCel: appEntitlementRefsCel,
					RevokeAll:             revokeAll,
					UseSubjectUser:        useSubjectUser1,
					UserIDCel:             userIDCel1,
					UserRef:               userRef,
				}
			}
			var grantEntitlements *shared.GrantEntitlements
			if automationStepsItem.GrantEntitlements != nil {
				var appEntitlementRefs1 []shared.AppEntitlementRef
				if automationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
					appEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.GrantEntitlements.AppEntitlementRefs))
					for _, appEntitlementRefsItem1 := range automationStepsItem.GrantEntitlements.AppEntitlementRefs {
						appId4 := new(string)
						if !appEntitlementRefsItem1.AppID.IsUnknown() && !appEntitlementRefsItem1.AppID.IsNull() {
							*appId4 = appEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId4 = nil
						}
						id5 := new(string)
						if !appEntitlementRefsItem1.ID.IsUnknown() && !appEntitlementRefsItem1.ID.IsNull() {
							*id5 = appEntitlementRefsItem1.ID.ValueString()
						} else {
							id5 = nil
						}
						appEntitlementRefs1 = append(appEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId4,
							ID:    id5,
						})
					}
				}
				appEntitlementRefsCel1 := new(string)
				if !automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsUnknown() && !automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel1 = automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel1 = nil
				}
				useSubjectUser2 := new(bool)
				if !automationStepsItem.GrantEntitlements.UseSubjectUser.IsUnknown() && !automationStepsItem.GrantEntitlements.UseSubjectUser.IsNull() {
					*useSubjectUser2 = automationStepsItem.GrantEntitlements.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser2 = nil
				}
				userIDCel2 := new(string)
				if !automationStepsItem.GrantEntitlements.UserIDCel.IsUnknown() && !automationStepsItem.GrantEntitlements.UserIDCel.IsNull() {
					*userIDCel2 = automationStepsItem.GrantEntitlements.UserIDCel.ValueString()
				} else {
					userIDCel2 = nil
				}
				var userRef1 *shared.UserRef
				if automationStepsItem.GrantEntitlements.UserRef != nil {
					id6 := new(string)
					if !automationStepsItem.GrantEntitlements.UserRef.ID.IsUnknown() && !automationStepsItem.GrantEntitlements.UserRef.ID.IsNull() {
						*id6 = automationStepsItem.GrantEntitlements.UserRef.ID.ValueString()
					} else {
						id6 = nil
					}
					userRef1 = &shared.UserRef{
						ID: id6,
					}
				}
				grantEntitlements = &shared.GrantEntitlements{
					AppEntitlementRefs:    appEntitlementRefs1,
					AppEntitlementRefsCel: appEntitlementRefsCel1,
					UseSubjectUser:        useSubjectUser2,
					UserIDCel:             userIDCel2,
					UserRef:               userRef1,
				}
			}
			var removeFromDelegation *shared.RemoveFromDelegation
			if automationStepsItem.RemoveFromDelegation != nil {
				replacementUserIDCel := new(string)
				if !automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsUnknown() && !automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsNull() {
					*replacementUserIDCel = automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.ValueString()
				} else {
					replacementUserIDCel = nil
				}
				var replacementUserRef *shared.UserRef
				if automationStepsItem.RemoveFromDelegation.ReplacementUserRef != nil {
					id7 := new(string)
					if !automationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.IsUnknown() && !automationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.IsNull() {
						*id7 = automationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.ValueString()
					} else {
						id7 = nil
					}
					replacementUserRef = &shared.UserRef{
						ID: id7,
					}
				}
				useSubjectUser3 := new(bool)
				if !automationStepsItem.RemoveFromDelegation.UseSubjectUser.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UseSubjectUser.IsNull() {
					*useSubjectUser3 = automationStepsItem.RemoveFromDelegation.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser3 = nil
				}
				userIDCel3 := new(string)
				if !automationStepsItem.RemoveFromDelegation.UserIDCel.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserIDCel.IsNull() {
					*userIDCel3 = automationStepsItem.RemoveFromDelegation.UserIDCel.ValueString()
				} else {
					userIDCel3 = nil
				}
				var userRef2 *shared.UserRef
				if automationStepsItem.RemoveFromDelegation.UserRef != nil {
					id8 := new(string)
					if !automationStepsItem.RemoveFromDelegation.UserRef.ID.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserRef.ID.IsNull() {
						*id8 = automationStepsItem.RemoveFromDelegation.UserRef.ID.ValueString()
					} else {
						id8 = nil
					}
					userRef2 = &shared.UserRef{
						ID: id8,
					}
				}
				removeFromDelegation = &shared.RemoveFromDelegation{
					ReplacementUserIDCel: replacementUserIDCel,
					ReplacementUserRef:   replacementUserRef,
					UseSubjectUser:       useSubjectUser3,
					UserIDCel:            userIDCel3,
					UserRef:              userRef2,
				}
			}
			var runAutomation *shared.RunAutomation
			if automationStepsItem.RunAutomation != nil {
				automationTemplateIDCel := new(string)
				if !automationStepsItem.RunAutomation.AutomationTemplateIDCel.IsUnknown() && !automationStepsItem.RunAutomation.AutomationTemplateIDCel.IsNull() {
					*automationTemplateIDCel = automationStepsItem.RunAutomation.AutomationTemplateIDCel.ValueString()
				} else {
					automationTemplateIDCel = nil
				}
				var automationTemplateRef *shared.AutomationTemplateRef
				if automationStepsItem.RunAutomation.AutomationTemplateRef != nil {
					id9 := new(string)
					if !automationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsUnknown() && !automationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsNull() {
						*id9 = automationStepsItem.RunAutomation.AutomationTemplateRef.ID.ValueString()
					} else {
						id9 = nil
					}
					automationTemplateRef = &shared.AutomationTemplateRef{
						ID: id9,
					}
				}
				var contextVar *shared.AutomationContext
				if automationStepsItem.RunAutomation.Context != nil {
					var contextVar1 *shared.Context
					if automationStepsItem.RunAutomation.Context.Context != nil {
						contextVar1 = &shared.Context{}
					}
					contextVar = &shared.AutomationContext{
						Context: contextVar1,
					}
				}
				runAutomation = &shared.RunAutomation{
					AutomationTemplateIDCel: automationTemplateIDCel,
					AutomationTemplateRef:   automationTemplateRef,
					Context:                 contextVar,
				}
			}
			var sendEmail *shared.SendEmail
			if automationStepsItem.SendEmail != nil {
				body := new(string)
				if !automationStepsItem.SendEmail.Body.IsUnknown() && !automationStepsItem.SendEmail.Body.IsNull() {
					*body = automationStepsItem.SendEmail.Body.ValueString()
				} else {
					body = nil
				}
				subject := new(string)
				if !automationStepsItem.SendEmail.Subject.IsUnknown() && !automationStepsItem.SendEmail.Subject.IsNull() {
					*subject = automationStepsItem.SendEmail.Subject.ValueString()
				} else {
					subject = nil
				}
				title := new(string)
				if !automationStepsItem.SendEmail.Title.IsUnknown() && !automationStepsItem.SendEmail.Title.IsNull() {
					*title = automationStepsItem.SendEmail.Title.ValueString()
				} else {
					title = nil
				}
				useSubjectUser4 := new(bool)
				if !automationStepsItem.SendEmail.UseSubjectUser.IsUnknown() && !automationStepsItem.SendEmail.UseSubjectUser.IsNull() {
					*useSubjectUser4 = automationStepsItem.SendEmail.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser4 = nil
				}
				userIdsCel1 := new(string)
				if !automationStepsItem.SendEmail.UserIdsCel.IsUnknown() && !automationStepsItem.SendEmail.UserIdsCel.IsNull() {
					*userIdsCel1 = automationStepsItem.SendEmail.UserIdsCel.ValueString()
				} else {
					userIdsCel1 = nil
				}
				var userRefs1 []shared.UserRef
				if automationStepsItem.SendEmail.UserRefs != nil {
					userRefs1 = make([]shared.UserRef, 0, len(automationStepsItem.SendEmail.UserRefs))
					for _, userRefsItem1 := range automationStepsItem.SendEmail.UserRefs {
						id10 := new(string)
						if !userRefsItem1.ID.IsUnknown() && !userRefsItem1.ID.IsNull() {
							*id10 = userRefsItem1.ID.ValueString()
						} else {
							id10 = nil
						}
						userRefs1 = append(userRefs1, shared.UserRef{
							ID: id10,
						})
					}
				}
				sendEmail = &shared.SendEmail{
					Body:           body,
					Subject:        subject,
					Title:          title,
					UseSubjectUser: useSubjectUser4,
					UserIdsCel:     userIdsCel1,
					UserRefs:       userRefs1,
				}
			}
			var sendSlackMessage *shared.SendSlackMessage
			if automationStepsItem.SendSlackMessage != nil {
				body1 := new(string)
				if !automationStepsItem.SendSlackMessage.Body.IsUnknown() && !automationStepsItem.SendSlackMessage.Body.IsNull() {
					*body1 = automationStepsItem.SendSlackMessage.Body.ValueString()
				} else {
					body1 = nil
				}
				channelName := new(string)
				if !automationStepsItem.SendSlackMessage.ChannelName.IsUnknown() && !automationStepsItem.SendSlackMessage.ChannelName.IsNull() {
					*channelName = automationStepsItem.SendSlackMessage.ChannelName.ValueString()
				} else {
					channelName = nil
				}
				channelNameCel := new(string)
				if !automationStepsItem.SendSlackMessage.ChannelNameCel.IsUnknown() && !automationStepsItem.SendSlackMessage.ChannelNameCel.IsNull() {
					*channelNameCel = automationStepsItem.SendSlackMessage.ChannelNameCel.ValueString()
				} else {
					channelNameCel = nil
				}
				sendSlackMessage = &shared.SendSlackMessage{
					Body:           body1,
					ChannelName:    channelName,
					ChannelNameCel: channelNameCel,
				}
			}
			skipIfTrueCel := new(string)
			if !automationStepsItem.SkipIfTrueCel.IsUnknown() && !automationStepsItem.SkipIfTrueCel.IsNull() {
				*skipIfTrueCel = automationStepsItem.SkipIfTrueCel.ValueString()
			} else {
				skipIfTrueCel = nil
			}
			stepDisplayName := new(string)
			if !automationStepsItem.StepDisplayName.IsUnknown() && !automationStepsItem.StepDisplayName.IsNull() {
				*stepDisplayName = automationStepsItem.StepDisplayName.ValueString()
			} else {
				stepDisplayName = nil
			}
			stepName := new(string)
			if !automationStepsItem.StepName.IsUnknown() && !automationStepsItem.StepName.IsNull() {
				*stepName = automationStepsItem.StepName.ValueString()
			} else {
				stepName = nil
			}
			var taskAction *shared.TaskAction
			if automationStepsItem.TaskAction != nil {
				var close *shared.CloseAction
				if automationStepsItem.TaskAction.Close != nil {
					useSubjectUser5 := new(bool)
					if !automationStepsItem.TaskAction.Close.UseSubjectUser.IsUnknown() && !automationStepsItem.TaskAction.Close.UseSubjectUser.IsNull() {
						*useSubjectUser5 = automationStepsItem.TaskAction.Close.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser5 = nil
					}
					userIDCel4 := new(string)
					if !automationStepsItem.TaskAction.Close.UserIDCel.IsUnknown() && !automationStepsItem.TaskAction.Close.UserIDCel.IsNull() {
						*userIDCel4 = automationStepsItem.TaskAction.Close.UserIDCel.ValueString()
					} else {
						userIDCel4 = nil
					}
					var userRef3 *shared.UserRef
					if automationStepsItem.TaskAction.Close.UserRef != nil {
						id11 := new(string)
						if !automationStepsItem.TaskAction.Close.UserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.Close.UserRef.ID.IsNull() {
							*id11 = automationStepsItem.TaskAction.Close.UserRef.ID.ValueString()
						} else {
							id11 = nil
						}
						userRef3 = &shared.UserRef{
							ID: id11,
						}
					}
					close = &shared.CloseAction{
						UseSubjectUser: useSubjectUser5,
						UserIDCel:      userIDCel4,
						UserRef:        userRef3,
					}
				}
				var reassign *shared.ReassignAction
				if automationStepsItem.TaskAction.Reassign != nil {
					assigneeUserIDCel := new(string)
					if !automationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.IsUnknown() && !automationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.IsNull() {
						*assigneeUserIDCel = automationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.ValueString()
					} else {
						assigneeUserIDCel = nil
					}
					var assigneeUserRef *shared.UserRef
					if automationStepsItem.TaskAction.Reassign.AssigneeUserRef != nil {
						id12 := new(string)
						if !automationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.IsNull() {
							*id12 = automationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.ValueString()
						} else {
							id12 = nil
						}
						assigneeUserRef = &shared.UserRef{
							ID: id12,
						}
					}
					subjectUserIDCel := new(string)
					if !automationStepsItem.TaskAction.Reassign.SubjectUserIDCel.IsUnknown() && !automationStepsItem.TaskAction.Reassign.SubjectUserIDCel.IsNull() {
						*subjectUserIDCel = automationStepsItem.TaskAction.Reassign.SubjectUserIDCel.ValueString()
					} else {
						subjectUserIDCel = nil
					}
					var subjectUserRef *shared.UserRef
					if automationStepsItem.TaskAction.Reassign.SubjectUserRef != nil {
						id13 := new(string)
						if !automationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.IsNull() {
							*id13 = automationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.ValueString()
						} else {
							id13 = nil
						}
						subjectUserRef = &shared.UserRef{
							ID: id13,
						}
					}
					useSubjectUser6 := new(bool)
					if !automationStepsItem.TaskAction.Reassign.UseSubjectUser.IsUnknown() && !automationStepsItem.TaskAction.Reassign.UseSubjectUser.IsNull() {
						*useSubjectUser6 = automationStepsItem.TaskAction.Reassign.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser6 = nil
					}
					reassign = &shared.ReassignAction{
						AssigneeUserIDCel: assigneeUserIDCel,
						AssigneeUserRef:   assigneeUserRef,
						SubjectUserIDCel:  subjectUserIDCel,
						SubjectUserRef:    subjectUserRef,
						UseSubjectUser:    useSubjectUser6,
					}
				}
				var taskTypes []shared.TaskTypes
				if automationStepsItem.TaskAction.TaskTypes != nil {
					taskTypes = make([]shared.TaskTypes, 0, len(automationStepsItem.TaskAction.TaskTypes))
					for _, taskTypesItem := range automationStepsItem.TaskAction.TaskTypes {
						taskTypes = append(taskTypes, shared.TaskTypes(taskTypesItem.ValueString()))
					}
				}
				taskUserRelation := new(shared.TaskUserRelation)
				if !automationStepsItem.TaskAction.TaskUserRelation.IsUnknown() && !automationStepsItem.TaskAction.TaskUserRelation.IsNull() {
					*taskUserRelation = shared.TaskUserRelation(automationStepsItem.TaskAction.TaskUserRelation.ValueString())
				} else {
					taskUserRelation = nil
				}
				taskAction = &shared.TaskAction{
					Close:            close,
					Reassign:         reassign,
					TaskTypes:        taskTypes,
					TaskUserRelation: taskUserRelation,
				}
			}
			var unenrollFromAllAccessProfiles *shared.UnenrollFromAllAccessProfiles
			if automationStepsItem.UnenrollFromAllAccessProfiles != nil {
				var catalogIds []string
				if automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
					catalogIds = make([]string, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
					for _, catalogIdsItem := range automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
						catalogIds = append(catalogIds, catalogIdsItem.ValueString())
					}
				}
				catalogIdsCel := new(string)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsNull() {
					*catalogIdsCel = automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.ValueString()
				} else {
					catalogIdsCel = nil
				}
				useSubjectUser7 := new(bool)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsNull() {
					*useSubjectUser7 = automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser7 = nil
				}
				userIdsCel2 := new(string)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsNull() {
					*userIdsCel2 = automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.ValueString()
				} else {
					userIdsCel2 = nil
				}
				var userRefs2 []shared.UserRef
				if automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
					userRefs2 = make([]shared.UserRef, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs))
					for _, userRefsItem2 := range automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
						id14 := new(string)
						if !userRefsItem2.ID.IsUnknown() && !userRefsItem2.ID.IsNull() {
							*id14 = userRefsItem2.ID.ValueString()
						} else {
							id14 = nil
						}
						userRefs2 = append(userRefs2, shared.UserRef{
							ID: id14,
						})
					}
				}
				unenrollFromAllAccessProfiles = &shared.UnenrollFromAllAccessProfiles{
					CatalogIds:     catalogIds,
					CatalogIdsCel:  catalogIdsCel,
					UseSubjectUser: useSubjectUser7,
					UserIdsCel:     userIdsCel2,
					UserRefs:       userRefs2,
				}
			}
			var updateUser *shared.UpdateUser
			if automationStepsItem.UpdateUser != nil {
				useSubjectUser8 := new(bool)
				if !automationStepsItem.UpdateUser.UseSubjectUser.IsUnknown() && !automationStepsItem.UpdateUser.UseSubjectUser.IsNull() {
					*useSubjectUser8 = automationStepsItem.UpdateUser.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser8 = nil
				}
				userIDCel5 := new(string)
				if !automationStepsItem.UpdateUser.UserIDCel.IsUnknown() && !automationStepsItem.UpdateUser.UserIDCel.IsNull() {
					*userIDCel5 = automationStepsItem.UpdateUser.UserIDCel.ValueString()
				} else {
					userIDCel5 = nil
				}
				var userRef4 *shared.UserRef
				if automationStepsItem.UpdateUser.UserRef != nil {
					id15 := new(string)
					if !automationStepsItem.UpdateUser.UserRef.ID.IsUnknown() && !automationStepsItem.UpdateUser.UserRef.ID.IsNull() {
						*id15 = automationStepsItem.UpdateUser.UserRef.ID.ValueString()
					} else {
						id15 = nil
					}
					userRef4 = &shared.UserRef{
						ID: id15,
					}
				}
				userStatusCel := new(string)
				if !automationStepsItem.UpdateUser.UserStatusCel.IsUnknown() && !automationStepsItem.UpdateUser.UserStatusCel.IsNull() {
					*userStatusCel = automationStepsItem.UpdateUser.UserStatusCel.ValueString()
				} else {
					userStatusCel = nil
				}
				userStatusEnum := new(shared.UserStatusEnum)
				if !automationStepsItem.UpdateUser.UserStatusEnum.IsUnknown() && !automationStepsItem.UpdateUser.UserStatusEnum.IsNull() {
					*userStatusEnum = shared.UserStatusEnum(automationStepsItem.UpdateUser.UserStatusEnum.ValueString())
				} else {
					userStatusEnum = nil
				}
				updateUser = &shared.UpdateUser{
					UseSubjectUser: useSubjectUser8,
					UserIDCel:      userIDCel5,
					UserRef:        userRef4,
					UserStatusCel:  userStatusCel,
					UserStatusEnum: userStatusEnum,
				}
			}
			var waitForDuration *shared.WaitForDuration
			if automationStepsItem.WaitForDuration != nil {
				duration := new(string)
				if !automationStepsItem.WaitForDuration.Duration.IsUnknown() && !automationStepsItem.WaitForDuration.Duration.IsNull() {
					*duration = automationStepsItem.WaitForDuration.Duration.ValueString()
				} else {
					duration = nil
				}
				waitForDuration = &shared.WaitForDuration{
					Duration: duration,
				}
			}
			var webhook *shared.Webhook
			if automationStepsItem.Webhook != nil {
				var payload *shared.Payload
				if automationStepsItem.Webhook.Payload != nil {
					payload = &shared.Payload{}
				}
				webhookID := new(string)
				if !automationStepsItem.Webhook.WebhookID.IsUnknown() && !automationStepsItem.Webhook.WebhookID.IsNull() {
					*webhookID = automationStepsItem.Webhook.WebhookID.ValueString()
				} else {
					webhookID = nil
				}
				webhookIDCel := new(string)
				if !automationStepsItem.Webhook.WebhookIDCel.IsUnknown() && !automationStepsItem.Webhook.WebhookIDCel.IsNull() {
					*webhookIDCel = automationStepsItem.Webhook.WebhookIDCel.ValueString()
				} else {
					webhookIDCel = nil
				}
				webhook = &shared.Webhook{
					Payload:      payload,
					WebhookID:    webhookID,
					WebhookIDCel: webhookIDCel,
				}
			}
			automationSteps = append(automationSteps, shared.AutomationStep{
				CallFunction:                  callFunction,
				ConnectorAction:               connectorAction,
				ConnectorCreateAccount:        connectorCreateAccount,
				CreateAccessReview:            createAccessReview,
				CreateRevokeTasks:             createRevokeTasks,
				GrantEntitlements:             grantEntitlements,
				RemoveFromDelegation:          removeFromDelegation,
				RunAutomation:                 runAutomation,
				SendEmail:                     sendEmail,
				SendSlackMessage:              sendSlackMessage,
				SkipIfTrueCel:                 skipIfTrueCel,
				StepDisplayName:               stepDisplayName,
				StepName:                      stepName,
				TaskAction:                    taskAction,
				UnenrollFromAllAccessProfiles: unenrollFromAllAccessProfiles,
				UpdateUser:                    updateUser,
				WaitForDuration:               waitForDuration,
				Webhook:                       webhook,
			})
		}
	}
	var circuitBreaker *shared.DisabledReasonCircuitBreaker
	if r.CircuitBreaker != nil {
		circuitBreaker = &shared.DisabledReasonCircuitBreaker{}
	}
	var contextVar2 *shared.AutomationContext
	if r.Context != nil {
		var contextVar3 *shared.Context
		if r.Context.Context != nil {
			contextVar3 = &shared.Context{}
		}
		contextVar2 = &shared.AutomationContext{
			Context: contextVar3,
		}
	}
	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	currentVersion := new(string)
	if !r.CurrentVersion.IsUnknown() && !r.CurrentVersion.IsNull() {
		*currentVersion = r.CurrentVersion.ValueString()
	} else {
		currentVersion = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var draftAutomationSteps []shared.AutomationStep
	if r.DraftAutomationSteps != nil {
		draftAutomationSteps = make([]shared.AutomationStep, 0, len(r.DraftAutomationSteps))
		for _, draftAutomationStepsItem := range r.DraftAutomationSteps {
			var callFunction1 *shared.CallFunction
			if draftAutomationStepsItem.CallFunction != nil {
				args1 := make(map[string]string)
				for argsKey1, argsValue1 := range draftAutomationStepsItem.CallFunction.Args {
					var argsInst1 string
					argsInst1 = argsValue1.ValueString()

					args1[argsKey1] = argsInst1
				}
				functionId1 := new(string)
				if !draftAutomationStepsItem.CallFunction.FunctionID.IsUnknown() && !draftAutomationStepsItem.CallFunction.FunctionID.IsNull() {
					*functionId1 = draftAutomationStepsItem.CallFunction.FunctionID.ValueString()
				} else {
					functionId1 = nil
				}
				callFunction1 = &shared.CallFunction{
					Args:       args1,
					FunctionID: functionId1,
				}
			}
			var connectorAction1 *shared.ConnectorAction
			if draftAutomationStepsItem.ConnectorAction != nil {
				actionName1 := new(string)
				if !draftAutomationStepsItem.ConnectorAction.ActionName.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ActionName.IsNull() {
					*actionName1 = draftAutomationStepsItem.ConnectorAction.ActionName.ValueString()
				} else {
					actionName1 = nil
				}
				var argsTemplate1 *shared.ArgsTemplate
				if draftAutomationStepsItem.ConnectorAction.ArgsTemplate != nil {
					argsTemplate1 = &shared.ArgsTemplate{}
				}
				var connectorRef2 *shared.ConnectorRef
				if draftAutomationStepsItem.ConnectorAction.ConnectorRef != nil {
					appId5 := new(string)
					if !draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.IsNull() {
						*appId5 = draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.ValueString()
					} else {
						appId5 = nil
					}
					id16 := new(string)
					if !draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.IsNull() {
						*id16 = draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.ValueString()
					} else {
						id16 = nil
					}
					connectorRef2 = &shared.ConnectorRef{
						AppID: appId5,
						ID:    id16,
					}
				}
				connectorAction1 = &shared.ConnectorAction{
					ActionName:   actionName1,
					ArgsTemplate: argsTemplate1,
					ConnectorRef: connectorRef2,
				}
			}
			var connectorCreateAccount1 *shared.ConnectorCreateAccount
			if draftAutomationStepsItem.ConnectorCreateAccount != nil {
				var connectorRef3 *shared.ConnectorRef
				if draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef != nil {
					appId6 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsNull() {
						*appId6 = draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.ValueString()
					} else {
						appId6 = nil
					}
					id17 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsNull() {
						*id17 = draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.ValueString()
					} else {
						id17 = nil
					}
					connectorRef3 = &shared.ConnectorRef{
						AppID: appId6,
						ID:    id17,
					}
				}
				userIDCel6 := new(string)
				if !draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.IsNull() {
					*userIDCel6 = draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.ValueString()
				} else {
					userIDCel6 = nil
				}
				var userProperties1 *shared.UserProperties
				if draftAutomationStepsItem.ConnectorCreateAccount.UserProperties != nil {
					displayNameCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsNull() {
						*displayNameCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.ValueString()
					} else {
						displayNameCel1 = nil
					}
					emailCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsNull() {
						*emailCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.ValueString()
					} else {
						emailCel1 = nil
					}
					profileAttributeCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsNull() {
						*profileAttributeCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.ValueString()
					} else {
						profileAttributeCel1 = nil
					}
					usernameCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsNull() {
						*usernameCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.ValueString()
					} else {
						usernameCel1 = nil
					}
					userProperties1 = &shared.UserProperties{
						DisplayNameCel:      displayNameCel1,
						EmailCel:            emailCel1,
						ProfileAttributeCel: profileAttributeCel1,
						UsernameCel:         usernameCel1,
					}
				}
				connectorCreateAccount1 = &shared.ConnectorCreateAccount{
					ConnectorRef:   connectorRef3,
					UserIDCel:      userIDCel6,
					UserProperties: userProperties1,
				}
			}
			var createAccessReview1 *shared.CreateAccessReview
			if draftAutomationStepsItem.CreateAccessReview != nil {
				accessReviewTemplateCel1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsNull() {
					*accessReviewTemplateCel1 = draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.ValueString()
				} else {
					accessReviewTemplateCel1 = nil
				}
				accessReviewTemplateId1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsNull() {
					*accessReviewTemplateId1 = draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.ValueString()
				} else {
					accessReviewTemplateId1 = nil
				}
				campaignName1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.CampaignName.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.CampaignName.IsNull() {
					*campaignName1 = draftAutomationStepsItem.CreateAccessReview.CampaignName.ValueString()
				} else {
					campaignName1 = nil
				}
				useSubjectUser9 := new(bool)
				if !draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.IsNull() {
					*useSubjectUser9 = draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser9 = nil
				}
				userIdsCel3 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.UserIdsCel.IsNull() {
					*userIdsCel3 = draftAutomationStepsItem.CreateAccessReview.UserIdsCel.ValueString()
				} else {
					userIdsCel3 = nil
				}
				var userRefs3 []shared.UserRef
				if draftAutomationStepsItem.CreateAccessReview.UserRefs != nil {
					userRefs3 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.CreateAccessReview.UserRefs))
					for _, userRefsItem3 := range draftAutomationStepsItem.CreateAccessReview.UserRefs {
						id18 := new(string)
						if !userRefsItem3.ID.IsUnknown() && !userRefsItem3.ID.IsNull() {
							*id18 = userRefsItem3.ID.ValueString()
						} else {
							id18 = nil
						}
						userRefs3 = append(userRefs3, shared.UserRef{
							ID: id18,
						})
					}
				}
				createAccessReview1 = &shared.CreateAccessReview{
					AccessReviewTemplateCel: accessReviewTemplateCel1,
					AccessReviewTemplateID:  accessReviewTemplateId1,
					CampaignName:            campaignName1,
					UseSubjectUser:          useSubjectUser9,
					UserIdsCel:              userIdsCel3,
					UserRefs:                userRefs3,
				}
			}
			var createRevokeTasks1 *shared.CreateRevokeTasks
			if draftAutomationStepsItem.CreateRevokeTasks != nil {
				var appEntitlementRefs2 []shared.AppEntitlementRef
				if draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
					appEntitlementRefs2 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs))
					for _, appEntitlementRefsItem2 := range draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
						appId7 := new(string)
						if !appEntitlementRefsItem2.AppID.IsUnknown() && !appEntitlementRefsItem2.AppID.IsNull() {
							*appId7 = appEntitlementRefsItem2.AppID.ValueString()
						} else {
							appId7 = nil
						}
						id19 := new(string)
						if !appEntitlementRefsItem2.ID.IsUnknown() && !appEntitlementRefsItem2.ID.IsNull() {
							*id19 = appEntitlementRefsItem2.ID.ValueString()
						} else {
							id19 = nil
						}
						appEntitlementRefs2 = append(appEntitlementRefs2, shared.AppEntitlementRef{
							AppID: appId7,
							ID:    id19,
						})
					}
				}
				appEntitlementRefsCel2 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel2 = draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel2 = nil
				}
				revokeAll1 := new(bool)
				if !draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.IsNull() {
					*revokeAll1 = draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.ValueBool()
				} else {
					revokeAll1 = nil
				}
				useSubjectUser10 := new(bool)
				if !draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.IsNull() {
					*useSubjectUser10 = draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser10 = nil
				}
				userIDCel7 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.IsNull() {
					*userIDCel7 = draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.ValueString()
				} else {
					userIDCel7 = nil
				}
				var userRef5 *shared.UserRef
				if draftAutomationStepsItem.CreateRevokeTasks.UserRef != nil {
					id20 := new(string)
					if !draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.IsNull() {
						*id20 = draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.ValueString()
					} else {
						id20 = nil
					}
					userRef5 = &shared.UserRef{
						ID: id20,
					}
				}
				createRevokeTasks1 = &shared.CreateRevokeTasks{
					AppEntitlementRefs:    appEntitlementRefs2,
					AppEntitlementRefsCel: appEntitlementRefsCel2,
					RevokeAll:             revokeAll1,
					UseSubjectUser:        useSubjectUser10,
					UserIDCel:             userIDCel7,
					UserRef:               userRef5,
				}
			}
			var grantEntitlements1 *shared.GrantEntitlements
			if draftAutomationStepsItem.GrantEntitlements != nil {
				var appEntitlementRefs3 []shared.AppEntitlementRef
				if draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
					appEntitlementRefs3 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs))
					for _, appEntitlementRefsItem3 := range draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs {
						appId8 := new(string)
						if !appEntitlementRefsItem3.AppID.IsUnknown() && !appEntitlementRefsItem3.AppID.IsNull() {
							*appId8 = appEntitlementRefsItem3.AppID.ValueString()
						} else {
							appId8 = nil
						}
						id21 := new(string)
						if !appEntitlementRefsItem3.ID.IsUnknown() && !appEntitlementRefsItem3.ID.IsNull() {
							*id21 = appEntitlementRefsItem3.ID.ValueString()
						} else {
							id21 = nil
						}
						appEntitlementRefs3 = append(appEntitlementRefs3, shared.AppEntitlementRef{
							AppID: appId8,
							ID:    id21,
						})
					}
				}
				appEntitlementRefsCel3 := new(string)
				if !draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel3 = draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel3 = nil
				}
				useSubjectUser11 := new(bool)
				if !draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.IsNull() {
					*useSubjectUser11 = draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser11 = nil
				}
				userIDCel8 := new(string)
				if !draftAutomationStepsItem.GrantEntitlements.UserIDCel.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UserIDCel.IsNull() {
					*userIDCel8 = draftAutomationStepsItem.GrantEntitlements.UserIDCel.ValueString()
				} else {
					userIDCel8 = nil
				}
				var userRef6 *shared.UserRef
				if draftAutomationStepsItem.GrantEntitlements.UserRef != nil {
					id22 := new(string)
					if !draftAutomationStepsItem.GrantEntitlements.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UserRef.ID.IsNull() {
						*id22 = draftAutomationStepsItem.GrantEntitlements.UserRef.ID.ValueString()
					} else {
						id22 = nil
					}
					userRef6 = &shared.UserRef{
						ID: id22,
					}
				}
				grantEntitlements1 = &shared.GrantEntitlements{
					AppEntitlementRefs:    appEntitlementRefs3,
					AppEntitlementRefsCel: appEntitlementRefsCel3,
					UseSubjectUser:        useSubjectUser11,
					UserIDCel:             userIDCel8,
					UserRef:               userRef6,
				}
			}
			var removeFromDelegation1 *shared.RemoveFromDelegation
			if draftAutomationStepsItem.RemoveFromDelegation != nil {
				replacementUserIDCel1 := new(string)
				if !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsNull() {
					*replacementUserIDCel1 = draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.ValueString()
				} else {
					replacementUserIDCel1 = nil
				}
				var replacementUserRef1 *shared.UserRef
				if draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef != nil {
					id23 := new(string)
					if !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.IsNull() {
						*id23 = draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.ValueString()
					} else {
						id23 = nil
					}
					replacementUserRef1 = &shared.UserRef{
						ID: id23,
					}
				}
				useSubjectUser12 := new(bool)
				if !draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.IsNull() {
					*useSubjectUser12 = draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser12 = nil
				}
				userIDCel9 := new(string)
				if !draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.IsNull() {
					*userIDCel9 = draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.ValueString()
				} else {
					userIDCel9 = nil
				}
				var userRef7 *shared.UserRef
				if draftAutomationStepsItem.RemoveFromDelegation.UserRef != nil {
					id24 := new(string)
					if !draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.IsNull() {
						*id24 = draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.ValueString()
					} else {
						id24 = nil
					}
					userRef7 = &shared.UserRef{
						ID: id24,
					}
				}
				removeFromDelegation1 = &shared.RemoveFromDelegation{
					ReplacementUserIDCel: replacementUserIDCel1,
					ReplacementUserRef:   replacementUserRef1,
					UseSubjectUser:       useSubjectUser12,
					UserIDCel:            userIDCel9,
					UserRef:              userRef7,
				}
			}
			var runAutomation1 *shared.RunAutomation
			if draftAutomationStepsItem.RunAutomation != nil {
				automationTemplateIDCel1 := new(string)
				if !draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.IsUnknown() && !draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.IsNull() {
					*automationTemplateIDCel1 = draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.ValueString()
				} else {
					automationTemplateIDCel1 = nil
				}
				var automationTemplateRef1 *shared.AutomationTemplateRef
				if draftAutomationStepsItem.RunAutomation.AutomationTemplateRef != nil {
					id25 := new(string)
					if !draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsUnknown() && !draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsNull() {
						*id25 = draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.ValueString()
					} else {
						id25 = nil
					}
					automationTemplateRef1 = &shared.AutomationTemplateRef{
						ID: id25,
					}
				}
				var contextVar4 *shared.AutomationContext
				if draftAutomationStepsItem.RunAutomation.Context != nil {
					var contextVar5 *shared.Context
					if draftAutomationStepsItem.RunAutomation.Context.Context != nil {
						contextVar5 = &shared.Context{}
					}
					contextVar4 = &shared.AutomationContext{
						Context: contextVar5,
					}
				}
				runAutomation1 = &shared.RunAutomation{
					AutomationTemplateIDCel: automationTemplateIDCel1,
					AutomationTemplateRef:   automationTemplateRef1,
					Context:                 contextVar4,
				}
			}
			var sendEmail1 *shared.SendEmail
			if draftAutomationStepsItem.SendEmail != nil {
				body2 := new(string)
				if !draftAutomationStepsItem.SendEmail.Body.IsUnknown() && !draftAutomationStepsItem.SendEmail.Body.IsNull() {
					*body2 = draftAutomationStepsItem.SendEmail.Body.ValueString()
				} else {
					body2 = nil
				}
				subject1 := new(string)
				if !draftAutomationStepsItem.SendEmail.Subject.IsUnknown() && !draftAutomationStepsItem.SendEmail.Subject.IsNull() {
					*subject1 = draftAutomationStepsItem.SendEmail.Subject.ValueString()
				} else {
					subject1 = nil
				}
				title1 := new(string)
				if !draftAutomationStepsItem.SendEmail.Title.IsUnknown() && !draftAutomationStepsItem.SendEmail.Title.IsNull() {
					*title1 = draftAutomationStepsItem.SendEmail.Title.ValueString()
				} else {
					title1 = nil
				}
				useSubjectUser13 := new(bool)
				if !draftAutomationStepsItem.SendEmail.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.SendEmail.UseSubjectUser.IsNull() {
					*useSubjectUser13 = draftAutomationStepsItem.SendEmail.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser13 = nil
				}
				userIdsCel4 := new(string)
				if !draftAutomationStepsItem.SendEmail.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.SendEmail.UserIdsCel.IsNull() {
					*userIdsCel4 = draftAutomationStepsItem.SendEmail.UserIdsCel.ValueString()
				} else {
					userIdsCel4 = nil
				}
				var userRefs4 []shared.UserRef
				if draftAutomationStepsItem.SendEmail.UserRefs != nil {
					userRefs4 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.SendEmail.UserRefs))
					for _, userRefsItem4 := range draftAutomationStepsItem.SendEmail.UserRefs {
						id26 := new(string)
						if !userRefsItem4.ID.IsUnknown() && !userRefsItem4.ID.IsNull() {
							*id26 = userRefsItem4.ID.ValueString()
						} else {
							id26 = nil
						}
						userRefs4 = append(userRefs4, shared.UserRef{
							ID: id26,
						})
					}
				}
				sendEmail1 = &shared.SendEmail{
					Body:           body2,
					Subject:        subject1,
					Title:          title1,
					UseSubjectUser: useSubjectUser13,
					UserIdsCel:     userIdsCel4,
					UserRefs:       userRefs4,
				}
			}
			var sendSlackMessage1 *shared.SendSlackMessage
			if draftAutomationStepsItem.SendSlackMessage != nil {
				body3 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.Body.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.Body.IsNull() {
					*body3 = draftAutomationStepsItem.SendSlackMessage.Body.ValueString()
				} else {
					body3 = nil
				}
				channelName1 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.ChannelName.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.ChannelName.IsNull() {
					*channelName1 = draftAutomationStepsItem.SendSlackMessage.ChannelName.ValueString()
				} else {
					channelName1 = nil
				}
				channelNameCel1 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.IsNull() {
					*channelNameCel1 = draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.ValueString()
				} else {
					channelNameCel1 = nil
				}
				sendSlackMessage1 = &shared.SendSlackMessage{
					Body:           body3,
					ChannelName:    channelName1,
					ChannelNameCel: channelNameCel1,
				}
			}
			skipIfTrueCel1 := new(string)
			if !draftAutomationStepsItem.SkipIfTrueCel.IsUnknown() && !draftAutomationStepsItem.SkipIfTrueCel.IsNull() {
				*skipIfTrueCel1 = draftAutomationStepsItem.SkipIfTrueCel.ValueString()
			} else {
				skipIfTrueCel1 = nil
			}
			stepDisplayName1 := new(string)
			if !draftAutomationStepsItem.StepDisplayName.IsUnknown() && !draftAutomationStepsItem.StepDisplayName.IsNull() {
				*stepDisplayName1 = draftAutomationStepsItem.StepDisplayName.ValueString()
			} else {
				stepDisplayName1 = nil
			}
			stepName1 := new(string)
			if !draftAutomationStepsItem.StepName.IsUnknown() && !draftAutomationStepsItem.StepName.IsNull() {
				*stepName1 = draftAutomationStepsItem.StepName.ValueString()
			} else {
				stepName1 = nil
			}
			var taskAction1 *shared.TaskAction
			if draftAutomationStepsItem.TaskAction != nil {
				var close1 *shared.CloseAction
				if draftAutomationStepsItem.TaskAction.Close != nil {
					useSubjectUser14 := new(bool)
					if !draftAutomationStepsItem.TaskAction.Close.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.TaskAction.Close.UseSubjectUser.IsNull() {
						*useSubjectUser14 = draftAutomationStepsItem.TaskAction.Close.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser14 = nil
					}
					userIDCel10 := new(string)
					if !draftAutomationStepsItem.TaskAction.Close.UserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.Close.UserIDCel.IsNull() {
						*userIDCel10 = draftAutomationStepsItem.TaskAction.Close.UserIDCel.ValueString()
					} else {
						userIDCel10 = nil
					}
					var userRef8 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.Close.UserRef != nil {
						id27 := new(string)
						if !draftAutomationStepsItem.TaskAction.Close.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.Close.UserRef.ID.IsNull() {
							*id27 = draftAutomationStepsItem.TaskAction.Close.UserRef.ID.ValueString()
						} else {
							id27 = nil
						}
						userRef8 = &shared.UserRef{
							ID: id27,
						}
					}
					close1 = &shared.CloseAction{
						UseSubjectUser: useSubjectUser14,
						UserIDCel:      userIDCel10,
						UserRef:        userRef8,
					}
				}
				var reassign1 *shared.ReassignAction
				if draftAutomationStepsItem.TaskAction.Reassign != nil {
					assigneeUserIDCel1 := new(string)
					if !draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.IsNull() {
						*assigneeUserIDCel1 = draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.ValueString()
					} else {
						assigneeUserIDCel1 = nil
					}
					var assigneeUserRef1 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef != nil {
						id28 := new(string)
						if !draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.IsNull() {
							*id28 = draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.ValueString()
						} else {
							id28 = nil
						}
						assigneeUserRef1 = &shared.UserRef{
							ID: id28,
						}
					}
					subjectUserIDCel1 := new(string)
					if !draftAutomationStepsItem.TaskAction.Reassign.SubjectUserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.SubjectUserIDCel.IsNull() {
						*subjectUserIDCel1 = draftAutomationStepsItem.TaskAction.Reassign.SubjectUserIDCel.ValueString()
					} else {
						subjectUserIDCel1 = nil
					}
					var subjectUserRef1 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef != nil {
						id29 := new(string)
						if !draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.IsNull() {
							*id29 = draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.ValueString()
						} else {
							id29 = nil
						}
						subjectUserRef1 = &shared.UserRef{
							ID: id29,
						}
					}
					useSubjectUser15 := new(bool)
					if !draftAutomationStepsItem.TaskAction.Reassign.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.UseSubjectUser.IsNull() {
						*useSubjectUser15 = draftAutomationStepsItem.TaskAction.Reassign.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser15 = nil
					}
					reassign1 = &shared.ReassignAction{
						AssigneeUserIDCel: assigneeUserIDCel1,
						AssigneeUserRef:   assigneeUserRef1,
						SubjectUserIDCel:  subjectUserIDCel1,
						SubjectUserRef:    subjectUserRef1,
						UseSubjectUser:    useSubjectUser15,
					}
				}
				var taskTypes1 []shared.TaskTypes
				if draftAutomationStepsItem.TaskAction.TaskTypes != nil {
					taskTypes1 = make([]shared.TaskTypes, 0, len(draftAutomationStepsItem.TaskAction.TaskTypes))
					for _, taskTypesItem1 := range draftAutomationStepsItem.TaskAction.TaskTypes {
						taskTypes1 = append(taskTypes1, shared.TaskTypes(taskTypesItem1.ValueString()))
					}
				}
				taskUserRelation1 := new(shared.TaskUserRelation)
				if !draftAutomationStepsItem.TaskAction.TaskUserRelation.IsUnknown() && !draftAutomationStepsItem.TaskAction.TaskUserRelation.IsNull() {
					*taskUserRelation1 = shared.TaskUserRelation(draftAutomationStepsItem.TaskAction.TaskUserRelation.ValueString())
				} else {
					taskUserRelation1 = nil
				}
				taskAction1 = &shared.TaskAction{
					Close:            close1,
					Reassign:         reassign1,
					TaskTypes:        taskTypes1,
					TaskUserRelation: taskUserRelation1,
				}
			}
			var unenrollFromAllAccessProfiles1 *shared.UnenrollFromAllAccessProfiles
			if draftAutomationStepsItem.UnenrollFromAllAccessProfiles != nil {
				var catalogIds1 []string
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
					catalogIds1 = make([]string, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
					for _, catalogIdsItem1 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
						catalogIds1 = append(catalogIds1, catalogIdsItem1.ValueString())
					}
				}
				catalogIdsCel1 := new(string)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsNull() {
					*catalogIdsCel1 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.ValueString()
				} else {
					catalogIdsCel1 = nil
				}
				useSubjectUser16 := new(bool)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsNull() {
					*useSubjectUser16 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser16 = nil
				}
				userIdsCel5 := new(string)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsNull() {
					*userIdsCel5 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.ValueString()
				} else {
					userIdsCel5 = nil
				}
				var userRefs5 []shared.UserRef
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
					userRefs5 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs))
					for _, userRefsItem5 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
						id30 := new(string)
						if !userRefsItem5.ID.IsUnknown() && !userRefsItem5.ID.IsNull() {
							*id30 = userRefsItem5.ID.ValueString()
						} else {
							id30 = nil
						}
						userRefs5 = append(userRefs5, shared.UserRef{
							ID: id30,
						})
					}
				}
				unenrollFromAllAccessProfiles1 = &shared.UnenrollFromAllAccessProfiles{
					CatalogIds:     catalogIds1,
					CatalogIdsCel:  catalogIdsCel1,
					UseSubjectUser: useSubjectUser16,
					UserIdsCel:     userIdsCel5,
					UserRefs:       userRefs5,
				}
			}
			var updateUser1 *shared.UpdateUser
			if draftAutomationStepsItem.UpdateUser != nil {
				useSubjectUser17 := new(bool)
				if !draftAutomationStepsItem.UpdateUser.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UseSubjectUser.IsNull() {
					*useSubjectUser17 = draftAutomationStepsItem.UpdateUser.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser17 = nil
				}
				userIDCel11 := new(string)
				if !draftAutomationStepsItem.UpdateUser.UserIDCel.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserIDCel.IsNull() {
					*userIDCel11 = draftAutomationStepsItem.UpdateUser.UserIDCel.ValueString()
				} else {
					userIDCel11 = nil
				}
				var userRef9 *shared.UserRef
				if draftAutomationStepsItem.UpdateUser.UserRef != nil {
					id31 := new(string)
					if !draftAutomationStepsItem.UpdateUser.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserRef.ID.IsNull() {
						*id31 = draftAutomationStepsItem.UpdateUser.UserRef.ID.ValueString()
					} else {
						id31 = nil
					}
					userRef9 = &shared.UserRef{
						ID: id31,
					}
				}
				userStatusCel1 := new(string)
				if !draftAutomationStepsItem.UpdateUser.UserStatusCel.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserStatusCel.IsNull() {
					*userStatusCel1 = draftAutomationStepsItem.UpdateUser.UserStatusCel.ValueString()
				} else {
					userStatusCel1 = nil
				}
				userStatusEnum1 := new(shared.UserStatusEnum)
				if !draftAutomationStepsItem.UpdateUser.UserStatusEnum.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserStatusEnum.IsNull() {
					*userStatusEnum1 = shared.UserStatusEnum(draftAutomationStepsItem.UpdateUser.UserStatusEnum.ValueString())
				} else {
					userStatusEnum1 = nil
				}
				updateUser1 = &shared.UpdateUser{
					UseSubjectUser: useSubjectUser17,
					UserIDCel:      userIDCel11,
					UserRef:        userRef9,
					UserStatusCel:  userStatusCel1,
					UserStatusEnum: userStatusEnum1,
				}
			}
			var waitForDuration1 *shared.WaitForDuration
			if draftAutomationStepsItem.WaitForDuration != nil {
				duration1 := new(string)
				if !draftAutomationStepsItem.WaitForDuration.Duration.IsUnknown() && !draftAutomationStepsItem.WaitForDuration.Duration.IsNull() {
					*duration1 = draftAutomationStepsItem.WaitForDuration.Duration.ValueString()
				} else {
					duration1 = nil
				}
				waitForDuration1 = &shared.WaitForDuration{
					Duration: duration1,
				}
			}
			var webhook1 *shared.Webhook
			if draftAutomationStepsItem.Webhook != nil {
				var payload1 *shared.Payload
				if draftAutomationStepsItem.Webhook.Payload != nil {
					payload1 = &shared.Payload{}
				}
				webhookId1 := new(string)
				if !draftAutomationStepsItem.Webhook.WebhookID.IsUnknown() && !draftAutomationStepsItem.Webhook.WebhookID.IsNull() {
					*webhookId1 = draftAutomationStepsItem.Webhook.WebhookID.ValueString()
				} else {
					webhookId1 = nil
				}
				webhookIDCel1 := new(string)
				if !draftAutomationStepsItem.Webhook.WebhookIDCel.IsUnknown() && !draftAutomationStepsItem.Webhook.WebhookIDCel.IsNull() {
					*webhookIDCel1 = draftAutomationStepsItem.Webhook.WebhookIDCel.ValueString()
				} else {
					webhookIDCel1 = nil
				}
				webhook1 = &shared.Webhook{
					Payload:      payload1,
					WebhookID:    webhookId1,
					WebhookIDCel: webhookIDCel1,
				}
			}
			draftAutomationSteps = append(draftAutomationSteps, shared.AutomationStep{
				CallFunction:                  callFunction1,
				ConnectorAction:               connectorAction1,
				ConnectorCreateAccount:        connectorCreateAccount1,
				CreateAccessReview:            createAccessReview1,
				CreateRevokeTasks:             createRevokeTasks1,
				GrantEntitlements:             grantEntitlements1,
				RemoveFromDelegation:          removeFromDelegation1,
				RunAutomation:                 runAutomation1,
				SendEmail:                     sendEmail1,
				SendSlackMessage:              sendSlackMessage1,
				SkipIfTrueCel:                 skipIfTrueCel1,
				StepDisplayName:               stepDisplayName1,
				StepName:                      stepName1,
				TaskAction:                    taskAction1,
				UnenrollFromAllAccessProfiles: unenrollFromAllAccessProfiles1,
				UpdateUser:                    updateUser1,
				WaitForDuration:               waitForDuration1,
				Webhook:                       webhook1,
			})
		}
	}
	var draftTriggers []shared.AutomationTrigger
	if r.DraftTriggers != nil {
		draftTriggers = make([]shared.AutomationTrigger, 0, len(r.DraftTriggers))
		for _, draftTriggersItem := range r.DraftTriggers {
			var appUserCreated *shared.AppUserCreatedTrigger
			if draftTriggersItem.AppUserCreated != nil {
				appId9 := new(string)
				if !draftTriggersItem.AppUserCreated.AppID.IsUnknown() && !draftTriggersItem.AppUserCreated.AppID.IsNull() {
					*appId9 = draftTriggersItem.AppUserCreated.AppID.ValueString()
				} else {
					appId9 = nil
				}
				appIDCel := new(string)
				if !draftTriggersItem.AppUserCreated.AppIDCel.IsUnknown() && !draftTriggersItem.AppUserCreated.AppIDCel.IsNull() {
					*appIDCel = draftTriggersItem.AppUserCreated.AppIDCel.ValueString()
				} else {
					appIDCel = nil
				}
				condition := new(string)
				if !draftTriggersItem.AppUserCreated.Condition.IsUnknown() && !draftTriggersItem.AppUserCreated.Condition.IsNull() {
					*condition = draftTriggersItem.AppUserCreated.Condition.ValueString()
				} else {
					condition = nil
				}
				appUserCreated = &shared.AppUserCreatedTrigger{
					AppID:     appId9,
					AppIDCel:  appIDCel,
					Condition: condition,
				}
			}
			var appUserUpdated *shared.AppUserUpdatedTrigger
			if draftTriggersItem.AppUserUpdated != nil {
				appId10 := new(string)
				if !draftTriggersItem.AppUserUpdated.AppID.IsUnknown() && !draftTriggersItem.AppUserUpdated.AppID.IsNull() {
					*appId10 = draftTriggersItem.AppUserUpdated.AppID.ValueString()
				} else {
					appId10 = nil
				}
				appIDCel1 := new(string)
				if !draftTriggersItem.AppUserUpdated.AppIDCel.IsUnknown() && !draftTriggersItem.AppUserUpdated.AppIDCel.IsNull() {
					*appIDCel1 = draftTriggersItem.AppUserUpdated.AppIDCel.ValueString()
				} else {
					appIDCel1 = nil
				}
				condition1 := new(string)
				if !draftTriggersItem.AppUserUpdated.Condition.IsUnknown() && !draftTriggersItem.AppUserUpdated.Condition.IsNull() {
					*condition1 = draftTriggersItem.AppUserUpdated.Condition.ValueString()
				} else {
					condition1 = nil
				}
				appUserUpdated = &shared.AppUserUpdatedTrigger{
					AppID:     appId10,
					AppIDCel:  appIDCel1,
					Condition: condition1,
				}
			}
			var form interface{}
			if !draftTriggersItem.Form.IsUnknown() && !draftTriggersItem.Form.IsNull() {
				_ = json.Unmarshal([]byte(draftTriggersItem.Form.ValueString()), &form)
			}
			var grantDeleted *shared.GrantDeletedTrigger
			if draftTriggersItem.GrantDeleted != nil {
				var grantTriggerFilter *shared.GrantTriggerFilter
				if draftTriggersItem.GrantDeleted.GrantTriggerFilter != nil {
					var accountFilter *shared.AccountFilter
					if draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter != nil {
						accountType := new(shared.AccountType)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType = shared.AccountType(draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType = nil
						}
						accountFilter = &shared.AccountFilter{
							AccountType: accountType,
						}
					}
					var entitlementFilter *shared.EntitlementFilter
					if draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs4 []shared.AppEntitlementRef
						if draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs4 = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem4 := range draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId11 := new(string)
								if !appEntitlementRefsItem4.AppID.IsUnknown() && !appEntitlementRefsItem4.AppID.IsNull() {
									*appId11 = appEntitlementRefsItem4.AppID.ValueString()
								} else {
									appId11 = nil
								}
								id32 := new(string)
								if !appEntitlementRefsItem4.ID.IsUnknown() && !appEntitlementRefsItem4.ID.IsNull() {
									*id32 = appEntitlementRefsItem4.ID.ValueString()
								} else {
									id32 = nil
								}
								appEntitlementRefs4 = append(appEntitlementRefs4, shared.AppEntitlementRef{
									AppID: appId11,
									ID:    id32,
								})
							}
						}
						appEntitlementRefsCel4 := new(string)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel4 = draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel4 = nil
						}
						appId12 := new(string)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId12 = draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId12 = nil
						}
						entitlementFilter = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs4,
							AppEntitlementRefsCel: appEntitlementRefsCel4,
							AppID:                 appId12,
						}
					}
					var grantFilter *shared.GrantFilter
					if draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType := new(shared.GrantFilterType)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType = shared.GrantFilterType(draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType = nil
						}
						grantJustificationType := new(shared.GrantJustificationType)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType = shared.GrantJustificationType(draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType = nil
						}
						grantSourceFilter := new(shared.GrantSourceFilter)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter = shared.GrantSourceFilter(draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter = nil
						}
						grantFilter = &shared.GrantFilter{
							GrantFilterType:        grantFilterType,
							GrantJustificationType: grantJustificationType,
							GrantSourceFilter:      grantSourceFilter,
						}
					}
					grantTriggerFilter = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter,
						EntitlementFilter: entitlementFilter,
						GrantFilter:       grantFilter,
					}
				}
				grantDeleted = &shared.GrantDeletedTrigger{
					GrantTriggerFilter: grantTriggerFilter,
				}
			}
			var grantFound *shared.GrantFoundTrigger
			if draftTriggersItem.GrantFound != nil {
				var grantTriggerFilter1 *shared.GrantTriggerFilter
				if draftTriggersItem.GrantFound.GrantTriggerFilter != nil {
					var accountFilter1 *shared.AccountFilter
					if draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter != nil {
						accountType1 := new(shared.AccountType)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType1 = shared.AccountType(draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType1 = nil
						}
						accountFilter1 = &shared.AccountFilter{
							AccountType: accountType1,
						}
					}
					var entitlementFilter1 *shared.EntitlementFilter
					if draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs5 []shared.AppEntitlementRef
						if draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs5 = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem5 := range draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId13 := new(string)
								if !appEntitlementRefsItem5.AppID.IsUnknown() && !appEntitlementRefsItem5.AppID.IsNull() {
									*appId13 = appEntitlementRefsItem5.AppID.ValueString()
								} else {
									appId13 = nil
								}
								id33 := new(string)
								if !appEntitlementRefsItem5.ID.IsUnknown() && !appEntitlementRefsItem5.ID.IsNull() {
									*id33 = appEntitlementRefsItem5.ID.ValueString()
								} else {
									id33 = nil
								}
								appEntitlementRefs5 = append(appEntitlementRefs5, shared.AppEntitlementRef{
									AppID: appId13,
									ID:    id33,
								})
							}
						}
						appEntitlementRefsCel5 := new(string)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel5 = draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel5 = nil
						}
						appId14 := new(string)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId14 = draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId14 = nil
						}
						entitlementFilter1 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs5,
							AppEntitlementRefsCel: appEntitlementRefsCel5,
							AppID:                 appId14,
						}
					}
					var grantFilter1 *shared.GrantFilter
					if draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType1 := new(shared.GrantFilterType)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType1 = shared.GrantFilterType(draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType1 = nil
						}
						grantJustificationType1 := new(shared.GrantJustificationType)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType1 = shared.GrantJustificationType(draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType1 = nil
						}
						grantSourceFilter1 := new(shared.GrantSourceFilter)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter1 = shared.GrantSourceFilter(draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter1 = nil
						}
						grantFilter1 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType1,
							GrantJustificationType: grantJustificationType1,
							GrantSourceFilter:      grantSourceFilter1,
						}
					}
					grantTriggerFilter1 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter1,
						EntitlementFilter: entitlementFilter1,
						GrantFilter:       grantFilter1,
					}
				}
				grantFound = &shared.GrantFoundTrigger{
					GrantTriggerFilter: grantTriggerFilter1,
				}
			}
			var manual *shared.ManualAutomationTrigger
			if draftTriggersItem.Manual != nil {
				manual = &shared.ManualAutomationTrigger{}
			}
			var schedule *shared.ScheduleTrigger
			if draftTriggersItem.Schedule != nil {
				advanced := new(bool)
				if !draftTriggersItem.Schedule.Advanced.IsUnknown() && !draftTriggersItem.Schedule.Advanced.IsNull() {
					*advanced = draftTriggersItem.Schedule.Advanced.ValueBool()
				} else {
					advanced = nil
				}
				cronSpec := new(string)
				if !draftTriggersItem.Schedule.CronSpec.IsUnknown() && !draftTriggersItem.Schedule.CronSpec.IsNull() {
					*cronSpec = draftTriggersItem.Schedule.CronSpec.ValueString()
				} else {
					cronSpec = nil
				}
				skipIfTrueCel2 := new(string)
				if !draftTriggersItem.Schedule.SkipIfTrueCel.IsUnknown() && !draftTriggersItem.Schedule.SkipIfTrueCel.IsNull() {
					*skipIfTrueCel2 = draftTriggersItem.Schedule.SkipIfTrueCel.ValueString()
				} else {
					skipIfTrueCel2 = nil
				}
				start := new(time.Time)
				if !draftTriggersItem.Schedule.Start.IsUnknown() && !draftTriggersItem.Schedule.Start.IsNull() {
					*start, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.Schedule.Start.ValueString())
				} else {
					start = nil
				}
				schedule = &shared.ScheduleTrigger{
					Advanced:      advanced,
					CronSpec:      cronSpec,
					SkipIfTrueCel: skipIfTrueCel2,
					Start:         start,
				}
			}
			var usageBasedRevocation *shared.UsageBasedRevocationTrigger
			if draftTriggersItem.UsageBasedRevocation != nil {
				appId15 := new(string)
				if !draftTriggersItem.UsageBasedRevocation.AppID.IsUnknown() && !draftTriggersItem.UsageBasedRevocation.AppID.IsNull() {
					*appId15 = draftTriggersItem.UsageBasedRevocation.AppID.ValueString()
				} else {
					appId15 = nil
				}
				enabledAt := new(time.Time)
				if !draftTriggersItem.UsageBasedRevocation.EnabledAt.IsUnknown() && !draftTriggersItem.UsageBasedRevocation.EnabledAt.IsNull() {
					*enabledAt, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.UsageBasedRevocation.EnabledAt.ValueString())
				} else {
					enabledAt = nil
				}
				var excludedGroupRefs []shared.AppEntitlementRef
				if draftTriggersItem.UsageBasedRevocation.ExcludedGroupRefs != nil {
					excludedGroupRefs = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.UsageBasedRevocation.ExcludedGroupRefs))
					for _, excludedGroupRefsItem := range draftTriggersItem.UsageBasedRevocation.ExcludedGroupRefs {
						appId16 := new(string)
						if !excludedGroupRefsItem.AppID.IsUnknown() && !excludedGroupRefsItem.AppID.IsNull() {
							*appId16 = excludedGroupRefsItem.AppID.ValueString()
						} else {
							appId16 = nil
						}
						id34 := new(string)
						if !excludedGroupRefsItem.ID.IsUnknown() && !excludedGroupRefsItem.ID.IsNull() {
							*id34 = excludedGroupRefsItem.ID.ValueString()
						} else {
							id34 = nil
						}
						excludedGroupRefs = append(excludedGroupRefs, shared.AppEntitlementRef{
							AppID: appId16,
							ID:    id34,
						})
					}
				}
				var excludedUserRefs []shared.UserRef
				if draftTriggersItem.UsageBasedRevocation.ExcludedUserRefs != nil {
					excludedUserRefs = make([]shared.UserRef, 0, len(draftTriggersItem.UsageBasedRevocation.ExcludedUserRefs))
					for _, excludedUserRefsItem := range draftTriggersItem.UsageBasedRevocation.ExcludedUserRefs {
						id35 := new(string)
						if !excludedUserRefsItem.ID.IsUnknown() && !excludedUserRefsItem.ID.IsNull() {
							*id35 = excludedUserRefsItem.ID.ValueString()
						} else {
							id35 = nil
						}
						excludedUserRefs = append(excludedUserRefs, shared.UserRef{
							ID: id35,
						})
					}
				}
				includeUsersWithNoActivity := new(bool)
				if !draftTriggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.IsUnknown() && !draftTriggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.IsNull() {
					*includeUsersWithNoActivity = draftTriggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.ValueBool()
				} else {
					includeUsersWithNoActivity = nil
				}
				var runDelayed *shared.RunDelayed
				if draftTriggersItem.UsageBasedRevocation.RunDelayed != nil {
					var coldStartDelayDays int64
					coldStartDelayDays = draftTriggersItem.UsageBasedRevocation.RunDelayed.ColdStartDelayDays.ValueInt64()

					runDelayed = &shared.RunDelayed{
						ColdStartDelayDays: coldStartDelayDays,
					}
				}
				var runImmediately *shared.RunImmediately
				if draftTriggersItem.UsageBasedRevocation.RunImmediately != nil {
					runImmediately = &shared.RunImmediately{}
				}
				var targetedAppUserTypes []shared.TargetedAppUserTypes
				if draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes != nil {
					targetedAppUserTypes = make([]shared.TargetedAppUserTypes, 0, len(draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes))
					for _, targetedAppUserTypesItem := range draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes {
						targetedAppUserTypes = append(targetedAppUserTypes, shared.TargetedAppUserTypes(targetedAppUserTypesItem.ValueString()))
					}
				}
				var targetedEntitlementRefs []shared.AppEntitlementRef
				if draftTriggersItem.UsageBasedRevocation.TargetedEntitlementRefs != nil {
					targetedEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.UsageBasedRevocation.TargetedEntitlementRefs))
					for _, targetedEntitlementRefsItem := range draftTriggersItem.UsageBasedRevocation.TargetedEntitlementRefs {
						appId17 := new(string)
						if !targetedEntitlementRefsItem.AppID.IsUnknown() && !targetedEntitlementRefsItem.AppID.IsNull() {
							*appId17 = targetedEntitlementRefsItem.AppID.ValueString()
						} else {
							appId17 = nil
						}
						id36 := new(string)
						if !targetedEntitlementRefsItem.ID.IsUnknown() && !targetedEntitlementRefsItem.ID.IsNull() {
							*id36 = targetedEntitlementRefsItem.ID.ValueString()
						} else {
							id36 = nil
						}
						targetedEntitlementRefs = append(targetedEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId17,
							ID:    id36,
						})
					}
				}
				unusedForDays := new(int64)
				if !draftTriggersItem.UsageBasedRevocation.UnusedForDays.IsUnknown() && !draftTriggersItem.UsageBasedRevocation.UnusedForDays.IsNull() {
					*unusedForDays = draftTriggersItem.UsageBasedRevocation.UnusedForDays.ValueInt64()
				} else {
					unusedForDays = nil
				}
				usageBasedRevocation = &shared.UsageBasedRevocationTrigger{
					AppID:                      appId15,
					EnabledAt:                  enabledAt,
					ExcludedGroupRefs:          excludedGroupRefs,
					ExcludedUserRefs:           excludedUserRefs,
					IncludeUsersWithNoActivity: includeUsersWithNoActivity,
					RunDelayed:                 runDelayed,
					RunImmediately:             runImmediately,
					TargetedAppUserTypes:       targetedAppUserTypes,
					TargetedEntitlementRefs:    targetedEntitlementRefs,
					UnusedForDays:              unusedForDays,
				}
			}
			var userCreated *shared.UserCreatedTrigger
			if draftTriggersItem.UserCreated != nil {
				condition2 := new(string)
				if !draftTriggersItem.UserCreated.Condition.IsUnknown() && !draftTriggersItem.UserCreated.Condition.IsNull() {
					*condition2 = draftTriggersItem.UserCreated.Condition.ValueString()
				} else {
					condition2 = nil
				}
				userCreated = &shared.UserCreatedTrigger{
					Condition: condition2,
				}
			}
			var userProfileChange *shared.UserProfileChangeTrigger
			if draftTriggersItem.UserProfileChange != nil {
				condition3 := new(string)
				if !draftTriggersItem.UserProfileChange.Condition.IsUnknown() && !draftTriggersItem.UserProfileChange.Condition.IsNull() {
					*condition3 = draftTriggersItem.UserProfileChange.Condition.ValueString()
				} else {
					condition3 = nil
				}
				userProfileChange = &shared.UserProfileChangeTrigger{
					Condition: condition3,
				}
			}
			var webhook2 *shared.WebhookAutomationTrigger
			if draftTriggersItem.Webhook != nil {
				var hmac *shared.WebhookListenerAuthHMAC
				if draftTriggersItem.Webhook.Hmac != nil {
					hmac = &shared.WebhookListenerAuthHMAC{}
				}
				var jwt *shared.WebhookListenerAuthJWT
				if draftTriggersItem.Webhook.Jwt != nil {
					jwksURL := new(string)
					if !draftTriggersItem.Webhook.Jwt.JwksURL.IsUnknown() && !draftTriggersItem.Webhook.Jwt.JwksURL.IsNull() {
						*jwksURL = draftTriggersItem.Webhook.Jwt.JwksURL.ValueString()
					} else {
						jwksURL = nil
					}
					jwt = &shared.WebhookListenerAuthJWT{
						JwksURL: jwksURL,
					}
				}
				listenerID := new(string)
				if !draftTriggersItem.Webhook.ListenerID.IsUnknown() && !draftTriggersItem.Webhook.ListenerID.IsNull() {
					*listenerID = draftTriggersItem.Webhook.ListenerID.ValueString()
				} else {
					listenerID = nil
				}
				webhook2 = &shared.WebhookAutomationTrigger{
					Hmac:       hmac,
					Jwt:        jwt,
					ListenerID: listenerID,
				}
			}
			draftTriggers = append(draftTriggers, shared.AutomationTrigger{
				AppUserCreated:       appUserCreated,
				AppUserUpdated:       appUserUpdated,
				Form:                 form,
				GrantDeleted:         grantDeleted,
				GrantFound:           grantFound,
				Manual:               manual,
				Schedule:             schedule,
				UsageBasedRevocation: usageBasedRevocation,
				UserCreated:          userCreated,
				UserProfileChange:    userProfileChange,
				Webhook:              webhook2,
			})
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	isDraft := new(bool)
	if !r.IsDraft.IsUnknown() && !r.IsDraft.IsNull() {
		*isDraft = r.IsDraft.ValueBool()
	} else {
		isDraft = nil
	}
	lastExecutedAt := new(time.Time)
	if !r.LastExecutedAt.IsUnknown() && !r.LastExecutedAt.IsNull() {
		*lastExecutedAt, _ = time.Parse(time.RFC3339Nano, r.LastExecutedAt.ValueString())
	} else {
		lastExecutedAt = nil
	}
	primaryTriggerType := new(shared.PrimaryTriggerType)
	if !r.PrimaryTriggerType.IsUnknown() && !r.PrimaryTriggerType.IsNull() {
		*primaryTriggerType = shared.PrimaryTriggerType(r.PrimaryTriggerType.ValueString())
	} else {
		primaryTriggerType = nil
	}
	var triggers []shared.AutomationTrigger
	if r.Triggers != nil {
		triggers = make([]shared.AutomationTrigger, 0, len(r.Triggers))
		for _, triggersItem := range r.Triggers {
			var appUserCreated1 *shared.AppUserCreatedTrigger
			if triggersItem.AppUserCreated != nil {
				appId18 := new(string)
				if !triggersItem.AppUserCreated.AppID.IsUnknown() && !triggersItem.AppUserCreated.AppID.IsNull() {
					*appId18 = triggersItem.AppUserCreated.AppID.ValueString()
				} else {
					appId18 = nil
				}
				appIDCel2 := new(string)
				if !triggersItem.AppUserCreated.AppIDCel.IsUnknown() && !triggersItem.AppUserCreated.AppIDCel.IsNull() {
					*appIDCel2 = triggersItem.AppUserCreated.AppIDCel.ValueString()
				} else {
					appIDCel2 = nil
				}
				condition4 := new(string)
				if !triggersItem.AppUserCreated.Condition.IsUnknown() && !triggersItem.AppUserCreated.Condition.IsNull() {
					*condition4 = triggersItem.AppUserCreated.Condition.ValueString()
				} else {
					condition4 = nil
				}
				appUserCreated1 = &shared.AppUserCreatedTrigger{
					AppID:     appId18,
					AppIDCel:  appIDCel2,
					Condition: condition4,
				}
			}
			var appUserUpdated1 *shared.AppUserUpdatedTrigger
			if triggersItem.AppUserUpdated != nil {
				appId19 := new(string)
				if !triggersItem.AppUserUpdated.AppID.IsUnknown() && !triggersItem.AppUserUpdated.AppID.IsNull() {
					*appId19 = triggersItem.AppUserUpdated.AppID.ValueString()
				} else {
					appId19 = nil
				}
				appIDCel3 := new(string)
				if !triggersItem.AppUserUpdated.AppIDCel.IsUnknown() && !triggersItem.AppUserUpdated.AppIDCel.IsNull() {
					*appIDCel3 = triggersItem.AppUserUpdated.AppIDCel.ValueString()
				} else {
					appIDCel3 = nil
				}
				condition5 := new(string)
				if !triggersItem.AppUserUpdated.Condition.IsUnknown() && !triggersItem.AppUserUpdated.Condition.IsNull() {
					*condition5 = triggersItem.AppUserUpdated.Condition.ValueString()
				} else {
					condition5 = nil
				}
				appUserUpdated1 = &shared.AppUserUpdatedTrigger{
					AppID:     appId19,
					AppIDCel:  appIDCel3,
					Condition: condition5,
				}
			}
			var form1 interface{}
			if !triggersItem.Form.IsUnknown() && !triggersItem.Form.IsNull() {
				_ = json.Unmarshal([]byte(triggersItem.Form.ValueString()), &form1)
			}
			var grantDeleted1 *shared.GrantDeletedTrigger
			if triggersItem.GrantDeleted != nil {
				var grantTriggerFilter2 *shared.GrantTriggerFilter
				if triggersItem.GrantDeleted.GrantTriggerFilter != nil {
					var accountFilter2 *shared.AccountFilter
					if triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter != nil {
						accountType2 := new(shared.AccountType)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType2 = shared.AccountType(triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType2 = nil
						}
						accountFilter2 = &shared.AccountFilter{
							AccountType: accountType2,
						}
					}
					var entitlementFilter2 *shared.EntitlementFilter
					if triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs6 []shared.AppEntitlementRef
						if triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs6 = make([]shared.AppEntitlementRef, 0, len(triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem6 := range triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId20 := new(string)
								if !appEntitlementRefsItem6.AppID.IsUnknown() && !appEntitlementRefsItem6.AppID.IsNull() {
									*appId20 = appEntitlementRefsItem6.AppID.ValueString()
								} else {
									appId20 = nil
								}
								id37 := new(string)
								if !appEntitlementRefsItem6.ID.IsUnknown() && !appEntitlementRefsItem6.ID.IsNull() {
									*id37 = appEntitlementRefsItem6.ID.ValueString()
								} else {
									id37 = nil
								}
								appEntitlementRefs6 = append(appEntitlementRefs6, shared.AppEntitlementRef{
									AppID: appId20,
									ID:    id37,
								})
							}
						}
						appEntitlementRefsCel6 := new(string)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel6 = triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel6 = nil
						}
						appId21 := new(string)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId21 = triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId21 = nil
						}
						entitlementFilter2 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs6,
							AppEntitlementRefsCel: appEntitlementRefsCel6,
							AppID:                 appId21,
						}
					}
					var grantFilter2 *shared.GrantFilter
					if triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType2 := new(shared.GrantFilterType)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType2 = shared.GrantFilterType(triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType2 = nil
						}
						grantJustificationType2 := new(shared.GrantJustificationType)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType2 = shared.GrantJustificationType(triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType2 = nil
						}
						grantSourceFilter2 := new(shared.GrantSourceFilter)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter2 = shared.GrantSourceFilter(triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter2 = nil
						}
						grantFilter2 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType2,
							GrantJustificationType: grantJustificationType2,
							GrantSourceFilter:      grantSourceFilter2,
						}
					}
					grantTriggerFilter2 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter2,
						EntitlementFilter: entitlementFilter2,
						GrantFilter:       grantFilter2,
					}
				}
				grantDeleted1 = &shared.GrantDeletedTrigger{
					GrantTriggerFilter: grantTriggerFilter2,
				}
			}
			var grantFound1 *shared.GrantFoundTrigger
			if triggersItem.GrantFound != nil {
				var grantTriggerFilter3 *shared.GrantTriggerFilter
				if triggersItem.GrantFound.GrantTriggerFilter != nil {
					var accountFilter3 *shared.AccountFilter
					if triggersItem.GrantFound.GrantTriggerFilter.AccountFilter != nil {
						accountType3 := new(shared.AccountType)
						if !triggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType3 = shared.AccountType(triggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType3 = nil
						}
						accountFilter3 = &shared.AccountFilter{
							AccountType: accountType3,
						}
					}
					var entitlementFilter3 *shared.EntitlementFilter
					if triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs7 []shared.AppEntitlementRef
						if triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs7 = make([]shared.AppEntitlementRef, 0, len(triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem7 := range triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId22 := new(string)
								if !appEntitlementRefsItem7.AppID.IsUnknown() && !appEntitlementRefsItem7.AppID.IsNull() {
									*appId22 = appEntitlementRefsItem7.AppID.ValueString()
								} else {
									appId22 = nil
								}
								id38 := new(string)
								if !appEntitlementRefsItem7.ID.IsUnknown() && !appEntitlementRefsItem7.ID.IsNull() {
									*id38 = appEntitlementRefsItem7.ID.ValueString()
								} else {
									id38 = nil
								}
								appEntitlementRefs7 = append(appEntitlementRefs7, shared.AppEntitlementRef{
									AppID: appId22,
									ID:    id38,
								})
							}
						}
						appEntitlementRefsCel7 := new(string)
						if !triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel7 = triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel7 = nil
						}
						appId23 := new(string)
						if !triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId23 = triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId23 = nil
						}
						entitlementFilter3 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs7,
							AppEntitlementRefsCel: appEntitlementRefsCel7,
							AppID:                 appId23,
						}
					}
					var grantFilter3 *shared.GrantFilter
					if triggersItem.GrantFound.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType3 := new(shared.GrantFilterType)
						if !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType3 = shared.GrantFilterType(triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType3 = nil
						}
						grantJustificationType3 := new(shared.GrantJustificationType)
						if !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType3 = shared.GrantJustificationType(triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType3 = nil
						}
						grantSourceFilter3 := new(shared.GrantSourceFilter)
						if !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter3 = shared.GrantSourceFilter(triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter3 = nil
						}
						grantFilter3 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType3,
							GrantJustificationType: grantJustificationType3,
							GrantSourceFilter:      grantSourceFilter3,
						}
					}
					grantTriggerFilter3 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter3,
						EntitlementFilter: entitlementFilter3,
						GrantFilter:       grantFilter3,
					}
				}
				grantFound1 = &shared.GrantFoundTrigger{
					GrantTriggerFilter: grantTriggerFilter3,
				}
			}
			var manual1 *shared.ManualAutomationTrigger
			if triggersItem.Manual != nil {
				manual1 = &shared.ManualAutomationTrigger{}
			}
			var schedule1 *shared.ScheduleTrigger
			if triggersItem.Schedule != nil {
				advanced1 := new(bool)
				if !triggersItem.Schedule.Advanced.IsUnknown() && !triggersItem.Schedule.Advanced.IsNull() {
					*advanced1 = triggersItem.Schedule.Advanced.ValueBool()
				} else {
					advanced1 = nil
				}
				cronSpec1 := new(string)
				if !triggersItem.Schedule.CronSpec.IsUnknown() && !triggersItem.Schedule.CronSpec.IsNull() {
					*cronSpec1 = triggersItem.Schedule.CronSpec.ValueString()
				} else {
					cronSpec1 = nil
				}
				skipIfTrueCel3 := new(string)
				if !triggersItem.Schedule.SkipIfTrueCel.IsUnknown() && !triggersItem.Schedule.SkipIfTrueCel.IsNull() {
					*skipIfTrueCel3 = triggersItem.Schedule.SkipIfTrueCel.ValueString()
				} else {
					skipIfTrueCel3 = nil
				}
				start1 := new(time.Time)
				if !triggersItem.Schedule.Start.IsUnknown() && !triggersItem.Schedule.Start.IsNull() {
					*start1, _ = time.Parse(time.RFC3339Nano, triggersItem.Schedule.Start.ValueString())
				} else {
					start1 = nil
				}
				schedule1 = &shared.ScheduleTrigger{
					Advanced:      advanced1,
					CronSpec:      cronSpec1,
					SkipIfTrueCel: skipIfTrueCel3,
					Start:         start1,
				}
			}
			var usageBasedRevocation1 *shared.UsageBasedRevocationTrigger
			if triggersItem.UsageBasedRevocation != nil {
				appId24 := new(string)
				if !triggersItem.UsageBasedRevocation.AppID.IsUnknown() && !triggersItem.UsageBasedRevocation.AppID.IsNull() {
					*appId24 = triggersItem.UsageBasedRevocation.AppID.ValueString()
				} else {
					appId24 = nil
				}
				enabledAt1 := new(time.Time)
				if !triggersItem.UsageBasedRevocation.EnabledAt.IsUnknown() && !triggersItem.UsageBasedRevocation.EnabledAt.IsNull() {
					*enabledAt1, _ = time.Parse(time.RFC3339Nano, triggersItem.UsageBasedRevocation.EnabledAt.ValueString())
				} else {
					enabledAt1 = nil
				}
				var excludedGroupRefs1 []shared.AppEntitlementRef
				if triggersItem.UsageBasedRevocation.ExcludedGroupRefs != nil {
					excludedGroupRefs1 = make([]shared.AppEntitlementRef, 0, len(triggersItem.UsageBasedRevocation.ExcludedGroupRefs))
					for _, excludedGroupRefsItem1 := range triggersItem.UsageBasedRevocation.ExcludedGroupRefs {
						appId25 := new(string)
						if !excludedGroupRefsItem1.AppID.IsUnknown() && !excludedGroupRefsItem1.AppID.IsNull() {
							*appId25 = excludedGroupRefsItem1.AppID.ValueString()
						} else {
							appId25 = nil
						}
						id39 := new(string)
						if !excludedGroupRefsItem1.ID.IsUnknown() && !excludedGroupRefsItem1.ID.IsNull() {
							*id39 = excludedGroupRefsItem1.ID.ValueString()
						} else {
							id39 = nil
						}
						excludedGroupRefs1 = append(excludedGroupRefs1, shared.AppEntitlementRef{
							AppID: appId25,
							ID:    id39,
						})
					}
				}
				var excludedUserRefs1 []shared.UserRef
				if triggersItem.UsageBasedRevocation.ExcludedUserRefs != nil {
					excludedUserRefs1 = make([]shared.UserRef, 0, len(triggersItem.UsageBasedRevocation.ExcludedUserRefs))
					for _, excludedUserRefsItem1 := range triggersItem.UsageBasedRevocation.ExcludedUserRefs {
						id40 := new(string)
						if !excludedUserRefsItem1.ID.IsUnknown() && !excludedUserRefsItem1.ID.IsNull() {
							*id40 = excludedUserRefsItem1.ID.ValueString()
						} else {
							id40 = nil
						}
						excludedUserRefs1 = append(excludedUserRefs1, shared.UserRef{
							ID: id40,
						})
					}
				}
				includeUsersWithNoActivity1 := new(bool)
				if !triggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.IsUnknown() && !triggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.IsNull() {
					*includeUsersWithNoActivity1 = triggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.ValueBool()
				} else {
					includeUsersWithNoActivity1 = nil
				}
				var runDelayed1 *shared.RunDelayed
				if triggersItem.UsageBasedRevocation.RunDelayed != nil {
					var coldStartDelayDays1 int64
					coldStartDelayDays1 = triggersItem.UsageBasedRevocation.RunDelayed.ColdStartDelayDays.ValueInt64()

					runDelayed1 = &shared.RunDelayed{
						ColdStartDelayDays: coldStartDelayDays1,
					}
				}
				var runImmediately1 *shared.RunImmediately
				if triggersItem.UsageBasedRevocation.RunImmediately != nil {
					runImmediately1 = &shared.RunImmediately{}
				}
				var targetedAppUserTypes1 []shared.TargetedAppUserTypes
				if triggersItem.UsageBasedRevocation.TargetedAppUserTypes != nil {
					targetedAppUserTypes1 = make([]shared.TargetedAppUserTypes, 0, len(triggersItem.UsageBasedRevocation.TargetedAppUserTypes))
					for _, targetedAppUserTypesItem1 := range triggersItem.UsageBasedRevocation.TargetedAppUserTypes {
						targetedAppUserTypes1 = append(targetedAppUserTypes1, shared.TargetedAppUserTypes(targetedAppUserTypesItem1.ValueString()))
					}
				}
				var targetedEntitlementRefs1 []shared.AppEntitlementRef
				if triggersItem.UsageBasedRevocation.TargetedEntitlementRefs != nil {
					targetedEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(triggersItem.UsageBasedRevocation.TargetedEntitlementRefs))
					for _, targetedEntitlementRefsItem1 := range triggersItem.UsageBasedRevocation.TargetedEntitlementRefs {
						appId26 := new(string)
						if !targetedEntitlementRefsItem1.AppID.IsUnknown() && !targetedEntitlementRefsItem1.AppID.IsNull() {
							*appId26 = targetedEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId26 = nil
						}
						id41 := new(string)
						if !targetedEntitlementRefsItem1.ID.IsUnknown() && !targetedEntitlementRefsItem1.ID.IsNull() {
							*id41 = targetedEntitlementRefsItem1.ID.ValueString()
						} else {
							id41 = nil
						}
						targetedEntitlementRefs1 = append(targetedEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId26,
							ID:    id41,
						})
					}
				}
				unusedForDays1 := new(int64)
				if !triggersItem.UsageBasedRevocation.UnusedForDays.IsUnknown() && !triggersItem.UsageBasedRevocation.UnusedForDays.IsNull() {
					*unusedForDays1 = triggersItem.UsageBasedRevocation.UnusedForDays.ValueInt64()
				} else {
					unusedForDays1 = nil
				}
				usageBasedRevocation1 = &shared.UsageBasedRevocationTrigger{
					AppID:                      appId24,
					EnabledAt:                  enabledAt1,
					ExcludedGroupRefs:          excludedGroupRefs1,
					ExcludedUserRefs:           excludedUserRefs1,
					IncludeUsersWithNoActivity: includeUsersWithNoActivity1,
					RunDelayed:                 runDelayed1,
					RunImmediately:             runImmediately1,
					TargetedAppUserTypes:       targetedAppUserTypes1,
					TargetedEntitlementRefs:    targetedEntitlementRefs1,
					UnusedForDays:              unusedForDays1,
				}
			}
			var userCreated1 *shared.UserCreatedTrigger
			if triggersItem.UserCreated != nil {
				condition6 := new(string)
				if !triggersItem.UserCreated.Condition.IsUnknown() && !triggersItem.UserCreated.Condition.IsNull() {
					*condition6 = triggersItem.UserCreated.Condition.ValueString()
				} else {
					condition6 = nil
				}
				userCreated1 = &shared.UserCreatedTrigger{
					Condition: condition6,
				}
			}
			var userProfileChange1 *shared.UserProfileChangeTrigger
			if triggersItem.UserProfileChange != nil {
				condition7 := new(string)
				if !triggersItem.UserProfileChange.Condition.IsUnknown() && !triggersItem.UserProfileChange.Condition.IsNull() {
					*condition7 = triggersItem.UserProfileChange.Condition.ValueString()
				} else {
					condition7 = nil
				}
				userProfileChange1 = &shared.UserProfileChangeTrigger{
					Condition: condition7,
				}
			}
			var webhook3 *shared.WebhookAutomationTrigger
			if triggersItem.Webhook != nil {
				var hmac1 *shared.WebhookListenerAuthHMAC
				if triggersItem.Webhook.Hmac != nil {
					hmac1 = &shared.WebhookListenerAuthHMAC{}
				}
				var jwt1 *shared.WebhookListenerAuthJWT
				if triggersItem.Webhook.Jwt != nil {
					jwksUrl1 := new(string)
					if !triggersItem.Webhook.Jwt.JwksURL.IsUnknown() && !triggersItem.Webhook.Jwt.JwksURL.IsNull() {
						*jwksUrl1 = triggersItem.Webhook.Jwt.JwksURL.ValueString()
					} else {
						jwksUrl1 = nil
					}
					jwt1 = &shared.WebhookListenerAuthJWT{
						JwksURL: jwksUrl1,
					}
				}
				listenerId1 := new(string)
				if !triggersItem.Webhook.ListenerID.IsUnknown() && !triggersItem.Webhook.ListenerID.IsNull() {
					*listenerId1 = triggersItem.Webhook.ListenerID.ValueString()
				} else {
					listenerId1 = nil
				}
				webhook3 = &shared.WebhookAutomationTrigger{
					Hmac:       hmac1,
					Jwt:        jwt1,
					ListenerID: listenerId1,
				}
			}
			triggers = append(triggers, shared.AutomationTrigger{
				AppUserCreated:       appUserCreated1,
				AppUserUpdated:       appUserUpdated1,
				Form:                 form1,
				GrantDeleted:         grantDeleted1,
				GrantFound:           grantFound1,
				Manual:               manual1,
				Schedule:             schedule1,
				UsageBasedRevocation: usageBasedRevocation1,
				UserCreated:          userCreated1,
				UserProfileChange:    userProfileChange1,
				Webhook:              webhook3,
			})
		}
	}
	webhookHmacSecret := new(string)
	if !r.WebhookHmacSecret.IsUnknown() && !r.WebhookHmacSecret.IsNull() {
		*webhookHmacSecret = r.WebhookHmacSecret.ValueString()
	} else {
		webhookHmacSecret = nil
	}
	out := shared.AutomationInput{
		AppID:                appID,
		AutomationSteps:      automationSteps,
		CircuitBreaker:       circuitBreaker,
		Context:              contextVar2,
		CreatedAt:            createdAt,
		CurrentVersion:       currentVersion,
		Description:          description,
		DisplayName:          displayName,
		DraftAutomationSteps: draftAutomationSteps,
		DraftTriggers:        draftTriggers,
		Enabled:              enabled,
		IsDraft:              isDraft,
		LastExecutedAt:       lastExecutedAt,
		PrimaryTriggerType:   primaryTriggerType,
		Triggers:             triggers,
		WebhookHmacSecret:    webhookHmacSecret,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToSharedCreateAutomationRequest(ctx context.Context) (*shared.CreateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	var automationSteps []shared.AutomationStep
	if r.AutomationSteps != nil {
		automationSteps = make([]shared.AutomationStep, 0, len(r.AutomationSteps))
		for _, automationStepsItem := range r.AutomationSteps {
			var callFunction *shared.CallFunction
			if automationStepsItem.CallFunction != nil {
				args := make(map[string]string)
				for argsKey, argsValue := range automationStepsItem.CallFunction.Args {
					var argsInst string
					argsInst = argsValue.ValueString()

					args[argsKey] = argsInst
				}
				functionID := new(string)
				if !automationStepsItem.CallFunction.FunctionID.IsUnknown() && !automationStepsItem.CallFunction.FunctionID.IsNull() {
					*functionID = automationStepsItem.CallFunction.FunctionID.ValueString()
				} else {
					functionID = nil
				}
				callFunction = &shared.CallFunction{
					Args:       args,
					FunctionID: functionID,
				}
			}
			var connectorAction *shared.ConnectorAction
			if automationStepsItem.ConnectorAction != nil {
				actionName := new(string)
				if !automationStepsItem.ConnectorAction.ActionName.IsUnknown() && !automationStepsItem.ConnectorAction.ActionName.IsNull() {
					*actionName = automationStepsItem.ConnectorAction.ActionName.ValueString()
				} else {
					actionName = nil
				}
				var argsTemplate *shared.ArgsTemplate
				if automationStepsItem.ConnectorAction.ArgsTemplate != nil {
					argsTemplate = &shared.ArgsTemplate{}
				}
				var connectorRef *shared.ConnectorRef
				if automationStepsItem.ConnectorAction.ConnectorRef != nil {
					appId1 := new(string)
					if !automationStepsItem.ConnectorAction.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.ConnectorAction.ConnectorRef.AppID.IsNull() {
						*appId1 = automationStepsItem.ConnectorAction.ConnectorRef.AppID.ValueString()
					} else {
						appId1 = nil
					}
					id := new(string)
					if !automationStepsItem.ConnectorAction.ConnectorRef.ID.IsUnknown() && !automationStepsItem.ConnectorAction.ConnectorRef.ID.IsNull() {
						*id = automationStepsItem.ConnectorAction.ConnectorRef.ID.ValueString()
					} else {
						id = nil
					}
					connectorRef = &shared.ConnectorRef{
						AppID: appId1,
						ID:    id,
					}
				}
				connectorAction = &shared.ConnectorAction{
					ActionName:   actionName,
					ArgsTemplate: argsTemplate,
					ConnectorRef: connectorRef,
				}
			}
			var connectorCreateAccount *shared.ConnectorCreateAccount
			if automationStepsItem.ConnectorCreateAccount != nil {
				var connectorRef1 *shared.ConnectorRef
				if automationStepsItem.ConnectorCreateAccount.ConnectorRef != nil {
					appId2 := new(string)
					if !automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsNull() {
						*appId2 = automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.ValueString()
					} else {
						appId2 = nil
					}
					id1 := new(string)
					if !automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsNull() {
						*id1 = automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.ValueString()
					} else {
						id1 = nil
					}
					connectorRef1 = &shared.ConnectorRef{
						AppID: appId2,
						ID:    id1,
					}
				}
				userIDCel := new(string)
				if !automationStepsItem.ConnectorCreateAccount.UserIDCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserIDCel.IsNull() {
					*userIDCel = automationStepsItem.ConnectorCreateAccount.UserIDCel.ValueString()
				} else {
					userIDCel = nil
				}
				var userProperties *shared.UserProperties
				if automationStepsItem.ConnectorCreateAccount.UserProperties != nil {
					displayNameCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsNull() {
						*displayNameCel = automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.ValueString()
					} else {
						displayNameCel = nil
					}
					emailCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsNull() {
						*emailCel = automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.ValueString()
					} else {
						emailCel = nil
					}
					profileAttributeCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsNull() {
						*profileAttributeCel = automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.ValueString()
					} else {
						profileAttributeCel = nil
					}
					usernameCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsNull() {
						*usernameCel = automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.ValueString()
					} else {
						usernameCel = nil
					}
					userProperties = &shared.UserProperties{
						DisplayNameCel:      displayNameCel,
						EmailCel:            emailCel,
						ProfileAttributeCel: profileAttributeCel,
						UsernameCel:         usernameCel,
					}
				}
				connectorCreateAccount = &shared.ConnectorCreateAccount{
					ConnectorRef:   connectorRef1,
					UserIDCel:      userIDCel,
					UserProperties: userProperties,
				}
			}
			var createAccessReview *shared.CreateAccessReview
			if automationStepsItem.CreateAccessReview != nil {
				accessReviewTemplateCel := new(string)
				if !automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsUnknown() && !automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsNull() {
					*accessReviewTemplateCel = automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.ValueString()
				} else {
					accessReviewTemplateCel = nil
				}
				accessReviewTemplateID := new(string)
				if !automationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsUnknown() && !automationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsNull() {
					*accessReviewTemplateID = automationStepsItem.CreateAccessReview.AccessReviewTemplateID.ValueString()
				} else {
					accessReviewTemplateID = nil
				}
				campaignName := new(string)
				if !automationStepsItem.CreateAccessReview.CampaignName.IsUnknown() && !automationStepsItem.CreateAccessReview.CampaignName.IsNull() {
					*campaignName = automationStepsItem.CreateAccessReview.CampaignName.ValueString()
				} else {
					campaignName = nil
				}
				useSubjectUser := new(bool)
				if !automationStepsItem.CreateAccessReview.UseSubjectUser.IsUnknown() && !automationStepsItem.CreateAccessReview.UseSubjectUser.IsNull() {
					*useSubjectUser = automationStepsItem.CreateAccessReview.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser = nil
				}
				userIdsCel := new(string)
				if !automationStepsItem.CreateAccessReview.UserIdsCel.IsUnknown() && !automationStepsItem.CreateAccessReview.UserIdsCel.IsNull() {
					*userIdsCel = automationStepsItem.CreateAccessReview.UserIdsCel.ValueString()
				} else {
					userIdsCel = nil
				}
				var userRefs []shared.UserRef
				if automationStepsItem.CreateAccessReview.UserRefs != nil {
					userRefs = make([]shared.UserRef, 0, len(automationStepsItem.CreateAccessReview.UserRefs))
					for _, userRefsItem := range automationStepsItem.CreateAccessReview.UserRefs {
						id2 := new(string)
						if !userRefsItem.ID.IsUnknown() && !userRefsItem.ID.IsNull() {
							*id2 = userRefsItem.ID.ValueString()
						} else {
							id2 = nil
						}
						userRefs = append(userRefs, shared.UserRef{
							ID: id2,
						})
					}
				}
				createAccessReview = &shared.CreateAccessReview{
					AccessReviewTemplateCel: accessReviewTemplateCel,
					AccessReviewTemplateID:  accessReviewTemplateID,
					CampaignName:            campaignName,
					UseSubjectUser:          useSubjectUser,
					UserIdsCel:              userIdsCel,
					UserRefs:                userRefs,
				}
			}
			var createRevokeTasks *shared.CreateRevokeTasks
			if automationStepsItem.CreateRevokeTasks != nil {
				var appEntitlementRefs []shared.AppEntitlementRef
				if automationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
					appEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.CreateRevokeTasks.AppEntitlementRefs))
					for _, appEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
						appId3 := new(string)
						if !appEntitlementRefsItem.AppID.IsUnknown() && !appEntitlementRefsItem.AppID.IsNull() {
							*appId3 = appEntitlementRefsItem.AppID.ValueString()
						} else {
							appId3 = nil
						}
						id3 := new(string)
						if !appEntitlementRefsItem.ID.IsUnknown() && !appEntitlementRefsItem.ID.IsNull() {
							*id3 = appEntitlementRefsItem.ID.ValueString()
						} else {
							id3 = nil
						}
						appEntitlementRefs = append(appEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId3,
							ID:    id3,
						})
					}
				}
				appEntitlementRefsCel := new(string)
				if !automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel = automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel = nil
				}
				revokeAll := new(bool)
				if !automationStepsItem.CreateRevokeTasks.RevokeAll.IsUnknown() && !automationStepsItem.CreateRevokeTasks.RevokeAll.IsNull() {
					*revokeAll = automationStepsItem.CreateRevokeTasks.RevokeAll.ValueBool()
				} else {
					revokeAll = nil
				}
				useSubjectUser1 := new(bool)
				if !automationStepsItem.CreateRevokeTasks.UseSubjectUser.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UseSubjectUser.IsNull() {
					*useSubjectUser1 = automationStepsItem.CreateRevokeTasks.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser1 = nil
				}
				userIDCel1 := new(string)
				if !automationStepsItem.CreateRevokeTasks.UserIDCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UserIDCel.IsNull() {
					*userIDCel1 = automationStepsItem.CreateRevokeTasks.UserIDCel.ValueString()
				} else {
					userIDCel1 = nil
				}
				var userRef *shared.UserRef
				if automationStepsItem.CreateRevokeTasks.UserRef != nil {
					id4 := new(string)
					if !automationStepsItem.CreateRevokeTasks.UserRef.ID.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UserRef.ID.IsNull() {
						*id4 = automationStepsItem.CreateRevokeTasks.UserRef.ID.ValueString()
					} else {
						id4 = nil
					}
					userRef = &shared.UserRef{
						ID: id4,
					}
				}
				createRevokeTasks = &shared.CreateRevokeTasks{
					AppEntitlementRefs:    appEntitlementRefs,
					AppEntitlementRefsCel: appEntitlementRefsCel,
					RevokeAll:             revokeAll,
					UseSubjectUser:        useSubjectUser1,
					UserIDCel:             userIDCel1,
					UserRef:               userRef,
				}
			}
			var grantEntitlements *shared.GrantEntitlements
			if automationStepsItem.GrantEntitlements != nil {
				var appEntitlementRefs1 []shared.AppEntitlementRef
				if automationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
					appEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.GrantEntitlements.AppEntitlementRefs))
					for _, appEntitlementRefsItem1 := range automationStepsItem.GrantEntitlements.AppEntitlementRefs {
						appId4 := new(string)
						if !appEntitlementRefsItem1.AppID.IsUnknown() && !appEntitlementRefsItem1.AppID.IsNull() {
							*appId4 = appEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId4 = nil
						}
						id5 := new(string)
						if !appEntitlementRefsItem1.ID.IsUnknown() && !appEntitlementRefsItem1.ID.IsNull() {
							*id5 = appEntitlementRefsItem1.ID.ValueString()
						} else {
							id5 = nil
						}
						appEntitlementRefs1 = append(appEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId4,
							ID:    id5,
						})
					}
				}
				appEntitlementRefsCel1 := new(string)
				if !automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsUnknown() && !automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel1 = automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel1 = nil
				}
				useSubjectUser2 := new(bool)
				if !automationStepsItem.GrantEntitlements.UseSubjectUser.IsUnknown() && !automationStepsItem.GrantEntitlements.UseSubjectUser.IsNull() {
					*useSubjectUser2 = automationStepsItem.GrantEntitlements.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser2 = nil
				}
				userIDCel2 := new(string)
				if !automationStepsItem.GrantEntitlements.UserIDCel.IsUnknown() && !automationStepsItem.GrantEntitlements.UserIDCel.IsNull() {
					*userIDCel2 = automationStepsItem.GrantEntitlements.UserIDCel.ValueString()
				} else {
					userIDCel2 = nil
				}
				var userRef1 *shared.UserRef
				if automationStepsItem.GrantEntitlements.UserRef != nil {
					id6 := new(string)
					if !automationStepsItem.GrantEntitlements.UserRef.ID.IsUnknown() && !automationStepsItem.GrantEntitlements.UserRef.ID.IsNull() {
						*id6 = automationStepsItem.GrantEntitlements.UserRef.ID.ValueString()
					} else {
						id6 = nil
					}
					userRef1 = &shared.UserRef{
						ID: id6,
					}
				}
				grantEntitlements = &shared.GrantEntitlements{
					AppEntitlementRefs:    appEntitlementRefs1,
					AppEntitlementRefsCel: appEntitlementRefsCel1,
					UseSubjectUser:        useSubjectUser2,
					UserIDCel:             userIDCel2,
					UserRef:               userRef1,
				}
			}
			var removeFromDelegation *shared.RemoveFromDelegation
			if automationStepsItem.RemoveFromDelegation != nil {
				replacementUserIDCel := new(string)
				if !automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsUnknown() && !automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsNull() {
					*replacementUserIDCel = automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.ValueString()
				} else {
					replacementUserIDCel = nil
				}
				var replacementUserRef *shared.UserRef
				if automationStepsItem.RemoveFromDelegation.ReplacementUserRef != nil {
					id7 := new(string)
					if !automationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.IsUnknown() && !automationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.IsNull() {
						*id7 = automationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.ValueString()
					} else {
						id7 = nil
					}
					replacementUserRef = &shared.UserRef{
						ID: id7,
					}
				}
				useSubjectUser3 := new(bool)
				if !automationStepsItem.RemoveFromDelegation.UseSubjectUser.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UseSubjectUser.IsNull() {
					*useSubjectUser3 = automationStepsItem.RemoveFromDelegation.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser3 = nil
				}
				userIDCel3 := new(string)
				if !automationStepsItem.RemoveFromDelegation.UserIDCel.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserIDCel.IsNull() {
					*userIDCel3 = automationStepsItem.RemoveFromDelegation.UserIDCel.ValueString()
				} else {
					userIDCel3 = nil
				}
				var userRef2 *shared.UserRef
				if automationStepsItem.RemoveFromDelegation.UserRef != nil {
					id8 := new(string)
					if !automationStepsItem.RemoveFromDelegation.UserRef.ID.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserRef.ID.IsNull() {
						*id8 = automationStepsItem.RemoveFromDelegation.UserRef.ID.ValueString()
					} else {
						id8 = nil
					}
					userRef2 = &shared.UserRef{
						ID: id8,
					}
				}
				removeFromDelegation = &shared.RemoveFromDelegation{
					ReplacementUserIDCel: replacementUserIDCel,
					ReplacementUserRef:   replacementUserRef,
					UseSubjectUser:       useSubjectUser3,
					UserIDCel:            userIDCel3,
					UserRef:              userRef2,
				}
			}
			var runAutomation *shared.RunAutomation
			if automationStepsItem.RunAutomation != nil {
				automationTemplateIDCel := new(string)
				if !automationStepsItem.RunAutomation.AutomationTemplateIDCel.IsUnknown() && !automationStepsItem.RunAutomation.AutomationTemplateIDCel.IsNull() {
					*automationTemplateIDCel = automationStepsItem.RunAutomation.AutomationTemplateIDCel.ValueString()
				} else {
					automationTemplateIDCel = nil
				}
				var automationTemplateRef *shared.AutomationTemplateRef
				if automationStepsItem.RunAutomation.AutomationTemplateRef != nil {
					id9 := new(string)
					if !automationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsUnknown() && !automationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsNull() {
						*id9 = automationStepsItem.RunAutomation.AutomationTemplateRef.ID.ValueString()
					} else {
						id9 = nil
					}
					automationTemplateRef = &shared.AutomationTemplateRef{
						ID: id9,
					}
				}
				var contextVar *shared.AutomationContext
				if automationStepsItem.RunAutomation.Context != nil {
					var contextVar1 *shared.Context
					if automationStepsItem.RunAutomation.Context.Context != nil {
						contextVar1 = &shared.Context{}
					}
					contextVar = &shared.AutomationContext{
						Context: contextVar1,
					}
				}
				runAutomation = &shared.RunAutomation{
					AutomationTemplateIDCel: automationTemplateIDCel,
					AutomationTemplateRef:   automationTemplateRef,
					Context:                 contextVar,
				}
			}
			var sendEmail *shared.SendEmail
			if automationStepsItem.SendEmail != nil {
				body := new(string)
				if !automationStepsItem.SendEmail.Body.IsUnknown() && !automationStepsItem.SendEmail.Body.IsNull() {
					*body = automationStepsItem.SendEmail.Body.ValueString()
				} else {
					body = nil
				}
				subject := new(string)
				if !automationStepsItem.SendEmail.Subject.IsUnknown() && !automationStepsItem.SendEmail.Subject.IsNull() {
					*subject = automationStepsItem.SendEmail.Subject.ValueString()
				} else {
					subject = nil
				}
				title := new(string)
				if !automationStepsItem.SendEmail.Title.IsUnknown() && !automationStepsItem.SendEmail.Title.IsNull() {
					*title = automationStepsItem.SendEmail.Title.ValueString()
				} else {
					title = nil
				}
				useSubjectUser4 := new(bool)
				if !automationStepsItem.SendEmail.UseSubjectUser.IsUnknown() && !automationStepsItem.SendEmail.UseSubjectUser.IsNull() {
					*useSubjectUser4 = automationStepsItem.SendEmail.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser4 = nil
				}
				userIdsCel1 := new(string)
				if !automationStepsItem.SendEmail.UserIdsCel.IsUnknown() && !automationStepsItem.SendEmail.UserIdsCel.IsNull() {
					*userIdsCel1 = automationStepsItem.SendEmail.UserIdsCel.ValueString()
				} else {
					userIdsCel1 = nil
				}
				var userRefs1 []shared.UserRef
				if automationStepsItem.SendEmail.UserRefs != nil {
					userRefs1 = make([]shared.UserRef, 0, len(automationStepsItem.SendEmail.UserRefs))
					for _, userRefsItem1 := range automationStepsItem.SendEmail.UserRefs {
						id10 := new(string)
						if !userRefsItem1.ID.IsUnknown() && !userRefsItem1.ID.IsNull() {
							*id10 = userRefsItem1.ID.ValueString()
						} else {
							id10 = nil
						}
						userRefs1 = append(userRefs1, shared.UserRef{
							ID: id10,
						})
					}
				}
				sendEmail = &shared.SendEmail{
					Body:           body,
					Subject:        subject,
					Title:          title,
					UseSubjectUser: useSubjectUser4,
					UserIdsCel:     userIdsCel1,
					UserRefs:       userRefs1,
				}
			}
			var sendSlackMessage *shared.SendSlackMessage
			if automationStepsItem.SendSlackMessage != nil {
				body1 := new(string)
				if !automationStepsItem.SendSlackMessage.Body.IsUnknown() && !automationStepsItem.SendSlackMessage.Body.IsNull() {
					*body1 = automationStepsItem.SendSlackMessage.Body.ValueString()
				} else {
					body1 = nil
				}
				channelName := new(string)
				if !automationStepsItem.SendSlackMessage.ChannelName.IsUnknown() && !automationStepsItem.SendSlackMessage.ChannelName.IsNull() {
					*channelName = automationStepsItem.SendSlackMessage.ChannelName.ValueString()
				} else {
					channelName = nil
				}
				channelNameCel := new(string)
				if !automationStepsItem.SendSlackMessage.ChannelNameCel.IsUnknown() && !automationStepsItem.SendSlackMessage.ChannelNameCel.IsNull() {
					*channelNameCel = automationStepsItem.SendSlackMessage.ChannelNameCel.ValueString()
				} else {
					channelNameCel = nil
				}
				sendSlackMessage = &shared.SendSlackMessage{
					Body:           body1,
					ChannelName:    channelName,
					ChannelNameCel: channelNameCel,
				}
			}
			skipIfTrueCel := new(string)
			if !automationStepsItem.SkipIfTrueCel.IsUnknown() && !automationStepsItem.SkipIfTrueCel.IsNull() {
				*skipIfTrueCel = automationStepsItem.SkipIfTrueCel.ValueString()
			} else {
				skipIfTrueCel = nil
			}
			stepDisplayName := new(string)
			if !automationStepsItem.StepDisplayName.IsUnknown() && !automationStepsItem.StepDisplayName.IsNull() {
				*stepDisplayName = automationStepsItem.StepDisplayName.ValueString()
			} else {
				stepDisplayName = nil
			}
			stepName := new(string)
			if !automationStepsItem.StepName.IsUnknown() && !automationStepsItem.StepName.IsNull() {
				*stepName = automationStepsItem.StepName.ValueString()
			} else {
				stepName = nil
			}
			var taskAction *shared.TaskAction
			if automationStepsItem.TaskAction != nil {
				var close *shared.CloseAction
				if automationStepsItem.TaskAction.Close != nil {
					useSubjectUser5 := new(bool)
					if !automationStepsItem.TaskAction.Close.UseSubjectUser.IsUnknown() && !automationStepsItem.TaskAction.Close.UseSubjectUser.IsNull() {
						*useSubjectUser5 = automationStepsItem.TaskAction.Close.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser5 = nil
					}
					userIDCel4 := new(string)
					if !automationStepsItem.TaskAction.Close.UserIDCel.IsUnknown() && !automationStepsItem.TaskAction.Close.UserIDCel.IsNull() {
						*userIDCel4 = automationStepsItem.TaskAction.Close.UserIDCel.ValueString()
					} else {
						userIDCel4 = nil
					}
					var userRef3 *shared.UserRef
					if automationStepsItem.TaskAction.Close.UserRef != nil {
						id11 := new(string)
						if !automationStepsItem.TaskAction.Close.UserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.Close.UserRef.ID.IsNull() {
							*id11 = automationStepsItem.TaskAction.Close.UserRef.ID.ValueString()
						} else {
							id11 = nil
						}
						userRef3 = &shared.UserRef{
							ID: id11,
						}
					}
					close = &shared.CloseAction{
						UseSubjectUser: useSubjectUser5,
						UserIDCel:      userIDCel4,
						UserRef:        userRef3,
					}
				}
				var reassign *shared.ReassignAction
				if automationStepsItem.TaskAction.Reassign != nil {
					assigneeUserIDCel := new(string)
					if !automationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.IsUnknown() && !automationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.IsNull() {
						*assigneeUserIDCel = automationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.ValueString()
					} else {
						assigneeUserIDCel = nil
					}
					var assigneeUserRef *shared.UserRef
					if automationStepsItem.TaskAction.Reassign.AssigneeUserRef != nil {
						id12 := new(string)
						if !automationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.IsNull() {
							*id12 = automationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.ValueString()
						} else {
							id12 = nil
						}
						assigneeUserRef = &shared.UserRef{
							ID: id12,
						}
					}
					subjectUserIDCel := new(string)
					if !automationStepsItem.TaskAction.Reassign.SubjectUserIDCel.IsUnknown() && !automationStepsItem.TaskAction.Reassign.SubjectUserIDCel.IsNull() {
						*subjectUserIDCel = automationStepsItem.TaskAction.Reassign.SubjectUserIDCel.ValueString()
					} else {
						subjectUserIDCel = nil
					}
					var subjectUserRef *shared.UserRef
					if automationStepsItem.TaskAction.Reassign.SubjectUserRef != nil {
						id13 := new(string)
						if !automationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.IsNull() {
							*id13 = automationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.ValueString()
						} else {
							id13 = nil
						}
						subjectUserRef = &shared.UserRef{
							ID: id13,
						}
					}
					useSubjectUser6 := new(bool)
					if !automationStepsItem.TaskAction.Reassign.UseSubjectUser.IsUnknown() && !automationStepsItem.TaskAction.Reassign.UseSubjectUser.IsNull() {
						*useSubjectUser6 = automationStepsItem.TaskAction.Reassign.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser6 = nil
					}
					reassign = &shared.ReassignAction{
						AssigneeUserIDCel: assigneeUserIDCel,
						AssigneeUserRef:   assigneeUserRef,
						SubjectUserIDCel:  subjectUserIDCel,
						SubjectUserRef:    subjectUserRef,
						UseSubjectUser:    useSubjectUser6,
					}
				}
				var taskTypes []shared.TaskTypes
				if automationStepsItem.TaskAction.TaskTypes != nil {
					taskTypes = make([]shared.TaskTypes, 0, len(automationStepsItem.TaskAction.TaskTypes))
					for _, taskTypesItem := range automationStepsItem.TaskAction.TaskTypes {
						taskTypes = append(taskTypes, shared.TaskTypes(taskTypesItem.ValueString()))
					}
				}
				taskUserRelation := new(shared.TaskUserRelation)
				if !automationStepsItem.TaskAction.TaskUserRelation.IsUnknown() && !automationStepsItem.TaskAction.TaskUserRelation.IsNull() {
					*taskUserRelation = shared.TaskUserRelation(automationStepsItem.TaskAction.TaskUserRelation.ValueString())
				} else {
					taskUserRelation = nil
				}
				taskAction = &shared.TaskAction{
					Close:            close,
					Reassign:         reassign,
					TaskTypes:        taskTypes,
					TaskUserRelation: taskUserRelation,
				}
			}
			var unenrollFromAllAccessProfiles *shared.UnenrollFromAllAccessProfiles
			if automationStepsItem.UnenrollFromAllAccessProfiles != nil {
				var catalogIds []string
				if automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
					catalogIds = make([]string, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
					for _, catalogIdsItem := range automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
						catalogIds = append(catalogIds, catalogIdsItem.ValueString())
					}
				}
				catalogIdsCel := new(string)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsNull() {
					*catalogIdsCel = automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.ValueString()
				} else {
					catalogIdsCel = nil
				}
				useSubjectUser7 := new(bool)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsNull() {
					*useSubjectUser7 = automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser7 = nil
				}
				userIdsCel2 := new(string)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsNull() {
					*userIdsCel2 = automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.ValueString()
				} else {
					userIdsCel2 = nil
				}
				var userRefs2 []shared.UserRef
				if automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
					userRefs2 = make([]shared.UserRef, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs))
					for _, userRefsItem2 := range automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
						id14 := new(string)
						if !userRefsItem2.ID.IsUnknown() && !userRefsItem2.ID.IsNull() {
							*id14 = userRefsItem2.ID.ValueString()
						} else {
							id14 = nil
						}
						userRefs2 = append(userRefs2, shared.UserRef{
							ID: id14,
						})
					}
				}
				unenrollFromAllAccessProfiles = &shared.UnenrollFromAllAccessProfiles{
					CatalogIds:     catalogIds,
					CatalogIdsCel:  catalogIdsCel,
					UseSubjectUser: useSubjectUser7,
					UserIdsCel:     userIdsCel2,
					UserRefs:       userRefs2,
				}
			}
			var updateUser *shared.UpdateUser
			if automationStepsItem.UpdateUser != nil {
				useSubjectUser8 := new(bool)
				if !automationStepsItem.UpdateUser.UseSubjectUser.IsUnknown() && !automationStepsItem.UpdateUser.UseSubjectUser.IsNull() {
					*useSubjectUser8 = automationStepsItem.UpdateUser.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser8 = nil
				}
				userIDCel5 := new(string)
				if !automationStepsItem.UpdateUser.UserIDCel.IsUnknown() && !automationStepsItem.UpdateUser.UserIDCel.IsNull() {
					*userIDCel5 = automationStepsItem.UpdateUser.UserIDCel.ValueString()
				} else {
					userIDCel5 = nil
				}
				var userRef4 *shared.UserRef
				if automationStepsItem.UpdateUser.UserRef != nil {
					id15 := new(string)
					if !automationStepsItem.UpdateUser.UserRef.ID.IsUnknown() && !automationStepsItem.UpdateUser.UserRef.ID.IsNull() {
						*id15 = automationStepsItem.UpdateUser.UserRef.ID.ValueString()
					} else {
						id15 = nil
					}
					userRef4 = &shared.UserRef{
						ID: id15,
					}
				}
				userStatusCel := new(string)
				if !automationStepsItem.UpdateUser.UserStatusCel.IsUnknown() && !automationStepsItem.UpdateUser.UserStatusCel.IsNull() {
					*userStatusCel = automationStepsItem.UpdateUser.UserStatusCel.ValueString()
				} else {
					userStatusCel = nil
				}
				userStatusEnum := new(shared.UserStatusEnum)
				if !automationStepsItem.UpdateUser.UserStatusEnum.IsUnknown() && !automationStepsItem.UpdateUser.UserStatusEnum.IsNull() {
					*userStatusEnum = shared.UserStatusEnum(automationStepsItem.UpdateUser.UserStatusEnum.ValueString())
				} else {
					userStatusEnum = nil
				}
				updateUser = &shared.UpdateUser{
					UseSubjectUser: useSubjectUser8,
					UserIDCel:      userIDCel5,
					UserRef:        userRef4,
					UserStatusCel:  userStatusCel,
					UserStatusEnum: userStatusEnum,
				}
			}
			var waitForDuration *shared.WaitForDuration
			if automationStepsItem.WaitForDuration != nil {
				duration := new(string)
				if !automationStepsItem.WaitForDuration.Duration.IsUnknown() && !automationStepsItem.WaitForDuration.Duration.IsNull() {
					*duration = automationStepsItem.WaitForDuration.Duration.ValueString()
				} else {
					duration = nil
				}
				waitForDuration = &shared.WaitForDuration{
					Duration: duration,
				}
			}
			var webhook *shared.Webhook
			if automationStepsItem.Webhook != nil {
				var payload *shared.Payload
				if automationStepsItem.Webhook.Payload != nil {
					payload = &shared.Payload{}
				}
				webhookID := new(string)
				if !automationStepsItem.Webhook.WebhookID.IsUnknown() && !automationStepsItem.Webhook.WebhookID.IsNull() {
					*webhookID = automationStepsItem.Webhook.WebhookID.ValueString()
				} else {
					webhookID = nil
				}
				webhookIDCel := new(string)
				if !automationStepsItem.Webhook.WebhookIDCel.IsUnknown() && !automationStepsItem.Webhook.WebhookIDCel.IsNull() {
					*webhookIDCel = automationStepsItem.Webhook.WebhookIDCel.ValueString()
				} else {
					webhookIDCel = nil
				}
				webhook = &shared.Webhook{
					Payload:      payload,
					WebhookID:    webhookID,
					WebhookIDCel: webhookIDCel,
				}
			}
			automationSteps = append(automationSteps, shared.AutomationStep{
				CallFunction:                  callFunction,
				ConnectorAction:               connectorAction,
				ConnectorCreateAccount:        connectorCreateAccount,
				CreateAccessReview:            createAccessReview,
				CreateRevokeTasks:             createRevokeTasks,
				GrantEntitlements:             grantEntitlements,
				RemoveFromDelegation:          removeFromDelegation,
				RunAutomation:                 runAutomation,
				SendEmail:                     sendEmail,
				SendSlackMessage:              sendSlackMessage,
				SkipIfTrueCel:                 skipIfTrueCel,
				StepDisplayName:               stepDisplayName,
				StepName:                      stepName,
				TaskAction:                    taskAction,
				UnenrollFromAllAccessProfiles: unenrollFromAllAccessProfiles,
				UpdateUser:                    updateUser,
				WaitForDuration:               waitForDuration,
				Webhook:                       webhook,
			})
		}
	}
	var contextVar2 *shared.AutomationContext
	if r.Context != nil {
		var contextVar3 *shared.Context
		if r.Context.Context != nil {
			contextVar3 = &shared.Context{}
		}
		contextVar2 = &shared.AutomationContext{
			Context: contextVar3,
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var draftAutomationSteps []shared.AutomationStep
	if r.DraftAutomationSteps != nil {
		draftAutomationSteps = make([]shared.AutomationStep, 0, len(r.DraftAutomationSteps))
		for _, draftAutomationStepsItem := range r.DraftAutomationSteps {
			var callFunction1 *shared.CallFunction
			if draftAutomationStepsItem.CallFunction != nil {
				args1 := make(map[string]string)
				for argsKey1, argsValue1 := range draftAutomationStepsItem.CallFunction.Args {
					var argsInst1 string
					argsInst1 = argsValue1.ValueString()

					args1[argsKey1] = argsInst1
				}
				functionId1 := new(string)
				if !draftAutomationStepsItem.CallFunction.FunctionID.IsUnknown() && !draftAutomationStepsItem.CallFunction.FunctionID.IsNull() {
					*functionId1 = draftAutomationStepsItem.CallFunction.FunctionID.ValueString()
				} else {
					functionId1 = nil
				}
				callFunction1 = &shared.CallFunction{
					Args:       args1,
					FunctionID: functionId1,
				}
			}
			var connectorAction1 *shared.ConnectorAction
			if draftAutomationStepsItem.ConnectorAction != nil {
				actionName1 := new(string)
				if !draftAutomationStepsItem.ConnectorAction.ActionName.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ActionName.IsNull() {
					*actionName1 = draftAutomationStepsItem.ConnectorAction.ActionName.ValueString()
				} else {
					actionName1 = nil
				}
				var argsTemplate1 *shared.ArgsTemplate
				if draftAutomationStepsItem.ConnectorAction.ArgsTemplate != nil {
					argsTemplate1 = &shared.ArgsTemplate{}
				}
				var connectorRef2 *shared.ConnectorRef
				if draftAutomationStepsItem.ConnectorAction.ConnectorRef != nil {
					appId5 := new(string)
					if !draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.IsNull() {
						*appId5 = draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.ValueString()
					} else {
						appId5 = nil
					}
					id16 := new(string)
					if !draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.IsNull() {
						*id16 = draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.ValueString()
					} else {
						id16 = nil
					}
					connectorRef2 = &shared.ConnectorRef{
						AppID: appId5,
						ID:    id16,
					}
				}
				connectorAction1 = &shared.ConnectorAction{
					ActionName:   actionName1,
					ArgsTemplate: argsTemplate1,
					ConnectorRef: connectorRef2,
				}
			}
			var connectorCreateAccount1 *shared.ConnectorCreateAccount
			if draftAutomationStepsItem.ConnectorCreateAccount != nil {
				var connectorRef3 *shared.ConnectorRef
				if draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef != nil {
					appId6 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsNull() {
						*appId6 = draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.ValueString()
					} else {
						appId6 = nil
					}
					id17 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsNull() {
						*id17 = draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.ValueString()
					} else {
						id17 = nil
					}
					connectorRef3 = &shared.ConnectorRef{
						AppID: appId6,
						ID:    id17,
					}
				}
				userIDCel6 := new(string)
				if !draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.IsNull() {
					*userIDCel6 = draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.ValueString()
				} else {
					userIDCel6 = nil
				}
				var userProperties1 *shared.UserProperties
				if draftAutomationStepsItem.ConnectorCreateAccount.UserProperties != nil {
					displayNameCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsNull() {
						*displayNameCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.ValueString()
					} else {
						displayNameCel1 = nil
					}
					emailCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsNull() {
						*emailCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.ValueString()
					} else {
						emailCel1 = nil
					}
					profileAttributeCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsNull() {
						*profileAttributeCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.ValueString()
					} else {
						profileAttributeCel1 = nil
					}
					usernameCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsNull() {
						*usernameCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.ValueString()
					} else {
						usernameCel1 = nil
					}
					userProperties1 = &shared.UserProperties{
						DisplayNameCel:      displayNameCel1,
						EmailCel:            emailCel1,
						ProfileAttributeCel: profileAttributeCel1,
						UsernameCel:         usernameCel1,
					}
				}
				connectorCreateAccount1 = &shared.ConnectorCreateAccount{
					ConnectorRef:   connectorRef3,
					UserIDCel:      userIDCel6,
					UserProperties: userProperties1,
				}
			}
			var createAccessReview1 *shared.CreateAccessReview
			if draftAutomationStepsItem.CreateAccessReview != nil {
				accessReviewTemplateCel1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsNull() {
					*accessReviewTemplateCel1 = draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.ValueString()
				} else {
					accessReviewTemplateCel1 = nil
				}
				accessReviewTemplateId1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsNull() {
					*accessReviewTemplateId1 = draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.ValueString()
				} else {
					accessReviewTemplateId1 = nil
				}
				campaignName1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.CampaignName.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.CampaignName.IsNull() {
					*campaignName1 = draftAutomationStepsItem.CreateAccessReview.CampaignName.ValueString()
				} else {
					campaignName1 = nil
				}
				useSubjectUser9 := new(bool)
				if !draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.IsNull() {
					*useSubjectUser9 = draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser9 = nil
				}
				userIdsCel3 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.UserIdsCel.IsNull() {
					*userIdsCel3 = draftAutomationStepsItem.CreateAccessReview.UserIdsCel.ValueString()
				} else {
					userIdsCel3 = nil
				}
				var userRefs3 []shared.UserRef
				if draftAutomationStepsItem.CreateAccessReview.UserRefs != nil {
					userRefs3 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.CreateAccessReview.UserRefs))
					for _, userRefsItem3 := range draftAutomationStepsItem.CreateAccessReview.UserRefs {
						id18 := new(string)
						if !userRefsItem3.ID.IsUnknown() && !userRefsItem3.ID.IsNull() {
							*id18 = userRefsItem3.ID.ValueString()
						} else {
							id18 = nil
						}
						userRefs3 = append(userRefs3, shared.UserRef{
							ID: id18,
						})
					}
				}
				createAccessReview1 = &shared.CreateAccessReview{
					AccessReviewTemplateCel: accessReviewTemplateCel1,
					AccessReviewTemplateID:  accessReviewTemplateId1,
					CampaignName:            campaignName1,
					UseSubjectUser:          useSubjectUser9,
					UserIdsCel:              userIdsCel3,
					UserRefs:                userRefs3,
				}
			}
			var createRevokeTasks1 *shared.CreateRevokeTasks
			if draftAutomationStepsItem.CreateRevokeTasks != nil {
				var appEntitlementRefs2 []shared.AppEntitlementRef
				if draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
					appEntitlementRefs2 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs))
					for _, appEntitlementRefsItem2 := range draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
						appId7 := new(string)
						if !appEntitlementRefsItem2.AppID.IsUnknown() && !appEntitlementRefsItem2.AppID.IsNull() {
							*appId7 = appEntitlementRefsItem2.AppID.ValueString()
						} else {
							appId7 = nil
						}
						id19 := new(string)
						if !appEntitlementRefsItem2.ID.IsUnknown() && !appEntitlementRefsItem2.ID.IsNull() {
							*id19 = appEntitlementRefsItem2.ID.ValueString()
						} else {
							id19 = nil
						}
						appEntitlementRefs2 = append(appEntitlementRefs2, shared.AppEntitlementRef{
							AppID: appId7,
							ID:    id19,
						})
					}
				}
				appEntitlementRefsCel2 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel2 = draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel2 = nil
				}
				revokeAll1 := new(bool)
				if !draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.IsNull() {
					*revokeAll1 = draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.ValueBool()
				} else {
					revokeAll1 = nil
				}
				useSubjectUser10 := new(bool)
				if !draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.IsNull() {
					*useSubjectUser10 = draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser10 = nil
				}
				userIDCel7 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.IsNull() {
					*userIDCel7 = draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.ValueString()
				} else {
					userIDCel7 = nil
				}
				var userRef5 *shared.UserRef
				if draftAutomationStepsItem.CreateRevokeTasks.UserRef != nil {
					id20 := new(string)
					if !draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.IsNull() {
						*id20 = draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.ValueString()
					} else {
						id20 = nil
					}
					userRef5 = &shared.UserRef{
						ID: id20,
					}
				}
				createRevokeTasks1 = &shared.CreateRevokeTasks{
					AppEntitlementRefs:    appEntitlementRefs2,
					AppEntitlementRefsCel: appEntitlementRefsCel2,
					RevokeAll:             revokeAll1,
					UseSubjectUser:        useSubjectUser10,
					UserIDCel:             userIDCel7,
					UserRef:               userRef5,
				}
			}
			var grantEntitlements1 *shared.GrantEntitlements
			if draftAutomationStepsItem.GrantEntitlements != nil {
				var appEntitlementRefs3 []shared.AppEntitlementRef
				if draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
					appEntitlementRefs3 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs))
					for _, appEntitlementRefsItem3 := range draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs {
						appId8 := new(string)
						if !appEntitlementRefsItem3.AppID.IsUnknown() && !appEntitlementRefsItem3.AppID.IsNull() {
							*appId8 = appEntitlementRefsItem3.AppID.ValueString()
						} else {
							appId8 = nil
						}
						id21 := new(string)
						if !appEntitlementRefsItem3.ID.IsUnknown() && !appEntitlementRefsItem3.ID.IsNull() {
							*id21 = appEntitlementRefsItem3.ID.ValueString()
						} else {
							id21 = nil
						}
						appEntitlementRefs3 = append(appEntitlementRefs3, shared.AppEntitlementRef{
							AppID: appId8,
							ID:    id21,
						})
					}
				}
				appEntitlementRefsCel3 := new(string)
				if !draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel3 = draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel3 = nil
				}
				useSubjectUser11 := new(bool)
				if !draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.IsNull() {
					*useSubjectUser11 = draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser11 = nil
				}
				userIDCel8 := new(string)
				if !draftAutomationStepsItem.GrantEntitlements.UserIDCel.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UserIDCel.IsNull() {
					*userIDCel8 = draftAutomationStepsItem.GrantEntitlements.UserIDCel.ValueString()
				} else {
					userIDCel8 = nil
				}
				var userRef6 *shared.UserRef
				if draftAutomationStepsItem.GrantEntitlements.UserRef != nil {
					id22 := new(string)
					if !draftAutomationStepsItem.GrantEntitlements.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UserRef.ID.IsNull() {
						*id22 = draftAutomationStepsItem.GrantEntitlements.UserRef.ID.ValueString()
					} else {
						id22 = nil
					}
					userRef6 = &shared.UserRef{
						ID: id22,
					}
				}
				grantEntitlements1 = &shared.GrantEntitlements{
					AppEntitlementRefs:    appEntitlementRefs3,
					AppEntitlementRefsCel: appEntitlementRefsCel3,
					UseSubjectUser:        useSubjectUser11,
					UserIDCel:             userIDCel8,
					UserRef:               userRef6,
				}
			}
			var removeFromDelegation1 *shared.RemoveFromDelegation
			if draftAutomationStepsItem.RemoveFromDelegation != nil {
				replacementUserIDCel1 := new(string)
				if !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsNull() {
					*replacementUserIDCel1 = draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.ValueString()
				} else {
					replacementUserIDCel1 = nil
				}
				var replacementUserRef1 *shared.UserRef
				if draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef != nil {
					id23 := new(string)
					if !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.IsNull() {
						*id23 = draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserRef.ID.ValueString()
					} else {
						id23 = nil
					}
					replacementUserRef1 = &shared.UserRef{
						ID: id23,
					}
				}
				useSubjectUser12 := new(bool)
				if !draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.IsNull() {
					*useSubjectUser12 = draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser12 = nil
				}
				userIDCel9 := new(string)
				if !draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.IsNull() {
					*userIDCel9 = draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.ValueString()
				} else {
					userIDCel9 = nil
				}
				var userRef7 *shared.UserRef
				if draftAutomationStepsItem.RemoveFromDelegation.UserRef != nil {
					id24 := new(string)
					if !draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.IsNull() {
						*id24 = draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.ValueString()
					} else {
						id24 = nil
					}
					userRef7 = &shared.UserRef{
						ID: id24,
					}
				}
				removeFromDelegation1 = &shared.RemoveFromDelegation{
					ReplacementUserIDCel: replacementUserIDCel1,
					ReplacementUserRef:   replacementUserRef1,
					UseSubjectUser:       useSubjectUser12,
					UserIDCel:            userIDCel9,
					UserRef:              userRef7,
				}
			}
			var runAutomation1 *shared.RunAutomation
			if draftAutomationStepsItem.RunAutomation != nil {
				automationTemplateIDCel1 := new(string)
				if !draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.IsUnknown() && !draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.IsNull() {
					*automationTemplateIDCel1 = draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.ValueString()
				} else {
					automationTemplateIDCel1 = nil
				}
				var automationTemplateRef1 *shared.AutomationTemplateRef
				if draftAutomationStepsItem.RunAutomation.AutomationTemplateRef != nil {
					id25 := new(string)
					if !draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsUnknown() && !draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsNull() {
						*id25 = draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.ValueString()
					} else {
						id25 = nil
					}
					automationTemplateRef1 = &shared.AutomationTemplateRef{
						ID: id25,
					}
				}
				var contextVar4 *shared.AutomationContext
				if draftAutomationStepsItem.RunAutomation.Context != nil {
					var contextVar5 *shared.Context
					if draftAutomationStepsItem.RunAutomation.Context.Context != nil {
						contextVar5 = &shared.Context{}
					}
					contextVar4 = &shared.AutomationContext{
						Context: contextVar5,
					}
				}
				runAutomation1 = &shared.RunAutomation{
					AutomationTemplateIDCel: automationTemplateIDCel1,
					AutomationTemplateRef:   automationTemplateRef1,
					Context:                 contextVar4,
				}
			}
			var sendEmail1 *shared.SendEmail
			if draftAutomationStepsItem.SendEmail != nil {
				body2 := new(string)
				if !draftAutomationStepsItem.SendEmail.Body.IsUnknown() && !draftAutomationStepsItem.SendEmail.Body.IsNull() {
					*body2 = draftAutomationStepsItem.SendEmail.Body.ValueString()
				} else {
					body2 = nil
				}
				subject1 := new(string)
				if !draftAutomationStepsItem.SendEmail.Subject.IsUnknown() && !draftAutomationStepsItem.SendEmail.Subject.IsNull() {
					*subject1 = draftAutomationStepsItem.SendEmail.Subject.ValueString()
				} else {
					subject1 = nil
				}
				title1 := new(string)
				if !draftAutomationStepsItem.SendEmail.Title.IsUnknown() && !draftAutomationStepsItem.SendEmail.Title.IsNull() {
					*title1 = draftAutomationStepsItem.SendEmail.Title.ValueString()
				} else {
					title1 = nil
				}
				useSubjectUser13 := new(bool)
				if !draftAutomationStepsItem.SendEmail.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.SendEmail.UseSubjectUser.IsNull() {
					*useSubjectUser13 = draftAutomationStepsItem.SendEmail.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser13 = nil
				}
				userIdsCel4 := new(string)
				if !draftAutomationStepsItem.SendEmail.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.SendEmail.UserIdsCel.IsNull() {
					*userIdsCel4 = draftAutomationStepsItem.SendEmail.UserIdsCel.ValueString()
				} else {
					userIdsCel4 = nil
				}
				var userRefs4 []shared.UserRef
				if draftAutomationStepsItem.SendEmail.UserRefs != nil {
					userRefs4 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.SendEmail.UserRefs))
					for _, userRefsItem4 := range draftAutomationStepsItem.SendEmail.UserRefs {
						id26 := new(string)
						if !userRefsItem4.ID.IsUnknown() && !userRefsItem4.ID.IsNull() {
							*id26 = userRefsItem4.ID.ValueString()
						} else {
							id26 = nil
						}
						userRefs4 = append(userRefs4, shared.UserRef{
							ID: id26,
						})
					}
				}
				sendEmail1 = &shared.SendEmail{
					Body:           body2,
					Subject:        subject1,
					Title:          title1,
					UseSubjectUser: useSubjectUser13,
					UserIdsCel:     userIdsCel4,
					UserRefs:       userRefs4,
				}
			}
			var sendSlackMessage1 *shared.SendSlackMessage
			if draftAutomationStepsItem.SendSlackMessage != nil {
				body3 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.Body.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.Body.IsNull() {
					*body3 = draftAutomationStepsItem.SendSlackMessage.Body.ValueString()
				} else {
					body3 = nil
				}
				channelName1 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.ChannelName.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.ChannelName.IsNull() {
					*channelName1 = draftAutomationStepsItem.SendSlackMessage.ChannelName.ValueString()
				} else {
					channelName1 = nil
				}
				channelNameCel1 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.IsNull() {
					*channelNameCel1 = draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.ValueString()
				} else {
					channelNameCel1 = nil
				}
				sendSlackMessage1 = &shared.SendSlackMessage{
					Body:           body3,
					ChannelName:    channelName1,
					ChannelNameCel: channelNameCel1,
				}
			}
			skipIfTrueCel1 := new(string)
			if !draftAutomationStepsItem.SkipIfTrueCel.IsUnknown() && !draftAutomationStepsItem.SkipIfTrueCel.IsNull() {
				*skipIfTrueCel1 = draftAutomationStepsItem.SkipIfTrueCel.ValueString()
			} else {
				skipIfTrueCel1 = nil
			}
			stepDisplayName1 := new(string)
			if !draftAutomationStepsItem.StepDisplayName.IsUnknown() && !draftAutomationStepsItem.StepDisplayName.IsNull() {
				*stepDisplayName1 = draftAutomationStepsItem.StepDisplayName.ValueString()
			} else {
				stepDisplayName1 = nil
			}
			stepName1 := new(string)
			if !draftAutomationStepsItem.StepName.IsUnknown() && !draftAutomationStepsItem.StepName.IsNull() {
				*stepName1 = draftAutomationStepsItem.StepName.ValueString()
			} else {
				stepName1 = nil
			}
			var taskAction1 *shared.TaskAction
			if draftAutomationStepsItem.TaskAction != nil {
				var close1 *shared.CloseAction
				if draftAutomationStepsItem.TaskAction.Close != nil {
					useSubjectUser14 := new(bool)
					if !draftAutomationStepsItem.TaskAction.Close.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.TaskAction.Close.UseSubjectUser.IsNull() {
						*useSubjectUser14 = draftAutomationStepsItem.TaskAction.Close.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser14 = nil
					}
					userIDCel10 := new(string)
					if !draftAutomationStepsItem.TaskAction.Close.UserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.Close.UserIDCel.IsNull() {
						*userIDCel10 = draftAutomationStepsItem.TaskAction.Close.UserIDCel.ValueString()
					} else {
						userIDCel10 = nil
					}
					var userRef8 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.Close.UserRef != nil {
						id27 := new(string)
						if !draftAutomationStepsItem.TaskAction.Close.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.Close.UserRef.ID.IsNull() {
							*id27 = draftAutomationStepsItem.TaskAction.Close.UserRef.ID.ValueString()
						} else {
							id27 = nil
						}
						userRef8 = &shared.UserRef{
							ID: id27,
						}
					}
					close1 = &shared.CloseAction{
						UseSubjectUser: useSubjectUser14,
						UserIDCel:      userIDCel10,
						UserRef:        userRef8,
					}
				}
				var reassign1 *shared.ReassignAction
				if draftAutomationStepsItem.TaskAction.Reassign != nil {
					assigneeUserIDCel1 := new(string)
					if !draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.IsNull() {
						*assigneeUserIDCel1 = draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserIDCel.ValueString()
					} else {
						assigneeUserIDCel1 = nil
					}
					var assigneeUserRef1 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef != nil {
						id28 := new(string)
						if !draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.IsNull() {
							*id28 = draftAutomationStepsItem.TaskAction.Reassign.AssigneeUserRef.ID.ValueString()
						} else {
							id28 = nil
						}
						assigneeUserRef1 = &shared.UserRef{
							ID: id28,
						}
					}
					subjectUserIDCel1 := new(string)
					if !draftAutomationStepsItem.TaskAction.Reassign.SubjectUserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.SubjectUserIDCel.IsNull() {
						*subjectUserIDCel1 = draftAutomationStepsItem.TaskAction.Reassign.SubjectUserIDCel.ValueString()
					} else {
						subjectUserIDCel1 = nil
					}
					var subjectUserRef1 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef != nil {
						id29 := new(string)
						if !draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.IsNull() {
							*id29 = draftAutomationStepsItem.TaskAction.Reassign.SubjectUserRef.ID.ValueString()
						} else {
							id29 = nil
						}
						subjectUserRef1 = &shared.UserRef{
							ID: id29,
						}
					}
					useSubjectUser15 := new(bool)
					if !draftAutomationStepsItem.TaskAction.Reassign.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.TaskAction.Reassign.UseSubjectUser.IsNull() {
						*useSubjectUser15 = draftAutomationStepsItem.TaskAction.Reassign.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser15 = nil
					}
					reassign1 = &shared.ReassignAction{
						AssigneeUserIDCel: assigneeUserIDCel1,
						AssigneeUserRef:   assigneeUserRef1,
						SubjectUserIDCel:  subjectUserIDCel1,
						SubjectUserRef:    subjectUserRef1,
						UseSubjectUser:    useSubjectUser15,
					}
				}
				var taskTypes1 []shared.TaskTypes
				if draftAutomationStepsItem.TaskAction.TaskTypes != nil {
					taskTypes1 = make([]shared.TaskTypes, 0, len(draftAutomationStepsItem.TaskAction.TaskTypes))
					for _, taskTypesItem1 := range draftAutomationStepsItem.TaskAction.TaskTypes {
						taskTypes1 = append(taskTypes1, shared.TaskTypes(taskTypesItem1.ValueString()))
					}
				}
				taskUserRelation1 := new(shared.TaskUserRelation)
				if !draftAutomationStepsItem.TaskAction.TaskUserRelation.IsUnknown() && !draftAutomationStepsItem.TaskAction.TaskUserRelation.IsNull() {
					*taskUserRelation1 = shared.TaskUserRelation(draftAutomationStepsItem.TaskAction.TaskUserRelation.ValueString())
				} else {
					taskUserRelation1 = nil
				}
				taskAction1 = &shared.TaskAction{
					Close:            close1,
					Reassign:         reassign1,
					TaskTypes:        taskTypes1,
					TaskUserRelation: taskUserRelation1,
				}
			}
			var unenrollFromAllAccessProfiles1 *shared.UnenrollFromAllAccessProfiles
			if draftAutomationStepsItem.UnenrollFromAllAccessProfiles != nil {
				var catalogIds1 []string
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
					catalogIds1 = make([]string, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
					for _, catalogIdsItem1 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
						catalogIds1 = append(catalogIds1, catalogIdsItem1.ValueString())
					}
				}
				catalogIdsCel1 := new(string)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsNull() {
					*catalogIdsCel1 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.ValueString()
				} else {
					catalogIdsCel1 = nil
				}
				useSubjectUser16 := new(bool)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsNull() {
					*useSubjectUser16 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser16 = nil
				}
				userIdsCel5 := new(string)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsNull() {
					*userIdsCel5 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.ValueString()
				} else {
					userIdsCel5 = nil
				}
				var userRefs5 []shared.UserRef
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
					userRefs5 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs))
					for _, userRefsItem5 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
						id30 := new(string)
						if !userRefsItem5.ID.IsUnknown() && !userRefsItem5.ID.IsNull() {
							*id30 = userRefsItem5.ID.ValueString()
						} else {
							id30 = nil
						}
						userRefs5 = append(userRefs5, shared.UserRef{
							ID: id30,
						})
					}
				}
				unenrollFromAllAccessProfiles1 = &shared.UnenrollFromAllAccessProfiles{
					CatalogIds:     catalogIds1,
					CatalogIdsCel:  catalogIdsCel1,
					UseSubjectUser: useSubjectUser16,
					UserIdsCel:     userIdsCel5,
					UserRefs:       userRefs5,
				}
			}
			var updateUser1 *shared.UpdateUser
			if draftAutomationStepsItem.UpdateUser != nil {
				useSubjectUser17 := new(bool)
				if !draftAutomationStepsItem.UpdateUser.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UseSubjectUser.IsNull() {
					*useSubjectUser17 = draftAutomationStepsItem.UpdateUser.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser17 = nil
				}
				userIDCel11 := new(string)
				if !draftAutomationStepsItem.UpdateUser.UserIDCel.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserIDCel.IsNull() {
					*userIDCel11 = draftAutomationStepsItem.UpdateUser.UserIDCel.ValueString()
				} else {
					userIDCel11 = nil
				}
				var userRef9 *shared.UserRef
				if draftAutomationStepsItem.UpdateUser.UserRef != nil {
					id31 := new(string)
					if !draftAutomationStepsItem.UpdateUser.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserRef.ID.IsNull() {
						*id31 = draftAutomationStepsItem.UpdateUser.UserRef.ID.ValueString()
					} else {
						id31 = nil
					}
					userRef9 = &shared.UserRef{
						ID: id31,
					}
				}
				userStatusCel1 := new(string)
				if !draftAutomationStepsItem.UpdateUser.UserStatusCel.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserStatusCel.IsNull() {
					*userStatusCel1 = draftAutomationStepsItem.UpdateUser.UserStatusCel.ValueString()
				} else {
					userStatusCel1 = nil
				}
				userStatusEnum1 := new(shared.UserStatusEnum)
				if !draftAutomationStepsItem.UpdateUser.UserStatusEnum.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserStatusEnum.IsNull() {
					*userStatusEnum1 = shared.UserStatusEnum(draftAutomationStepsItem.UpdateUser.UserStatusEnum.ValueString())
				} else {
					userStatusEnum1 = nil
				}
				updateUser1 = &shared.UpdateUser{
					UseSubjectUser: useSubjectUser17,
					UserIDCel:      userIDCel11,
					UserRef:        userRef9,
					UserStatusCel:  userStatusCel1,
					UserStatusEnum: userStatusEnum1,
				}
			}
			var waitForDuration1 *shared.WaitForDuration
			if draftAutomationStepsItem.WaitForDuration != nil {
				duration1 := new(string)
				if !draftAutomationStepsItem.WaitForDuration.Duration.IsUnknown() && !draftAutomationStepsItem.WaitForDuration.Duration.IsNull() {
					*duration1 = draftAutomationStepsItem.WaitForDuration.Duration.ValueString()
				} else {
					duration1 = nil
				}
				waitForDuration1 = &shared.WaitForDuration{
					Duration: duration1,
				}
			}
			var webhook1 *shared.Webhook
			if draftAutomationStepsItem.Webhook != nil {
				var payload1 *shared.Payload
				if draftAutomationStepsItem.Webhook.Payload != nil {
					payload1 = &shared.Payload{}
				}
				webhookId1 := new(string)
				if !draftAutomationStepsItem.Webhook.WebhookID.IsUnknown() && !draftAutomationStepsItem.Webhook.WebhookID.IsNull() {
					*webhookId1 = draftAutomationStepsItem.Webhook.WebhookID.ValueString()
				} else {
					webhookId1 = nil
				}
				webhookIDCel1 := new(string)
				if !draftAutomationStepsItem.Webhook.WebhookIDCel.IsUnknown() && !draftAutomationStepsItem.Webhook.WebhookIDCel.IsNull() {
					*webhookIDCel1 = draftAutomationStepsItem.Webhook.WebhookIDCel.ValueString()
				} else {
					webhookIDCel1 = nil
				}
				webhook1 = &shared.Webhook{
					Payload:      payload1,
					WebhookID:    webhookId1,
					WebhookIDCel: webhookIDCel1,
				}
			}
			draftAutomationSteps = append(draftAutomationSteps, shared.AutomationStep{
				CallFunction:                  callFunction1,
				ConnectorAction:               connectorAction1,
				ConnectorCreateAccount:        connectorCreateAccount1,
				CreateAccessReview:            createAccessReview1,
				CreateRevokeTasks:             createRevokeTasks1,
				GrantEntitlements:             grantEntitlements1,
				RemoveFromDelegation:          removeFromDelegation1,
				RunAutomation:                 runAutomation1,
				SendEmail:                     sendEmail1,
				SendSlackMessage:              sendSlackMessage1,
				SkipIfTrueCel:                 skipIfTrueCel1,
				StepDisplayName:               stepDisplayName1,
				StepName:                      stepName1,
				TaskAction:                    taskAction1,
				UnenrollFromAllAccessProfiles: unenrollFromAllAccessProfiles1,
				UpdateUser:                    updateUser1,
				WaitForDuration:               waitForDuration1,
				Webhook:                       webhook1,
			})
		}
	}
	var draftTriggers []shared.AutomationTrigger
	if r.DraftTriggers != nil {
		draftTriggers = make([]shared.AutomationTrigger, 0, len(r.DraftTriggers))
		for _, draftTriggersItem := range r.DraftTriggers {
			var appUserCreated *shared.AppUserCreatedTrigger
			if draftTriggersItem.AppUserCreated != nil {
				appId9 := new(string)
				if !draftTriggersItem.AppUserCreated.AppID.IsUnknown() && !draftTriggersItem.AppUserCreated.AppID.IsNull() {
					*appId9 = draftTriggersItem.AppUserCreated.AppID.ValueString()
				} else {
					appId9 = nil
				}
				appIDCel := new(string)
				if !draftTriggersItem.AppUserCreated.AppIDCel.IsUnknown() && !draftTriggersItem.AppUserCreated.AppIDCel.IsNull() {
					*appIDCel = draftTriggersItem.AppUserCreated.AppIDCel.ValueString()
				} else {
					appIDCel = nil
				}
				condition := new(string)
				if !draftTriggersItem.AppUserCreated.Condition.IsUnknown() && !draftTriggersItem.AppUserCreated.Condition.IsNull() {
					*condition = draftTriggersItem.AppUserCreated.Condition.ValueString()
				} else {
					condition = nil
				}
				appUserCreated = &shared.AppUserCreatedTrigger{
					AppID:     appId9,
					AppIDCel:  appIDCel,
					Condition: condition,
				}
			}
			var appUserUpdated *shared.AppUserUpdatedTrigger
			if draftTriggersItem.AppUserUpdated != nil {
				appId10 := new(string)
				if !draftTriggersItem.AppUserUpdated.AppID.IsUnknown() && !draftTriggersItem.AppUserUpdated.AppID.IsNull() {
					*appId10 = draftTriggersItem.AppUserUpdated.AppID.ValueString()
				} else {
					appId10 = nil
				}
				appIDCel1 := new(string)
				if !draftTriggersItem.AppUserUpdated.AppIDCel.IsUnknown() && !draftTriggersItem.AppUserUpdated.AppIDCel.IsNull() {
					*appIDCel1 = draftTriggersItem.AppUserUpdated.AppIDCel.ValueString()
				} else {
					appIDCel1 = nil
				}
				condition1 := new(string)
				if !draftTriggersItem.AppUserUpdated.Condition.IsUnknown() && !draftTriggersItem.AppUserUpdated.Condition.IsNull() {
					*condition1 = draftTriggersItem.AppUserUpdated.Condition.ValueString()
				} else {
					condition1 = nil
				}
				appUserUpdated = &shared.AppUserUpdatedTrigger{
					AppID:     appId10,
					AppIDCel:  appIDCel1,
					Condition: condition1,
				}
			}
			var form interface{}
			if !draftTriggersItem.Form.IsUnknown() && !draftTriggersItem.Form.IsNull() {
				_ = json.Unmarshal([]byte(draftTriggersItem.Form.ValueString()), &form)
			}
			var grantDeleted *shared.GrantDeletedTrigger
			if draftTriggersItem.GrantDeleted != nil {
				var grantTriggerFilter *shared.GrantTriggerFilter
				if draftTriggersItem.GrantDeleted.GrantTriggerFilter != nil {
					var accountFilter *shared.AccountFilter
					if draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter != nil {
						accountType := new(shared.AccountType)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType = shared.AccountType(draftTriggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType = nil
						}
						accountFilter = &shared.AccountFilter{
							AccountType: accountType,
						}
					}
					var entitlementFilter *shared.EntitlementFilter
					if draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs4 []shared.AppEntitlementRef
						if draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs4 = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem4 := range draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId11 := new(string)
								if !appEntitlementRefsItem4.AppID.IsUnknown() && !appEntitlementRefsItem4.AppID.IsNull() {
									*appId11 = appEntitlementRefsItem4.AppID.ValueString()
								} else {
									appId11 = nil
								}
								id32 := new(string)
								if !appEntitlementRefsItem4.ID.IsUnknown() && !appEntitlementRefsItem4.ID.IsNull() {
									*id32 = appEntitlementRefsItem4.ID.ValueString()
								} else {
									id32 = nil
								}
								appEntitlementRefs4 = append(appEntitlementRefs4, shared.AppEntitlementRef{
									AppID: appId11,
									ID:    id32,
								})
							}
						}
						appEntitlementRefsCel4 := new(string)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel4 = draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel4 = nil
						}
						appId12 := new(string)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId12 = draftTriggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId12 = nil
						}
						entitlementFilter = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs4,
							AppEntitlementRefsCel: appEntitlementRefsCel4,
							AppID:                 appId12,
						}
					}
					var grantFilter *shared.GrantFilter
					if draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType := new(shared.GrantFilterType)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType = shared.GrantFilterType(draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType = nil
						}
						grantJustificationType := new(shared.GrantJustificationType)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType = shared.GrantJustificationType(draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType = nil
						}
						grantSourceFilter := new(shared.GrantSourceFilter)
						if !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter = shared.GrantSourceFilter(draftTriggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter = nil
						}
						grantFilter = &shared.GrantFilter{
							GrantFilterType:        grantFilterType,
							GrantJustificationType: grantJustificationType,
							GrantSourceFilter:      grantSourceFilter,
						}
					}
					grantTriggerFilter = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter,
						EntitlementFilter: entitlementFilter,
						GrantFilter:       grantFilter,
					}
				}
				grantDeleted = &shared.GrantDeletedTrigger{
					GrantTriggerFilter: grantTriggerFilter,
				}
			}
			var grantFound *shared.GrantFoundTrigger
			if draftTriggersItem.GrantFound != nil {
				var grantTriggerFilter1 *shared.GrantTriggerFilter
				if draftTriggersItem.GrantFound.GrantTriggerFilter != nil {
					var accountFilter1 *shared.AccountFilter
					if draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter != nil {
						accountType1 := new(shared.AccountType)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType1 = shared.AccountType(draftTriggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType1 = nil
						}
						accountFilter1 = &shared.AccountFilter{
							AccountType: accountType1,
						}
					}
					var entitlementFilter1 *shared.EntitlementFilter
					if draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs5 []shared.AppEntitlementRef
						if draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs5 = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem5 := range draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId13 := new(string)
								if !appEntitlementRefsItem5.AppID.IsUnknown() && !appEntitlementRefsItem5.AppID.IsNull() {
									*appId13 = appEntitlementRefsItem5.AppID.ValueString()
								} else {
									appId13 = nil
								}
								id33 := new(string)
								if !appEntitlementRefsItem5.ID.IsUnknown() && !appEntitlementRefsItem5.ID.IsNull() {
									*id33 = appEntitlementRefsItem5.ID.ValueString()
								} else {
									id33 = nil
								}
								appEntitlementRefs5 = append(appEntitlementRefs5, shared.AppEntitlementRef{
									AppID: appId13,
									ID:    id33,
								})
							}
						}
						appEntitlementRefsCel5 := new(string)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel5 = draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel5 = nil
						}
						appId14 := new(string)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId14 = draftTriggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId14 = nil
						}
						entitlementFilter1 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs5,
							AppEntitlementRefsCel: appEntitlementRefsCel5,
							AppID:                 appId14,
						}
					}
					var grantFilter1 *shared.GrantFilter
					if draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType1 := new(shared.GrantFilterType)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType1 = shared.GrantFilterType(draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType1 = nil
						}
						grantJustificationType1 := new(shared.GrantJustificationType)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType1 = shared.GrantJustificationType(draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType1 = nil
						}
						grantSourceFilter1 := new(shared.GrantSourceFilter)
						if !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter1 = shared.GrantSourceFilter(draftTriggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter1 = nil
						}
						grantFilter1 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType1,
							GrantJustificationType: grantJustificationType1,
							GrantSourceFilter:      grantSourceFilter1,
						}
					}
					grantTriggerFilter1 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter1,
						EntitlementFilter: entitlementFilter1,
						GrantFilter:       grantFilter1,
					}
				}
				grantFound = &shared.GrantFoundTrigger{
					GrantTriggerFilter: grantTriggerFilter1,
				}
			}
			var manual *shared.ManualAutomationTrigger
			if draftTriggersItem.Manual != nil {
				manual = &shared.ManualAutomationTrigger{}
			}
			var schedule *shared.ScheduleTrigger
			if draftTriggersItem.Schedule != nil {
				advanced := new(bool)
				if !draftTriggersItem.Schedule.Advanced.IsUnknown() && !draftTriggersItem.Schedule.Advanced.IsNull() {
					*advanced = draftTriggersItem.Schedule.Advanced.ValueBool()
				} else {
					advanced = nil
				}
				cronSpec := new(string)
				if !draftTriggersItem.Schedule.CronSpec.IsUnknown() && !draftTriggersItem.Schedule.CronSpec.IsNull() {
					*cronSpec = draftTriggersItem.Schedule.CronSpec.ValueString()
				} else {
					cronSpec = nil
				}
				skipIfTrueCel2 := new(string)
				if !draftTriggersItem.Schedule.SkipIfTrueCel.IsUnknown() && !draftTriggersItem.Schedule.SkipIfTrueCel.IsNull() {
					*skipIfTrueCel2 = draftTriggersItem.Schedule.SkipIfTrueCel.ValueString()
				} else {
					skipIfTrueCel2 = nil
				}
				start := new(time.Time)
				if !draftTriggersItem.Schedule.Start.IsUnknown() && !draftTriggersItem.Schedule.Start.IsNull() {
					*start, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.Schedule.Start.ValueString())
				} else {
					start = nil
				}
				schedule = &shared.ScheduleTrigger{
					Advanced:      advanced,
					CronSpec:      cronSpec,
					SkipIfTrueCel: skipIfTrueCel2,
					Start:         start,
				}
			}
			var usageBasedRevocation *shared.UsageBasedRevocationTrigger
			if draftTriggersItem.UsageBasedRevocation != nil {
				appId15 := new(string)
				if !draftTriggersItem.UsageBasedRevocation.AppID.IsUnknown() && !draftTriggersItem.UsageBasedRevocation.AppID.IsNull() {
					*appId15 = draftTriggersItem.UsageBasedRevocation.AppID.ValueString()
				} else {
					appId15 = nil
				}
				enabledAt := new(time.Time)
				if !draftTriggersItem.UsageBasedRevocation.EnabledAt.IsUnknown() && !draftTriggersItem.UsageBasedRevocation.EnabledAt.IsNull() {
					*enabledAt, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.UsageBasedRevocation.EnabledAt.ValueString())
				} else {
					enabledAt = nil
				}
				var excludedGroupRefs []shared.AppEntitlementRef
				if draftTriggersItem.UsageBasedRevocation.ExcludedGroupRefs != nil {
					excludedGroupRefs = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.UsageBasedRevocation.ExcludedGroupRefs))
					for _, excludedGroupRefsItem := range draftTriggersItem.UsageBasedRevocation.ExcludedGroupRefs {
						appId16 := new(string)
						if !excludedGroupRefsItem.AppID.IsUnknown() && !excludedGroupRefsItem.AppID.IsNull() {
							*appId16 = excludedGroupRefsItem.AppID.ValueString()
						} else {
							appId16 = nil
						}
						id34 := new(string)
						if !excludedGroupRefsItem.ID.IsUnknown() && !excludedGroupRefsItem.ID.IsNull() {
							*id34 = excludedGroupRefsItem.ID.ValueString()
						} else {
							id34 = nil
						}
						excludedGroupRefs = append(excludedGroupRefs, shared.AppEntitlementRef{
							AppID: appId16,
							ID:    id34,
						})
					}
				}
				var excludedUserRefs []shared.UserRef
				if draftTriggersItem.UsageBasedRevocation.ExcludedUserRefs != nil {
					excludedUserRefs = make([]shared.UserRef, 0, len(draftTriggersItem.UsageBasedRevocation.ExcludedUserRefs))
					for _, excludedUserRefsItem := range draftTriggersItem.UsageBasedRevocation.ExcludedUserRefs {
						id35 := new(string)
						if !excludedUserRefsItem.ID.IsUnknown() && !excludedUserRefsItem.ID.IsNull() {
							*id35 = excludedUserRefsItem.ID.ValueString()
						} else {
							id35 = nil
						}
						excludedUserRefs = append(excludedUserRefs, shared.UserRef{
							ID: id35,
						})
					}
				}
				includeUsersWithNoActivity := new(bool)
				if !draftTriggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.IsUnknown() && !draftTriggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.IsNull() {
					*includeUsersWithNoActivity = draftTriggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.ValueBool()
				} else {
					includeUsersWithNoActivity = nil
				}
				var runDelayed *shared.RunDelayed
				if draftTriggersItem.UsageBasedRevocation.RunDelayed != nil {
					var coldStartDelayDays int64
					coldStartDelayDays = draftTriggersItem.UsageBasedRevocation.RunDelayed.ColdStartDelayDays.ValueInt64()

					runDelayed = &shared.RunDelayed{
						ColdStartDelayDays: coldStartDelayDays,
					}
				}
				var runImmediately *shared.RunImmediately
				if draftTriggersItem.UsageBasedRevocation.RunImmediately != nil {
					runImmediately = &shared.RunImmediately{}
				}
				var targetedAppUserTypes []shared.TargetedAppUserTypes
				if draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes != nil {
					targetedAppUserTypes = make([]shared.TargetedAppUserTypes, 0, len(draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes))
					for _, targetedAppUserTypesItem := range draftTriggersItem.UsageBasedRevocation.TargetedAppUserTypes {
						targetedAppUserTypes = append(targetedAppUserTypes, shared.TargetedAppUserTypes(targetedAppUserTypesItem.ValueString()))
					}
				}
				var targetedEntitlementRefs []shared.AppEntitlementRef
				if draftTriggersItem.UsageBasedRevocation.TargetedEntitlementRefs != nil {
					targetedEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.UsageBasedRevocation.TargetedEntitlementRefs))
					for _, targetedEntitlementRefsItem := range draftTriggersItem.UsageBasedRevocation.TargetedEntitlementRefs {
						appId17 := new(string)
						if !targetedEntitlementRefsItem.AppID.IsUnknown() && !targetedEntitlementRefsItem.AppID.IsNull() {
							*appId17 = targetedEntitlementRefsItem.AppID.ValueString()
						} else {
							appId17 = nil
						}
						id36 := new(string)
						if !targetedEntitlementRefsItem.ID.IsUnknown() && !targetedEntitlementRefsItem.ID.IsNull() {
							*id36 = targetedEntitlementRefsItem.ID.ValueString()
						} else {
							id36 = nil
						}
						targetedEntitlementRefs = append(targetedEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId17,
							ID:    id36,
						})
					}
				}
				unusedForDays := new(int64)
				if !draftTriggersItem.UsageBasedRevocation.UnusedForDays.IsUnknown() && !draftTriggersItem.UsageBasedRevocation.UnusedForDays.IsNull() {
					*unusedForDays = draftTriggersItem.UsageBasedRevocation.UnusedForDays.ValueInt64()
				} else {
					unusedForDays = nil
				}
				usageBasedRevocation = &shared.UsageBasedRevocationTrigger{
					AppID:                      appId15,
					EnabledAt:                  enabledAt,
					ExcludedGroupRefs:          excludedGroupRefs,
					ExcludedUserRefs:           excludedUserRefs,
					IncludeUsersWithNoActivity: includeUsersWithNoActivity,
					RunDelayed:                 runDelayed,
					RunImmediately:             runImmediately,
					TargetedAppUserTypes:       targetedAppUserTypes,
					TargetedEntitlementRefs:    targetedEntitlementRefs,
					UnusedForDays:              unusedForDays,
				}
			}
			var userCreated *shared.UserCreatedTrigger
			if draftTriggersItem.UserCreated != nil {
				condition2 := new(string)
				if !draftTriggersItem.UserCreated.Condition.IsUnknown() && !draftTriggersItem.UserCreated.Condition.IsNull() {
					*condition2 = draftTriggersItem.UserCreated.Condition.ValueString()
				} else {
					condition2 = nil
				}
				userCreated = &shared.UserCreatedTrigger{
					Condition: condition2,
				}
			}
			var userProfileChange *shared.UserProfileChangeTrigger
			if draftTriggersItem.UserProfileChange != nil {
				condition3 := new(string)
				if !draftTriggersItem.UserProfileChange.Condition.IsUnknown() && !draftTriggersItem.UserProfileChange.Condition.IsNull() {
					*condition3 = draftTriggersItem.UserProfileChange.Condition.ValueString()
				} else {
					condition3 = nil
				}
				userProfileChange = &shared.UserProfileChangeTrigger{
					Condition: condition3,
				}
			}
			var webhook2 *shared.WebhookAutomationTrigger
			if draftTriggersItem.Webhook != nil {
				var hmac *shared.WebhookListenerAuthHMAC
				if draftTriggersItem.Webhook.Hmac != nil {
					hmac = &shared.WebhookListenerAuthHMAC{}
				}
				var jwt *shared.WebhookListenerAuthJWT
				if draftTriggersItem.Webhook.Jwt != nil {
					jwksURL := new(string)
					if !draftTriggersItem.Webhook.Jwt.JwksURL.IsUnknown() && !draftTriggersItem.Webhook.Jwt.JwksURL.IsNull() {
						*jwksURL = draftTriggersItem.Webhook.Jwt.JwksURL.ValueString()
					} else {
						jwksURL = nil
					}
					jwt = &shared.WebhookListenerAuthJWT{
						JwksURL: jwksURL,
					}
				}
				listenerID := new(string)
				if !draftTriggersItem.Webhook.ListenerID.IsUnknown() && !draftTriggersItem.Webhook.ListenerID.IsNull() {
					*listenerID = draftTriggersItem.Webhook.ListenerID.ValueString()
				} else {
					listenerID = nil
				}
				webhook2 = &shared.WebhookAutomationTrigger{
					Hmac:       hmac,
					Jwt:        jwt,
					ListenerID: listenerID,
				}
			}
			draftTriggers = append(draftTriggers, shared.AutomationTrigger{
				AppUserCreated:       appUserCreated,
				AppUserUpdated:       appUserUpdated,
				Form:                 form,
				GrantDeleted:         grantDeleted,
				GrantFound:           grantFound,
				Manual:               manual,
				Schedule:             schedule,
				UsageBasedRevocation: usageBasedRevocation,
				UserCreated:          userCreated,
				UserProfileChange:    userProfileChange,
				Webhook:              webhook2,
			})
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	isDraft := new(bool)
	if !r.IsDraft.IsUnknown() && !r.IsDraft.IsNull() {
		*isDraft = r.IsDraft.ValueBool()
	} else {
		isDraft = nil
	}
	var triggers []shared.AutomationTrigger
	if r.Triggers != nil {
		triggers = make([]shared.AutomationTrigger, 0, len(r.Triggers))
		for _, triggersItem := range r.Triggers {
			var appUserCreated1 *shared.AppUserCreatedTrigger
			if triggersItem.AppUserCreated != nil {
				appId18 := new(string)
				if !triggersItem.AppUserCreated.AppID.IsUnknown() && !triggersItem.AppUserCreated.AppID.IsNull() {
					*appId18 = triggersItem.AppUserCreated.AppID.ValueString()
				} else {
					appId18 = nil
				}
				appIDCel2 := new(string)
				if !triggersItem.AppUserCreated.AppIDCel.IsUnknown() && !triggersItem.AppUserCreated.AppIDCel.IsNull() {
					*appIDCel2 = triggersItem.AppUserCreated.AppIDCel.ValueString()
				} else {
					appIDCel2 = nil
				}
				condition4 := new(string)
				if !triggersItem.AppUserCreated.Condition.IsUnknown() && !triggersItem.AppUserCreated.Condition.IsNull() {
					*condition4 = triggersItem.AppUserCreated.Condition.ValueString()
				} else {
					condition4 = nil
				}
				appUserCreated1 = &shared.AppUserCreatedTrigger{
					AppID:     appId18,
					AppIDCel:  appIDCel2,
					Condition: condition4,
				}
			}
			var appUserUpdated1 *shared.AppUserUpdatedTrigger
			if triggersItem.AppUserUpdated != nil {
				appId19 := new(string)
				if !triggersItem.AppUserUpdated.AppID.IsUnknown() && !triggersItem.AppUserUpdated.AppID.IsNull() {
					*appId19 = triggersItem.AppUserUpdated.AppID.ValueString()
				} else {
					appId19 = nil
				}
				appIDCel3 := new(string)
				if !triggersItem.AppUserUpdated.AppIDCel.IsUnknown() && !triggersItem.AppUserUpdated.AppIDCel.IsNull() {
					*appIDCel3 = triggersItem.AppUserUpdated.AppIDCel.ValueString()
				} else {
					appIDCel3 = nil
				}
				condition5 := new(string)
				if !triggersItem.AppUserUpdated.Condition.IsUnknown() && !triggersItem.AppUserUpdated.Condition.IsNull() {
					*condition5 = triggersItem.AppUserUpdated.Condition.ValueString()
				} else {
					condition5 = nil
				}
				appUserUpdated1 = &shared.AppUserUpdatedTrigger{
					AppID:     appId19,
					AppIDCel:  appIDCel3,
					Condition: condition5,
				}
			}
			var form1 interface{}
			if !triggersItem.Form.IsUnknown() && !triggersItem.Form.IsNull() {
				_ = json.Unmarshal([]byte(triggersItem.Form.ValueString()), &form1)
			}
			var grantDeleted1 *shared.GrantDeletedTrigger
			if triggersItem.GrantDeleted != nil {
				var grantTriggerFilter2 *shared.GrantTriggerFilter
				if triggersItem.GrantDeleted.GrantTriggerFilter != nil {
					var accountFilter2 *shared.AccountFilter
					if triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter != nil {
						accountType2 := new(shared.AccountType)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType2 = shared.AccountType(triggersItem.GrantDeleted.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType2 = nil
						}
						accountFilter2 = &shared.AccountFilter{
							AccountType: accountType2,
						}
					}
					var entitlementFilter2 *shared.EntitlementFilter
					if triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs6 []shared.AppEntitlementRef
						if triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs6 = make([]shared.AppEntitlementRef, 0, len(triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem6 := range triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId20 := new(string)
								if !appEntitlementRefsItem6.AppID.IsUnknown() && !appEntitlementRefsItem6.AppID.IsNull() {
									*appId20 = appEntitlementRefsItem6.AppID.ValueString()
								} else {
									appId20 = nil
								}
								id37 := new(string)
								if !appEntitlementRefsItem6.ID.IsUnknown() && !appEntitlementRefsItem6.ID.IsNull() {
									*id37 = appEntitlementRefsItem6.ID.ValueString()
								} else {
									id37 = nil
								}
								appEntitlementRefs6 = append(appEntitlementRefs6, shared.AppEntitlementRef{
									AppID: appId20,
									ID:    id37,
								})
							}
						}
						appEntitlementRefsCel6 := new(string)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel6 = triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel6 = nil
						}
						appId21 := new(string)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId21 = triggersItem.GrantDeleted.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId21 = nil
						}
						entitlementFilter2 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs6,
							AppEntitlementRefsCel: appEntitlementRefsCel6,
							AppID:                 appId21,
						}
					}
					var grantFilter2 *shared.GrantFilter
					if triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType2 := new(shared.GrantFilterType)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType2 = shared.GrantFilterType(triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType2 = nil
						}
						grantJustificationType2 := new(shared.GrantJustificationType)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType2 = shared.GrantJustificationType(triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType2 = nil
						}
						grantSourceFilter2 := new(shared.GrantSourceFilter)
						if !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter2 = shared.GrantSourceFilter(triggersItem.GrantDeleted.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter2 = nil
						}
						grantFilter2 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType2,
							GrantJustificationType: grantJustificationType2,
							GrantSourceFilter:      grantSourceFilter2,
						}
					}
					grantTriggerFilter2 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter2,
						EntitlementFilter: entitlementFilter2,
						GrantFilter:       grantFilter2,
					}
				}
				grantDeleted1 = &shared.GrantDeletedTrigger{
					GrantTriggerFilter: grantTriggerFilter2,
				}
			}
			var grantFound1 *shared.GrantFoundTrigger
			if triggersItem.GrantFound != nil {
				var grantTriggerFilter3 *shared.GrantTriggerFilter
				if triggersItem.GrantFound.GrantTriggerFilter != nil {
					var accountFilter3 *shared.AccountFilter
					if triggersItem.GrantFound.GrantTriggerFilter.AccountFilter != nil {
						accountType3 := new(shared.AccountType)
						if !triggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType3 = shared.AccountType(triggersItem.GrantFound.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType3 = nil
						}
						accountFilter3 = &shared.AccountFilter{
							AccountType: accountType3,
						}
					}
					var entitlementFilter3 *shared.EntitlementFilter
					if triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs7 []shared.AppEntitlementRef
						if triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs7 = make([]shared.AppEntitlementRef, 0, len(triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem7 := range triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId22 := new(string)
								if !appEntitlementRefsItem7.AppID.IsUnknown() && !appEntitlementRefsItem7.AppID.IsNull() {
									*appId22 = appEntitlementRefsItem7.AppID.ValueString()
								} else {
									appId22 = nil
								}
								id38 := new(string)
								if !appEntitlementRefsItem7.ID.IsUnknown() && !appEntitlementRefsItem7.ID.IsNull() {
									*id38 = appEntitlementRefsItem7.ID.ValueString()
								} else {
									id38 = nil
								}
								appEntitlementRefs7 = append(appEntitlementRefs7, shared.AppEntitlementRef{
									AppID: appId22,
									ID:    id38,
								})
							}
						}
						appEntitlementRefsCel7 := new(string)
						if !triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel7 = triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel7 = nil
						}
						appId23 := new(string)
						if !triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId23 = triggersItem.GrantFound.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId23 = nil
						}
						entitlementFilter3 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs7,
							AppEntitlementRefsCel: appEntitlementRefsCel7,
							AppID:                 appId23,
						}
					}
					var grantFilter3 *shared.GrantFilter
					if triggersItem.GrantFound.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType3 := new(shared.GrantFilterType)
						if !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType3 = shared.GrantFilterType(triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType3 = nil
						}
						grantJustificationType3 := new(shared.GrantJustificationType)
						if !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType3 = shared.GrantJustificationType(triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType3 = nil
						}
						grantSourceFilter3 := new(shared.GrantSourceFilter)
						if !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter3 = shared.GrantSourceFilter(triggersItem.GrantFound.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter3 = nil
						}
						grantFilter3 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType3,
							GrantJustificationType: grantJustificationType3,
							GrantSourceFilter:      grantSourceFilter3,
						}
					}
					grantTriggerFilter3 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter3,
						EntitlementFilter: entitlementFilter3,
						GrantFilter:       grantFilter3,
					}
				}
				grantFound1 = &shared.GrantFoundTrigger{
					GrantTriggerFilter: grantTriggerFilter3,
				}
			}
			var manual1 *shared.ManualAutomationTrigger
			if triggersItem.Manual != nil {
				manual1 = &shared.ManualAutomationTrigger{}
			}
			var schedule1 *shared.ScheduleTrigger
			if triggersItem.Schedule != nil {
				advanced1 := new(bool)
				if !triggersItem.Schedule.Advanced.IsUnknown() && !triggersItem.Schedule.Advanced.IsNull() {
					*advanced1 = triggersItem.Schedule.Advanced.ValueBool()
				} else {
					advanced1 = nil
				}
				cronSpec1 := new(string)
				if !triggersItem.Schedule.CronSpec.IsUnknown() && !triggersItem.Schedule.CronSpec.IsNull() {
					*cronSpec1 = triggersItem.Schedule.CronSpec.ValueString()
				} else {
					cronSpec1 = nil
				}
				skipIfTrueCel3 := new(string)
				if !triggersItem.Schedule.SkipIfTrueCel.IsUnknown() && !triggersItem.Schedule.SkipIfTrueCel.IsNull() {
					*skipIfTrueCel3 = triggersItem.Schedule.SkipIfTrueCel.ValueString()
				} else {
					skipIfTrueCel3 = nil
				}
				start1 := new(time.Time)
				if !triggersItem.Schedule.Start.IsUnknown() && !triggersItem.Schedule.Start.IsNull() {
					*start1, _ = time.Parse(time.RFC3339Nano, triggersItem.Schedule.Start.ValueString())
				} else {
					start1 = nil
				}
				schedule1 = &shared.ScheduleTrigger{
					Advanced:      advanced1,
					CronSpec:      cronSpec1,
					SkipIfTrueCel: skipIfTrueCel3,
					Start:         start1,
				}
			}
			var usageBasedRevocation1 *shared.UsageBasedRevocationTrigger
			if triggersItem.UsageBasedRevocation != nil {
				appId24 := new(string)
				if !triggersItem.UsageBasedRevocation.AppID.IsUnknown() && !triggersItem.UsageBasedRevocation.AppID.IsNull() {
					*appId24 = triggersItem.UsageBasedRevocation.AppID.ValueString()
				} else {
					appId24 = nil
				}
				enabledAt1 := new(time.Time)
				if !triggersItem.UsageBasedRevocation.EnabledAt.IsUnknown() && !triggersItem.UsageBasedRevocation.EnabledAt.IsNull() {
					*enabledAt1, _ = time.Parse(time.RFC3339Nano, triggersItem.UsageBasedRevocation.EnabledAt.ValueString())
				} else {
					enabledAt1 = nil
				}
				var excludedGroupRefs1 []shared.AppEntitlementRef
				if triggersItem.UsageBasedRevocation.ExcludedGroupRefs != nil {
					excludedGroupRefs1 = make([]shared.AppEntitlementRef, 0, len(triggersItem.UsageBasedRevocation.ExcludedGroupRefs))
					for _, excludedGroupRefsItem1 := range triggersItem.UsageBasedRevocation.ExcludedGroupRefs {
						appId25 := new(string)
						if !excludedGroupRefsItem1.AppID.IsUnknown() && !excludedGroupRefsItem1.AppID.IsNull() {
							*appId25 = excludedGroupRefsItem1.AppID.ValueString()
						} else {
							appId25 = nil
						}
						id39 := new(string)
						if !excludedGroupRefsItem1.ID.IsUnknown() && !excludedGroupRefsItem1.ID.IsNull() {
							*id39 = excludedGroupRefsItem1.ID.ValueString()
						} else {
							id39 = nil
						}
						excludedGroupRefs1 = append(excludedGroupRefs1, shared.AppEntitlementRef{
							AppID: appId25,
							ID:    id39,
						})
					}
				}
				var excludedUserRefs1 []shared.UserRef
				if triggersItem.UsageBasedRevocation.ExcludedUserRefs != nil {
					excludedUserRefs1 = make([]shared.UserRef, 0, len(triggersItem.UsageBasedRevocation.ExcludedUserRefs))
					for _, excludedUserRefsItem1 := range triggersItem.UsageBasedRevocation.ExcludedUserRefs {
						id40 := new(string)
						if !excludedUserRefsItem1.ID.IsUnknown() && !excludedUserRefsItem1.ID.IsNull() {
							*id40 = excludedUserRefsItem1.ID.ValueString()
						} else {
							id40 = nil
						}
						excludedUserRefs1 = append(excludedUserRefs1, shared.UserRef{
							ID: id40,
						})
					}
				}
				includeUsersWithNoActivity1 := new(bool)
				if !triggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.IsUnknown() && !triggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.IsNull() {
					*includeUsersWithNoActivity1 = triggersItem.UsageBasedRevocation.IncludeUsersWithNoActivity.ValueBool()
				} else {
					includeUsersWithNoActivity1 = nil
				}
				var runDelayed1 *shared.RunDelayed
				if triggersItem.UsageBasedRevocation.RunDelayed != nil {
					var coldStartDelayDays1 int64
					coldStartDelayDays1 = triggersItem.UsageBasedRevocation.RunDelayed.ColdStartDelayDays.ValueInt64()

					runDelayed1 = &shared.RunDelayed{
						ColdStartDelayDays: coldStartDelayDays1,
					}
				}
				var runImmediately1 *shared.RunImmediately
				if triggersItem.UsageBasedRevocation.RunImmediately != nil {
					runImmediately1 = &shared.RunImmediately{}
				}
				var targetedAppUserTypes1 []shared.TargetedAppUserTypes
				if triggersItem.UsageBasedRevocation.TargetedAppUserTypes != nil {
					targetedAppUserTypes1 = make([]shared.TargetedAppUserTypes, 0, len(triggersItem.UsageBasedRevocation.TargetedAppUserTypes))
					for _, targetedAppUserTypesItem1 := range triggersItem.UsageBasedRevocation.TargetedAppUserTypes {
						targetedAppUserTypes1 = append(targetedAppUserTypes1, shared.TargetedAppUserTypes(targetedAppUserTypesItem1.ValueString()))
					}
				}
				var targetedEntitlementRefs1 []shared.AppEntitlementRef
				if triggersItem.UsageBasedRevocation.TargetedEntitlementRefs != nil {
					targetedEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(triggersItem.UsageBasedRevocation.TargetedEntitlementRefs))
					for _, targetedEntitlementRefsItem1 := range triggersItem.UsageBasedRevocation.TargetedEntitlementRefs {
						appId26 := new(string)
						if !targetedEntitlementRefsItem1.AppID.IsUnknown() && !targetedEntitlementRefsItem1.AppID.IsNull() {
							*appId26 = targetedEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId26 = nil
						}
						id41 := new(string)
						if !targetedEntitlementRefsItem1.ID.IsUnknown() && !targetedEntitlementRefsItem1.ID.IsNull() {
							*id41 = targetedEntitlementRefsItem1.ID.ValueString()
						} else {
							id41 = nil
						}
						targetedEntitlementRefs1 = append(targetedEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId26,
							ID:    id41,
						})
					}
				}
				unusedForDays1 := new(int64)
				if !triggersItem.UsageBasedRevocation.UnusedForDays.IsUnknown() && !triggersItem.UsageBasedRevocation.UnusedForDays.IsNull() {
					*unusedForDays1 = triggersItem.UsageBasedRevocation.UnusedForDays.ValueInt64()
				} else {
					unusedForDays1 = nil
				}
				usageBasedRevocation1 = &shared.UsageBasedRevocationTrigger{
					AppID:                      appId24,
					EnabledAt:                  enabledAt1,
					ExcludedGroupRefs:          excludedGroupRefs1,
					ExcludedUserRefs:           excludedUserRefs1,
					IncludeUsersWithNoActivity: includeUsersWithNoActivity1,
					RunDelayed:                 runDelayed1,
					RunImmediately:             runImmediately1,
					TargetedAppUserTypes:       targetedAppUserTypes1,
					TargetedEntitlementRefs:    targetedEntitlementRefs1,
					UnusedForDays:              unusedForDays1,
				}
			}
			var userCreated1 *shared.UserCreatedTrigger
			if triggersItem.UserCreated != nil {
				condition6 := new(string)
				if !triggersItem.UserCreated.Condition.IsUnknown() && !triggersItem.UserCreated.Condition.IsNull() {
					*condition6 = triggersItem.UserCreated.Condition.ValueString()
				} else {
					condition6 = nil
				}
				userCreated1 = &shared.UserCreatedTrigger{
					Condition: condition6,
				}
			}
			var userProfileChange1 *shared.UserProfileChangeTrigger
			if triggersItem.UserProfileChange != nil {
				condition7 := new(string)
				if !triggersItem.UserProfileChange.Condition.IsUnknown() && !triggersItem.UserProfileChange.Condition.IsNull() {
					*condition7 = triggersItem.UserProfileChange.Condition.ValueString()
				} else {
					condition7 = nil
				}
				userProfileChange1 = &shared.UserProfileChangeTrigger{
					Condition: condition7,
				}
			}
			var webhook3 *shared.WebhookAutomationTrigger
			if triggersItem.Webhook != nil {
				var hmac1 *shared.WebhookListenerAuthHMAC
				if triggersItem.Webhook.Hmac != nil {
					hmac1 = &shared.WebhookListenerAuthHMAC{}
				}
				var jwt1 *shared.WebhookListenerAuthJWT
				if triggersItem.Webhook.Jwt != nil {
					jwksUrl1 := new(string)
					if !triggersItem.Webhook.Jwt.JwksURL.IsUnknown() && !triggersItem.Webhook.Jwt.JwksURL.IsNull() {
						*jwksUrl1 = triggersItem.Webhook.Jwt.JwksURL.ValueString()
					} else {
						jwksUrl1 = nil
					}
					jwt1 = &shared.WebhookListenerAuthJWT{
						JwksURL: jwksUrl1,
					}
				}
				listenerId1 := new(string)
				if !triggersItem.Webhook.ListenerID.IsUnknown() && !triggersItem.Webhook.ListenerID.IsNull() {
					*listenerId1 = triggersItem.Webhook.ListenerID.ValueString()
				} else {
					listenerId1 = nil
				}
				webhook3 = &shared.WebhookAutomationTrigger{
					Hmac:       hmac1,
					Jwt:        jwt1,
					ListenerID: listenerId1,
				}
			}
			triggers = append(triggers, shared.AutomationTrigger{
				AppUserCreated:       appUserCreated1,
				AppUserUpdated:       appUserUpdated1,
				Form:                 form1,
				GrantDeleted:         grantDeleted1,
				GrantFound:           grantFound1,
				Manual:               manual1,
				Schedule:             schedule1,
				UsageBasedRevocation: usageBasedRevocation1,
				UserCreated:          userCreated1,
				UserProfileChange:    userProfileChange1,
				Webhook:              webhook3,
			})
		}
	}
	out := shared.CreateAutomationRequest{
		AppID:                appID,
		AutomationSteps:      automationSteps,
		Context:              contextVar2,
		Description:          description,
		DisplayName:          displayName,
		DraftAutomationSteps: draftAutomationSteps,
		DraftTriggers:        draftTriggers,
		Enabled:              enabled,
		IsDraft:              isDraft,
		Triggers:             triggers,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToSharedUpdateAutomationRequest(ctx context.Context) (*shared.UpdateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	automation, automationDiags := r.ToSharedAutomationInput(ctx)
	diags.Append(automationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateAutomationRequest{
		Automation: automation,
	}

	return &out, diags
}
