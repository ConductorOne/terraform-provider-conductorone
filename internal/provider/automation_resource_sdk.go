// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AutomationResourceModel) RefreshFromSharedAutomation(ctx context.Context, resp *shared.Automation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppID = types.StringPointerValue(resp.AppID)
		if resp.AutomationContext == nil {
			r.AutomationContext = nil
		} else {
			r.AutomationContext = &tfTypes.AutomationContext{}
			if resp.AutomationContext.Context == nil {
				r.AutomationContext.Context = nil
			} else {
				r.AutomationContext.Context = &tfTypes.Context{}
			}
		}
		if resp.AutomationSteps != nil {
			r.AutomationSteps = []tfTypes.AutomationStep{}

			for _, automationStepsItem := range resp.AutomationSteps {
				var automationSteps tfTypes.AutomationStep

				if automationStepsItem.AccountLifecycleAction == nil {
					automationSteps.AccountLifecycleAction = nil
				} else {
					automationSteps.AccountLifecycleAction = &tfTypes.AccountLifecycleAction{}
					if automationStepsItem.AccountLifecycleAction.AccountInContext == nil {
						automationSteps.AccountLifecycleAction.AccountInContext = nil
					} else {
						automationSteps.AccountLifecycleAction.AccountInContext = &tfTypes.AccountInContext{}
					}
					if automationStepsItem.AccountLifecycleAction.AccountRef == nil {
						automationSteps.AccountLifecycleAction.AccountRef = nil
					} else {
						automationSteps.AccountLifecycleAction.AccountRef = &tfTypes.AccountRef{}
						automationSteps.AccountLifecycleAction.AccountRef.AccountIDCel = types.StringPointerValue(automationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel)
					}
					automationSteps.AccountLifecycleAction.ActionName = types.StringPointerValue(automationStepsItem.AccountLifecycleAction.ActionName)
					if automationStepsItem.AccountLifecycleAction.ConnectorRef == nil {
						automationSteps.AccountLifecycleAction.ConnectorRef = nil
					} else {
						automationSteps.AccountLifecycleAction.ConnectorRef = &tfTypes.ConnectorRef{}
						automationSteps.AccountLifecycleAction.ConnectorRef.AppID = types.StringPointerValue(automationStepsItem.AccountLifecycleAction.ConnectorRef.AppID)
						automationSteps.AccountLifecycleAction.ConnectorRef.ID = types.StringPointerValue(automationStepsItem.AccountLifecycleAction.ConnectorRef.ID)
					}
				}
				if automationStepsItem.CallFunction == nil {
					automationSteps.CallFunction = nil
				} else {
					automationSteps.CallFunction = &tfTypes.CallFunction{}
					if len(automationStepsItem.CallFunction.Args) > 0 {
						automationSteps.CallFunction.Args = make(map[string]types.String, len(automationStepsItem.CallFunction.Args))
						for key, value := range automationStepsItem.CallFunction.Args {
							automationSteps.CallFunction.Args[key] = types.StringValue(value)
						}
					}
					automationSteps.CallFunction.FunctionID = types.StringPointerValue(automationStepsItem.CallFunction.FunctionID)
				}
				if automationStepsItem.ConnectorAction == nil {
					automationSteps.ConnectorAction = nil
				} else {
					automationSteps.ConnectorAction = &tfTypes.ConnectorAction{}
					automationSteps.ConnectorAction.ActionName = types.StringPointerValue(automationStepsItem.ConnectorAction.ActionName)
					if automationStepsItem.ConnectorAction.ArgsTemplate == nil {
						automationSteps.ConnectorAction.ArgsTemplate = nil
					} else {
						automationSteps.ConnectorAction.ArgsTemplate = &tfTypes.ArgsTemplate{}
					}
					if automationStepsItem.ConnectorAction.ConnectorRef == nil {
						automationSteps.ConnectorAction.ConnectorRef = nil
					} else {
						automationSteps.ConnectorAction.ConnectorRef = &tfTypes.ConnectorRef{}
						automationSteps.ConnectorAction.ConnectorRef.AppID = types.StringPointerValue(automationStepsItem.ConnectorAction.ConnectorRef.AppID)
						automationSteps.ConnectorAction.ConnectorRef.ID = types.StringPointerValue(automationStepsItem.ConnectorAction.ConnectorRef.ID)
					}
				}
				if automationStepsItem.ConnectorCreateAccount == nil {
					automationSteps.ConnectorCreateAccount = nil
				} else {
					automationSteps.ConnectorCreateAccount = &tfTypes.ConnectorCreateAccount{}
					if automationStepsItem.ConnectorCreateAccount.ConnectorRef == nil {
						automationSteps.ConnectorCreateAccount.ConnectorRef = nil
					} else {
						automationSteps.ConnectorCreateAccount.ConnectorRef = &tfTypes.ConnectorRef{}
						automationSteps.ConnectorCreateAccount.ConnectorRef.AppID = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID)
						automationSteps.ConnectorCreateAccount.ConnectorRef.ID = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID)
					}
					automationSteps.ConnectorCreateAccount.UserIDCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserIDCel)
					if automationStepsItem.ConnectorCreateAccount.UserProperties == nil {
						automationSteps.ConnectorCreateAccount.UserProperties = nil
					} else {
						automationSteps.ConnectorCreateAccount.UserProperties = &tfTypes.UserProperties{}
						automationSteps.ConnectorCreateAccount.UserProperties.DisplayNameCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel)
						automationSteps.ConnectorCreateAccount.UserProperties.EmailCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel)
						automationSteps.ConnectorCreateAccount.UserProperties.ProfileAttributeCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel)
						automationSteps.ConnectorCreateAccount.UserProperties.UsernameCel = types.StringPointerValue(automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel)
					}
				}
				if automationStepsItem.CreateAccessReview == nil {
					automationSteps.CreateAccessReview = nil
				} else {
					automationSteps.CreateAccessReview = &tfTypes.CreateAccessReview{}
					automationSteps.CreateAccessReview.AccessReviewTemplateCel = types.StringPointerValue(automationStepsItem.CreateAccessReview.AccessReviewTemplateCel)
					automationSteps.CreateAccessReview.AccessReviewTemplateID = types.StringPointerValue(automationStepsItem.CreateAccessReview.AccessReviewTemplateID)
					automationSteps.CreateAccessReview.CampaignName = types.StringPointerValue(automationStepsItem.CreateAccessReview.CampaignName)
					automationSteps.CreateAccessReview.UserIdsCel = types.StringPointerValue(automationStepsItem.CreateAccessReview.UserIdsCel)
					if automationStepsItem.CreateAccessReview.UserRefs != nil {
						automationSteps.CreateAccessReview.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem := range automationStepsItem.CreateAccessReview.UserRefs {
							var userRefs tfTypes.UserRef

							userRefs.ID = types.StringPointerValue(userRefsItem.ID)

							automationSteps.CreateAccessReview.UserRefs = append(automationSteps.CreateAccessReview.UserRefs, userRefs)
						}
					}
					automationSteps.CreateAccessReview.UseSubjectUser = types.BoolPointerValue(automationStepsItem.CreateAccessReview.UseSubjectUser)
				}
				if automationStepsItem.CreateRevokeTasks == nil {
					automationSteps.CreateRevokeTasks = nil
				} else {
					automationSteps.CreateRevokeTasks = &tfTypes.CreateRevokeTasks{}
					if automationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
						automationSteps.CreateRevokeTasks.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, appEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
							var appEntitlementRefs tfTypes.AppEntitlementRef

							appEntitlementRefs.AppID = types.StringPointerValue(appEntitlementRefsItem.AppID)
							appEntitlementRefs.ID = types.StringPointerValue(appEntitlementRefsItem.ID)

							automationSteps.CreateRevokeTasks.AppEntitlementRefs = append(automationSteps.CreateRevokeTasks.AppEntitlementRefs, appEntitlementRefs)
						}
					}
					automationSteps.CreateRevokeTasks.AppEntitlementRefsCel = types.StringPointerValue(automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel)
					if automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs != nil {
						automationSteps.CreateRevokeTasks.ExcludedAppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, excludedAppEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs {
							var excludedAppEntitlementRefs tfTypes.AppEntitlementRef

							excludedAppEntitlementRefs.AppID = types.StringPointerValue(excludedAppEntitlementRefsItem.AppID)
							excludedAppEntitlementRefs.ID = types.StringPointerValue(excludedAppEntitlementRefsItem.ID)

							automationSteps.CreateRevokeTasks.ExcludedAppEntitlementRefs = append(automationSteps.CreateRevokeTasks.ExcludedAppEntitlementRefs, excludedAppEntitlementRefs)
						}
					}
					automationSteps.CreateRevokeTasks.ExcludedAppEntitlementRefsCel = types.StringPointerValue(automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel)
					automationSteps.CreateRevokeTasks.RevokeAll = types.BoolPointerValue(automationStepsItem.CreateRevokeTasks.RevokeAll)
					automationSteps.CreateRevokeTasks.UserIDCel = types.StringPointerValue(automationStepsItem.CreateRevokeTasks.UserIDCel)
					if automationStepsItem.CreateRevokeTasks.UserRef == nil {
						automationSteps.CreateRevokeTasks.UserRef = nil
					} else {
						automationSteps.CreateRevokeTasks.UserRef = &tfTypes.UserRef{}
						automationSteps.CreateRevokeTasks.UserRef.ID = types.StringPointerValue(automationStepsItem.CreateRevokeTasks.UserRef.ID)
					}
					automationSteps.CreateRevokeTasks.UseSubjectUser = types.BoolPointerValue(automationStepsItem.CreateRevokeTasks.UseSubjectUser)
				}
				if automationStepsItem.GrantEntitlements == nil {
					automationSteps.GrantEntitlements = nil
				} else {
					automationSteps.GrantEntitlements = &tfTypes.GrantEntitlements{}
					if automationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
						automationSteps.GrantEntitlements.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, appEntitlementRefsItem1 := range automationStepsItem.GrantEntitlements.AppEntitlementRefs {
							var appEntitlementRefs1 tfTypes.AppEntitlementRef

							appEntitlementRefs1.AppID = types.StringPointerValue(appEntitlementRefsItem1.AppID)
							appEntitlementRefs1.ID = types.StringPointerValue(appEntitlementRefsItem1.ID)

							automationSteps.GrantEntitlements.AppEntitlementRefs = append(automationSteps.GrantEntitlements.AppEntitlementRefs, appEntitlementRefs1)
						}
					}
					automationSteps.GrantEntitlements.AppEntitlementRefsCel = types.StringPointerValue(automationStepsItem.GrantEntitlements.AppEntitlementRefsCel)
					automationSteps.GrantEntitlements.UserIDCel = types.StringPointerValue(automationStepsItem.GrantEntitlements.UserIDCel)
					if automationStepsItem.GrantEntitlements.UserRef == nil {
						automationSteps.GrantEntitlements.UserRef = nil
					} else {
						automationSteps.GrantEntitlements.UserRef = &tfTypes.UserRef{}
						automationSteps.GrantEntitlements.UserRef.ID = types.StringPointerValue(automationStepsItem.GrantEntitlements.UserRef.ID)
					}
					automationSteps.GrantEntitlements.UseSubjectUser = types.BoolPointerValue(automationStepsItem.GrantEntitlements.UseSubjectUser)
				}
				if automationStepsItem.RemoveFromDelegation == nil {
					automationSteps.RemoveFromDelegation = nil
				} else {
					automationSteps.RemoveFromDelegation = &tfTypes.RemoveFromDelegation{}
					automationSteps.RemoveFromDelegation.ReplacementUserIDCel = types.StringPointerValue(automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel)
					automationSteps.RemoveFromDelegation.UserIDCel = types.StringPointerValue(automationStepsItem.RemoveFromDelegation.UserIDCel)
					if automationStepsItem.RemoveFromDelegation.UserRef == nil {
						automationSteps.RemoveFromDelegation.UserRef = nil
					} else {
						automationSteps.RemoveFromDelegation.UserRef = &tfTypes.UserRef{}
						automationSteps.RemoveFromDelegation.UserRef.ID = types.StringPointerValue(automationStepsItem.RemoveFromDelegation.UserRef.ID)
					}
					if automationStepsItem.RemoveFromDelegation.UserRef1 == nil {
						automationSteps.RemoveFromDelegation.UserRef1 = nil
					} else {
						automationSteps.RemoveFromDelegation.UserRef1 = &tfTypes.UserRef{}
						automationSteps.RemoveFromDelegation.UserRef1.ID = types.StringPointerValue(automationStepsItem.RemoveFromDelegation.UserRef1.ID)
					}
					automationSteps.RemoveFromDelegation.UseSubjectUser = types.BoolPointerValue(automationStepsItem.RemoveFromDelegation.UseSubjectUser)
				}
				if automationStepsItem.RunAutomation == nil {
					automationSteps.RunAutomation = nil
				} else {
					automationSteps.RunAutomation = &tfTypes.RunAutomation{}
					if automationStepsItem.RunAutomation.AutomationContext == nil {
						automationSteps.RunAutomation.AutomationContext = nil
					} else {
						automationSteps.RunAutomation.AutomationContext = &tfTypes.AutomationContext{}
						if automationStepsItem.RunAutomation.AutomationContext.Context == nil {
							automationSteps.RunAutomation.AutomationContext.Context = nil
						} else {
							automationSteps.RunAutomation.AutomationContext.Context = &tfTypes.Context{}
						}
					}
					automationSteps.RunAutomation.AutomationTemplateIDCel = types.StringPointerValue(automationStepsItem.RunAutomation.AutomationTemplateIDCel)
					if automationStepsItem.RunAutomation.AutomationTemplateRef == nil {
						automationSteps.RunAutomation.AutomationTemplateRef = nil
					} else {
						automationSteps.RunAutomation.AutomationTemplateRef = &tfTypes.AutomationTemplateRef{}
						automationSteps.RunAutomation.AutomationTemplateRef.ID = types.StringPointerValue(automationStepsItem.RunAutomation.AutomationTemplateRef.ID)
					}
				}
				if automationStepsItem.SendEmail == nil {
					automationSteps.SendEmail = nil
				} else {
					automationSteps.SendEmail = &tfTypes.SendEmail{}
					automationSteps.SendEmail.Body = types.StringPointerValue(automationStepsItem.SendEmail.Body)
					automationSteps.SendEmail.Subject = types.StringPointerValue(automationStepsItem.SendEmail.Subject)
					automationSteps.SendEmail.Title = types.StringPointerValue(automationStepsItem.SendEmail.Title)
					automationSteps.SendEmail.UserIdsCel = types.StringPointerValue(automationStepsItem.SendEmail.UserIdsCel)
					if automationStepsItem.SendEmail.UserRefs != nil {
						automationSteps.SendEmail.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem1 := range automationStepsItem.SendEmail.UserRefs {
							var userRefs1 tfTypes.UserRef

							userRefs1.ID = types.StringPointerValue(userRefsItem1.ID)

							automationSteps.SendEmail.UserRefs = append(automationSteps.SendEmail.UserRefs, userRefs1)
						}
					}
					automationSteps.SendEmail.UseSubjectUser = types.BoolPointerValue(automationStepsItem.SendEmail.UseSubjectUser)
				}
				if automationStepsItem.SendSlackMessage == nil {
					automationSteps.SendSlackMessage = nil
				} else {
					automationSteps.SendSlackMessage = &tfTypes.SendSlackMessage{}
					automationSteps.SendSlackMessage.Body = types.StringPointerValue(automationStepsItem.SendSlackMessage.Body)
					automationSteps.SendSlackMessage.ChannelName = types.StringPointerValue(automationStepsItem.SendSlackMessage.ChannelName)
					automationSteps.SendSlackMessage.ChannelNameCel = types.StringPointerValue(automationStepsItem.SendSlackMessage.ChannelNameCel)
				}
				automationSteps.SkipIfTrueCel = types.StringPointerValue(automationStepsItem.SkipIfTrueCel)
				automationSteps.StepDisplayName = types.StringPointerValue(automationStepsItem.StepDisplayName)
				automationSteps.StepName = types.StringPointerValue(automationStepsItem.StepName)
				if automationStepsItem.TaskAction == nil {
					automationSteps.TaskAction = nil
				} else {
					automationSteps.TaskAction = &tfTypes.TaskAction{}
					if automationStepsItem.TaskAction.CloseAction == nil {
						automationSteps.TaskAction.CloseAction = nil
					} else {
						automationSteps.TaskAction.CloseAction = &tfTypes.CloseAction{}
						automationSteps.TaskAction.CloseAction.UserIDCel = types.StringPointerValue(automationStepsItem.TaskAction.CloseAction.UserIDCel)
						if automationStepsItem.TaskAction.CloseAction.UserRef == nil {
							automationSteps.TaskAction.CloseAction.UserRef = nil
						} else {
							automationSteps.TaskAction.CloseAction.UserRef = &tfTypes.UserRef{}
							automationSteps.TaskAction.CloseAction.UserRef.ID = types.StringPointerValue(automationStepsItem.TaskAction.CloseAction.UserRef.ID)
						}
						automationSteps.TaskAction.CloseAction.UseSubjectUser = types.BoolPointerValue(automationStepsItem.TaskAction.CloseAction.UseSubjectUser)
					}
					if automationStepsItem.TaskAction.ReassignAction == nil {
						automationSteps.TaskAction.ReassignAction = nil
					} else {
						automationSteps.TaskAction.ReassignAction = &tfTypes.ReassignAction{}
						automationSteps.TaskAction.ReassignAction.AssigneeUserIDCel = types.StringPointerValue(automationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel)
						automationSteps.TaskAction.ReassignAction.SubjectUserIDCel = types.StringPointerValue(automationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel)
						if automationStepsItem.TaskAction.ReassignAction.UserRef == nil {
							automationSteps.TaskAction.ReassignAction.UserRef = nil
						} else {
							automationSteps.TaskAction.ReassignAction.UserRef = &tfTypes.UserRef{}
							automationSteps.TaskAction.ReassignAction.UserRef.ID = types.StringPointerValue(automationStepsItem.TaskAction.ReassignAction.UserRef.ID)
						}
						if automationStepsItem.TaskAction.ReassignAction.UserRef1 == nil {
							automationSteps.TaskAction.ReassignAction.UserRef1 = nil
						} else {
							automationSteps.TaskAction.ReassignAction.UserRef1 = &tfTypes.UserRef{}
							automationSteps.TaskAction.ReassignAction.UserRef1.ID = types.StringPointerValue(automationStepsItem.TaskAction.ReassignAction.UserRef1.ID)
						}
						automationSteps.TaskAction.ReassignAction.UseSubjectUser = types.BoolPointerValue(automationStepsItem.TaskAction.ReassignAction.UseSubjectUser)
					}
					if automationStepsItem.TaskAction.TaskTypes != nil {
						automationSteps.TaskAction.TaskTypes = make([]types.String, 0, len(automationStepsItem.TaskAction.TaskTypes))
						for _, v := range automationStepsItem.TaskAction.TaskTypes {
							automationSteps.TaskAction.TaskTypes = append(automationSteps.TaskAction.TaskTypes, types.StringValue(string(v)))
						}
					}
					if automationStepsItem.TaskAction.TaskUserRelation != nil {
						automationSteps.TaskAction.TaskUserRelation = types.StringValue(string(*automationStepsItem.TaskAction.TaskUserRelation))
					} else {
						automationSteps.TaskAction.TaskUserRelation = types.StringNull()
					}
				}
				if automationStepsItem.UnenrollFromAllAccessProfiles == nil {
					automationSteps.UnenrollFromAllAccessProfiles = nil
				} else {
					automationSteps.UnenrollFromAllAccessProfiles = &tfTypes.UnenrollFromAllAccessProfiles{}
					if automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
						automationSteps.UnenrollFromAllAccessProfiles.CatalogIds = make([]types.String, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
						for _, v := range automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
							automationSteps.UnenrollFromAllAccessProfiles.CatalogIds = append(automationSteps.UnenrollFromAllAccessProfiles.CatalogIds, types.StringValue(v))
						}
					}
					automationSteps.UnenrollFromAllAccessProfiles.CatalogIdsCel = types.StringPointerValue(automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel)
					automationSteps.UnenrollFromAllAccessProfiles.UserIdsCel = types.StringPointerValue(automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel)
					if automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
						automationSteps.UnenrollFromAllAccessProfiles.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem2 := range automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
							var userRefs2 tfTypes.UserRef

							userRefs2.ID = types.StringPointerValue(userRefsItem2.ID)

							automationSteps.UnenrollFromAllAccessProfiles.UserRefs = append(automationSteps.UnenrollFromAllAccessProfiles.UserRefs, userRefs2)
						}
					}
					automationSteps.UnenrollFromAllAccessProfiles.UseSubjectUser = types.BoolPointerValue(automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser)
				}
				if automationStepsItem.UpdateUser == nil {
					automationSteps.UpdateUser = nil
				} else {
					automationSteps.UpdateUser = &tfTypes.UpdateUser{}
					automationSteps.UpdateUser.UserIDCel = types.StringPointerValue(automationStepsItem.UpdateUser.UserIDCel)
					if automationStepsItem.UpdateUser.UserRef == nil {
						automationSteps.UpdateUser.UserRef = nil
					} else {
						automationSteps.UpdateUser.UserRef = &tfTypes.UserRef{}
						automationSteps.UpdateUser.UserRef.ID = types.StringPointerValue(automationStepsItem.UpdateUser.UserRef.ID)
					}
					automationSteps.UpdateUser.UserStatusCel = types.StringPointerValue(automationStepsItem.UpdateUser.UserStatusCel)
					if automationStepsItem.UpdateUser.UserStatusEnum != nil {
						automationSteps.UpdateUser.UserStatusEnum = types.StringValue(string(*automationStepsItem.UpdateUser.UserStatusEnum))
					} else {
						automationSteps.UpdateUser.UserStatusEnum = types.StringNull()
					}
					automationSteps.UpdateUser.UseSubjectUser = types.BoolPointerValue(automationStepsItem.UpdateUser.UseSubjectUser)
				}
				if automationStepsItem.WaitForDuration == nil {
					automationSteps.WaitForDuration = nil
				} else {
					automationSteps.WaitForDuration = &tfTypes.WaitForDuration{}
					automationSteps.WaitForDuration.Duration = types.StringPointerValue(automationStepsItem.WaitForDuration.Duration)
				}
				if automationStepsItem.Webhook == nil {
					automationSteps.Webhook = nil
				} else {
					automationSteps.Webhook = &tfTypes.Webhook{}
					if automationStepsItem.Webhook.Payload == nil {
						automationSteps.Webhook.Payload = nil
					} else {
						automationSteps.Webhook.Payload = &tfTypes.Payload{}
					}
					automationSteps.Webhook.WebhookID = types.StringPointerValue(automationStepsItem.Webhook.WebhookID)
					automationSteps.Webhook.WebhookIDCel = types.StringPointerValue(automationStepsItem.Webhook.WebhookIDCel)
				}

				r.AutomationSteps = append(r.AutomationSteps, automationSteps)
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CurrentVersion = types.StringPointerValue(resp.CurrentVersion)
		r.Description = types.StringPointerValue(resp.Description)
		if resp.DisabledReasonCircuitBreaker == nil {
			r.DisabledReasonCircuitBreaker = nil
		} else {
			r.DisabledReasonCircuitBreaker = &tfTypes.DisabledReasonCircuitBreaker{}
		}
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		if resp.DraftAutomationSteps != nil {
			r.DraftAutomationSteps = []tfTypes.AutomationStep{}

			for _, draftAutomationStepsItem := range resp.DraftAutomationSteps {
				var draftAutomationSteps tfTypes.AutomationStep

				if draftAutomationStepsItem.AccountLifecycleAction == nil {
					draftAutomationSteps.AccountLifecycleAction = nil
				} else {
					draftAutomationSteps.AccountLifecycleAction = &tfTypes.AccountLifecycleAction{}
					if draftAutomationStepsItem.AccountLifecycleAction.AccountInContext == nil {
						draftAutomationSteps.AccountLifecycleAction.AccountInContext = nil
					} else {
						draftAutomationSteps.AccountLifecycleAction.AccountInContext = &tfTypes.AccountInContext{}
					}
					if draftAutomationStepsItem.AccountLifecycleAction.AccountRef == nil {
						draftAutomationSteps.AccountLifecycleAction.AccountRef = nil
					} else {
						draftAutomationSteps.AccountLifecycleAction.AccountRef = &tfTypes.AccountRef{}
						draftAutomationSteps.AccountLifecycleAction.AccountRef.AccountIDCel = types.StringPointerValue(draftAutomationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel)
					}
					draftAutomationSteps.AccountLifecycleAction.ActionName = types.StringPointerValue(draftAutomationStepsItem.AccountLifecycleAction.ActionName)
					if draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef == nil {
						draftAutomationSteps.AccountLifecycleAction.ConnectorRef = nil
					} else {
						draftAutomationSteps.AccountLifecycleAction.ConnectorRef = &tfTypes.ConnectorRef{}
						draftAutomationSteps.AccountLifecycleAction.ConnectorRef.AppID = types.StringPointerValue(draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.AppID)
						draftAutomationSteps.AccountLifecycleAction.ConnectorRef.ID = types.StringPointerValue(draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.ID)
					}
				}
				if draftAutomationStepsItem.CallFunction == nil {
					draftAutomationSteps.CallFunction = nil
				} else {
					draftAutomationSteps.CallFunction = &tfTypes.CallFunction{}
					if len(draftAutomationStepsItem.CallFunction.Args) > 0 {
						draftAutomationSteps.CallFunction.Args = make(map[string]types.String, len(draftAutomationStepsItem.CallFunction.Args))
						for key1, value1 := range draftAutomationStepsItem.CallFunction.Args {
							draftAutomationSteps.CallFunction.Args[key1] = types.StringValue(value1)
						}
					}
					draftAutomationSteps.CallFunction.FunctionID = types.StringPointerValue(draftAutomationStepsItem.CallFunction.FunctionID)
				}
				if draftAutomationStepsItem.ConnectorAction == nil {
					draftAutomationSteps.ConnectorAction = nil
				} else {
					draftAutomationSteps.ConnectorAction = &tfTypes.ConnectorAction{}
					draftAutomationSteps.ConnectorAction.ActionName = types.StringPointerValue(draftAutomationStepsItem.ConnectorAction.ActionName)
					if draftAutomationStepsItem.ConnectorAction.ArgsTemplate == nil {
						draftAutomationSteps.ConnectorAction.ArgsTemplate = nil
					} else {
						draftAutomationSteps.ConnectorAction.ArgsTemplate = &tfTypes.ArgsTemplate{}
					}
					if draftAutomationStepsItem.ConnectorAction.ConnectorRef == nil {
						draftAutomationSteps.ConnectorAction.ConnectorRef = nil
					} else {
						draftAutomationSteps.ConnectorAction.ConnectorRef = &tfTypes.ConnectorRef{}
						draftAutomationSteps.ConnectorAction.ConnectorRef.AppID = types.StringPointerValue(draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID)
						draftAutomationSteps.ConnectorAction.ConnectorRef.ID = types.StringPointerValue(draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID)
					}
				}
				if draftAutomationStepsItem.ConnectorCreateAccount == nil {
					draftAutomationSteps.ConnectorCreateAccount = nil
				} else {
					draftAutomationSteps.ConnectorCreateAccount = &tfTypes.ConnectorCreateAccount{}
					if draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef == nil {
						draftAutomationSteps.ConnectorCreateAccount.ConnectorRef = nil
					} else {
						draftAutomationSteps.ConnectorCreateAccount.ConnectorRef = &tfTypes.ConnectorRef{}
						draftAutomationSteps.ConnectorCreateAccount.ConnectorRef.AppID = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID)
						draftAutomationSteps.ConnectorCreateAccount.ConnectorRef.ID = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID)
					}
					draftAutomationSteps.ConnectorCreateAccount.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel)
					if draftAutomationStepsItem.ConnectorCreateAccount.UserProperties == nil {
						draftAutomationSteps.ConnectorCreateAccount.UserProperties = nil
					} else {
						draftAutomationSteps.ConnectorCreateAccount.UserProperties = &tfTypes.UserProperties{}
						draftAutomationSteps.ConnectorCreateAccount.UserProperties.DisplayNameCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel)
						draftAutomationSteps.ConnectorCreateAccount.UserProperties.EmailCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel)
						draftAutomationSteps.ConnectorCreateAccount.UserProperties.ProfileAttributeCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel)
						draftAutomationSteps.ConnectorCreateAccount.UserProperties.UsernameCel = types.StringPointerValue(draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel)
					}
				}
				if draftAutomationStepsItem.CreateAccessReview == nil {
					draftAutomationSteps.CreateAccessReview = nil
				} else {
					draftAutomationSteps.CreateAccessReview = &tfTypes.CreateAccessReview{}
					draftAutomationSteps.CreateAccessReview.AccessReviewTemplateCel = types.StringPointerValue(draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel)
					draftAutomationSteps.CreateAccessReview.AccessReviewTemplateID = types.StringPointerValue(draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID)
					draftAutomationSteps.CreateAccessReview.CampaignName = types.StringPointerValue(draftAutomationStepsItem.CreateAccessReview.CampaignName)
					draftAutomationSteps.CreateAccessReview.UserIdsCel = types.StringPointerValue(draftAutomationStepsItem.CreateAccessReview.UserIdsCel)
					if draftAutomationStepsItem.CreateAccessReview.UserRefs != nil {
						draftAutomationSteps.CreateAccessReview.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem3 := range draftAutomationStepsItem.CreateAccessReview.UserRefs {
							var userRefs3 tfTypes.UserRef

							userRefs3.ID = types.StringPointerValue(userRefsItem3.ID)

							draftAutomationSteps.CreateAccessReview.UserRefs = append(draftAutomationSteps.CreateAccessReview.UserRefs, userRefs3)
						}
					}
					draftAutomationSteps.CreateAccessReview.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.CreateAccessReview.UseSubjectUser)
				}
				if draftAutomationStepsItem.CreateRevokeTasks == nil {
					draftAutomationSteps.CreateRevokeTasks = nil
				} else {
					draftAutomationSteps.CreateRevokeTasks = &tfTypes.CreateRevokeTasks{}
					if draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
						draftAutomationSteps.CreateRevokeTasks.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, appEntitlementRefsItem2 := range draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
							var appEntitlementRefs2 tfTypes.AppEntitlementRef

							appEntitlementRefs2.AppID = types.StringPointerValue(appEntitlementRefsItem2.AppID)
							appEntitlementRefs2.ID = types.StringPointerValue(appEntitlementRefsItem2.ID)

							draftAutomationSteps.CreateRevokeTasks.AppEntitlementRefs = append(draftAutomationSteps.CreateRevokeTasks.AppEntitlementRefs, appEntitlementRefs2)
						}
					}
					draftAutomationSteps.CreateRevokeTasks.AppEntitlementRefsCel = types.StringPointerValue(draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel)
					if draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs != nil {
						draftAutomationSteps.CreateRevokeTasks.ExcludedAppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, excludedAppEntitlementRefsItem1 := range draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs {
							var excludedAppEntitlementRefs1 tfTypes.AppEntitlementRef

							excludedAppEntitlementRefs1.AppID = types.StringPointerValue(excludedAppEntitlementRefsItem1.AppID)
							excludedAppEntitlementRefs1.ID = types.StringPointerValue(excludedAppEntitlementRefsItem1.ID)

							draftAutomationSteps.CreateRevokeTasks.ExcludedAppEntitlementRefs = append(draftAutomationSteps.CreateRevokeTasks.ExcludedAppEntitlementRefs, excludedAppEntitlementRefs1)
						}
					}
					draftAutomationSteps.CreateRevokeTasks.ExcludedAppEntitlementRefsCel = types.StringPointerValue(draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel)
					draftAutomationSteps.CreateRevokeTasks.RevokeAll = types.BoolPointerValue(draftAutomationStepsItem.CreateRevokeTasks.RevokeAll)
					draftAutomationSteps.CreateRevokeTasks.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.CreateRevokeTasks.UserIDCel)
					if draftAutomationStepsItem.CreateRevokeTasks.UserRef == nil {
						draftAutomationSteps.CreateRevokeTasks.UserRef = nil
					} else {
						draftAutomationSteps.CreateRevokeTasks.UserRef = &tfTypes.UserRef{}
						draftAutomationSteps.CreateRevokeTasks.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID)
					}
					draftAutomationSteps.CreateRevokeTasks.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser)
				}
				if draftAutomationStepsItem.GrantEntitlements == nil {
					draftAutomationSteps.GrantEntitlements = nil
				} else {
					draftAutomationSteps.GrantEntitlements = &tfTypes.GrantEntitlements{}
					if draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
						draftAutomationSteps.GrantEntitlements.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, appEntitlementRefsItem3 := range draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs {
							var appEntitlementRefs3 tfTypes.AppEntitlementRef

							appEntitlementRefs3.AppID = types.StringPointerValue(appEntitlementRefsItem3.AppID)
							appEntitlementRefs3.ID = types.StringPointerValue(appEntitlementRefsItem3.ID)

							draftAutomationSteps.GrantEntitlements.AppEntitlementRefs = append(draftAutomationSteps.GrantEntitlements.AppEntitlementRefs, appEntitlementRefs3)
						}
					}
					draftAutomationSteps.GrantEntitlements.AppEntitlementRefsCel = types.StringPointerValue(draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel)
					draftAutomationSteps.GrantEntitlements.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.GrantEntitlements.UserIDCel)
					if draftAutomationStepsItem.GrantEntitlements.UserRef == nil {
						draftAutomationSteps.GrantEntitlements.UserRef = nil
					} else {
						draftAutomationSteps.GrantEntitlements.UserRef = &tfTypes.UserRef{}
						draftAutomationSteps.GrantEntitlements.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.GrantEntitlements.UserRef.ID)
					}
					draftAutomationSteps.GrantEntitlements.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.GrantEntitlements.UseSubjectUser)
				}
				if draftAutomationStepsItem.RemoveFromDelegation == nil {
					draftAutomationSteps.RemoveFromDelegation = nil
				} else {
					draftAutomationSteps.RemoveFromDelegation = &tfTypes.RemoveFromDelegation{}
					draftAutomationSteps.RemoveFromDelegation.ReplacementUserIDCel = types.StringPointerValue(draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel)
					draftAutomationSteps.RemoveFromDelegation.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.RemoveFromDelegation.UserIDCel)
					if draftAutomationStepsItem.RemoveFromDelegation.UserRef == nil {
						draftAutomationSteps.RemoveFromDelegation.UserRef = nil
					} else {
						draftAutomationSteps.RemoveFromDelegation.UserRef = &tfTypes.UserRef{}
						draftAutomationSteps.RemoveFromDelegation.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID)
					}
					if draftAutomationStepsItem.RemoveFromDelegation.UserRef1 == nil {
						draftAutomationSteps.RemoveFromDelegation.UserRef1 = nil
					} else {
						draftAutomationSteps.RemoveFromDelegation.UserRef1 = &tfTypes.UserRef{}
						draftAutomationSteps.RemoveFromDelegation.UserRef1.ID = types.StringPointerValue(draftAutomationStepsItem.RemoveFromDelegation.UserRef1.ID)
					}
					draftAutomationSteps.RemoveFromDelegation.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser)
				}
				if draftAutomationStepsItem.RunAutomation == nil {
					draftAutomationSteps.RunAutomation = nil
				} else {
					draftAutomationSteps.RunAutomation = &tfTypes.RunAutomation{}
					if draftAutomationStepsItem.RunAutomation.AutomationContext == nil {
						draftAutomationSteps.RunAutomation.AutomationContext = nil
					} else {
						draftAutomationSteps.RunAutomation.AutomationContext = &tfTypes.AutomationContext{}
						if draftAutomationStepsItem.RunAutomation.AutomationContext.Context == nil {
							draftAutomationSteps.RunAutomation.AutomationContext.Context = nil
						} else {
							draftAutomationSteps.RunAutomation.AutomationContext.Context = &tfTypes.Context{}
						}
					}
					draftAutomationSteps.RunAutomation.AutomationTemplateIDCel = types.StringPointerValue(draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel)
					if draftAutomationStepsItem.RunAutomation.AutomationTemplateRef == nil {
						draftAutomationSteps.RunAutomation.AutomationTemplateRef = nil
					} else {
						draftAutomationSteps.RunAutomation.AutomationTemplateRef = &tfTypes.AutomationTemplateRef{}
						draftAutomationSteps.RunAutomation.AutomationTemplateRef.ID = types.StringPointerValue(draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID)
					}
				}
				if draftAutomationStepsItem.SendEmail == nil {
					draftAutomationSteps.SendEmail = nil
				} else {
					draftAutomationSteps.SendEmail = &tfTypes.SendEmail{}
					draftAutomationSteps.SendEmail.Body = types.StringPointerValue(draftAutomationStepsItem.SendEmail.Body)
					draftAutomationSteps.SendEmail.Subject = types.StringPointerValue(draftAutomationStepsItem.SendEmail.Subject)
					draftAutomationSteps.SendEmail.Title = types.StringPointerValue(draftAutomationStepsItem.SendEmail.Title)
					draftAutomationSteps.SendEmail.UserIdsCel = types.StringPointerValue(draftAutomationStepsItem.SendEmail.UserIdsCel)
					if draftAutomationStepsItem.SendEmail.UserRefs != nil {
						draftAutomationSteps.SendEmail.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem4 := range draftAutomationStepsItem.SendEmail.UserRefs {
							var userRefs4 tfTypes.UserRef

							userRefs4.ID = types.StringPointerValue(userRefsItem4.ID)

							draftAutomationSteps.SendEmail.UserRefs = append(draftAutomationSteps.SendEmail.UserRefs, userRefs4)
						}
					}
					draftAutomationSteps.SendEmail.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.SendEmail.UseSubjectUser)
				}
				if draftAutomationStepsItem.SendSlackMessage == nil {
					draftAutomationSteps.SendSlackMessage = nil
				} else {
					draftAutomationSteps.SendSlackMessage = &tfTypes.SendSlackMessage{}
					draftAutomationSteps.SendSlackMessage.Body = types.StringPointerValue(draftAutomationStepsItem.SendSlackMessage.Body)
					draftAutomationSteps.SendSlackMessage.ChannelName = types.StringPointerValue(draftAutomationStepsItem.SendSlackMessage.ChannelName)
					draftAutomationSteps.SendSlackMessage.ChannelNameCel = types.StringPointerValue(draftAutomationStepsItem.SendSlackMessage.ChannelNameCel)
				}
				draftAutomationSteps.SkipIfTrueCel = types.StringPointerValue(draftAutomationStepsItem.SkipIfTrueCel)
				draftAutomationSteps.StepDisplayName = types.StringPointerValue(draftAutomationStepsItem.StepDisplayName)
				draftAutomationSteps.StepName = types.StringPointerValue(draftAutomationStepsItem.StepName)
				if draftAutomationStepsItem.TaskAction == nil {
					draftAutomationSteps.TaskAction = nil
				} else {
					draftAutomationSteps.TaskAction = &tfTypes.TaskAction{}
					if draftAutomationStepsItem.TaskAction.CloseAction == nil {
						draftAutomationSteps.TaskAction.CloseAction = nil
					} else {
						draftAutomationSteps.TaskAction.CloseAction = &tfTypes.CloseAction{}
						draftAutomationSteps.TaskAction.CloseAction.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.TaskAction.CloseAction.UserIDCel)
						if draftAutomationStepsItem.TaskAction.CloseAction.UserRef == nil {
							draftAutomationSteps.TaskAction.CloseAction.UserRef = nil
						} else {
							draftAutomationSteps.TaskAction.CloseAction.UserRef = &tfTypes.UserRef{}
							draftAutomationSteps.TaskAction.CloseAction.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.TaskAction.CloseAction.UserRef.ID)
						}
						draftAutomationSteps.TaskAction.CloseAction.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.TaskAction.CloseAction.UseSubjectUser)
					}
					if draftAutomationStepsItem.TaskAction.ReassignAction == nil {
						draftAutomationSteps.TaskAction.ReassignAction = nil
					} else {
						draftAutomationSteps.TaskAction.ReassignAction = &tfTypes.ReassignAction{}
						draftAutomationSteps.TaskAction.ReassignAction.AssigneeUserIDCel = types.StringPointerValue(draftAutomationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel)
						draftAutomationSteps.TaskAction.ReassignAction.SubjectUserIDCel = types.StringPointerValue(draftAutomationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel)
						if draftAutomationStepsItem.TaskAction.ReassignAction.UserRef == nil {
							draftAutomationSteps.TaskAction.ReassignAction.UserRef = nil
						} else {
							draftAutomationSteps.TaskAction.ReassignAction.UserRef = &tfTypes.UserRef{}
							draftAutomationSteps.TaskAction.ReassignAction.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.TaskAction.ReassignAction.UserRef.ID)
						}
						if draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1 == nil {
							draftAutomationSteps.TaskAction.ReassignAction.UserRef1 = nil
						} else {
							draftAutomationSteps.TaskAction.ReassignAction.UserRef1 = &tfTypes.UserRef{}
							draftAutomationSteps.TaskAction.ReassignAction.UserRef1.ID = types.StringPointerValue(draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1.ID)
						}
						draftAutomationSteps.TaskAction.ReassignAction.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.TaskAction.ReassignAction.UseSubjectUser)
					}
					if draftAutomationStepsItem.TaskAction.TaskTypes != nil {
						draftAutomationSteps.TaskAction.TaskTypes = make([]types.String, 0, len(draftAutomationStepsItem.TaskAction.TaskTypes))
						for _, v := range draftAutomationStepsItem.TaskAction.TaskTypes {
							draftAutomationSteps.TaskAction.TaskTypes = append(draftAutomationSteps.TaskAction.TaskTypes, types.StringValue(string(v)))
						}
					}
					if draftAutomationStepsItem.TaskAction.TaskUserRelation != nil {
						draftAutomationSteps.TaskAction.TaskUserRelation = types.StringValue(string(*draftAutomationStepsItem.TaskAction.TaskUserRelation))
					} else {
						draftAutomationSteps.TaskAction.TaskUserRelation = types.StringNull()
					}
				}
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles == nil {
					draftAutomationSteps.UnenrollFromAllAccessProfiles = nil
				} else {
					draftAutomationSteps.UnenrollFromAllAccessProfiles = &tfTypes.UnenrollFromAllAccessProfiles{}
					if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
						draftAutomationSteps.UnenrollFromAllAccessProfiles.CatalogIds = make([]types.String, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
						for _, v := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
							draftAutomationSteps.UnenrollFromAllAccessProfiles.CatalogIds = append(draftAutomationSteps.UnenrollFromAllAccessProfiles.CatalogIds, types.StringValue(v))
						}
					}
					draftAutomationSteps.UnenrollFromAllAccessProfiles.CatalogIdsCel = types.StringPointerValue(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel)
					draftAutomationSteps.UnenrollFromAllAccessProfiles.UserIdsCel = types.StringPointerValue(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel)
					if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
						draftAutomationSteps.UnenrollFromAllAccessProfiles.UserRefs = []tfTypes.UserRef{}

						for _, userRefsItem5 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
							var userRefs5 tfTypes.UserRef

							userRefs5.ID = types.StringPointerValue(userRefsItem5.ID)

							draftAutomationSteps.UnenrollFromAllAccessProfiles.UserRefs = append(draftAutomationSteps.UnenrollFromAllAccessProfiles.UserRefs, userRefs5)
						}
					}
					draftAutomationSteps.UnenrollFromAllAccessProfiles.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser)
				}
				if draftAutomationStepsItem.UpdateUser == nil {
					draftAutomationSteps.UpdateUser = nil
				} else {
					draftAutomationSteps.UpdateUser = &tfTypes.UpdateUser{}
					draftAutomationSteps.UpdateUser.UserIDCel = types.StringPointerValue(draftAutomationStepsItem.UpdateUser.UserIDCel)
					if draftAutomationStepsItem.UpdateUser.UserRef == nil {
						draftAutomationSteps.UpdateUser.UserRef = nil
					} else {
						draftAutomationSteps.UpdateUser.UserRef = &tfTypes.UserRef{}
						draftAutomationSteps.UpdateUser.UserRef.ID = types.StringPointerValue(draftAutomationStepsItem.UpdateUser.UserRef.ID)
					}
					draftAutomationSteps.UpdateUser.UserStatusCel = types.StringPointerValue(draftAutomationStepsItem.UpdateUser.UserStatusCel)
					if draftAutomationStepsItem.UpdateUser.UserStatusEnum != nil {
						draftAutomationSteps.UpdateUser.UserStatusEnum = types.StringValue(string(*draftAutomationStepsItem.UpdateUser.UserStatusEnum))
					} else {
						draftAutomationSteps.UpdateUser.UserStatusEnum = types.StringNull()
					}
					draftAutomationSteps.UpdateUser.UseSubjectUser = types.BoolPointerValue(draftAutomationStepsItem.UpdateUser.UseSubjectUser)
				}
				if draftAutomationStepsItem.WaitForDuration == nil {
					draftAutomationSteps.WaitForDuration = nil
				} else {
					draftAutomationSteps.WaitForDuration = &tfTypes.WaitForDuration{}
					draftAutomationSteps.WaitForDuration.Duration = types.StringPointerValue(draftAutomationStepsItem.WaitForDuration.Duration)
				}
				if draftAutomationStepsItem.Webhook == nil {
					draftAutomationSteps.Webhook = nil
				} else {
					draftAutomationSteps.Webhook = &tfTypes.Webhook{}
					if draftAutomationStepsItem.Webhook.Payload == nil {
						draftAutomationSteps.Webhook.Payload = nil
					} else {
						draftAutomationSteps.Webhook.Payload = &tfTypes.Payload{}
					}
					draftAutomationSteps.Webhook.WebhookID = types.StringPointerValue(draftAutomationStepsItem.Webhook.WebhookID)
					draftAutomationSteps.Webhook.WebhookIDCel = types.StringPointerValue(draftAutomationStepsItem.Webhook.WebhookIDCel)
				}

				r.DraftAutomationSteps = append(r.DraftAutomationSteps, draftAutomationSteps)
			}
		}
		if resp.DraftTriggers != nil {
			r.DraftTriggers = []tfTypes.AutomationTrigger{}

			for _, draftTriggersItem := range resp.DraftTriggers {
				var draftTriggers tfTypes.AutomationTrigger

				if draftTriggersItem.AppUserCreatedTrigger == nil {
					draftTriggers.AppUserCreatedTrigger = nil
				} else {
					draftTriggers.AppUserCreatedTrigger = &tfTypes.AppUserCreatedTrigger{}
					draftTriggers.AppUserCreatedTrigger.AppID = types.StringPointerValue(draftTriggersItem.AppUserCreatedTrigger.AppID)
					draftTriggers.AppUserCreatedTrigger.AppIDCel = types.StringPointerValue(draftTriggersItem.AppUserCreatedTrigger.AppIDCel)
					draftTriggers.AppUserCreatedTrigger.Condition = types.StringPointerValue(draftTriggersItem.AppUserCreatedTrigger.Condition)
				}
				if draftTriggersItem.AppUserUpdatedTrigger == nil {
					draftTriggers.AppUserUpdatedTrigger = nil
				} else {
					draftTriggers.AppUserUpdatedTrigger = &tfTypes.AppUserUpdatedTrigger{}
					draftTriggers.AppUserUpdatedTrigger.AppID = types.StringPointerValue(draftTriggersItem.AppUserUpdatedTrigger.AppID)
					draftTriggers.AppUserUpdatedTrigger.AppIDCel = types.StringPointerValue(draftTriggersItem.AppUserUpdatedTrigger.AppIDCel)
					draftTriggers.AppUserUpdatedTrigger.Condition = types.StringPointerValue(draftTriggersItem.AppUserUpdatedTrigger.Condition)
				}
				if draftTriggersItem.FormTrigger == nil {
					draftTriggers.FormTrigger = jsontypes.NewNormalizedNull()
				} else {
					formTriggerResult, _ := json.Marshal(draftTriggersItem.FormTrigger)
					draftTriggers.FormTrigger = jsontypes.NewNormalizedValue(string(formTriggerResult))
				}
				if draftTriggersItem.GrantDeletedTrigger == nil {
					draftTriggers.GrantDeletedTrigger = nil
				} else {
					draftTriggers.GrantDeletedTrigger = &tfTypes.GrantDeletedTrigger{}
					if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter == nil {
						draftTriggers.GrantDeletedTrigger.GrantTriggerFilter = nil
					} else {
						draftTriggers.GrantDeletedTrigger.GrantTriggerFilter = &tfTypes.GrantTriggerFilter{}
						if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter == nil {
							draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter = nil
						} else {
							draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter = &tfTypes.AccountFilter{}
							if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType != nil {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType = types.StringValue(string(*draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType))
							} else {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType = types.StringNull()
							}
						}
						if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter == nil {
							draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter = nil
						} else {
							draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter = &tfTypes.EntitlementFilter{}
							if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

								for _, appEntitlementRefsItem4 := range draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
									var appEntitlementRefs4 tfTypes.AppEntitlementRef

									appEntitlementRefs4.AppID = types.StringPointerValue(appEntitlementRefsItem4.AppID)
									appEntitlementRefs4.ID = types.StringPointerValue(appEntitlementRefsItem4.ID)

									draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = append(draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs, appEntitlementRefs4)
								}
							}
							draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel = types.StringPointerValue(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel)
							draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID = types.StringPointerValue(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID)
						}
						if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter == nil {
							draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter = nil
						} else {
							draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter = &tfTypes.GrantFilter{}
							if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType != nil {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringValue(string(*draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType))
							} else {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringNull()
							}
							if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType != nil {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringValue(string(*draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType))
							} else {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringNull()
							}
							if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter != nil {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringValue(string(*draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter))
							} else {
								draftTriggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringNull()
							}
						}
					}
				}
				if draftTriggersItem.GrantFoundTrigger == nil {
					draftTriggers.GrantFoundTrigger = nil
				} else {
					draftTriggers.GrantFoundTrigger = &tfTypes.GrantFoundTrigger{}
					if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter == nil {
						draftTriggers.GrantFoundTrigger.GrantTriggerFilter = nil
					} else {
						draftTriggers.GrantFoundTrigger.GrantTriggerFilter = &tfTypes.GrantTriggerFilter{}
						if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter == nil {
							draftTriggers.GrantFoundTrigger.GrantTriggerFilter.AccountFilter = nil
						} else {
							draftTriggers.GrantFoundTrigger.GrantTriggerFilter.AccountFilter = &tfTypes.AccountFilter{}
							if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType != nil {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType = types.StringValue(string(*draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType))
							} else {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType = types.StringNull()
							}
						}
						if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter == nil {
							draftTriggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter = nil
						} else {
							draftTriggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter = &tfTypes.EntitlementFilter{}
							if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

								for _, appEntitlementRefsItem5 := range draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
									var appEntitlementRefs5 tfTypes.AppEntitlementRef

									appEntitlementRefs5.AppID = types.StringPointerValue(appEntitlementRefsItem5.AppID)
									appEntitlementRefs5.ID = types.StringPointerValue(appEntitlementRefsItem5.ID)

									draftTriggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = append(draftTriggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs, appEntitlementRefs5)
								}
							}
							draftTriggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel = types.StringPointerValue(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel)
							draftTriggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID = types.StringPointerValue(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID)
						}
						if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter == nil {
							draftTriggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter = nil
						} else {
							draftTriggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter = &tfTypes.GrantFilter{}
							if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType != nil {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringValue(string(*draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType))
							} else {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringNull()
							}
							if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType != nil {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringValue(string(*draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType))
							} else {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringNull()
							}
							if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter != nil {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringValue(string(*draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter))
							} else {
								draftTriggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringNull()
							}
						}
					}
				}
				if draftTriggersItem.ManualAutomationTrigger == nil {
					draftTriggers.ManualAutomationTrigger = nil
				} else {
					draftTriggers.ManualAutomationTrigger = &tfTypes.ManualAutomationTrigger{}
				}
				if draftTriggersItem.ScheduleTrigger == nil {
					draftTriggers.ScheduleTrigger = nil
				} else {
					draftTriggers.ScheduleTrigger = &tfTypes.ScheduleTrigger{}
					draftTriggers.ScheduleTrigger.Advanced = types.BoolPointerValue(draftTriggersItem.ScheduleTrigger.Advanced)
					draftTriggers.ScheduleTrigger.Condition = types.StringPointerValue(draftTriggersItem.ScheduleTrigger.Condition)
					draftTriggers.ScheduleTrigger.CronSpec = types.StringPointerValue(draftTriggersItem.ScheduleTrigger.CronSpec)
					draftTriggers.ScheduleTrigger.SkipIfTrueCel = types.StringPointerValue(draftTriggersItem.ScheduleTrigger.SkipIfTrueCel)
					draftTriggers.ScheduleTrigger.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(draftTriggersItem.ScheduleTrigger.Start))
					draftTriggers.ScheduleTrigger.Timezone = types.StringPointerValue(draftTriggersItem.ScheduleTrigger.Timezone)
				}
				if draftTriggersItem.ScheduleTriggerAppUser == nil {
					draftTriggers.ScheduleTriggerAppUser = nil
				} else {
					draftTriggers.ScheduleTriggerAppUser = &tfTypes.ScheduleTriggerAppUser{}
					draftTriggers.ScheduleTriggerAppUser.AppID = types.StringPointerValue(draftTriggersItem.ScheduleTriggerAppUser.AppID)
					draftTriggers.ScheduleTriggerAppUser.Condition = types.StringPointerValue(draftTriggersItem.ScheduleTriggerAppUser.Condition)
					draftTriggers.ScheduleTriggerAppUser.CronSpec = types.StringPointerValue(draftTriggersItem.ScheduleTriggerAppUser.CronSpec)
					draftTriggers.ScheduleTriggerAppUser.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(draftTriggersItem.ScheduleTriggerAppUser.Start))
					draftTriggers.ScheduleTriggerAppUser.Timezone = types.StringPointerValue(draftTriggersItem.ScheduleTriggerAppUser.Timezone)
				}
				if draftTriggersItem.UsageBasedRevocationTrigger == nil {
					draftTriggers.UsageBasedRevocationTrigger = nil
				} else {
					draftTriggers.UsageBasedRevocationTrigger = &tfTypes.UsageBasedRevocationTrigger{}
					draftTriggers.UsageBasedRevocationTrigger.AppID = types.StringPointerValue(draftTriggersItem.UsageBasedRevocationTrigger.AppID)
					draftTriggers.UsageBasedRevocationTrigger.EnabledAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(draftTriggersItem.UsageBasedRevocationTrigger.EnabledAt))
					if draftTriggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs != nil {
						draftTriggers.UsageBasedRevocationTrigger.ExcludedGroupRefs = []tfTypes.AppEntitlementRef{}

						for _, excludedGroupRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs {
							var excludedGroupRefs tfTypes.AppEntitlementRef

							excludedGroupRefs.AppID = types.StringPointerValue(excludedGroupRefsItem.AppID)
							excludedGroupRefs.ID = types.StringPointerValue(excludedGroupRefsItem.ID)

							draftTriggers.UsageBasedRevocationTrigger.ExcludedGroupRefs = append(draftTriggers.UsageBasedRevocationTrigger.ExcludedGroupRefs, excludedGroupRefs)
						}
					}
					if draftTriggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs != nil {
						draftTriggers.UsageBasedRevocationTrigger.ExcludedUserRefs = []tfTypes.UserRef{}

						for _, excludedUserRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs {
							var excludedUserRefs tfTypes.UserRef

							excludedUserRefs.ID = types.StringPointerValue(excludedUserRefsItem.ID)

							draftTriggers.UsageBasedRevocationTrigger.ExcludedUserRefs = append(draftTriggers.UsageBasedRevocationTrigger.ExcludedUserRefs, excludedUserRefs)
						}
					}
					draftTriggers.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity = types.BoolPointerValue(draftTriggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity)
					if draftTriggersItem.UsageBasedRevocationTrigger.RunDelayed == nil {
						draftTriggers.UsageBasedRevocationTrigger.RunDelayed = nil
					} else {
						draftTriggers.UsageBasedRevocationTrigger.RunDelayed = &tfTypes.RunDelayed{}
						draftTriggers.UsageBasedRevocationTrigger.RunDelayed.ColdStartDelayDays = types.Int64Value(draftTriggersItem.UsageBasedRevocationTrigger.RunDelayed.ColdStartDelayDays)
					}
					if draftTriggersItem.UsageBasedRevocationTrigger.RunImmediately == nil {
						draftTriggers.UsageBasedRevocationTrigger.RunImmediately = nil
					} else {
						draftTriggers.UsageBasedRevocationTrigger.RunImmediately = &tfTypes.RunImmediately{}
					}
					if draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes != nil {
						draftTriggers.UsageBasedRevocationTrigger.TargetedAppUserTypes = make([]types.String, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes))
						for _, v := range draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes {
							draftTriggers.UsageBasedRevocationTrigger.TargetedAppUserTypes = append(draftTriggers.UsageBasedRevocationTrigger.TargetedAppUserTypes, types.StringValue(string(v)))
						}
					}
					if draftTriggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs != nil {
						draftTriggers.UsageBasedRevocationTrigger.TargetedEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, targetedEntitlementRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs {
							var targetedEntitlementRefs tfTypes.AppEntitlementRef

							targetedEntitlementRefs.AppID = types.StringPointerValue(targetedEntitlementRefsItem.AppID)
							targetedEntitlementRefs.ID = types.StringPointerValue(targetedEntitlementRefsItem.ID)

							draftTriggers.UsageBasedRevocationTrigger.TargetedEntitlementRefs = append(draftTriggers.UsageBasedRevocationTrigger.TargetedEntitlementRefs, targetedEntitlementRefs)
						}
					}
					draftTriggers.UsageBasedRevocationTrigger.UnusedForDays = types.Int64PointerValue(draftTriggersItem.UsageBasedRevocationTrigger.UnusedForDays)
				}
				if draftTriggersItem.UserCreatedTrigger == nil {
					draftTriggers.UserCreatedTrigger = nil
				} else {
					draftTriggers.UserCreatedTrigger = &tfTypes.UserCreatedTrigger{}
					draftTriggers.UserCreatedTrigger.Condition = types.StringPointerValue(draftTriggersItem.UserCreatedTrigger.Condition)
				}
				if draftTriggersItem.UserProfileChangeTrigger == nil {
					draftTriggers.UserProfileChangeTrigger = nil
				} else {
					draftTriggers.UserProfileChangeTrigger = &tfTypes.UserProfileChangeTrigger{}
					draftTriggers.UserProfileChangeTrigger.Condition = types.StringPointerValue(draftTriggersItem.UserProfileChangeTrigger.Condition)
				}
				if draftTriggersItem.WebhookAutomationTrigger == nil {
					draftTriggers.WebhookAutomationTrigger = nil
				} else {
					draftTriggers.WebhookAutomationTrigger = &tfTypes.WebhookAutomationTrigger{}
					draftTriggers.WebhookAutomationTrigger.ListenerID = types.StringPointerValue(draftTriggersItem.WebhookAutomationTrigger.ListenerID)
					if draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthHMAC == nil {
						draftTriggers.WebhookAutomationTrigger.WebhookListenerAuthHMAC = nil
					} else {
						draftTriggers.WebhookAutomationTrigger.WebhookListenerAuthHMAC = &tfTypes.WebhookListenerAuthHMAC{}
					}
					if draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT == nil {
						draftTriggers.WebhookAutomationTrigger.WebhookListenerAuthJWT = nil
					} else {
						draftTriggers.WebhookAutomationTrigger.WebhookListenerAuthJWT = &tfTypes.WebhookListenerAuthJWT{}
						draftTriggers.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL = types.StringPointerValue(draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL)
					}
				}

				r.DraftTriggers = append(r.DraftTriggers, draftTriggers)
			}
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.IsDraft = types.BoolPointerValue(resp.IsDraft)
		r.LastExecutedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastExecutedAt))
		if resp.PrimaryTriggerType != nil {
			r.PrimaryTriggerType = types.StringValue(string(*resp.PrimaryTriggerType))
		} else {
			r.PrimaryTriggerType = types.StringNull()
		}
		if resp.Triggers != nil {
			r.Triggers = []tfTypes.AutomationTrigger{}

			for _, triggersItem := range resp.Triggers {
				var triggers tfTypes.AutomationTrigger

				if triggersItem.AppUserCreatedTrigger == nil {
					triggers.AppUserCreatedTrigger = nil
				} else {
					triggers.AppUserCreatedTrigger = &tfTypes.AppUserCreatedTrigger{}
					triggers.AppUserCreatedTrigger.AppID = types.StringPointerValue(triggersItem.AppUserCreatedTrigger.AppID)
					triggers.AppUserCreatedTrigger.AppIDCel = types.StringPointerValue(triggersItem.AppUserCreatedTrigger.AppIDCel)
					triggers.AppUserCreatedTrigger.Condition = types.StringPointerValue(triggersItem.AppUserCreatedTrigger.Condition)
				}
				if triggersItem.AppUserUpdatedTrigger == nil {
					triggers.AppUserUpdatedTrigger = nil
				} else {
					triggers.AppUserUpdatedTrigger = &tfTypes.AppUserUpdatedTrigger{}
					triggers.AppUserUpdatedTrigger.AppID = types.StringPointerValue(triggersItem.AppUserUpdatedTrigger.AppID)
					triggers.AppUserUpdatedTrigger.AppIDCel = types.StringPointerValue(triggersItem.AppUserUpdatedTrigger.AppIDCel)
					triggers.AppUserUpdatedTrigger.Condition = types.StringPointerValue(triggersItem.AppUserUpdatedTrigger.Condition)
				}
				if triggersItem.FormTrigger == nil {
					triggers.FormTrigger = jsontypes.NewNormalizedNull()
				} else {
					formTriggerResult1, _ := json.Marshal(triggersItem.FormTrigger)
					triggers.FormTrigger = jsontypes.NewNormalizedValue(string(formTriggerResult1))
				}
				if triggersItem.GrantDeletedTrigger == nil {
					triggers.GrantDeletedTrigger = nil
				} else {
					triggers.GrantDeletedTrigger = &tfTypes.GrantDeletedTrigger{}
					if triggersItem.GrantDeletedTrigger.GrantTriggerFilter == nil {
						triggers.GrantDeletedTrigger.GrantTriggerFilter = nil
					} else {
						triggers.GrantDeletedTrigger.GrantTriggerFilter = &tfTypes.GrantTriggerFilter{}
						if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter == nil {
							triggers.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter = nil
						} else {
							triggers.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter = &tfTypes.AccountFilter{}
							if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType != nil {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType = types.StringValue(string(*triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType))
							} else {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType = types.StringNull()
							}
						}
						if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter == nil {
							triggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter = nil
						} else {
							triggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter = &tfTypes.EntitlementFilter{}
							if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

								for _, appEntitlementRefsItem6 := range triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
									var appEntitlementRefs6 tfTypes.AppEntitlementRef

									appEntitlementRefs6.AppID = types.StringPointerValue(appEntitlementRefsItem6.AppID)
									appEntitlementRefs6.ID = types.StringPointerValue(appEntitlementRefsItem6.ID)

									triggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = append(triggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs, appEntitlementRefs6)
								}
							}
							triggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel = types.StringPointerValue(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel)
							triggers.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID = types.StringPointerValue(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID)
						}
						if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter == nil {
							triggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter = nil
						} else {
							triggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter = &tfTypes.GrantFilter{}
							if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType != nil {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringValue(string(*triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType))
							} else {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringNull()
							}
							if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType != nil {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringValue(string(*triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType))
							} else {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringNull()
							}
							if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter != nil {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringValue(string(*triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter))
							} else {
								triggers.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringNull()
							}
						}
					}
				}
				if triggersItem.GrantFoundTrigger == nil {
					triggers.GrantFoundTrigger = nil
				} else {
					triggers.GrantFoundTrigger = &tfTypes.GrantFoundTrigger{}
					if triggersItem.GrantFoundTrigger.GrantTriggerFilter == nil {
						triggers.GrantFoundTrigger.GrantTriggerFilter = nil
					} else {
						triggers.GrantFoundTrigger.GrantTriggerFilter = &tfTypes.GrantTriggerFilter{}
						if triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter == nil {
							triggers.GrantFoundTrigger.GrantTriggerFilter.AccountFilter = nil
						} else {
							triggers.GrantFoundTrigger.GrantTriggerFilter.AccountFilter = &tfTypes.AccountFilter{}
							if triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType != nil {
								triggers.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType = types.StringValue(string(*triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType))
							} else {
								triggers.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType = types.StringNull()
							}
						}
						if triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter == nil {
							triggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter = nil
						} else {
							triggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter = &tfTypes.EntitlementFilter{}
							if triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
								triggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = []tfTypes.AppEntitlementRef{}

								for _, appEntitlementRefsItem7 := range triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
									var appEntitlementRefs7 tfTypes.AppEntitlementRef

									appEntitlementRefs7.AppID = types.StringPointerValue(appEntitlementRefsItem7.AppID)
									appEntitlementRefs7.ID = types.StringPointerValue(appEntitlementRefsItem7.ID)

									triggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs = append(triggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs, appEntitlementRefs7)
								}
							}
							triggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel = types.StringPointerValue(triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel)
							triggers.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID = types.StringPointerValue(triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID)
						}
						if triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter == nil {
							triggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter = nil
						} else {
							triggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter = &tfTypes.GrantFilter{}
							if triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType != nil {
								triggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringValue(string(*triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType))
							} else {
								triggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType = types.StringNull()
							}
							if triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType != nil {
								triggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringValue(string(*triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType))
							} else {
								triggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType = types.StringNull()
							}
							if triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter != nil {
								triggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringValue(string(*triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter))
							} else {
								triggers.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter = types.StringNull()
							}
						}
					}
				}
				if triggersItem.ManualAutomationTrigger == nil {
					triggers.ManualAutomationTrigger = nil
				} else {
					triggers.ManualAutomationTrigger = &tfTypes.ManualAutomationTrigger{}
				}
				if triggersItem.ScheduleTrigger == nil {
					triggers.ScheduleTrigger = nil
				} else {
					triggers.ScheduleTrigger = &tfTypes.ScheduleTrigger{}
					triggers.ScheduleTrigger.Advanced = types.BoolPointerValue(triggersItem.ScheduleTrigger.Advanced)
					triggers.ScheduleTrigger.Condition = types.StringPointerValue(triggersItem.ScheduleTrigger.Condition)
					triggers.ScheduleTrigger.CronSpec = types.StringPointerValue(triggersItem.ScheduleTrigger.CronSpec)
					triggers.ScheduleTrigger.SkipIfTrueCel = types.StringPointerValue(triggersItem.ScheduleTrigger.SkipIfTrueCel)
					triggers.ScheduleTrigger.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(triggersItem.ScheduleTrigger.Start))
					triggers.ScheduleTrigger.Timezone = types.StringPointerValue(triggersItem.ScheduleTrigger.Timezone)
				}
				if triggersItem.ScheduleTriggerAppUser == nil {
					triggers.ScheduleTriggerAppUser = nil
				} else {
					triggers.ScheduleTriggerAppUser = &tfTypes.ScheduleTriggerAppUser{}
					triggers.ScheduleTriggerAppUser.AppID = types.StringPointerValue(triggersItem.ScheduleTriggerAppUser.AppID)
					triggers.ScheduleTriggerAppUser.Condition = types.StringPointerValue(triggersItem.ScheduleTriggerAppUser.Condition)
					triggers.ScheduleTriggerAppUser.CronSpec = types.StringPointerValue(triggersItem.ScheduleTriggerAppUser.CronSpec)
					triggers.ScheduleTriggerAppUser.Start = types.StringPointerValue(typeconvert.TimePointerToStringPointer(triggersItem.ScheduleTriggerAppUser.Start))
					triggers.ScheduleTriggerAppUser.Timezone = types.StringPointerValue(triggersItem.ScheduleTriggerAppUser.Timezone)
				}
				if triggersItem.UsageBasedRevocationTrigger == nil {
					triggers.UsageBasedRevocationTrigger = nil
				} else {
					triggers.UsageBasedRevocationTrigger = &tfTypes.UsageBasedRevocationTrigger{}
					triggers.UsageBasedRevocationTrigger.AppID = types.StringPointerValue(triggersItem.UsageBasedRevocationTrigger.AppID)
					triggers.UsageBasedRevocationTrigger.EnabledAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(triggersItem.UsageBasedRevocationTrigger.EnabledAt))
					if triggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs != nil {
						triggers.UsageBasedRevocationTrigger.ExcludedGroupRefs = []tfTypes.AppEntitlementRef{}

						for _, excludedGroupRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs {
							var excludedGroupRefs1 tfTypes.AppEntitlementRef

							excludedGroupRefs1.AppID = types.StringPointerValue(excludedGroupRefsItem1.AppID)
							excludedGroupRefs1.ID = types.StringPointerValue(excludedGroupRefsItem1.ID)

							triggers.UsageBasedRevocationTrigger.ExcludedGroupRefs = append(triggers.UsageBasedRevocationTrigger.ExcludedGroupRefs, excludedGroupRefs1)
						}
					}
					if triggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs != nil {
						triggers.UsageBasedRevocationTrigger.ExcludedUserRefs = []tfTypes.UserRef{}

						for _, excludedUserRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs {
							var excludedUserRefs1 tfTypes.UserRef

							excludedUserRefs1.ID = types.StringPointerValue(excludedUserRefsItem1.ID)

							triggers.UsageBasedRevocationTrigger.ExcludedUserRefs = append(triggers.UsageBasedRevocationTrigger.ExcludedUserRefs, excludedUserRefs1)
						}
					}
					triggers.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity = types.BoolPointerValue(triggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity)
					if triggersItem.UsageBasedRevocationTrigger.RunDelayed == nil {
						triggers.UsageBasedRevocationTrigger.RunDelayed = nil
					} else {
						triggers.UsageBasedRevocationTrigger.RunDelayed = &tfTypes.RunDelayed{}
						triggers.UsageBasedRevocationTrigger.RunDelayed.ColdStartDelayDays = types.Int64Value(triggersItem.UsageBasedRevocationTrigger.RunDelayed.ColdStartDelayDays)
					}
					if triggersItem.UsageBasedRevocationTrigger.RunImmediately == nil {
						triggers.UsageBasedRevocationTrigger.RunImmediately = nil
					} else {
						triggers.UsageBasedRevocationTrigger.RunImmediately = &tfTypes.RunImmediately{}
					}
					if triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes != nil {
						triggers.UsageBasedRevocationTrigger.TargetedAppUserTypes = make([]types.String, 0, len(triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes))
						for _, v := range triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes {
							triggers.UsageBasedRevocationTrigger.TargetedAppUserTypes = append(triggers.UsageBasedRevocationTrigger.TargetedAppUserTypes, types.StringValue(string(v)))
						}
					}
					if triggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs != nil {
						triggers.UsageBasedRevocationTrigger.TargetedEntitlementRefs = []tfTypes.AppEntitlementRef{}

						for _, targetedEntitlementRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs {
							var targetedEntitlementRefs1 tfTypes.AppEntitlementRef

							targetedEntitlementRefs1.AppID = types.StringPointerValue(targetedEntitlementRefsItem1.AppID)
							targetedEntitlementRefs1.ID = types.StringPointerValue(targetedEntitlementRefsItem1.ID)

							triggers.UsageBasedRevocationTrigger.TargetedEntitlementRefs = append(triggers.UsageBasedRevocationTrigger.TargetedEntitlementRefs, targetedEntitlementRefs1)
						}
					}
					triggers.UsageBasedRevocationTrigger.UnusedForDays = types.Int64PointerValue(triggersItem.UsageBasedRevocationTrigger.UnusedForDays)
				}
				if triggersItem.UserCreatedTrigger == nil {
					triggers.UserCreatedTrigger = nil
				} else {
					triggers.UserCreatedTrigger = &tfTypes.UserCreatedTrigger{}
					triggers.UserCreatedTrigger.Condition = types.StringPointerValue(triggersItem.UserCreatedTrigger.Condition)
				}
				if triggersItem.UserProfileChangeTrigger == nil {
					triggers.UserProfileChangeTrigger = nil
				} else {
					triggers.UserProfileChangeTrigger = &tfTypes.UserProfileChangeTrigger{}
					triggers.UserProfileChangeTrigger.Condition = types.StringPointerValue(triggersItem.UserProfileChangeTrigger.Condition)
				}
				if triggersItem.WebhookAutomationTrigger == nil {
					triggers.WebhookAutomationTrigger = nil
				} else {
					triggers.WebhookAutomationTrigger = &tfTypes.WebhookAutomationTrigger{}
					triggers.WebhookAutomationTrigger.ListenerID = types.StringPointerValue(triggersItem.WebhookAutomationTrigger.ListenerID)
					if triggersItem.WebhookAutomationTrigger.WebhookListenerAuthHMAC == nil {
						triggers.WebhookAutomationTrigger.WebhookListenerAuthHMAC = nil
					} else {
						triggers.WebhookAutomationTrigger.WebhookListenerAuthHMAC = &tfTypes.WebhookListenerAuthHMAC{}
					}
					if triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT == nil {
						triggers.WebhookAutomationTrigger.WebhookListenerAuthJWT = nil
					} else {
						triggers.WebhookAutomationTrigger.WebhookListenerAuthJWT = &tfTypes.WebhookListenerAuthJWT{}
						triggers.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL = types.StringPointerValue(triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL)
					}
				}

				r.Triggers = append(r.Triggers, triggers)
			}
		}
		r.WebhookHmacSecret = types.StringPointerValue(resp.WebhookHmacSecret)
	}

	return diags
}

func (r *AutomationResourceModel) ToOperationsC1APIAutomationsV1AutomationServiceDeleteAutomationRequest(ctx context.Context) (*operations.C1APIAutomationsV1AutomationServiceDeleteAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIAutomationsV1AutomationServiceDeleteAutomationRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToOperationsC1APIAutomationsV1AutomationServiceGetAutomationRequest(ctx context.Context) (*operations.C1APIAutomationsV1AutomationServiceGetAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIAutomationsV1AutomationServiceGetAutomationRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToOperationsC1APIAutomationsV1AutomationServiceUpdateAutomationRequest(ctx context.Context) (*operations.C1APIAutomationsV1AutomationServiceUpdateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateAutomationRequest, updateAutomationRequestDiags := r.ToSharedUpdateAutomationRequest(ctx)
	diags.Append(updateAutomationRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAutomationsV1AutomationServiceUpdateAutomationRequest{
		ID:                      id,
		UpdateAutomationRequest: updateAutomationRequest,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToSharedAutomationInput(ctx context.Context) (*shared.AutomationInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	var automationSteps []shared.AutomationStep
	if r.AutomationSteps != nil {
		automationSteps = make([]shared.AutomationStep, 0, len(r.AutomationSteps))
		for _, automationStepsItem := range r.AutomationSteps {
			var accountLifecycleAction *shared.AccountLifecycleAction
			if automationStepsItem.AccountLifecycleAction != nil {
				var accountInContext *shared.AccountInContext
				if automationStepsItem.AccountLifecycleAction.AccountInContext != nil {
					accountInContext = &shared.AccountInContext{}
				}
				var accountRef *shared.AccountRef
				if automationStepsItem.AccountLifecycleAction.AccountRef != nil {
					accountIDCel := new(string)
					if !automationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.IsUnknown() && !automationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.IsNull() {
						*accountIDCel = automationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.ValueString()
					} else {
						accountIDCel = nil
					}
					accountRef = &shared.AccountRef{
						AccountIDCel: accountIDCel,
					}
				}
				actionName := new(string)
				if !automationStepsItem.AccountLifecycleAction.ActionName.IsUnknown() && !automationStepsItem.AccountLifecycleAction.ActionName.IsNull() {
					*actionName = automationStepsItem.AccountLifecycleAction.ActionName.ValueString()
				} else {
					actionName = nil
				}
				var connectorRef *shared.ConnectorRef
				if automationStepsItem.AccountLifecycleAction.ConnectorRef != nil {
					appId1 := new(string)
					if !automationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.IsNull() {
						*appId1 = automationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.ValueString()
					} else {
						appId1 = nil
					}
					id := new(string)
					if !automationStepsItem.AccountLifecycleAction.ConnectorRef.ID.IsUnknown() && !automationStepsItem.AccountLifecycleAction.ConnectorRef.ID.IsNull() {
						*id = automationStepsItem.AccountLifecycleAction.ConnectorRef.ID.ValueString()
					} else {
						id = nil
					}
					connectorRef = &shared.ConnectorRef{
						AppID: appId1,
						ID:    id,
					}
				}
				accountLifecycleAction = &shared.AccountLifecycleAction{
					AccountInContext: accountInContext,
					AccountRef:       accountRef,
					ActionName:       actionName,
					ConnectorRef:     connectorRef,
				}
			}
			var callFunction *shared.CallFunction
			if automationStepsItem.CallFunction != nil {
				args := make(map[string]string)
				for argsKey, argsValue := range automationStepsItem.CallFunction.Args {
					var argsInst string
					argsInst = argsValue.ValueString()

					args[argsKey] = argsInst
				}
				functionID := new(string)
				if !automationStepsItem.CallFunction.FunctionID.IsUnknown() && !automationStepsItem.CallFunction.FunctionID.IsNull() {
					*functionID = automationStepsItem.CallFunction.FunctionID.ValueString()
				} else {
					functionID = nil
				}
				callFunction = &shared.CallFunction{
					Args:       args,
					FunctionID: functionID,
				}
			}
			var connectorAction *shared.ConnectorAction
			if automationStepsItem.ConnectorAction != nil {
				actionName1 := new(string)
				if !automationStepsItem.ConnectorAction.ActionName.IsUnknown() && !automationStepsItem.ConnectorAction.ActionName.IsNull() {
					*actionName1 = automationStepsItem.ConnectorAction.ActionName.ValueString()
				} else {
					actionName1 = nil
				}
				var argsTemplate *shared.ArgsTemplate
				if automationStepsItem.ConnectorAction.ArgsTemplate != nil {
					argsTemplate = &shared.ArgsTemplate{}
				}
				var connectorRef1 *shared.ConnectorRef
				if automationStepsItem.ConnectorAction.ConnectorRef != nil {
					appId2 := new(string)
					if !automationStepsItem.ConnectorAction.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.ConnectorAction.ConnectorRef.AppID.IsNull() {
						*appId2 = automationStepsItem.ConnectorAction.ConnectorRef.AppID.ValueString()
					} else {
						appId2 = nil
					}
					id1 := new(string)
					if !automationStepsItem.ConnectorAction.ConnectorRef.ID.IsUnknown() && !automationStepsItem.ConnectorAction.ConnectorRef.ID.IsNull() {
						*id1 = automationStepsItem.ConnectorAction.ConnectorRef.ID.ValueString()
					} else {
						id1 = nil
					}
					connectorRef1 = &shared.ConnectorRef{
						AppID: appId2,
						ID:    id1,
					}
				}
				connectorAction = &shared.ConnectorAction{
					ActionName:   actionName1,
					ArgsTemplate: argsTemplate,
					ConnectorRef: connectorRef1,
				}
			}
			var connectorCreateAccount *shared.ConnectorCreateAccount
			if automationStepsItem.ConnectorCreateAccount != nil {
				var connectorRef2 *shared.ConnectorRef
				if automationStepsItem.ConnectorCreateAccount.ConnectorRef != nil {
					appId3 := new(string)
					if !automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsNull() {
						*appId3 = automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.ValueString()
					} else {
						appId3 = nil
					}
					id2 := new(string)
					if !automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsNull() {
						*id2 = automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.ValueString()
					} else {
						id2 = nil
					}
					connectorRef2 = &shared.ConnectorRef{
						AppID: appId3,
						ID:    id2,
					}
				}
				userIDCel := new(string)
				if !automationStepsItem.ConnectorCreateAccount.UserIDCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserIDCel.IsNull() {
					*userIDCel = automationStepsItem.ConnectorCreateAccount.UserIDCel.ValueString()
				} else {
					userIDCel = nil
				}
				var userProperties *shared.UserProperties
				if automationStepsItem.ConnectorCreateAccount.UserProperties != nil {
					displayNameCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsNull() {
						*displayNameCel = automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.ValueString()
					} else {
						displayNameCel = nil
					}
					emailCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsNull() {
						*emailCel = automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.ValueString()
					} else {
						emailCel = nil
					}
					profileAttributeCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsNull() {
						*profileAttributeCel = automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.ValueString()
					} else {
						profileAttributeCel = nil
					}
					usernameCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsNull() {
						*usernameCel = automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.ValueString()
					} else {
						usernameCel = nil
					}
					userProperties = &shared.UserProperties{
						DisplayNameCel:      displayNameCel,
						EmailCel:            emailCel,
						ProfileAttributeCel: profileAttributeCel,
						UsernameCel:         usernameCel,
					}
				}
				connectorCreateAccount = &shared.ConnectorCreateAccount{
					ConnectorRef:   connectorRef2,
					UserIDCel:      userIDCel,
					UserProperties: userProperties,
				}
			}
			var createAccessReview *shared.CreateAccessReview
			if automationStepsItem.CreateAccessReview != nil {
				accessReviewTemplateCel := new(string)
				if !automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsUnknown() && !automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsNull() {
					*accessReviewTemplateCel = automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.ValueString()
				} else {
					accessReviewTemplateCel = nil
				}
				accessReviewTemplateID := new(string)
				if !automationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsUnknown() && !automationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsNull() {
					*accessReviewTemplateID = automationStepsItem.CreateAccessReview.AccessReviewTemplateID.ValueString()
				} else {
					accessReviewTemplateID = nil
				}
				campaignName := new(string)
				if !automationStepsItem.CreateAccessReview.CampaignName.IsUnknown() && !automationStepsItem.CreateAccessReview.CampaignName.IsNull() {
					*campaignName = automationStepsItem.CreateAccessReview.CampaignName.ValueString()
				} else {
					campaignName = nil
				}
				useSubjectUser := new(bool)
				if !automationStepsItem.CreateAccessReview.UseSubjectUser.IsUnknown() && !automationStepsItem.CreateAccessReview.UseSubjectUser.IsNull() {
					*useSubjectUser = automationStepsItem.CreateAccessReview.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser = nil
				}
				userIdsCel := new(string)
				if !automationStepsItem.CreateAccessReview.UserIdsCel.IsUnknown() && !automationStepsItem.CreateAccessReview.UserIdsCel.IsNull() {
					*userIdsCel = automationStepsItem.CreateAccessReview.UserIdsCel.ValueString()
				} else {
					userIdsCel = nil
				}
				var userRefs []shared.UserRef
				if automationStepsItem.CreateAccessReview.UserRefs != nil {
					userRefs = make([]shared.UserRef, 0, len(automationStepsItem.CreateAccessReview.UserRefs))
					for _, userRefsItem := range automationStepsItem.CreateAccessReview.UserRefs {
						id3 := new(string)
						if !userRefsItem.ID.IsUnknown() && !userRefsItem.ID.IsNull() {
							*id3 = userRefsItem.ID.ValueString()
						} else {
							id3 = nil
						}
						userRefs = append(userRefs, shared.UserRef{
							ID: id3,
						})
					}
				}
				createAccessReview = &shared.CreateAccessReview{
					AccessReviewTemplateCel: accessReviewTemplateCel,
					AccessReviewTemplateID:  accessReviewTemplateID,
					CampaignName:            campaignName,
					UseSubjectUser:          useSubjectUser,
					UserIdsCel:              userIdsCel,
					UserRefs:                userRefs,
				}
			}
			var createRevokeTasks *shared.CreateRevokeTasks
			if automationStepsItem.CreateRevokeTasks != nil {
				var appEntitlementRefs []shared.AppEntitlementRef
				if automationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
					appEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.CreateRevokeTasks.AppEntitlementRefs))
					for _, appEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
						appId4 := new(string)
						if !appEntitlementRefsItem.AppID.IsUnknown() && !appEntitlementRefsItem.AppID.IsNull() {
							*appId4 = appEntitlementRefsItem.AppID.ValueString()
						} else {
							appId4 = nil
						}
						id4 := new(string)
						if !appEntitlementRefsItem.ID.IsUnknown() && !appEntitlementRefsItem.ID.IsNull() {
							*id4 = appEntitlementRefsItem.ID.ValueString()
						} else {
							id4 = nil
						}
						appEntitlementRefs = append(appEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId4,
							ID:    id4,
						})
					}
				}
				appEntitlementRefsCel := new(string)
				if !automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel = automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel = nil
				}
				var excludedAppEntitlementRefs []shared.AppEntitlementRef
				if automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs != nil {
					excludedAppEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs))
					for _, excludedAppEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs {
						appId5 := new(string)
						if !excludedAppEntitlementRefsItem.AppID.IsUnknown() && !excludedAppEntitlementRefsItem.AppID.IsNull() {
							*appId5 = excludedAppEntitlementRefsItem.AppID.ValueString()
						} else {
							appId5 = nil
						}
						id5 := new(string)
						if !excludedAppEntitlementRefsItem.ID.IsUnknown() && !excludedAppEntitlementRefsItem.ID.IsNull() {
							*id5 = excludedAppEntitlementRefsItem.ID.ValueString()
						} else {
							id5 = nil
						}
						excludedAppEntitlementRefs = append(excludedAppEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId5,
							ID:    id5,
						})
					}
				}
				excludedAppEntitlementRefsCel := new(string)
				if !automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.IsNull() {
					*excludedAppEntitlementRefsCel = automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.ValueString()
				} else {
					excludedAppEntitlementRefsCel = nil
				}
				revokeAll := new(bool)
				if !automationStepsItem.CreateRevokeTasks.RevokeAll.IsUnknown() && !automationStepsItem.CreateRevokeTasks.RevokeAll.IsNull() {
					*revokeAll = automationStepsItem.CreateRevokeTasks.RevokeAll.ValueBool()
				} else {
					revokeAll = nil
				}
				useSubjectUser1 := new(bool)
				if !automationStepsItem.CreateRevokeTasks.UseSubjectUser.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UseSubjectUser.IsNull() {
					*useSubjectUser1 = automationStepsItem.CreateRevokeTasks.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser1 = nil
				}
				userIDCel1 := new(string)
				if !automationStepsItem.CreateRevokeTasks.UserIDCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UserIDCel.IsNull() {
					*userIDCel1 = automationStepsItem.CreateRevokeTasks.UserIDCel.ValueString()
				} else {
					userIDCel1 = nil
				}
				var userRef *shared.UserRef
				if automationStepsItem.CreateRevokeTasks.UserRef != nil {
					id6 := new(string)
					if !automationStepsItem.CreateRevokeTasks.UserRef.ID.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UserRef.ID.IsNull() {
						*id6 = automationStepsItem.CreateRevokeTasks.UserRef.ID.ValueString()
					} else {
						id6 = nil
					}
					userRef = &shared.UserRef{
						ID: id6,
					}
				}
				createRevokeTasks = &shared.CreateRevokeTasks{
					AppEntitlementRefs:            appEntitlementRefs,
					AppEntitlementRefsCel:         appEntitlementRefsCel,
					ExcludedAppEntitlementRefs:    excludedAppEntitlementRefs,
					ExcludedAppEntitlementRefsCel: excludedAppEntitlementRefsCel,
					RevokeAll:                     revokeAll,
					UseSubjectUser:                useSubjectUser1,
					UserIDCel:                     userIDCel1,
					UserRef:                       userRef,
				}
			}
			var grantEntitlements *shared.GrantEntitlements
			if automationStepsItem.GrantEntitlements != nil {
				var appEntitlementRefs1 []shared.AppEntitlementRef
				if automationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
					appEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.GrantEntitlements.AppEntitlementRefs))
					for _, appEntitlementRefsItem1 := range automationStepsItem.GrantEntitlements.AppEntitlementRefs {
						appId6 := new(string)
						if !appEntitlementRefsItem1.AppID.IsUnknown() && !appEntitlementRefsItem1.AppID.IsNull() {
							*appId6 = appEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId6 = nil
						}
						id7 := new(string)
						if !appEntitlementRefsItem1.ID.IsUnknown() && !appEntitlementRefsItem1.ID.IsNull() {
							*id7 = appEntitlementRefsItem1.ID.ValueString()
						} else {
							id7 = nil
						}
						appEntitlementRefs1 = append(appEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId6,
							ID:    id7,
						})
					}
				}
				appEntitlementRefsCel1 := new(string)
				if !automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsUnknown() && !automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel1 = automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel1 = nil
				}
				useSubjectUser2 := new(bool)
				if !automationStepsItem.GrantEntitlements.UseSubjectUser.IsUnknown() && !automationStepsItem.GrantEntitlements.UseSubjectUser.IsNull() {
					*useSubjectUser2 = automationStepsItem.GrantEntitlements.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser2 = nil
				}
				userIDCel2 := new(string)
				if !automationStepsItem.GrantEntitlements.UserIDCel.IsUnknown() && !automationStepsItem.GrantEntitlements.UserIDCel.IsNull() {
					*userIDCel2 = automationStepsItem.GrantEntitlements.UserIDCel.ValueString()
				} else {
					userIDCel2 = nil
				}
				var userRef1 *shared.UserRef
				if automationStepsItem.GrantEntitlements.UserRef != nil {
					id8 := new(string)
					if !automationStepsItem.GrantEntitlements.UserRef.ID.IsUnknown() && !automationStepsItem.GrantEntitlements.UserRef.ID.IsNull() {
						*id8 = automationStepsItem.GrantEntitlements.UserRef.ID.ValueString()
					} else {
						id8 = nil
					}
					userRef1 = &shared.UserRef{
						ID: id8,
					}
				}
				grantEntitlements = &shared.GrantEntitlements{
					AppEntitlementRefs:    appEntitlementRefs1,
					AppEntitlementRefsCel: appEntitlementRefsCel1,
					UseSubjectUser:        useSubjectUser2,
					UserIDCel:             userIDCel2,
					UserRef:               userRef1,
				}
			}
			var removeFromDelegation *shared.RemoveFromDelegation
			if automationStepsItem.RemoveFromDelegation != nil {
				replacementUserIDCel := new(string)
				if !automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsUnknown() && !automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsNull() {
					*replacementUserIDCel = automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.ValueString()
				} else {
					replacementUserIDCel = nil
				}
				var userRef2 *shared.UserRef
				if automationStepsItem.RemoveFromDelegation.UserRef != nil {
					id9 := new(string)
					if !automationStepsItem.RemoveFromDelegation.UserRef.ID.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserRef.ID.IsNull() {
						*id9 = automationStepsItem.RemoveFromDelegation.UserRef.ID.ValueString()
					} else {
						id9 = nil
					}
					userRef2 = &shared.UserRef{
						ID: id9,
					}
				}
				useSubjectUser3 := new(bool)
				if !automationStepsItem.RemoveFromDelegation.UseSubjectUser.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UseSubjectUser.IsNull() {
					*useSubjectUser3 = automationStepsItem.RemoveFromDelegation.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser3 = nil
				}
				userIDCel3 := new(string)
				if !automationStepsItem.RemoveFromDelegation.UserIDCel.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserIDCel.IsNull() {
					*userIDCel3 = automationStepsItem.RemoveFromDelegation.UserIDCel.ValueString()
				} else {
					userIDCel3 = nil
				}
				var userRef11 *shared.UserRef
				if automationStepsItem.RemoveFromDelegation.UserRef1 != nil {
					id10 := new(string)
					if !automationStepsItem.RemoveFromDelegation.UserRef1.ID.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserRef1.ID.IsNull() {
						*id10 = automationStepsItem.RemoveFromDelegation.UserRef1.ID.ValueString()
					} else {
						id10 = nil
					}
					userRef11 = &shared.UserRef{
						ID: id10,
					}
				}
				removeFromDelegation = &shared.RemoveFromDelegation{
					ReplacementUserIDCel: replacementUserIDCel,
					UserRef:              userRef2,
					UseSubjectUser:       useSubjectUser3,
					UserIDCel:            userIDCel3,
					UserRef1:             userRef11,
				}
			}
			var runAutomation *shared.RunAutomation
			if automationStepsItem.RunAutomation != nil {
				automationTemplateIDCel := new(string)
				if !automationStepsItem.RunAutomation.AutomationTemplateIDCel.IsUnknown() && !automationStepsItem.RunAutomation.AutomationTemplateIDCel.IsNull() {
					*automationTemplateIDCel = automationStepsItem.RunAutomation.AutomationTemplateIDCel.ValueString()
				} else {
					automationTemplateIDCel = nil
				}
				var automationTemplateRef *shared.AutomationTemplateRef
				if automationStepsItem.RunAutomation.AutomationTemplateRef != nil {
					id11 := new(string)
					if !automationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsUnknown() && !automationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsNull() {
						*id11 = automationStepsItem.RunAutomation.AutomationTemplateRef.ID.ValueString()
					} else {
						id11 = nil
					}
					automationTemplateRef = &shared.AutomationTemplateRef{
						ID: id11,
					}
				}
				var automationContext *shared.AutomationContext
				if automationStepsItem.RunAutomation.AutomationContext != nil {
					var contextVar *shared.Context
					if automationStepsItem.RunAutomation.AutomationContext.Context != nil {
						contextVar = &shared.Context{}
					}
					automationContext = &shared.AutomationContext{
						Context: contextVar,
					}
				}
				runAutomation = &shared.RunAutomation{
					AutomationTemplateIDCel: automationTemplateIDCel,
					AutomationTemplateRef:   automationTemplateRef,
					AutomationContext:       automationContext,
				}
			}
			var sendEmail *shared.SendEmail
			if automationStepsItem.SendEmail != nil {
				body := new(string)
				if !automationStepsItem.SendEmail.Body.IsUnknown() && !automationStepsItem.SendEmail.Body.IsNull() {
					*body = automationStepsItem.SendEmail.Body.ValueString()
				} else {
					body = nil
				}
				subject := new(string)
				if !automationStepsItem.SendEmail.Subject.IsUnknown() && !automationStepsItem.SendEmail.Subject.IsNull() {
					*subject = automationStepsItem.SendEmail.Subject.ValueString()
				} else {
					subject = nil
				}
				title := new(string)
				if !automationStepsItem.SendEmail.Title.IsUnknown() && !automationStepsItem.SendEmail.Title.IsNull() {
					*title = automationStepsItem.SendEmail.Title.ValueString()
				} else {
					title = nil
				}
				useSubjectUser4 := new(bool)
				if !automationStepsItem.SendEmail.UseSubjectUser.IsUnknown() && !automationStepsItem.SendEmail.UseSubjectUser.IsNull() {
					*useSubjectUser4 = automationStepsItem.SendEmail.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser4 = nil
				}
				userIdsCel1 := new(string)
				if !automationStepsItem.SendEmail.UserIdsCel.IsUnknown() && !automationStepsItem.SendEmail.UserIdsCel.IsNull() {
					*userIdsCel1 = automationStepsItem.SendEmail.UserIdsCel.ValueString()
				} else {
					userIdsCel1 = nil
				}
				var userRefs1 []shared.UserRef
				if automationStepsItem.SendEmail.UserRefs != nil {
					userRefs1 = make([]shared.UserRef, 0, len(automationStepsItem.SendEmail.UserRefs))
					for _, userRefsItem1 := range automationStepsItem.SendEmail.UserRefs {
						id12 := new(string)
						if !userRefsItem1.ID.IsUnknown() && !userRefsItem1.ID.IsNull() {
							*id12 = userRefsItem1.ID.ValueString()
						} else {
							id12 = nil
						}
						userRefs1 = append(userRefs1, shared.UserRef{
							ID: id12,
						})
					}
				}
				sendEmail = &shared.SendEmail{
					Body:           body,
					Subject:        subject,
					Title:          title,
					UseSubjectUser: useSubjectUser4,
					UserIdsCel:     userIdsCel1,
					UserRefs:       userRefs1,
				}
			}
			var sendSlackMessage *shared.SendSlackMessage
			if automationStepsItem.SendSlackMessage != nil {
				body1 := new(string)
				if !automationStepsItem.SendSlackMessage.Body.IsUnknown() && !automationStepsItem.SendSlackMessage.Body.IsNull() {
					*body1 = automationStepsItem.SendSlackMessage.Body.ValueString()
				} else {
					body1 = nil
				}
				channelName := new(string)
				if !automationStepsItem.SendSlackMessage.ChannelName.IsUnknown() && !automationStepsItem.SendSlackMessage.ChannelName.IsNull() {
					*channelName = automationStepsItem.SendSlackMessage.ChannelName.ValueString()
				} else {
					channelName = nil
				}
				channelNameCel := new(string)
				if !automationStepsItem.SendSlackMessage.ChannelNameCel.IsUnknown() && !automationStepsItem.SendSlackMessage.ChannelNameCel.IsNull() {
					*channelNameCel = automationStepsItem.SendSlackMessage.ChannelNameCel.ValueString()
				} else {
					channelNameCel = nil
				}
				sendSlackMessage = &shared.SendSlackMessage{
					Body:           body1,
					ChannelName:    channelName,
					ChannelNameCel: channelNameCel,
				}
			}
			skipIfTrueCel := new(string)
			if !automationStepsItem.SkipIfTrueCel.IsUnknown() && !automationStepsItem.SkipIfTrueCel.IsNull() {
				*skipIfTrueCel = automationStepsItem.SkipIfTrueCel.ValueString()
			} else {
				skipIfTrueCel = nil
			}
			stepDisplayName := new(string)
			if !automationStepsItem.StepDisplayName.IsUnknown() && !automationStepsItem.StepDisplayName.IsNull() {
				*stepDisplayName = automationStepsItem.StepDisplayName.ValueString()
			} else {
				stepDisplayName = nil
			}
			stepName := new(string)
			if !automationStepsItem.StepName.IsUnknown() && !automationStepsItem.StepName.IsNull() {
				*stepName = automationStepsItem.StepName.ValueString()
			} else {
				stepName = nil
			}
			var taskAction *shared.TaskAction
			if automationStepsItem.TaskAction != nil {
				var closeAction *shared.CloseAction
				if automationStepsItem.TaskAction.CloseAction != nil {
					useSubjectUser5 := new(bool)
					if !automationStepsItem.TaskAction.CloseAction.UseSubjectUser.IsUnknown() && !automationStepsItem.TaskAction.CloseAction.UseSubjectUser.IsNull() {
						*useSubjectUser5 = automationStepsItem.TaskAction.CloseAction.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser5 = nil
					}
					userIDCel4 := new(string)
					if !automationStepsItem.TaskAction.CloseAction.UserIDCel.IsUnknown() && !automationStepsItem.TaskAction.CloseAction.UserIDCel.IsNull() {
						*userIDCel4 = automationStepsItem.TaskAction.CloseAction.UserIDCel.ValueString()
					} else {
						userIDCel4 = nil
					}
					var userRef3 *shared.UserRef
					if automationStepsItem.TaskAction.CloseAction.UserRef != nil {
						id13 := new(string)
						if !automationStepsItem.TaskAction.CloseAction.UserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.CloseAction.UserRef.ID.IsNull() {
							*id13 = automationStepsItem.TaskAction.CloseAction.UserRef.ID.ValueString()
						} else {
							id13 = nil
						}
						userRef3 = &shared.UserRef{
							ID: id13,
						}
					}
					closeAction = &shared.CloseAction{
						UseSubjectUser: useSubjectUser5,
						UserIDCel:      userIDCel4,
						UserRef:        userRef3,
					}
				}
				var reassignAction *shared.ReassignAction
				if automationStepsItem.TaskAction.ReassignAction != nil {
					assigneeUserIDCel := new(string)
					if !automationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.IsNull() {
						*assigneeUserIDCel = automationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.ValueString()
					} else {
						assigneeUserIDCel = nil
					}
					var userRef4 *shared.UserRef
					if automationStepsItem.TaskAction.ReassignAction.UserRef != nil {
						id14 := new(string)
						if !automationStepsItem.TaskAction.ReassignAction.UserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.UserRef.ID.IsNull() {
							*id14 = automationStepsItem.TaskAction.ReassignAction.UserRef.ID.ValueString()
						} else {
							id14 = nil
						}
						userRef4 = &shared.UserRef{
							ID: id14,
						}
					}
					subjectUserIDCel := new(string)
					if !automationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.IsNull() {
						*subjectUserIDCel = automationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.ValueString()
					} else {
						subjectUserIDCel = nil
					}
					var userRef12 *shared.UserRef
					if automationStepsItem.TaskAction.ReassignAction.UserRef1 != nil {
						id15 := new(string)
						if !automationStepsItem.TaskAction.ReassignAction.UserRef1.ID.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.UserRef1.ID.IsNull() {
							*id15 = automationStepsItem.TaskAction.ReassignAction.UserRef1.ID.ValueString()
						} else {
							id15 = nil
						}
						userRef12 = &shared.UserRef{
							ID: id15,
						}
					}
					useSubjectUser6 := new(bool)
					if !automationStepsItem.TaskAction.ReassignAction.UseSubjectUser.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.UseSubjectUser.IsNull() {
						*useSubjectUser6 = automationStepsItem.TaskAction.ReassignAction.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser6 = nil
					}
					reassignAction = &shared.ReassignAction{
						AssigneeUserIDCel: assigneeUserIDCel,
						UserRef:           userRef4,
						SubjectUserIDCel:  subjectUserIDCel,
						UserRef1:          userRef12,
						UseSubjectUser:    useSubjectUser6,
					}
				}
				var taskTypes []shared.TaskTypes
				if automationStepsItem.TaskAction.TaskTypes != nil {
					taskTypes = make([]shared.TaskTypes, 0, len(automationStepsItem.TaskAction.TaskTypes))
					for _, taskTypesItem := range automationStepsItem.TaskAction.TaskTypes {
						taskTypes = append(taskTypes, shared.TaskTypes(taskTypesItem.ValueString()))
					}
				}
				taskUserRelation := new(shared.TaskUserRelation)
				if !automationStepsItem.TaskAction.TaskUserRelation.IsUnknown() && !automationStepsItem.TaskAction.TaskUserRelation.IsNull() {
					*taskUserRelation = shared.TaskUserRelation(automationStepsItem.TaskAction.TaskUserRelation.ValueString())
				} else {
					taskUserRelation = nil
				}
				taskAction = &shared.TaskAction{
					CloseAction:      closeAction,
					ReassignAction:   reassignAction,
					TaskTypes:        taskTypes,
					TaskUserRelation: taskUserRelation,
				}
			}
			var unenrollFromAllAccessProfiles *shared.UnenrollFromAllAccessProfiles
			if automationStepsItem.UnenrollFromAllAccessProfiles != nil {
				var catalogIds []string
				if automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
					catalogIds = make([]string, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
					for _, catalogIdsItem := range automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
						catalogIds = append(catalogIds, catalogIdsItem.ValueString())
					}
				}
				catalogIdsCel := new(string)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsNull() {
					*catalogIdsCel = automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.ValueString()
				} else {
					catalogIdsCel = nil
				}
				useSubjectUser7 := new(bool)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsNull() {
					*useSubjectUser7 = automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser7 = nil
				}
				userIdsCel2 := new(string)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsNull() {
					*userIdsCel2 = automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.ValueString()
				} else {
					userIdsCel2 = nil
				}
				var userRefs2 []shared.UserRef
				if automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
					userRefs2 = make([]shared.UserRef, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs))
					for _, userRefsItem2 := range automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
						id16 := new(string)
						if !userRefsItem2.ID.IsUnknown() && !userRefsItem2.ID.IsNull() {
							*id16 = userRefsItem2.ID.ValueString()
						} else {
							id16 = nil
						}
						userRefs2 = append(userRefs2, shared.UserRef{
							ID: id16,
						})
					}
				}
				unenrollFromAllAccessProfiles = &shared.UnenrollFromAllAccessProfiles{
					CatalogIds:     catalogIds,
					CatalogIdsCel:  catalogIdsCel,
					UseSubjectUser: useSubjectUser7,
					UserIdsCel:     userIdsCel2,
					UserRefs:       userRefs2,
				}
			}
			var updateUser *shared.UpdateUser
			if automationStepsItem.UpdateUser != nil {
				useSubjectUser8 := new(bool)
				if !automationStepsItem.UpdateUser.UseSubjectUser.IsUnknown() && !automationStepsItem.UpdateUser.UseSubjectUser.IsNull() {
					*useSubjectUser8 = automationStepsItem.UpdateUser.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser8 = nil
				}
				userIDCel5 := new(string)
				if !automationStepsItem.UpdateUser.UserIDCel.IsUnknown() && !automationStepsItem.UpdateUser.UserIDCel.IsNull() {
					*userIDCel5 = automationStepsItem.UpdateUser.UserIDCel.ValueString()
				} else {
					userIDCel5 = nil
				}
				var userRef5 *shared.UserRef
				if automationStepsItem.UpdateUser.UserRef != nil {
					id17 := new(string)
					if !automationStepsItem.UpdateUser.UserRef.ID.IsUnknown() && !automationStepsItem.UpdateUser.UserRef.ID.IsNull() {
						*id17 = automationStepsItem.UpdateUser.UserRef.ID.ValueString()
					} else {
						id17 = nil
					}
					userRef5 = &shared.UserRef{
						ID: id17,
					}
				}
				userStatusCel := new(string)
				if !automationStepsItem.UpdateUser.UserStatusCel.IsUnknown() && !automationStepsItem.UpdateUser.UserStatusCel.IsNull() {
					*userStatusCel = automationStepsItem.UpdateUser.UserStatusCel.ValueString()
				} else {
					userStatusCel = nil
				}
				userStatusEnum := new(shared.UserStatusEnum)
				if !automationStepsItem.UpdateUser.UserStatusEnum.IsUnknown() && !automationStepsItem.UpdateUser.UserStatusEnum.IsNull() {
					*userStatusEnum = shared.UserStatusEnum(automationStepsItem.UpdateUser.UserStatusEnum.ValueString())
				} else {
					userStatusEnum = nil
				}
				updateUser = &shared.UpdateUser{
					UseSubjectUser: useSubjectUser8,
					UserIDCel:      userIDCel5,
					UserRef:        userRef5,
					UserStatusCel:  userStatusCel,
					UserStatusEnum: userStatusEnum,
				}
			}
			var waitForDuration *shared.WaitForDuration
			if automationStepsItem.WaitForDuration != nil {
				duration := new(string)
				if !automationStepsItem.WaitForDuration.Duration.IsUnknown() && !automationStepsItem.WaitForDuration.Duration.IsNull() {
					*duration = automationStepsItem.WaitForDuration.Duration.ValueString()
				} else {
					duration = nil
				}
				waitForDuration = &shared.WaitForDuration{
					Duration: duration,
				}
			}
			var webhook *shared.Webhook
			if automationStepsItem.Webhook != nil {
				var payload *shared.Payload
				if automationStepsItem.Webhook.Payload != nil {
					payload = &shared.Payload{}
				}
				webhookID := new(string)
				if !automationStepsItem.Webhook.WebhookID.IsUnknown() && !automationStepsItem.Webhook.WebhookID.IsNull() {
					*webhookID = automationStepsItem.Webhook.WebhookID.ValueString()
				} else {
					webhookID = nil
				}
				webhookIDCel := new(string)
				if !automationStepsItem.Webhook.WebhookIDCel.IsUnknown() && !automationStepsItem.Webhook.WebhookIDCel.IsNull() {
					*webhookIDCel = automationStepsItem.Webhook.WebhookIDCel.ValueString()
				} else {
					webhookIDCel = nil
				}
				webhook = &shared.Webhook{
					Payload:      payload,
					WebhookID:    webhookID,
					WebhookIDCel: webhookIDCel,
				}
			}
			automationSteps = append(automationSteps, shared.AutomationStep{
				AccountLifecycleAction:        accountLifecycleAction,
				CallFunction:                  callFunction,
				ConnectorAction:               connectorAction,
				ConnectorCreateAccount:        connectorCreateAccount,
				CreateAccessReview:            createAccessReview,
				CreateRevokeTasks:             createRevokeTasks,
				GrantEntitlements:             grantEntitlements,
				RemoveFromDelegation:          removeFromDelegation,
				RunAutomation:                 runAutomation,
				SendEmail:                     sendEmail,
				SendSlackMessage:              sendSlackMessage,
				SkipIfTrueCel:                 skipIfTrueCel,
				StepDisplayName:               stepDisplayName,
				StepName:                      stepName,
				TaskAction:                    taskAction,
				UnenrollFromAllAccessProfiles: unenrollFromAllAccessProfiles,
				UpdateUser:                    updateUser,
				WaitForDuration:               waitForDuration,
				Webhook:                       webhook,
			})
		}
	}
	var disabledReasonCircuitBreaker *shared.DisabledReasonCircuitBreaker
	if r.DisabledReasonCircuitBreaker != nil {
		disabledReasonCircuitBreaker = &shared.DisabledReasonCircuitBreaker{}
	}
	var automationContext1 *shared.AutomationContext
	if r.AutomationContext != nil {
		var contextVar1 *shared.Context
		if r.AutomationContext.Context != nil {
			contextVar1 = &shared.Context{}
		}
		automationContext1 = &shared.AutomationContext{
			Context: contextVar1,
		}
	}
	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	currentVersion := new(string)
	if !r.CurrentVersion.IsUnknown() && !r.CurrentVersion.IsNull() {
		*currentVersion = r.CurrentVersion.ValueString()
	} else {
		currentVersion = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var draftAutomationSteps []shared.AutomationStep
	if r.DraftAutomationSteps != nil {
		draftAutomationSteps = make([]shared.AutomationStep, 0, len(r.DraftAutomationSteps))
		for _, draftAutomationStepsItem := range r.DraftAutomationSteps {
			var accountLifecycleAction1 *shared.AccountLifecycleAction
			if draftAutomationStepsItem.AccountLifecycleAction != nil {
				var accountInContext1 *shared.AccountInContext
				if draftAutomationStepsItem.AccountLifecycleAction.AccountInContext != nil {
					accountInContext1 = &shared.AccountInContext{}
				}
				var accountRef1 *shared.AccountRef
				if draftAutomationStepsItem.AccountLifecycleAction.AccountRef != nil {
					accountIDCel1 := new(string)
					if !draftAutomationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.IsUnknown() && !draftAutomationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.IsNull() {
						*accountIDCel1 = draftAutomationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.ValueString()
					} else {
						accountIDCel1 = nil
					}
					accountRef1 = &shared.AccountRef{
						AccountIDCel: accountIDCel1,
					}
				}
				actionName2 := new(string)
				if !draftAutomationStepsItem.AccountLifecycleAction.ActionName.IsUnknown() && !draftAutomationStepsItem.AccountLifecycleAction.ActionName.IsNull() {
					*actionName2 = draftAutomationStepsItem.AccountLifecycleAction.ActionName.ValueString()
				} else {
					actionName2 = nil
				}
				var connectorRef3 *shared.ConnectorRef
				if draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef != nil {
					appId7 := new(string)
					if !draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.IsNull() {
						*appId7 = draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.ValueString()
					} else {
						appId7 = nil
					}
					id18 := new(string)
					if !draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.ID.IsNull() {
						*id18 = draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.ID.ValueString()
					} else {
						id18 = nil
					}
					connectorRef3 = &shared.ConnectorRef{
						AppID: appId7,
						ID:    id18,
					}
				}
				accountLifecycleAction1 = &shared.AccountLifecycleAction{
					AccountInContext: accountInContext1,
					AccountRef:       accountRef1,
					ActionName:       actionName2,
					ConnectorRef:     connectorRef3,
				}
			}
			var callFunction1 *shared.CallFunction
			if draftAutomationStepsItem.CallFunction != nil {
				args1 := make(map[string]string)
				for argsKey1, argsValue1 := range draftAutomationStepsItem.CallFunction.Args {
					var argsInst1 string
					argsInst1 = argsValue1.ValueString()

					args1[argsKey1] = argsInst1
				}
				functionId1 := new(string)
				if !draftAutomationStepsItem.CallFunction.FunctionID.IsUnknown() && !draftAutomationStepsItem.CallFunction.FunctionID.IsNull() {
					*functionId1 = draftAutomationStepsItem.CallFunction.FunctionID.ValueString()
				} else {
					functionId1 = nil
				}
				callFunction1 = &shared.CallFunction{
					Args:       args1,
					FunctionID: functionId1,
				}
			}
			var connectorAction1 *shared.ConnectorAction
			if draftAutomationStepsItem.ConnectorAction != nil {
				actionName3 := new(string)
				if !draftAutomationStepsItem.ConnectorAction.ActionName.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ActionName.IsNull() {
					*actionName3 = draftAutomationStepsItem.ConnectorAction.ActionName.ValueString()
				} else {
					actionName3 = nil
				}
				var argsTemplate1 *shared.ArgsTemplate
				if draftAutomationStepsItem.ConnectorAction.ArgsTemplate != nil {
					argsTemplate1 = &shared.ArgsTemplate{}
				}
				var connectorRef4 *shared.ConnectorRef
				if draftAutomationStepsItem.ConnectorAction.ConnectorRef != nil {
					appId8 := new(string)
					if !draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.IsNull() {
						*appId8 = draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.ValueString()
					} else {
						appId8 = nil
					}
					id19 := new(string)
					if !draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.IsNull() {
						*id19 = draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.ValueString()
					} else {
						id19 = nil
					}
					connectorRef4 = &shared.ConnectorRef{
						AppID: appId8,
						ID:    id19,
					}
				}
				connectorAction1 = &shared.ConnectorAction{
					ActionName:   actionName3,
					ArgsTemplate: argsTemplate1,
					ConnectorRef: connectorRef4,
				}
			}
			var connectorCreateAccount1 *shared.ConnectorCreateAccount
			if draftAutomationStepsItem.ConnectorCreateAccount != nil {
				var connectorRef5 *shared.ConnectorRef
				if draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef != nil {
					appId9 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsNull() {
						*appId9 = draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.ValueString()
					} else {
						appId9 = nil
					}
					id20 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsNull() {
						*id20 = draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.ValueString()
					} else {
						id20 = nil
					}
					connectorRef5 = &shared.ConnectorRef{
						AppID: appId9,
						ID:    id20,
					}
				}
				userIDCel6 := new(string)
				if !draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.IsNull() {
					*userIDCel6 = draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.ValueString()
				} else {
					userIDCel6 = nil
				}
				var userProperties1 *shared.UserProperties
				if draftAutomationStepsItem.ConnectorCreateAccount.UserProperties != nil {
					displayNameCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsNull() {
						*displayNameCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.ValueString()
					} else {
						displayNameCel1 = nil
					}
					emailCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsNull() {
						*emailCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.ValueString()
					} else {
						emailCel1 = nil
					}
					profileAttributeCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsNull() {
						*profileAttributeCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.ValueString()
					} else {
						profileAttributeCel1 = nil
					}
					usernameCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsNull() {
						*usernameCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.ValueString()
					} else {
						usernameCel1 = nil
					}
					userProperties1 = &shared.UserProperties{
						DisplayNameCel:      displayNameCel1,
						EmailCel:            emailCel1,
						ProfileAttributeCel: profileAttributeCel1,
						UsernameCel:         usernameCel1,
					}
				}
				connectorCreateAccount1 = &shared.ConnectorCreateAccount{
					ConnectorRef:   connectorRef5,
					UserIDCel:      userIDCel6,
					UserProperties: userProperties1,
				}
			}
			var createAccessReview1 *shared.CreateAccessReview
			if draftAutomationStepsItem.CreateAccessReview != nil {
				accessReviewTemplateCel1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsNull() {
					*accessReviewTemplateCel1 = draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.ValueString()
				} else {
					accessReviewTemplateCel1 = nil
				}
				accessReviewTemplateId1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsNull() {
					*accessReviewTemplateId1 = draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.ValueString()
				} else {
					accessReviewTemplateId1 = nil
				}
				campaignName1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.CampaignName.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.CampaignName.IsNull() {
					*campaignName1 = draftAutomationStepsItem.CreateAccessReview.CampaignName.ValueString()
				} else {
					campaignName1 = nil
				}
				useSubjectUser9 := new(bool)
				if !draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.IsNull() {
					*useSubjectUser9 = draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser9 = nil
				}
				userIdsCel3 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.UserIdsCel.IsNull() {
					*userIdsCel3 = draftAutomationStepsItem.CreateAccessReview.UserIdsCel.ValueString()
				} else {
					userIdsCel3 = nil
				}
				var userRefs3 []shared.UserRef
				if draftAutomationStepsItem.CreateAccessReview.UserRefs != nil {
					userRefs3 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.CreateAccessReview.UserRefs))
					for _, userRefsItem3 := range draftAutomationStepsItem.CreateAccessReview.UserRefs {
						id21 := new(string)
						if !userRefsItem3.ID.IsUnknown() && !userRefsItem3.ID.IsNull() {
							*id21 = userRefsItem3.ID.ValueString()
						} else {
							id21 = nil
						}
						userRefs3 = append(userRefs3, shared.UserRef{
							ID: id21,
						})
					}
				}
				createAccessReview1 = &shared.CreateAccessReview{
					AccessReviewTemplateCel: accessReviewTemplateCel1,
					AccessReviewTemplateID:  accessReviewTemplateId1,
					CampaignName:            campaignName1,
					UseSubjectUser:          useSubjectUser9,
					UserIdsCel:              userIdsCel3,
					UserRefs:                userRefs3,
				}
			}
			var createRevokeTasks1 *shared.CreateRevokeTasks
			if draftAutomationStepsItem.CreateRevokeTasks != nil {
				var appEntitlementRefs2 []shared.AppEntitlementRef
				if draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
					appEntitlementRefs2 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs))
					for _, appEntitlementRefsItem2 := range draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
						appId10 := new(string)
						if !appEntitlementRefsItem2.AppID.IsUnknown() && !appEntitlementRefsItem2.AppID.IsNull() {
							*appId10 = appEntitlementRefsItem2.AppID.ValueString()
						} else {
							appId10 = nil
						}
						id22 := new(string)
						if !appEntitlementRefsItem2.ID.IsUnknown() && !appEntitlementRefsItem2.ID.IsNull() {
							*id22 = appEntitlementRefsItem2.ID.ValueString()
						} else {
							id22 = nil
						}
						appEntitlementRefs2 = append(appEntitlementRefs2, shared.AppEntitlementRef{
							AppID: appId10,
							ID:    id22,
						})
					}
				}
				appEntitlementRefsCel2 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel2 = draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel2 = nil
				}
				var excludedAppEntitlementRefs1 []shared.AppEntitlementRef
				if draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs != nil {
					excludedAppEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs))
					for _, excludedAppEntitlementRefsItem1 := range draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs {
						appId11 := new(string)
						if !excludedAppEntitlementRefsItem1.AppID.IsUnknown() && !excludedAppEntitlementRefsItem1.AppID.IsNull() {
							*appId11 = excludedAppEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId11 = nil
						}
						id23 := new(string)
						if !excludedAppEntitlementRefsItem1.ID.IsUnknown() && !excludedAppEntitlementRefsItem1.ID.IsNull() {
							*id23 = excludedAppEntitlementRefsItem1.ID.ValueString()
						} else {
							id23 = nil
						}
						excludedAppEntitlementRefs1 = append(excludedAppEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId11,
							ID:    id23,
						})
					}
				}
				excludedAppEntitlementRefsCel1 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.IsNull() {
					*excludedAppEntitlementRefsCel1 = draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.ValueString()
				} else {
					excludedAppEntitlementRefsCel1 = nil
				}
				revokeAll1 := new(bool)
				if !draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.IsNull() {
					*revokeAll1 = draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.ValueBool()
				} else {
					revokeAll1 = nil
				}
				useSubjectUser10 := new(bool)
				if !draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.IsNull() {
					*useSubjectUser10 = draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser10 = nil
				}
				userIDCel7 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.IsNull() {
					*userIDCel7 = draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.ValueString()
				} else {
					userIDCel7 = nil
				}
				var userRef6 *shared.UserRef
				if draftAutomationStepsItem.CreateRevokeTasks.UserRef != nil {
					id24 := new(string)
					if !draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.IsNull() {
						*id24 = draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.ValueString()
					} else {
						id24 = nil
					}
					userRef6 = &shared.UserRef{
						ID: id24,
					}
				}
				createRevokeTasks1 = &shared.CreateRevokeTasks{
					AppEntitlementRefs:            appEntitlementRefs2,
					AppEntitlementRefsCel:         appEntitlementRefsCel2,
					ExcludedAppEntitlementRefs:    excludedAppEntitlementRefs1,
					ExcludedAppEntitlementRefsCel: excludedAppEntitlementRefsCel1,
					RevokeAll:                     revokeAll1,
					UseSubjectUser:                useSubjectUser10,
					UserIDCel:                     userIDCel7,
					UserRef:                       userRef6,
				}
			}
			var grantEntitlements1 *shared.GrantEntitlements
			if draftAutomationStepsItem.GrantEntitlements != nil {
				var appEntitlementRefs3 []shared.AppEntitlementRef
				if draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
					appEntitlementRefs3 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs))
					for _, appEntitlementRefsItem3 := range draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs {
						appId12 := new(string)
						if !appEntitlementRefsItem3.AppID.IsUnknown() && !appEntitlementRefsItem3.AppID.IsNull() {
							*appId12 = appEntitlementRefsItem3.AppID.ValueString()
						} else {
							appId12 = nil
						}
						id25 := new(string)
						if !appEntitlementRefsItem3.ID.IsUnknown() && !appEntitlementRefsItem3.ID.IsNull() {
							*id25 = appEntitlementRefsItem3.ID.ValueString()
						} else {
							id25 = nil
						}
						appEntitlementRefs3 = append(appEntitlementRefs3, shared.AppEntitlementRef{
							AppID: appId12,
							ID:    id25,
						})
					}
				}
				appEntitlementRefsCel3 := new(string)
				if !draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel3 = draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel3 = nil
				}
				useSubjectUser11 := new(bool)
				if !draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.IsNull() {
					*useSubjectUser11 = draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser11 = nil
				}
				userIDCel8 := new(string)
				if !draftAutomationStepsItem.GrantEntitlements.UserIDCel.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UserIDCel.IsNull() {
					*userIDCel8 = draftAutomationStepsItem.GrantEntitlements.UserIDCel.ValueString()
				} else {
					userIDCel8 = nil
				}
				var userRef7 *shared.UserRef
				if draftAutomationStepsItem.GrantEntitlements.UserRef != nil {
					id26 := new(string)
					if !draftAutomationStepsItem.GrantEntitlements.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UserRef.ID.IsNull() {
						*id26 = draftAutomationStepsItem.GrantEntitlements.UserRef.ID.ValueString()
					} else {
						id26 = nil
					}
					userRef7 = &shared.UserRef{
						ID: id26,
					}
				}
				grantEntitlements1 = &shared.GrantEntitlements{
					AppEntitlementRefs:    appEntitlementRefs3,
					AppEntitlementRefsCel: appEntitlementRefsCel3,
					UseSubjectUser:        useSubjectUser11,
					UserIDCel:             userIDCel8,
					UserRef:               userRef7,
				}
			}
			var removeFromDelegation1 *shared.RemoveFromDelegation
			if draftAutomationStepsItem.RemoveFromDelegation != nil {
				replacementUserIDCel1 := new(string)
				if !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsNull() {
					*replacementUserIDCel1 = draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.ValueString()
				} else {
					replacementUserIDCel1 = nil
				}
				var userRef8 *shared.UserRef
				if draftAutomationStepsItem.RemoveFromDelegation.UserRef != nil {
					id27 := new(string)
					if !draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.IsNull() {
						*id27 = draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.ValueString()
					} else {
						id27 = nil
					}
					userRef8 = &shared.UserRef{
						ID: id27,
					}
				}
				useSubjectUser12 := new(bool)
				if !draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.IsNull() {
					*useSubjectUser12 = draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser12 = nil
				}
				userIDCel9 := new(string)
				if !draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.IsNull() {
					*userIDCel9 = draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.ValueString()
				} else {
					userIDCel9 = nil
				}
				var userRef13 *shared.UserRef
				if draftAutomationStepsItem.RemoveFromDelegation.UserRef1 != nil {
					id28 := new(string)
					if !draftAutomationStepsItem.RemoveFromDelegation.UserRef1.ID.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserRef1.ID.IsNull() {
						*id28 = draftAutomationStepsItem.RemoveFromDelegation.UserRef1.ID.ValueString()
					} else {
						id28 = nil
					}
					userRef13 = &shared.UserRef{
						ID: id28,
					}
				}
				removeFromDelegation1 = &shared.RemoveFromDelegation{
					ReplacementUserIDCel: replacementUserIDCel1,
					UserRef:              userRef8,
					UseSubjectUser:       useSubjectUser12,
					UserIDCel:            userIDCel9,
					UserRef1:             userRef13,
				}
			}
			var runAutomation1 *shared.RunAutomation
			if draftAutomationStepsItem.RunAutomation != nil {
				automationTemplateIDCel1 := new(string)
				if !draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.IsUnknown() && !draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.IsNull() {
					*automationTemplateIDCel1 = draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.ValueString()
				} else {
					automationTemplateIDCel1 = nil
				}
				var automationTemplateRef1 *shared.AutomationTemplateRef
				if draftAutomationStepsItem.RunAutomation.AutomationTemplateRef != nil {
					id29 := new(string)
					if !draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsUnknown() && !draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsNull() {
						*id29 = draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.ValueString()
					} else {
						id29 = nil
					}
					automationTemplateRef1 = &shared.AutomationTemplateRef{
						ID: id29,
					}
				}
				var automationContext2 *shared.AutomationContext
				if draftAutomationStepsItem.RunAutomation.AutomationContext != nil {
					var contextVar2 *shared.Context
					if draftAutomationStepsItem.RunAutomation.AutomationContext.Context != nil {
						contextVar2 = &shared.Context{}
					}
					automationContext2 = &shared.AutomationContext{
						Context: contextVar2,
					}
				}
				runAutomation1 = &shared.RunAutomation{
					AutomationTemplateIDCel: automationTemplateIDCel1,
					AutomationTemplateRef:   automationTemplateRef1,
					AutomationContext:       automationContext2,
				}
			}
			var sendEmail1 *shared.SendEmail
			if draftAutomationStepsItem.SendEmail != nil {
				body2 := new(string)
				if !draftAutomationStepsItem.SendEmail.Body.IsUnknown() && !draftAutomationStepsItem.SendEmail.Body.IsNull() {
					*body2 = draftAutomationStepsItem.SendEmail.Body.ValueString()
				} else {
					body2 = nil
				}
				subject1 := new(string)
				if !draftAutomationStepsItem.SendEmail.Subject.IsUnknown() && !draftAutomationStepsItem.SendEmail.Subject.IsNull() {
					*subject1 = draftAutomationStepsItem.SendEmail.Subject.ValueString()
				} else {
					subject1 = nil
				}
				title1 := new(string)
				if !draftAutomationStepsItem.SendEmail.Title.IsUnknown() && !draftAutomationStepsItem.SendEmail.Title.IsNull() {
					*title1 = draftAutomationStepsItem.SendEmail.Title.ValueString()
				} else {
					title1 = nil
				}
				useSubjectUser13 := new(bool)
				if !draftAutomationStepsItem.SendEmail.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.SendEmail.UseSubjectUser.IsNull() {
					*useSubjectUser13 = draftAutomationStepsItem.SendEmail.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser13 = nil
				}
				userIdsCel4 := new(string)
				if !draftAutomationStepsItem.SendEmail.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.SendEmail.UserIdsCel.IsNull() {
					*userIdsCel4 = draftAutomationStepsItem.SendEmail.UserIdsCel.ValueString()
				} else {
					userIdsCel4 = nil
				}
				var userRefs4 []shared.UserRef
				if draftAutomationStepsItem.SendEmail.UserRefs != nil {
					userRefs4 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.SendEmail.UserRefs))
					for _, userRefsItem4 := range draftAutomationStepsItem.SendEmail.UserRefs {
						id30 := new(string)
						if !userRefsItem4.ID.IsUnknown() && !userRefsItem4.ID.IsNull() {
							*id30 = userRefsItem4.ID.ValueString()
						} else {
							id30 = nil
						}
						userRefs4 = append(userRefs4, shared.UserRef{
							ID: id30,
						})
					}
				}
				sendEmail1 = &shared.SendEmail{
					Body:           body2,
					Subject:        subject1,
					Title:          title1,
					UseSubjectUser: useSubjectUser13,
					UserIdsCel:     userIdsCel4,
					UserRefs:       userRefs4,
				}
			}
			var sendSlackMessage1 *shared.SendSlackMessage
			if draftAutomationStepsItem.SendSlackMessage != nil {
				body3 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.Body.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.Body.IsNull() {
					*body3 = draftAutomationStepsItem.SendSlackMessage.Body.ValueString()
				} else {
					body3 = nil
				}
				channelName1 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.ChannelName.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.ChannelName.IsNull() {
					*channelName1 = draftAutomationStepsItem.SendSlackMessage.ChannelName.ValueString()
				} else {
					channelName1 = nil
				}
				channelNameCel1 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.IsNull() {
					*channelNameCel1 = draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.ValueString()
				} else {
					channelNameCel1 = nil
				}
				sendSlackMessage1 = &shared.SendSlackMessage{
					Body:           body3,
					ChannelName:    channelName1,
					ChannelNameCel: channelNameCel1,
				}
			}
			skipIfTrueCel1 := new(string)
			if !draftAutomationStepsItem.SkipIfTrueCel.IsUnknown() && !draftAutomationStepsItem.SkipIfTrueCel.IsNull() {
				*skipIfTrueCel1 = draftAutomationStepsItem.SkipIfTrueCel.ValueString()
			} else {
				skipIfTrueCel1 = nil
			}
			stepDisplayName1 := new(string)
			if !draftAutomationStepsItem.StepDisplayName.IsUnknown() && !draftAutomationStepsItem.StepDisplayName.IsNull() {
				*stepDisplayName1 = draftAutomationStepsItem.StepDisplayName.ValueString()
			} else {
				stepDisplayName1 = nil
			}
			stepName1 := new(string)
			if !draftAutomationStepsItem.StepName.IsUnknown() && !draftAutomationStepsItem.StepName.IsNull() {
				*stepName1 = draftAutomationStepsItem.StepName.ValueString()
			} else {
				stepName1 = nil
			}
			var taskAction1 *shared.TaskAction
			if draftAutomationStepsItem.TaskAction != nil {
				var closeAction1 *shared.CloseAction
				if draftAutomationStepsItem.TaskAction.CloseAction != nil {
					useSubjectUser14 := new(bool)
					if !draftAutomationStepsItem.TaskAction.CloseAction.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.TaskAction.CloseAction.UseSubjectUser.IsNull() {
						*useSubjectUser14 = draftAutomationStepsItem.TaskAction.CloseAction.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser14 = nil
					}
					userIDCel10 := new(string)
					if !draftAutomationStepsItem.TaskAction.CloseAction.UserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.CloseAction.UserIDCel.IsNull() {
						*userIDCel10 = draftAutomationStepsItem.TaskAction.CloseAction.UserIDCel.ValueString()
					} else {
						userIDCel10 = nil
					}
					var userRef9 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.CloseAction.UserRef != nil {
						id31 := new(string)
						if !draftAutomationStepsItem.TaskAction.CloseAction.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.CloseAction.UserRef.ID.IsNull() {
							*id31 = draftAutomationStepsItem.TaskAction.CloseAction.UserRef.ID.ValueString()
						} else {
							id31 = nil
						}
						userRef9 = &shared.UserRef{
							ID: id31,
						}
					}
					closeAction1 = &shared.CloseAction{
						UseSubjectUser: useSubjectUser14,
						UserIDCel:      userIDCel10,
						UserRef:        userRef9,
					}
				}
				var reassignAction1 *shared.ReassignAction
				if draftAutomationStepsItem.TaskAction.ReassignAction != nil {
					assigneeUserIDCel1 := new(string)
					if !draftAutomationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.IsNull() {
						*assigneeUserIDCel1 = draftAutomationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.ValueString()
					} else {
						assigneeUserIDCel1 = nil
					}
					var userRef10 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.ReassignAction.UserRef != nil {
						id32 := new(string)
						if !draftAutomationStepsItem.TaskAction.ReassignAction.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.UserRef.ID.IsNull() {
							*id32 = draftAutomationStepsItem.TaskAction.ReassignAction.UserRef.ID.ValueString()
						} else {
							id32 = nil
						}
						userRef10 = &shared.UserRef{
							ID: id32,
						}
					}
					subjectUserIDCel1 := new(string)
					if !draftAutomationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.IsNull() {
						*subjectUserIDCel1 = draftAutomationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.ValueString()
					} else {
						subjectUserIDCel1 = nil
					}
					var userRef14 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1 != nil {
						id33 := new(string)
						if !draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1.ID.IsNull() {
							*id33 = draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1.ID.ValueString()
						} else {
							id33 = nil
						}
						userRef14 = &shared.UserRef{
							ID: id33,
						}
					}
					useSubjectUser15 := new(bool)
					if !draftAutomationStepsItem.TaskAction.ReassignAction.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.UseSubjectUser.IsNull() {
						*useSubjectUser15 = draftAutomationStepsItem.TaskAction.ReassignAction.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser15 = nil
					}
					reassignAction1 = &shared.ReassignAction{
						AssigneeUserIDCel: assigneeUserIDCel1,
						UserRef:           userRef10,
						SubjectUserIDCel:  subjectUserIDCel1,
						UserRef1:          userRef14,
						UseSubjectUser:    useSubjectUser15,
					}
				}
				var taskTypes1 []shared.TaskTypes
				if draftAutomationStepsItem.TaskAction.TaskTypes != nil {
					taskTypes1 = make([]shared.TaskTypes, 0, len(draftAutomationStepsItem.TaskAction.TaskTypes))
					for _, taskTypesItem1 := range draftAutomationStepsItem.TaskAction.TaskTypes {
						taskTypes1 = append(taskTypes1, shared.TaskTypes(taskTypesItem1.ValueString()))
					}
				}
				taskUserRelation1 := new(shared.TaskUserRelation)
				if !draftAutomationStepsItem.TaskAction.TaskUserRelation.IsUnknown() && !draftAutomationStepsItem.TaskAction.TaskUserRelation.IsNull() {
					*taskUserRelation1 = shared.TaskUserRelation(draftAutomationStepsItem.TaskAction.TaskUserRelation.ValueString())
				} else {
					taskUserRelation1 = nil
				}
				taskAction1 = &shared.TaskAction{
					CloseAction:      closeAction1,
					ReassignAction:   reassignAction1,
					TaskTypes:        taskTypes1,
					TaskUserRelation: taskUserRelation1,
				}
			}
			var unenrollFromAllAccessProfiles1 *shared.UnenrollFromAllAccessProfiles
			if draftAutomationStepsItem.UnenrollFromAllAccessProfiles != nil {
				var catalogIds1 []string
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
					catalogIds1 = make([]string, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
					for _, catalogIdsItem1 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
						catalogIds1 = append(catalogIds1, catalogIdsItem1.ValueString())
					}
				}
				catalogIdsCel1 := new(string)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsNull() {
					*catalogIdsCel1 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.ValueString()
				} else {
					catalogIdsCel1 = nil
				}
				useSubjectUser16 := new(bool)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsNull() {
					*useSubjectUser16 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser16 = nil
				}
				userIdsCel5 := new(string)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsNull() {
					*userIdsCel5 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.ValueString()
				} else {
					userIdsCel5 = nil
				}
				var userRefs5 []shared.UserRef
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
					userRefs5 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs))
					for _, userRefsItem5 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
						id34 := new(string)
						if !userRefsItem5.ID.IsUnknown() && !userRefsItem5.ID.IsNull() {
							*id34 = userRefsItem5.ID.ValueString()
						} else {
							id34 = nil
						}
						userRefs5 = append(userRefs5, shared.UserRef{
							ID: id34,
						})
					}
				}
				unenrollFromAllAccessProfiles1 = &shared.UnenrollFromAllAccessProfiles{
					CatalogIds:     catalogIds1,
					CatalogIdsCel:  catalogIdsCel1,
					UseSubjectUser: useSubjectUser16,
					UserIdsCel:     userIdsCel5,
					UserRefs:       userRefs5,
				}
			}
			var updateUser1 *shared.UpdateUser
			if draftAutomationStepsItem.UpdateUser != nil {
				useSubjectUser17 := new(bool)
				if !draftAutomationStepsItem.UpdateUser.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UseSubjectUser.IsNull() {
					*useSubjectUser17 = draftAutomationStepsItem.UpdateUser.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser17 = nil
				}
				userIDCel11 := new(string)
				if !draftAutomationStepsItem.UpdateUser.UserIDCel.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserIDCel.IsNull() {
					*userIDCel11 = draftAutomationStepsItem.UpdateUser.UserIDCel.ValueString()
				} else {
					userIDCel11 = nil
				}
				var userRef15 *shared.UserRef
				if draftAutomationStepsItem.UpdateUser.UserRef != nil {
					id35 := new(string)
					if !draftAutomationStepsItem.UpdateUser.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserRef.ID.IsNull() {
						*id35 = draftAutomationStepsItem.UpdateUser.UserRef.ID.ValueString()
					} else {
						id35 = nil
					}
					userRef15 = &shared.UserRef{
						ID: id35,
					}
				}
				userStatusCel1 := new(string)
				if !draftAutomationStepsItem.UpdateUser.UserStatusCel.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserStatusCel.IsNull() {
					*userStatusCel1 = draftAutomationStepsItem.UpdateUser.UserStatusCel.ValueString()
				} else {
					userStatusCel1 = nil
				}
				userStatusEnum1 := new(shared.UserStatusEnum)
				if !draftAutomationStepsItem.UpdateUser.UserStatusEnum.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserStatusEnum.IsNull() {
					*userStatusEnum1 = shared.UserStatusEnum(draftAutomationStepsItem.UpdateUser.UserStatusEnum.ValueString())
				} else {
					userStatusEnum1 = nil
				}
				updateUser1 = &shared.UpdateUser{
					UseSubjectUser: useSubjectUser17,
					UserIDCel:      userIDCel11,
					UserRef:        userRef15,
					UserStatusCel:  userStatusCel1,
					UserStatusEnum: userStatusEnum1,
				}
			}
			var waitForDuration1 *shared.WaitForDuration
			if draftAutomationStepsItem.WaitForDuration != nil {
				duration1 := new(string)
				if !draftAutomationStepsItem.WaitForDuration.Duration.IsUnknown() && !draftAutomationStepsItem.WaitForDuration.Duration.IsNull() {
					*duration1 = draftAutomationStepsItem.WaitForDuration.Duration.ValueString()
				} else {
					duration1 = nil
				}
				waitForDuration1 = &shared.WaitForDuration{
					Duration: duration1,
				}
			}
			var webhook1 *shared.Webhook
			if draftAutomationStepsItem.Webhook != nil {
				var payload1 *shared.Payload
				if draftAutomationStepsItem.Webhook.Payload != nil {
					payload1 = &shared.Payload{}
				}
				webhookId1 := new(string)
				if !draftAutomationStepsItem.Webhook.WebhookID.IsUnknown() && !draftAutomationStepsItem.Webhook.WebhookID.IsNull() {
					*webhookId1 = draftAutomationStepsItem.Webhook.WebhookID.ValueString()
				} else {
					webhookId1 = nil
				}
				webhookIDCel1 := new(string)
				if !draftAutomationStepsItem.Webhook.WebhookIDCel.IsUnknown() && !draftAutomationStepsItem.Webhook.WebhookIDCel.IsNull() {
					*webhookIDCel1 = draftAutomationStepsItem.Webhook.WebhookIDCel.ValueString()
				} else {
					webhookIDCel1 = nil
				}
				webhook1 = &shared.Webhook{
					Payload:      payload1,
					WebhookID:    webhookId1,
					WebhookIDCel: webhookIDCel1,
				}
			}
			draftAutomationSteps = append(draftAutomationSteps, shared.AutomationStep{
				AccountLifecycleAction:        accountLifecycleAction1,
				CallFunction:                  callFunction1,
				ConnectorAction:               connectorAction1,
				ConnectorCreateAccount:        connectorCreateAccount1,
				CreateAccessReview:            createAccessReview1,
				CreateRevokeTasks:             createRevokeTasks1,
				GrantEntitlements:             grantEntitlements1,
				RemoveFromDelegation:          removeFromDelegation1,
				RunAutomation:                 runAutomation1,
				SendEmail:                     sendEmail1,
				SendSlackMessage:              sendSlackMessage1,
				SkipIfTrueCel:                 skipIfTrueCel1,
				StepDisplayName:               stepDisplayName1,
				StepName:                      stepName1,
				TaskAction:                    taskAction1,
				UnenrollFromAllAccessProfiles: unenrollFromAllAccessProfiles1,
				UpdateUser:                    updateUser1,
				WaitForDuration:               waitForDuration1,
				Webhook:                       webhook1,
			})
		}
	}
	var draftTriggers []shared.AutomationTrigger
	if r.DraftTriggers != nil {
		draftTriggers = make([]shared.AutomationTrigger, 0, len(r.DraftTriggers))
		for _, draftTriggersItem := range r.DraftTriggers {
			var appUserCreatedTrigger *shared.AppUserCreatedTrigger
			if draftTriggersItem.AppUserCreatedTrigger != nil {
				appId13 := new(string)
				if !draftTriggersItem.AppUserCreatedTrigger.AppID.IsUnknown() && !draftTriggersItem.AppUserCreatedTrigger.AppID.IsNull() {
					*appId13 = draftTriggersItem.AppUserCreatedTrigger.AppID.ValueString()
				} else {
					appId13 = nil
				}
				appIDCel := new(string)
				if !draftTriggersItem.AppUserCreatedTrigger.AppIDCel.IsUnknown() && !draftTriggersItem.AppUserCreatedTrigger.AppIDCel.IsNull() {
					*appIDCel = draftTriggersItem.AppUserCreatedTrigger.AppIDCel.ValueString()
				} else {
					appIDCel = nil
				}
				condition := new(string)
				if !draftTriggersItem.AppUserCreatedTrigger.Condition.IsUnknown() && !draftTriggersItem.AppUserCreatedTrigger.Condition.IsNull() {
					*condition = draftTriggersItem.AppUserCreatedTrigger.Condition.ValueString()
				} else {
					condition = nil
				}
				appUserCreatedTrigger = &shared.AppUserCreatedTrigger{
					AppID:     appId13,
					AppIDCel:  appIDCel,
					Condition: condition,
				}
			}
			var appUserUpdatedTrigger *shared.AppUserUpdatedTrigger
			if draftTriggersItem.AppUserUpdatedTrigger != nil {
				appId14 := new(string)
				if !draftTriggersItem.AppUserUpdatedTrigger.AppID.IsUnknown() && !draftTriggersItem.AppUserUpdatedTrigger.AppID.IsNull() {
					*appId14 = draftTriggersItem.AppUserUpdatedTrigger.AppID.ValueString()
				} else {
					appId14 = nil
				}
				appIDCel1 := new(string)
				if !draftTriggersItem.AppUserUpdatedTrigger.AppIDCel.IsUnknown() && !draftTriggersItem.AppUserUpdatedTrigger.AppIDCel.IsNull() {
					*appIDCel1 = draftTriggersItem.AppUserUpdatedTrigger.AppIDCel.ValueString()
				} else {
					appIDCel1 = nil
				}
				condition1 := new(string)
				if !draftTriggersItem.AppUserUpdatedTrigger.Condition.IsUnknown() && !draftTriggersItem.AppUserUpdatedTrigger.Condition.IsNull() {
					*condition1 = draftTriggersItem.AppUserUpdatedTrigger.Condition.ValueString()
				} else {
					condition1 = nil
				}
				appUserUpdatedTrigger = &shared.AppUserUpdatedTrigger{
					AppID:     appId14,
					AppIDCel:  appIDCel1,
					Condition: condition1,
				}
			}
			var formTrigger interface{}
			if !draftTriggersItem.FormTrigger.IsUnknown() && !draftTriggersItem.FormTrigger.IsNull() {
				_ = json.Unmarshal([]byte(draftTriggersItem.FormTrigger.ValueString()), &formTrigger)
			}
			var grantDeletedTrigger *shared.GrantDeletedTrigger
			if draftTriggersItem.GrantDeletedTrigger != nil {
				var grantTriggerFilter *shared.GrantTriggerFilter
				if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter != nil {
					var accountFilter *shared.AccountFilter
					if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter != nil {
						accountType := new(shared.AccountType)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType = shared.AccountType(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType = nil
						}
						accountFilter = &shared.AccountFilter{
							AccountType: accountType,
						}
					}
					var entitlementFilter *shared.EntitlementFilter
					if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs4 []shared.AppEntitlementRef
						if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs4 = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem4 := range draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId15 := new(string)
								if !appEntitlementRefsItem4.AppID.IsUnknown() && !appEntitlementRefsItem4.AppID.IsNull() {
									*appId15 = appEntitlementRefsItem4.AppID.ValueString()
								} else {
									appId15 = nil
								}
								id36 := new(string)
								if !appEntitlementRefsItem4.ID.IsUnknown() && !appEntitlementRefsItem4.ID.IsNull() {
									*id36 = appEntitlementRefsItem4.ID.ValueString()
								} else {
									id36 = nil
								}
								appEntitlementRefs4 = append(appEntitlementRefs4, shared.AppEntitlementRef{
									AppID: appId15,
									ID:    id36,
								})
							}
						}
						appEntitlementRefsCel4 := new(string)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel4 = draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel4 = nil
						}
						appId16 := new(string)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId16 = draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId16 = nil
						}
						entitlementFilter = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs4,
							AppEntitlementRefsCel: appEntitlementRefsCel4,
							AppID:                 appId16,
						}
					}
					var grantFilter *shared.GrantFilter
					if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType := new(shared.GrantFilterType)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType = shared.GrantFilterType(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType = nil
						}
						grantJustificationType := new(shared.GrantJustificationType)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType = shared.GrantJustificationType(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType = nil
						}
						grantSourceFilter := new(shared.GrantSourceFilter)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter = shared.GrantSourceFilter(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter = nil
						}
						grantFilter = &shared.GrantFilter{
							GrantFilterType:        grantFilterType,
							GrantJustificationType: grantJustificationType,
							GrantSourceFilter:      grantSourceFilter,
						}
					}
					grantTriggerFilter = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter,
						EntitlementFilter: entitlementFilter,
						GrantFilter:       grantFilter,
					}
				}
				grantDeletedTrigger = &shared.GrantDeletedTrigger{
					GrantTriggerFilter: grantTriggerFilter,
				}
			}
			var grantFoundTrigger *shared.GrantFoundTrigger
			if draftTriggersItem.GrantFoundTrigger != nil {
				var grantTriggerFilter1 *shared.GrantTriggerFilter
				if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter != nil {
					var accountFilter1 *shared.AccountFilter
					if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter != nil {
						accountType1 := new(shared.AccountType)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType1 = shared.AccountType(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType1 = nil
						}
						accountFilter1 = &shared.AccountFilter{
							AccountType: accountType1,
						}
					}
					var entitlementFilter1 *shared.EntitlementFilter
					if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs5 []shared.AppEntitlementRef
						if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs5 = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem5 := range draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId17 := new(string)
								if !appEntitlementRefsItem5.AppID.IsUnknown() && !appEntitlementRefsItem5.AppID.IsNull() {
									*appId17 = appEntitlementRefsItem5.AppID.ValueString()
								} else {
									appId17 = nil
								}
								id37 := new(string)
								if !appEntitlementRefsItem5.ID.IsUnknown() && !appEntitlementRefsItem5.ID.IsNull() {
									*id37 = appEntitlementRefsItem5.ID.ValueString()
								} else {
									id37 = nil
								}
								appEntitlementRefs5 = append(appEntitlementRefs5, shared.AppEntitlementRef{
									AppID: appId17,
									ID:    id37,
								})
							}
						}
						appEntitlementRefsCel5 := new(string)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel5 = draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel5 = nil
						}
						appId18 := new(string)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId18 = draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId18 = nil
						}
						entitlementFilter1 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs5,
							AppEntitlementRefsCel: appEntitlementRefsCel5,
							AppID:                 appId18,
						}
					}
					var grantFilter1 *shared.GrantFilter
					if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType1 := new(shared.GrantFilterType)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType1 = shared.GrantFilterType(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType1 = nil
						}
						grantJustificationType1 := new(shared.GrantJustificationType)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType1 = shared.GrantJustificationType(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType1 = nil
						}
						grantSourceFilter1 := new(shared.GrantSourceFilter)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter1 = shared.GrantSourceFilter(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter1 = nil
						}
						grantFilter1 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType1,
							GrantJustificationType: grantJustificationType1,
							GrantSourceFilter:      grantSourceFilter1,
						}
					}
					grantTriggerFilter1 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter1,
						EntitlementFilter: entitlementFilter1,
						GrantFilter:       grantFilter1,
					}
				}
				grantFoundTrigger = &shared.GrantFoundTrigger{
					GrantTriggerFilter: grantTriggerFilter1,
				}
			}
			var manualAutomationTrigger *shared.ManualAutomationTrigger
			if draftTriggersItem.ManualAutomationTrigger != nil {
				manualAutomationTrigger = &shared.ManualAutomationTrigger{}
			}
			var scheduleTrigger *shared.ScheduleTrigger
			if draftTriggersItem.ScheduleTrigger != nil {
				advanced := new(bool)
				if !draftTriggersItem.ScheduleTrigger.Advanced.IsUnknown() && !draftTriggersItem.ScheduleTrigger.Advanced.IsNull() {
					*advanced = draftTriggersItem.ScheduleTrigger.Advanced.ValueBool()
				} else {
					advanced = nil
				}
				condition2 := new(string)
				if !draftTriggersItem.ScheduleTrigger.Condition.IsUnknown() && !draftTriggersItem.ScheduleTrigger.Condition.IsNull() {
					*condition2 = draftTriggersItem.ScheduleTrigger.Condition.ValueString()
				} else {
					condition2 = nil
				}
				cronSpec := new(string)
				if !draftTriggersItem.ScheduleTrigger.CronSpec.IsUnknown() && !draftTriggersItem.ScheduleTrigger.CronSpec.IsNull() {
					*cronSpec = draftTriggersItem.ScheduleTrigger.CronSpec.ValueString()
				} else {
					cronSpec = nil
				}
				skipIfTrueCel2 := new(string)
				if !draftTriggersItem.ScheduleTrigger.SkipIfTrueCel.IsUnknown() && !draftTriggersItem.ScheduleTrigger.SkipIfTrueCel.IsNull() {
					*skipIfTrueCel2 = draftTriggersItem.ScheduleTrigger.SkipIfTrueCel.ValueString()
				} else {
					skipIfTrueCel2 = nil
				}
				start := new(time.Time)
				if !draftTriggersItem.ScheduleTrigger.Start.IsUnknown() && !draftTriggersItem.ScheduleTrigger.Start.IsNull() {
					*start, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.ScheduleTrigger.Start.ValueString())
				} else {
					start = nil
				}
				timezone := new(string)
				if !draftTriggersItem.ScheduleTrigger.Timezone.IsUnknown() && !draftTriggersItem.ScheduleTrigger.Timezone.IsNull() {
					*timezone = draftTriggersItem.ScheduleTrigger.Timezone.ValueString()
				} else {
					timezone = nil
				}
				scheduleTrigger = &shared.ScheduleTrigger{
					Advanced:      advanced,
					Condition:     condition2,
					CronSpec:      cronSpec,
					SkipIfTrueCel: skipIfTrueCel2,
					Start:         start,
					Timezone:      timezone,
				}
			}
			var scheduleTriggerAppUser *shared.ScheduleTriggerAppUser
			if draftTriggersItem.ScheduleTriggerAppUser != nil {
				appId19 := new(string)
				if !draftTriggersItem.ScheduleTriggerAppUser.AppID.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.AppID.IsNull() {
					*appId19 = draftTriggersItem.ScheduleTriggerAppUser.AppID.ValueString()
				} else {
					appId19 = nil
				}
				condition3 := new(string)
				if !draftTriggersItem.ScheduleTriggerAppUser.Condition.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.Condition.IsNull() {
					*condition3 = draftTriggersItem.ScheduleTriggerAppUser.Condition.ValueString()
				} else {
					condition3 = nil
				}
				cronSpec1 := new(string)
				if !draftTriggersItem.ScheduleTriggerAppUser.CronSpec.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.CronSpec.IsNull() {
					*cronSpec1 = draftTriggersItem.ScheduleTriggerAppUser.CronSpec.ValueString()
				} else {
					cronSpec1 = nil
				}
				start1 := new(time.Time)
				if !draftTriggersItem.ScheduleTriggerAppUser.Start.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.Start.IsNull() {
					*start1, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.ScheduleTriggerAppUser.Start.ValueString())
				} else {
					start1 = nil
				}
				timezone1 := new(string)
				if !draftTriggersItem.ScheduleTriggerAppUser.Timezone.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.Timezone.IsNull() {
					*timezone1 = draftTriggersItem.ScheduleTriggerAppUser.Timezone.ValueString()
				} else {
					timezone1 = nil
				}
				scheduleTriggerAppUser = &shared.ScheduleTriggerAppUser{
					AppID:     appId19,
					Condition: condition3,
					CronSpec:  cronSpec1,
					Start:     start1,
					Timezone:  timezone1,
				}
			}
			var usageBasedRevocationTrigger *shared.UsageBasedRevocationTrigger
			if draftTriggersItem.UsageBasedRevocationTrigger != nil {
				appId20 := new(string)
				if !draftTriggersItem.UsageBasedRevocationTrigger.AppID.IsUnknown() && !draftTriggersItem.UsageBasedRevocationTrigger.AppID.IsNull() {
					*appId20 = draftTriggersItem.UsageBasedRevocationTrigger.AppID.ValueString()
				} else {
					appId20 = nil
				}
				enabledAt := new(time.Time)
				if !draftTriggersItem.UsageBasedRevocationTrigger.EnabledAt.IsUnknown() && !draftTriggersItem.UsageBasedRevocationTrigger.EnabledAt.IsNull() {
					*enabledAt, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.UsageBasedRevocationTrigger.EnabledAt.ValueString())
				} else {
					enabledAt = nil
				}
				var excludedGroupRefs []shared.AppEntitlementRef
				if draftTriggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs != nil {
					excludedGroupRefs = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs))
					for _, excludedGroupRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs {
						appId21 := new(string)
						if !excludedGroupRefsItem.AppID.IsUnknown() && !excludedGroupRefsItem.AppID.IsNull() {
							*appId21 = excludedGroupRefsItem.AppID.ValueString()
						} else {
							appId21 = nil
						}
						id38 := new(string)
						if !excludedGroupRefsItem.ID.IsUnknown() && !excludedGroupRefsItem.ID.IsNull() {
							*id38 = excludedGroupRefsItem.ID.ValueString()
						} else {
							id38 = nil
						}
						excludedGroupRefs = append(excludedGroupRefs, shared.AppEntitlementRef{
							AppID: appId21,
							ID:    id38,
						})
					}
				}
				var excludedUserRefs []shared.UserRef
				if draftTriggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs != nil {
					excludedUserRefs = make([]shared.UserRef, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs))
					for _, excludedUserRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs {
						id39 := new(string)
						if !excludedUserRefsItem.ID.IsUnknown() && !excludedUserRefsItem.ID.IsNull() {
							*id39 = excludedUserRefsItem.ID.ValueString()
						} else {
							id39 = nil
						}
						excludedUserRefs = append(excludedUserRefs, shared.UserRef{
							ID: id39,
						})
					}
				}
				includeUsersWithNoActivity := new(bool)
				if !draftTriggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.IsUnknown() && !draftTriggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.IsNull() {
					*includeUsersWithNoActivity = draftTriggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.ValueBool()
				} else {
					includeUsersWithNoActivity = nil
				}
				var runDelayed *shared.RunDelayed
				if draftTriggersItem.UsageBasedRevocationTrigger.RunDelayed != nil {
					var coldStartDelayDays int64
					coldStartDelayDays = draftTriggersItem.UsageBasedRevocationTrigger.RunDelayed.ColdStartDelayDays.ValueInt64()

					runDelayed = &shared.RunDelayed{
						ColdStartDelayDays: coldStartDelayDays,
					}
				}
				var runImmediately *shared.RunImmediately
				if draftTriggersItem.UsageBasedRevocationTrigger.RunImmediately != nil {
					runImmediately = &shared.RunImmediately{}
				}
				var targetedAppUserTypes []shared.TargetedAppUserTypes
				if draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes != nil {
					targetedAppUserTypes = make([]shared.TargetedAppUserTypes, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes))
					for _, targetedAppUserTypesItem := range draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes {
						targetedAppUserTypes = append(targetedAppUserTypes, shared.TargetedAppUserTypes(targetedAppUserTypesItem.ValueString()))
					}
				}
				var targetedEntitlementRefs []shared.AppEntitlementRef
				if draftTriggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs != nil {
					targetedEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs))
					for _, targetedEntitlementRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs {
						appId22 := new(string)
						if !targetedEntitlementRefsItem.AppID.IsUnknown() && !targetedEntitlementRefsItem.AppID.IsNull() {
							*appId22 = targetedEntitlementRefsItem.AppID.ValueString()
						} else {
							appId22 = nil
						}
						id40 := new(string)
						if !targetedEntitlementRefsItem.ID.IsUnknown() && !targetedEntitlementRefsItem.ID.IsNull() {
							*id40 = targetedEntitlementRefsItem.ID.ValueString()
						} else {
							id40 = nil
						}
						targetedEntitlementRefs = append(targetedEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId22,
							ID:    id40,
						})
					}
				}
				unusedForDays := new(int64)
				if !draftTriggersItem.UsageBasedRevocationTrigger.UnusedForDays.IsUnknown() && !draftTriggersItem.UsageBasedRevocationTrigger.UnusedForDays.IsNull() {
					*unusedForDays = draftTriggersItem.UsageBasedRevocationTrigger.UnusedForDays.ValueInt64()
				} else {
					unusedForDays = nil
				}
				usageBasedRevocationTrigger = &shared.UsageBasedRevocationTrigger{
					AppID:                      appId20,
					EnabledAt:                  enabledAt,
					ExcludedGroupRefs:          excludedGroupRefs,
					ExcludedUserRefs:           excludedUserRefs,
					IncludeUsersWithNoActivity: includeUsersWithNoActivity,
					RunDelayed:                 runDelayed,
					RunImmediately:             runImmediately,
					TargetedAppUserTypes:       targetedAppUserTypes,
					TargetedEntitlementRefs:    targetedEntitlementRefs,
					UnusedForDays:              unusedForDays,
				}
			}
			var userCreatedTrigger *shared.UserCreatedTrigger
			if draftTriggersItem.UserCreatedTrigger != nil {
				condition4 := new(string)
				if !draftTriggersItem.UserCreatedTrigger.Condition.IsUnknown() && !draftTriggersItem.UserCreatedTrigger.Condition.IsNull() {
					*condition4 = draftTriggersItem.UserCreatedTrigger.Condition.ValueString()
				} else {
					condition4 = nil
				}
				userCreatedTrigger = &shared.UserCreatedTrigger{
					Condition: condition4,
				}
			}
			var userProfileChangeTrigger *shared.UserProfileChangeTrigger
			if draftTriggersItem.UserProfileChangeTrigger != nil {
				condition5 := new(string)
				if !draftTriggersItem.UserProfileChangeTrigger.Condition.IsUnknown() && !draftTriggersItem.UserProfileChangeTrigger.Condition.IsNull() {
					*condition5 = draftTriggersItem.UserProfileChangeTrigger.Condition.ValueString()
				} else {
					condition5 = nil
				}
				userProfileChangeTrigger = &shared.UserProfileChangeTrigger{
					Condition: condition5,
				}
			}
			var webhookAutomationTrigger *shared.WebhookAutomationTrigger
			if draftTriggersItem.WebhookAutomationTrigger != nil {
				var webhookListenerAuthHMAC *shared.WebhookListenerAuthHMAC
				if draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthHMAC != nil {
					webhookListenerAuthHMAC = &shared.WebhookListenerAuthHMAC{}
				}
				var webhookListenerAuthJWT *shared.WebhookListenerAuthJWT
				if draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT != nil {
					jwksURL := new(string)
					if !draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.IsUnknown() && !draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.IsNull() {
						*jwksURL = draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.ValueString()
					} else {
						jwksURL = nil
					}
					webhookListenerAuthJWT = &shared.WebhookListenerAuthJWT{
						JwksURL: jwksURL,
					}
				}
				listenerID := new(string)
				if !draftTriggersItem.WebhookAutomationTrigger.ListenerID.IsUnknown() && !draftTriggersItem.WebhookAutomationTrigger.ListenerID.IsNull() {
					*listenerID = draftTriggersItem.WebhookAutomationTrigger.ListenerID.ValueString()
				} else {
					listenerID = nil
				}
				webhookAutomationTrigger = &shared.WebhookAutomationTrigger{
					WebhookListenerAuthHMAC: webhookListenerAuthHMAC,
					WebhookListenerAuthJWT:  webhookListenerAuthJWT,
					ListenerID:              listenerID,
				}
			}
			draftTriggers = append(draftTriggers, shared.AutomationTrigger{
				AppUserCreatedTrigger:       appUserCreatedTrigger,
				AppUserUpdatedTrigger:       appUserUpdatedTrigger,
				FormTrigger:                 formTrigger,
				GrantDeletedTrigger:         grantDeletedTrigger,
				GrantFoundTrigger:           grantFoundTrigger,
				ManualAutomationTrigger:     manualAutomationTrigger,
				ScheduleTrigger:             scheduleTrigger,
				ScheduleTriggerAppUser:      scheduleTriggerAppUser,
				UsageBasedRevocationTrigger: usageBasedRevocationTrigger,
				UserCreatedTrigger:          userCreatedTrigger,
				UserProfileChangeTrigger:    userProfileChangeTrigger,
				WebhookAutomationTrigger:    webhookAutomationTrigger,
			})
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	isDraft := new(bool)
	if !r.IsDraft.IsUnknown() && !r.IsDraft.IsNull() {
		*isDraft = r.IsDraft.ValueBool()
	} else {
		isDraft = nil
	}
	lastExecutedAt := new(time.Time)
	if !r.LastExecutedAt.IsUnknown() && !r.LastExecutedAt.IsNull() {
		*lastExecutedAt, _ = time.Parse(time.RFC3339Nano, r.LastExecutedAt.ValueString())
	} else {
		lastExecutedAt = nil
	}
	primaryTriggerType := new(shared.PrimaryTriggerType)
	if !r.PrimaryTriggerType.IsUnknown() && !r.PrimaryTriggerType.IsNull() {
		*primaryTriggerType = shared.PrimaryTriggerType(r.PrimaryTriggerType.ValueString())
	} else {
		primaryTriggerType = nil
	}
	var triggers []shared.AutomationTrigger
	if r.Triggers != nil {
		triggers = make([]shared.AutomationTrigger, 0, len(r.Triggers))
		for _, triggersItem := range r.Triggers {
			var appUserCreatedTrigger1 *shared.AppUserCreatedTrigger
			if triggersItem.AppUserCreatedTrigger != nil {
				appId23 := new(string)
				if !triggersItem.AppUserCreatedTrigger.AppID.IsUnknown() && !triggersItem.AppUserCreatedTrigger.AppID.IsNull() {
					*appId23 = triggersItem.AppUserCreatedTrigger.AppID.ValueString()
				} else {
					appId23 = nil
				}
				appIDCel2 := new(string)
				if !triggersItem.AppUserCreatedTrigger.AppIDCel.IsUnknown() && !triggersItem.AppUserCreatedTrigger.AppIDCel.IsNull() {
					*appIDCel2 = triggersItem.AppUserCreatedTrigger.AppIDCel.ValueString()
				} else {
					appIDCel2 = nil
				}
				condition6 := new(string)
				if !triggersItem.AppUserCreatedTrigger.Condition.IsUnknown() && !triggersItem.AppUserCreatedTrigger.Condition.IsNull() {
					*condition6 = triggersItem.AppUserCreatedTrigger.Condition.ValueString()
				} else {
					condition6 = nil
				}
				appUserCreatedTrigger1 = &shared.AppUserCreatedTrigger{
					AppID:     appId23,
					AppIDCel:  appIDCel2,
					Condition: condition6,
				}
			}
			var appUserUpdatedTrigger1 *shared.AppUserUpdatedTrigger
			if triggersItem.AppUserUpdatedTrigger != nil {
				appId24 := new(string)
				if !triggersItem.AppUserUpdatedTrigger.AppID.IsUnknown() && !triggersItem.AppUserUpdatedTrigger.AppID.IsNull() {
					*appId24 = triggersItem.AppUserUpdatedTrigger.AppID.ValueString()
				} else {
					appId24 = nil
				}
				appIDCel3 := new(string)
				if !triggersItem.AppUserUpdatedTrigger.AppIDCel.IsUnknown() && !triggersItem.AppUserUpdatedTrigger.AppIDCel.IsNull() {
					*appIDCel3 = triggersItem.AppUserUpdatedTrigger.AppIDCel.ValueString()
				} else {
					appIDCel3 = nil
				}
				condition7 := new(string)
				if !triggersItem.AppUserUpdatedTrigger.Condition.IsUnknown() && !triggersItem.AppUserUpdatedTrigger.Condition.IsNull() {
					*condition7 = triggersItem.AppUserUpdatedTrigger.Condition.ValueString()
				} else {
					condition7 = nil
				}
				appUserUpdatedTrigger1 = &shared.AppUserUpdatedTrigger{
					AppID:     appId24,
					AppIDCel:  appIDCel3,
					Condition: condition7,
				}
			}
			var formTrigger1 interface{}
			if !triggersItem.FormTrigger.IsUnknown() && !triggersItem.FormTrigger.IsNull() {
				_ = json.Unmarshal([]byte(triggersItem.FormTrigger.ValueString()), &formTrigger1)
			}
			var grantDeletedTrigger1 *shared.GrantDeletedTrigger
			if triggersItem.GrantDeletedTrigger != nil {
				var grantTriggerFilter2 *shared.GrantTriggerFilter
				if triggersItem.GrantDeletedTrigger.GrantTriggerFilter != nil {
					var accountFilter2 *shared.AccountFilter
					if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter != nil {
						accountType2 := new(shared.AccountType)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType2 = shared.AccountType(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType2 = nil
						}
						accountFilter2 = &shared.AccountFilter{
							AccountType: accountType2,
						}
					}
					var entitlementFilter2 *shared.EntitlementFilter
					if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs6 []shared.AppEntitlementRef
						if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs6 = make([]shared.AppEntitlementRef, 0, len(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem6 := range triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId25 := new(string)
								if !appEntitlementRefsItem6.AppID.IsUnknown() && !appEntitlementRefsItem6.AppID.IsNull() {
									*appId25 = appEntitlementRefsItem6.AppID.ValueString()
								} else {
									appId25 = nil
								}
								id41 := new(string)
								if !appEntitlementRefsItem6.ID.IsUnknown() && !appEntitlementRefsItem6.ID.IsNull() {
									*id41 = appEntitlementRefsItem6.ID.ValueString()
								} else {
									id41 = nil
								}
								appEntitlementRefs6 = append(appEntitlementRefs6, shared.AppEntitlementRef{
									AppID: appId25,
									ID:    id41,
								})
							}
						}
						appEntitlementRefsCel6 := new(string)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel6 = triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel6 = nil
						}
						appId26 := new(string)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId26 = triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId26 = nil
						}
						entitlementFilter2 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs6,
							AppEntitlementRefsCel: appEntitlementRefsCel6,
							AppID:                 appId26,
						}
					}
					var grantFilter2 *shared.GrantFilter
					if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType2 := new(shared.GrantFilterType)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType2 = shared.GrantFilterType(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType2 = nil
						}
						grantJustificationType2 := new(shared.GrantJustificationType)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType2 = shared.GrantJustificationType(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType2 = nil
						}
						grantSourceFilter2 := new(shared.GrantSourceFilter)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter2 = shared.GrantSourceFilter(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter2 = nil
						}
						grantFilter2 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType2,
							GrantJustificationType: grantJustificationType2,
							GrantSourceFilter:      grantSourceFilter2,
						}
					}
					grantTriggerFilter2 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter2,
						EntitlementFilter: entitlementFilter2,
						GrantFilter:       grantFilter2,
					}
				}
				grantDeletedTrigger1 = &shared.GrantDeletedTrigger{
					GrantTriggerFilter: grantTriggerFilter2,
				}
			}
			var grantFoundTrigger1 *shared.GrantFoundTrigger
			if triggersItem.GrantFoundTrigger != nil {
				var grantTriggerFilter3 *shared.GrantTriggerFilter
				if triggersItem.GrantFoundTrigger.GrantTriggerFilter != nil {
					var accountFilter3 *shared.AccountFilter
					if triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter != nil {
						accountType3 := new(shared.AccountType)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType3 = shared.AccountType(triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType3 = nil
						}
						accountFilter3 = &shared.AccountFilter{
							AccountType: accountType3,
						}
					}
					var entitlementFilter3 *shared.EntitlementFilter
					if triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs7 []shared.AppEntitlementRef
						if triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs7 = make([]shared.AppEntitlementRef, 0, len(triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem7 := range triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId27 := new(string)
								if !appEntitlementRefsItem7.AppID.IsUnknown() && !appEntitlementRefsItem7.AppID.IsNull() {
									*appId27 = appEntitlementRefsItem7.AppID.ValueString()
								} else {
									appId27 = nil
								}
								id42 := new(string)
								if !appEntitlementRefsItem7.ID.IsUnknown() && !appEntitlementRefsItem7.ID.IsNull() {
									*id42 = appEntitlementRefsItem7.ID.ValueString()
								} else {
									id42 = nil
								}
								appEntitlementRefs7 = append(appEntitlementRefs7, shared.AppEntitlementRef{
									AppID: appId27,
									ID:    id42,
								})
							}
						}
						appEntitlementRefsCel7 := new(string)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel7 = triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel7 = nil
						}
						appId28 := new(string)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId28 = triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId28 = nil
						}
						entitlementFilter3 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs7,
							AppEntitlementRefsCel: appEntitlementRefsCel7,
							AppID:                 appId28,
						}
					}
					var grantFilter3 *shared.GrantFilter
					if triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType3 := new(shared.GrantFilterType)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType3 = shared.GrantFilterType(triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType3 = nil
						}
						grantJustificationType3 := new(shared.GrantJustificationType)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType3 = shared.GrantJustificationType(triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType3 = nil
						}
						grantSourceFilter3 := new(shared.GrantSourceFilter)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter3 = shared.GrantSourceFilter(triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter3 = nil
						}
						grantFilter3 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType3,
							GrantJustificationType: grantJustificationType3,
							GrantSourceFilter:      grantSourceFilter3,
						}
					}
					grantTriggerFilter3 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter3,
						EntitlementFilter: entitlementFilter3,
						GrantFilter:       grantFilter3,
					}
				}
				grantFoundTrigger1 = &shared.GrantFoundTrigger{
					GrantTriggerFilter: grantTriggerFilter3,
				}
			}
			var manualAutomationTrigger1 *shared.ManualAutomationTrigger
			if triggersItem.ManualAutomationTrigger != nil {
				manualAutomationTrigger1 = &shared.ManualAutomationTrigger{}
			}
			var scheduleTrigger1 *shared.ScheduleTrigger
			if triggersItem.ScheduleTrigger != nil {
				advanced1 := new(bool)
				if !triggersItem.ScheduleTrigger.Advanced.IsUnknown() && !triggersItem.ScheduleTrigger.Advanced.IsNull() {
					*advanced1 = triggersItem.ScheduleTrigger.Advanced.ValueBool()
				} else {
					advanced1 = nil
				}
				condition8 := new(string)
				if !triggersItem.ScheduleTrigger.Condition.IsUnknown() && !triggersItem.ScheduleTrigger.Condition.IsNull() {
					*condition8 = triggersItem.ScheduleTrigger.Condition.ValueString()
				} else {
					condition8 = nil
				}
				cronSpec2 := new(string)
				if !triggersItem.ScheduleTrigger.CronSpec.IsUnknown() && !triggersItem.ScheduleTrigger.CronSpec.IsNull() {
					*cronSpec2 = triggersItem.ScheduleTrigger.CronSpec.ValueString()
				} else {
					cronSpec2 = nil
				}
				skipIfTrueCel3 := new(string)
				if !triggersItem.ScheduleTrigger.SkipIfTrueCel.IsUnknown() && !triggersItem.ScheduleTrigger.SkipIfTrueCel.IsNull() {
					*skipIfTrueCel3 = triggersItem.ScheduleTrigger.SkipIfTrueCel.ValueString()
				} else {
					skipIfTrueCel3 = nil
				}
				start2 := new(time.Time)
				if !triggersItem.ScheduleTrigger.Start.IsUnknown() && !triggersItem.ScheduleTrigger.Start.IsNull() {
					*start2, _ = time.Parse(time.RFC3339Nano, triggersItem.ScheduleTrigger.Start.ValueString())
				} else {
					start2 = nil
				}
				timezone2 := new(string)
				if !triggersItem.ScheduleTrigger.Timezone.IsUnknown() && !triggersItem.ScheduleTrigger.Timezone.IsNull() {
					*timezone2 = triggersItem.ScheduleTrigger.Timezone.ValueString()
				} else {
					timezone2 = nil
				}
				scheduleTrigger1 = &shared.ScheduleTrigger{
					Advanced:      advanced1,
					Condition:     condition8,
					CronSpec:      cronSpec2,
					SkipIfTrueCel: skipIfTrueCel3,
					Start:         start2,
					Timezone:      timezone2,
				}
			}
			var scheduleTriggerAppUser1 *shared.ScheduleTriggerAppUser
			if triggersItem.ScheduleTriggerAppUser != nil {
				appId29 := new(string)
				if !triggersItem.ScheduleTriggerAppUser.AppID.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.AppID.IsNull() {
					*appId29 = triggersItem.ScheduleTriggerAppUser.AppID.ValueString()
				} else {
					appId29 = nil
				}
				condition9 := new(string)
				if !triggersItem.ScheduleTriggerAppUser.Condition.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.Condition.IsNull() {
					*condition9 = triggersItem.ScheduleTriggerAppUser.Condition.ValueString()
				} else {
					condition9 = nil
				}
				cronSpec3 := new(string)
				if !triggersItem.ScheduleTriggerAppUser.CronSpec.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.CronSpec.IsNull() {
					*cronSpec3 = triggersItem.ScheduleTriggerAppUser.CronSpec.ValueString()
				} else {
					cronSpec3 = nil
				}
				start3 := new(time.Time)
				if !triggersItem.ScheduleTriggerAppUser.Start.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.Start.IsNull() {
					*start3, _ = time.Parse(time.RFC3339Nano, triggersItem.ScheduleTriggerAppUser.Start.ValueString())
				} else {
					start3 = nil
				}
				timezone3 := new(string)
				if !triggersItem.ScheduleTriggerAppUser.Timezone.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.Timezone.IsNull() {
					*timezone3 = triggersItem.ScheduleTriggerAppUser.Timezone.ValueString()
				} else {
					timezone3 = nil
				}
				scheduleTriggerAppUser1 = &shared.ScheduleTriggerAppUser{
					AppID:     appId29,
					Condition: condition9,
					CronSpec:  cronSpec3,
					Start:     start3,
					Timezone:  timezone3,
				}
			}
			var usageBasedRevocationTrigger1 *shared.UsageBasedRevocationTrigger
			if triggersItem.UsageBasedRevocationTrigger != nil {
				appId30 := new(string)
				if !triggersItem.UsageBasedRevocationTrigger.AppID.IsUnknown() && !triggersItem.UsageBasedRevocationTrigger.AppID.IsNull() {
					*appId30 = triggersItem.UsageBasedRevocationTrigger.AppID.ValueString()
				} else {
					appId30 = nil
				}
				enabledAt1 := new(time.Time)
				if !triggersItem.UsageBasedRevocationTrigger.EnabledAt.IsUnknown() && !triggersItem.UsageBasedRevocationTrigger.EnabledAt.IsNull() {
					*enabledAt1, _ = time.Parse(time.RFC3339Nano, triggersItem.UsageBasedRevocationTrigger.EnabledAt.ValueString())
				} else {
					enabledAt1 = nil
				}
				var excludedGroupRefs1 []shared.AppEntitlementRef
				if triggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs != nil {
					excludedGroupRefs1 = make([]shared.AppEntitlementRef, 0, len(triggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs))
					for _, excludedGroupRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs {
						appId31 := new(string)
						if !excludedGroupRefsItem1.AppID.IsUnknown() && !excludedGroupRefsItem1.AppID.IsNull() {
							*appId31 = excludedGroupRefsItem1.AppID.ValueString()
						} else {
							appId31 = nil
						}
						id43 := new(string)
						if !excludedGroupRefsItem1.ID.IsUnknown() && !excludedGroupRefsItem1.ID.IsNull() {
							*id43 = excludedGroupRefsItem1.ID.ValueString()
						} else {
							id43 = nil
						}
						excludedGroupRefs1 = append(excludedGroupRefs1, shared.AppEntitlementRef{
							AppID: appId31,
							ID:    id43,
						})
					}
				}
				var excludedUserRefs1 []shared.UserRef
				if triggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs != nil {
					excludedUserRefs1 = make([]shared.UserRef, 0, len(triggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs))
					for _, excludedUserRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs {
						id44 := new(string)
						if !excludedUserRefsItem1.ID.IsUnknown() && !excludedUserRefsItem1.ID.IsNull() {
							*id44 = excludedUserRefsItem1.ID.ValueString()
						} else {
							id44 = nil
						}
						excludedUserRefs1 = append(excludedUserRefs1, shared.UserRef{
							ID: id44,
						})
					}
				}
				includeUsersWithNoActivity1 := new(bool)
				if !triggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.IsUnknown() && !triggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.IsNull() {
					*includeUsersWithNoActivity1 = triggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.ValueBool()
				} else {
					includeUsersWithNoActivity1 = nil
				}
				var runDelayed1 *shared.RunDelayed
				if triggersItem.UsageBasedRevocationTrigger.RunDelayed != nil {
					var coldStartDelayDays1 int64
					coldStartDelayDays1 = triggersItem.UsageBasedRevocationTrigger.RunDelayed.ColdStartDelayDays.ValueInt64()

					runDelayed1 = &shared.RunDelayed{
						ColdStartDelayDays: coldStartDelayDays1,
					}
				}
				var runImmediately1 *shared.RunImmediately
				if triggersItem.UsageBasedRevocationTrigger.RunImmediately != nil {
					runImmediately1 = &shared.RunImmediately{}
				}
				var targetedAppUserTypes1 []shared.TargetedAppUserTypes
				if triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes != nil {
					targetedAppUserTypes1 = make([]shared.TargetedAppUserTypes, 0, len(triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes))
					for _, targetedAppUserTypesItem1 := range triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes {
						targetedAppUserTypes1 = append(targetedAppUserTypes1, shared.TargetedAppUserTypes(targetedAppUserTypesItem1.ValueString()))
					}
				}
				var targetedEntitlementRefs1 []shared.AppEntitlementRef
				if triggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs != nil {
					targetedEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(triggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs))
					for _, targetedEntitlementRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs {
						appId32 := new(string)
						if !targetedEntitlementRefsItem1.AppID.IsUnknown() && !targetedEntitlementRefsItem1.AppID.IsNull() {
							*appId32 = targetedEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId32 = nil
						}
						id45 := new(string)
						if !targetedEntitlementRefsItem1.ID.IsUnknown() && !targetedEntitlementRefsItem1.ID.IsNull() {
							*id45 = targetedEntitlementRefsItem1.ID.ValueString()
						} else {
							id45 = nil
						}
						targetedEntitlementRefs1 = append(targetedEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId32,
							ID:    id45,
						})
					}
				}
				unusedForDays1 := new(int64)
				if !triggersItem.UsageBasedRevocationTrigger.UnusedForDays.IsUnknown() && !triggersItem.UsageBasedRevocationTrigger.UnusedForDays.IsNull() {
					*unusedForDays1 = triggersItem.UsageBasedRevocationTrigger.UnusedForDays.ValueInt64()
				} else {
					unusedForDays1 = nil
				}
				usageBasedRevocationTrigger1 = &shared.UsageBasedRevocationTrigger{
					AppID:                      appId30,
					EnabledAt:                  enabledAt1,
					ExcludedGroupRefs:          excludedGroupRefs1,
					ExcludedUserRefs:           excludedUserRefs1,
					IncludeUsersWithNoActivity: includeUsersWithNoActivity1,
					RunDelayed:                 runDelayed1,
					RunImmediately:             runImmediately1,
					TargetedAppUserTypes:       targetedAppUserTypes1,
					TargetedEntitlementRefs:    targetedEntitlementRefs1,
					UnusedForDays:              unusedForDays1,
				}
			}
			var userCreatedTrigger1 *shared.UserCreatedTrigger
			if triggersItem.UserCreatedTrigger != nil {
				condition10 := new(string)
				if !triggersItem.UserCreatedTrigger.Condition.IsUnknown() && !triggersItem.UserCreatedTrigger.Condition.IsNull() {
					*condition10 = triggersItem.UserCreatedTrigger.Condition.ValueString()
				} else {
					condition10 = nil
				}
				userCreatedTrigger1 = &shared.UserCreatedTrigger{
					Condition: condition10,
				}
			}
			var userProfileChangeTrigger1 *shared.UserProfileChangeTrigger
			if triggersItem.UserProfileChangeTrigger != nil {
				condition11 := new(string)
				if !triggersItem.UserProfileChangeTrigger.Condition.IsUnknown() && !triggersItem.UserProfileChangeTrigger.Condition.IsNull() {
					*condition11 = triggersItem.UserProfileChangeTrigger.Condition.ValueString()
				} else {
					condition11 = nil
				}
				userProfileChangeTrigger1 = &shared.UserProfileChangeTrigger{
					Condition: condition11,
				}
			}
			var webhookAutomationTrigger1 *shared.WebhookAutomationTrigger
			if triggersItem.WebhookAutomationTrigger != nil {
				var webhookListenerAuthHmac1 *shared.WebhookListenerAuthHMAC
				if triggersItem.WebhookAutomationTrigger.WebhookListenerAuthHMAC != nil {
					webhookListenerAuthHmac1 = &shared.WebhookListenerAuthHMAC{}
				}
				var webhookListenerAuthJwt1 *shared.WebhookListenerAuthJWT
				if triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT != nil {
					jwksUrl1 := new(string)
					if !triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.IsUnknown() && !triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.IsNull() {
						*jwksUrl1 = triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.ValueString()
					} else {
						jwksUrl1 = nil
					}
					webhookListenerAuthJwt1 = &shared.WebhookListenerAuthJWT{
						JwksURL: jwksUrl1,
					}
				}
				listenerId1 := new(string)
				if !triggersItem.WebhookAutomationTrigger.ListenerID.IsUnknown() && !triggersItem.WebhookAutomationTrigger.ListenerID.IsNull() {
					*listenerId1 = triggersItem.WebhookAutomationTrigger.ListenerID.ValueString()
				} else {
					listenerId1 = nil
				}
				webhookAutomationTrigger1 = &shared.WebhookAutomationTrigger{
					WebhookListenerAuthHMAC: webhookListenerAuthHmac1,
					WebhookListenerAuthJWT:  webhookListenerAuthJwt1,
					ListenerID:              listenerId1,
				}
			}
			triggers = append(triggers, shared.AutomationTrigger{
				AppUserCreatedTrigger:       appUserCreatedTrigger1,
				AppUserUpdatedTrigger:       appUserUpdatedTrigger1,
				FormTrigger:                 formTrigger1,
				GrantDeletedTrigger:         grantDeletedTrigger1,
				GrantFoundTrigger:           grantFoundTrigger1,
				ManualAutomationTrigger:     manualAutomationTrigger1,
				ScheduleTrigger:             scheduleTrigger1,
				ScheduleTriggerAppUser:      scheduleTriggerAppUser1,
				UsageBasedRevocationTrigger: usageBasedRevocationTrigger1,
				UserCreatedTrigger:          userCreatedTrigger1,
				UserProfileChangeTrigger:    userProfileChangeTrigger1,
				WebhookAutomationTrigger:    webhookAutomationTrigger1,
			})
		}
	}
	webhookHmacSecret := new(string)
	if !r.WebhookHmacSecret.IsUnknown() && !r.WebhookHmacSecret.IsNull() {
		*webhookHmacSecret = r.WebhookHmacSecret.ValueString()
	} else {
		webhookHmacSecret = nil
	}
	out := shared.AutomationInput{
		AppID:                        appID,
		AutomationSteps:              automationSteps,
		DisabledReasonCircuitBreaker: disabledReasonCircuitBreaker,
		AutomationContext:            automationContext1,
		CreatedAt:                    createdAt,
		CurrentVersion:               currentVersion,
		Description:                  description,
		DisplayName:                  displayName,
		DraftAutomationSteps:         draftAutomationSteps,
		DraftTriggers:                draftTriggers,
		Enabled:                      enabled,
		IsDraft:                      isDraft,
		LastExecutedAt:               lastExecutedAt,
		PrimaryTriggerType:           primaryTriggerType,
		Triggers:                     triggers,
		WebhookHmacSecret:            webhookHmacSecret,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToSharedCreateAutomationRequest(ctx context.Context) (*shared.CreateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	var automationSteps []shared.AutomationStep
	if r.AutomationSteps != nil {
		automationSteps = make([]shared.AutomationStep, 0, len(r.AutomationSteps))
		for _, automationStepsItem := range r.AutomationSteps {
			var accountLifecycleAction *shared.AccountLifecycleAction
			if automationStepsItem.AccountLifecycleAction != nil {
				var accountInContext *shared.AccountInContext
				if automationStepsItem.AccountLifecycleAction.AccountInContext != nil {
					accountInContext = &shared.AccountInContext{}
				}
				var accountRef *shared.AccountRef
				if automationStepsItem.AccountLifecycleAction.AccountRef != nil {
					accountIDCel := new(string)
					if !automationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.IsUnknown() && !automationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.IsNull() {
						*accountIDCel = automationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.ValueString()
					} else {
						accountIDCel = nil
					}
					accountRef = &shared.AccountRef{
						AccountIDCel: accountIDCel,
					}
				}
				actionName := new(string)
				if !automationStepsItem.AccountLifecycleAction.ActionName.IsUnknown() && !automationStepsItem.AccountLifecycleAction.ActionName.IsNull() {
					*actionName = automationStepsItem.AccountLifecycleAction.ActionName.ValueString()
				} else {
					actionName = nil
				}
				var connectorRef *shared.ConnectorRef
				if automationStepsItem.AccountLifecycleAction.ConnectorRef != nil {
					appId1 := new(string)
					if !automationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.IsNull() {
						*appId1 = automationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.ValueString()
					} else {
						appId1 = nil
					}
					id := new(string)
					if !automationStepsItem.AccountLifecycleAction.ConnectorRef.ID.IsUnknown() && !automationStepsItem.AccountLifecycleAction.ConnectorRef.ID.IsNull() {
						*id = automationStepsItem.AccountLifecycleAction.ConnectorRef.ID.ValueString()
					} else {
						id = nil
					}
					connectorRef = &shared.ConnectorRef{
						AppID: appId1,
						ID:    id,
					}
				}
				accountLifecycleAction = &shared.AccountLifecycleAction{
					AccountInContext: accountInContext,
					AccountRef:       accountRef,
					ActionName:       actionName,
					ConnectorRef:     connectorRef,
				}
			}
			var callFunction *shared.CallFunction
			if automationStepsItem.CallFunction != nil {
				args := make(map[string]string)
				for argsKey, argsValue := range automationStepsItem.CallFunction.Args {
					var argsInst string
					argsInst = argsValue.ValueString()

					args[argsKey] = argsInst
				}
				functionID := new(string)
				if !automationStepsItem.CallFunction.FunctionID.IsUnknown() && !automationStepsItem.CallFunction.FunctionID.IsNull() {
					*functionID = automationStepsItem.CallFunction.FunctionID.ValueString()
				} else {
					functionID = nil
				}
				callFunction = &shared.CallFunction{
					Args:       args,
					FunctionID: functionID,
				}
			}
			var connectorAction *shared.ConnectorAction
			if automationStepsItem.ConnectorAction != nil {
				actionName1 := new(string)
				if !automationStepsItem.ConnectorAction.ActionName.IsUnknown() && !automationStepsItem.ConnectorAction.ActionName.IsNull() {
					*actionName1 = automationStepsItem.ConnectorAction.ActionName.ValueString()
				} else {
					actionName1 = nil
				}
				var argsTemplate *shared.ArgsTemplate
				if automationStepsItem.ConnectorAction.ArgsTemplate != nil {
					argsTemplate = &shared.ArgsTemplate{}
				}
				var connectorRef1 *shared.ConnectorRef
				if automationStepsItem.ConnectorAction.ConnectorRef != nil {
					appId2 := new(string)
					if !automationStepsItem.ConnectorAction.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.ConnectorAction.ConnectorRef.AppID.IsNull() {
						*appId2 = automationStepsItem.ConnectorAction.ConnectorRef.AppID.ValueString()
					} else {
						appId2 = nil
					}
					id1 := new(string)
					if !automationStepsItem.ConnectorAction.ConnectorRef.ID.IsUnknown() && !automationStepsItem.ConnectorAction.ConnectorRef.ID.IsNull() {
						*id1 = automationStepsItem.ConnectorAction.ConnectorRef.ID.ValueString()
					} else {
						id1 = nil
					}
					connectorRef1 = &shared.ConnectorRef{
						AppID: appId2,
						ID:    id1,
					}
				}
				connectorAction = &shared.ConnectorAction{
					ActionName:   actionName1,
					ArgsTemplate: argsTemplate,
					ConnectorRef: connectorRef1,
				}
			}
			var connectorCreateAccount *shared.ConnectorCreateAccount
			if automationStepsItem.ConnectorCreateAccount != nil {
				var connectorRef2 *shared.ConnectorRef
				if automationStepsItem.ConnectorCreateAccount.ConnectorRef != nil {
					appId3 := new(string)
					if !automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsNull() {
						*appId3 = automationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.ValueString()
					} else {
						appId3 = nil
					}
					id2 := new(string)
					if !automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsNull() {
						*id2 = automationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.ValueString()
					} else {
						id2 = nil
					}
					connectorRef2 = &shared.ConnectorRef{
						AppID: appId3,
						ID:    id2,
					}
				}
				userIDCel := new(string)
				if !automationStepsItem.ConnectorCreateAccount.UserIDCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserIDCel.IsNull() {
					*userIDCel = automationStepsItem.ConnectorCreateAccount.UserIDCel.ValueString()
				} else {
					userIDCel = nil
				}
				var userProperties *shared.UserProperties
				if automationStepsItem.ConnectorCreateAccount.UserProperties != nil {
					displayNameCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsNull() {
						*displayNameCel = automationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.ValueString()
					} else {
						displayNameCel = nil
					}
					emailCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsNull() {
						*emailCel = automationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.ValueString()
					} else {
						emailCel = nil
					}
					profileAttributeCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsNull() {
						*profileAttributeCel = automationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.ValueString()
					} else {
						profileAttributeCel = nil
					}
					usernameCel := new(string)
					if !automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsUnknown() && !automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsNull() {
						*usernameCel = automationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.ValueString()
					} else {
						usernameCel = nil
					}
					userProperties = &shared.UserProperties{
						DisplayNameCel:      displayNameCel,
						EmailCel:            emailCel,
						ProfileAttributeCel: profileAttributeCel,
						UsernameCel:         usernameCel,
					}
				}
				connectorCreateAccount = &shared.ConnectorCreateAccount{
					ConnectorRef:   connectorRef2,
					UserIDCel:      userIDCel,
					UserProperties: userProperties,
				}
			}
			var createAccessReview *shared.CreateAccessReview
			if automationStepsItem.CreateAccessReview != nil {
				accessReviewTemplateCel := new(string)
				if !automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsUnknown() && !automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsNull() {
					*accessReviewTemplateCel = automationStepsItem.CreateAccessReview.AccessReviewTemplateCel.ValueString()
				} else {
					accessReviewTemplateCel = nil
				}
				accessReviewTemplateID := new(string)
				if !automationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsUnknown() && !automationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsNull() {
					*accessReviewTemplateID = automationStepsItem.CreateAccessReview.AccessReviewTemplateID.ValueString()
				} else {
					accessReviewTemplateID = nil
				}
				campaignName := new(string)
				if !automationStepsItem.CreateAccessReview.CampaignName.IsUnknown() && !automationStepsItem.CreateAccessReview.CampaignName.IsNull() {
					*campaignName = automationStepsItem.CreateAccessReview.CampaignName.ValueString()
				} else {
					campaignName = nil
				}
				useSubjectUser := new(bool)
				if !automationStepsItem.CreateAccessReview.UseSubjectUser.IsUnknown() && !automationStepsItem.CreateAccessReview.UseSubjectUser.IsNull() {
					*useSubjectUser = automationStepsItem.CreateAccessReview.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser = nil
				}
				userIdsCel := new(string)
				if !automationStepsItem.CreateAccessReview.UserIdsCel.IsUnknown() && !automationStepsItem.CreateAccessReview.UserIdsCel.IsNull() {
					*userIdsCel = automationStepsItem.CreateAccessReview.UserIdsCel.ValueString()
				} else {
					userIdsCel = nil
				}
				var userRefs []shared.UserRef
				if automationStepsItem.CreateAccessReview.UserRefs != nil {
					userRefs = make([]shared.UserRef, 0, len(automationStepsItem.CreateAccessReview.UserRefs))
					for _, userRefsItem := range automationStepsItem.CreateAccessReview.UserRefs {
						id3 := new(string)
						if !userRefsItem.ID.IsUnknown() && !userRefsItem.ID.IsNull() {
							*id3 = userRefsItem.ID.ValueString()
						} else {
							id3 = nil
						}
						userRefs = append(userRefs, shared.UserRef{
							ID: id3,
						})
					}
				}
				createAccessReview = &shared.CreateAccessReview{
					AccessReviewTemplateCel: accessReviewTemplateCel,
					AccessReviewTemplateID:  accessReviewTemplateID,
					CampaignName:            campaignName,
					UseSubjectUser:          useSubjectUser,
					UserIdsCel:              userIdsCel,
					UserRefs:                userRefs,
				}
			}
			var createRevokeTasks *shared.CreateRevokeTasks
			if automationStepsItem.CreateRevokeTasks != nil {
				var appEntitlementRefs []shared.AppEntitlementRef
				if automationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
					appEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.CreateRevokeTasks.AppEntitlementRefs))
					for _, appEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
						appId4 := new(string)
						if !appEntitlementRefsItem.AppID.IsUnknown() && !appEntitlementRefsItem.AppID.IsNull() {
							*appId4 = appEntitlementRefsItem.AppID.ValueString()
						} else {
							appId4 = nil
						}
						id4 := new(string)
						if !appEntitlementRefsItem.ID.IsUnknown() && !appEntitlementRefsItem.ID.IsNull() {
							*id4 = appEntitlementRefsItem.ID.ValueString()
						} else {
							id4 = nil
						}
						appEntitlementRefs = append(appEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId4,
							ID:    id4,
						})
					}
				}
				appEntitlementRefsCel := new(string)
				if !automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel = automationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel = nil
				}
				var excludedAppEntitlementRefs []shared.AppEntitlementRef
				if automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs != nil {
					excludedAppEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs))
					for _, excludedAppEntitlementRefsItem := range automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs {
						appId5 := new(string)
						if !excludedAppEntitlementRefsItem.AppID.IsUnknown() && !excludedAppEntitlementRefsItem.AppID.IsNull() {
							*appId5 = excludedAppEntitlementRefsItem.AppID.ValueString()
						} else {
							appId5 = nil
						}
						id5 := new(string)
						if !excludedAppEntitlementRefsItem.ID.IsUnknown() && !excludedAppEntitlementRefsItem.ID.IsNull() {
							*id5 = excludedAppEntitlementRefsItem.ID.ValueString()
						} else {
							id5 = nil
						}
						excludedAppEntitlementRefs = append(excludedAppEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId5,
							ID:    id5,
						})
					}
				}
				excludedAppEntitlementRefsCel := new(string)
				if !automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.IsNull() {
					*excludedAppEntitlementRefsCel = automationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.ValueString()
				} else {
					excludedAppEntitlementRefsCel = nil
				}
				revokeAll := new(bool)
				if !automationStepsItem.CreateRevokeTasks.RevokeAll.IsUnknown() && !automationStepsItem.CreateRevokeTasks.RevokeAll.IsNull() {
					*revokeAll = automationStepsItem.CreateRevokeTasks.RevokeAll.ValueBool()
				} else {
					revokeAll = nil
				}
				useSubjectUser1 := new(bool)
				if !automationStepsItem.CreateRevokeTasks.UseSubjectUser.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UseSubjectUser.IsNull() {
					*useSubjectUser1 = automationStepsItem.CreateRevokeTasks.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser1 = nil
				}
				userIDCel1 := new(string)
				if !automationStepsItem.CreateRevokeTasks.UserIDCel.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UserIDCel.IsNull() {
					*userIDCel1 = automationStepsItem.CreateRevokeTasks.UserIDCel.ValueString()
				} else {
					userIDCel1 = nil
				}
				var userRef *shared.UserRef
				if automationStepsItem.CreateRevokeTasks.UserRef != nil {
					id6 := new(string)
					if !automationStepsItem.CreateRevokeTasks.UserRef.ID.IsUnknown() && !automationStepsItem.CreateRevokeTasks.UserRef.ID.IsNull() {
						*id6 = automationStepsItem.CreateRevokeTasks.UserRef.ID.ValueString()
					} else {
						id6 = nil
					}
					userRef = &shared.UserRef{
						ID: id6,
					}
				}
				createRevokeTasks = &shared.CreateRevokeTasks{
					AppEntitlementRefs:            appEntitlementRefs,
					AppEntitlementRefsCel:         appEntitlementRefsCel,
					ExcludedAppEntitlementRefs:    excludedAppEntitlementRefs,
					ExcludedAppEntitlementRefsCel: excludedAppEntitlementRefsCel,
					RevokeAll:                     revokeAll,
					UseSubjectUser:                useSubjectUser1,
					UserIDCel:                     userIDCel1,
					UserRef:                       userRef,
				}
			}
			var grantEntitlements *shared.GrantEntitlements
			if automationStepsItem.GrantEntitlements != nil {
				var appEntitlementRefs1 []shared.AppEntitlementRef
				if automationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
					appEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(automationStepsItem.GrantEntitlements.AppEntitlementRefs))
					for _, appEntitlementRefsItem1 := range automationStepsItem.GrantEntitlements.AppEntitlementRefs {
						appId6 := new(string)
						if !appEntitlementRefsItem1.AppID.IsUnknown() && !appEntitlementRefsItem1.AppID.IsNull() {
							*appId6 = appEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId6 = nil
						}
						id7 := new(string)
						if !appEntitlementRefsItem1.ID.IsUnknown() && !appEntitlementRefsItem1.ID.IsNull() {
							*id7 = appEntitlementRefsItem1.ID.ValueString()
						} else {
							id7 = nil
						}
						appEntitlementRefs1 = append(appEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId6,
							ID:    id7,
						})
					}
				}
				appEntitlementRefsCel1 := new(string)
				if !automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsUnknown() && !automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel1 = automationStepsItem.GrantEntitlements.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel1 = nil
				}
				useSubjectUser2 := new(bool)
				if !automationStepsItem.GrantEntitlements.UseSubjectUser.IsUnknown() && !automationStepsItem.GrantEntitlements.UseSubjectUser.IsNull() {
					*useSubjectUser2 = automationStepsItem.GrantEntitlements.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser2 = nil
				}
				userIDCel2 := new(string)
				if !automationStepsItem.GrantEntitlements.UserIDCel.IsUnknown() && !automationStepsItem.GrantEntitlements.UserIDCel.IsNull() {
					*userIDCel2 = automationStepsItem.GrantEntitlements.UserIDCel.ValueString()
				} else {
					userIDCel2 = nil
				}
				var userRef1 *shared.UserRef
				if automationStepsItem.GrantEntitlements.UserRef != nil {
					id8 := new(string)
					if !automationStepsItem.GrantEntitlements.UserRef.ID.IsUnknown() && !automationStepsItem.GrantEntitlements.UserRef.ID.IsNull() {
						*id8 = automationStepsItem.GrantEntitlements.UserRef.ID.ValueString()
					} else {
						id8 = nil
					}
					userRef1 = &shared.UserRef{
						ID: id8,
					}
				}
				grantEntitlements = &shared.GrantEntitlements{
					AppEntitlementRefs:    appEntitlementRefs1,
					AppEntitlementRefsCel: appEntitlementRefsCel1,
					UseSubjectUser:        useSubjectUser2,
					UserIDCel:             userIDCel2,
					UserRef:               userRef1,
				}
			}
			var removeFromDelegation *shared.RemoveFromDelegation
			if automationStepsItem.RemoveFromDelegation != nil {
				replacementUserIDCel := new(string)
				if !automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsUnknown() && !automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsNull() {
					*replacementUserIDCel = automationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.ValueString()
				} else {
					replacementUserIDCel = nil
				}
				var userRef2 *shared.UserRef
				if automationStepsItem.RemoveFromDelegation.UserRef != nil {
					id9 := new(string)
					if !automationStepsItem.RemoveFromDelegation.UserRef.ID.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserRef.ID.IsNull() {
						*id9 = automationStepsItem.RemoveFromDelegation.UserRef.ID.ValueString()
					} else {
						id9 = nil
					}
					userRef2 = &shared.UserRef{
						ID: id9,
					}
				}
				useSubjectUser3 := new(bool)
				if !automationStepsItem.RemoveFromDelegation.UseSubjectUser.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UseSubjectUser.IsNull() {
					*useSubjectUser3 = automationStepsItem.RemoveFromDelegation.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser3 = nil
				}
				userIDCel3 := new(string)
				if !automationStepsItem.RemoveFromDelegation.UserIDCel.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserIDCel.IsNull() {
					*userIDCel3 = automationStepsItem.RemoveFromDelegation.UserIDCel.ValueString()
				} else {
					userIDCel3 = nil
				}
				var userRef11 *shared.UserRef
				if automationStepsItem.RemoveFromDelegation.UserRef1 != nil {
					id10 := new(string)
					if !automationStepsItem.RemoveFromDelegation.UserRef1.ID.IsUnknown() && !automationStepsItem.RemoveFromDelegation.UserRef1.ID.IsNull() {
						*id10 = automationStepsItem.RemoveFromDelegation.UserRef1.ID.ValueString()
					} else {
						id10 = nil
					}
					userRef11 = &shared.UserRef{
						ID: id10,
					}
				}
				removeFromDelegation = &shared.RemoveFromDelegation{
					ReplacementUserIDCel: replacementUserIDCel,
					UserRef:              userRef2,
					UseSubjectUser:       useSubjectUser3,
					UserIDCel:            userIDCel3,
					UserRef1:             userRef11,
				}
			}
			var runAutomation *shared.RunAutomation
			if automationStepsItem.RunAutomation != nil {
				automationTemplateIDCel := new(string)
				if !automationStepsItem.RunAutomation.AutomationTemplateIDCel.IsUnknown() && !automationStepsItem.RunAutomation.AutomationTemplateIDCel.IsNull() {
					*automationTemplateIDCel = automationStepsItem.RunAutomation.AutomationTemplateIDCel.ValueString()
				} else {
					automationTemplateIDCel = nil
				}
				var automationTemplateRef *shared.AutomationTemplateRef
				if automationStepsItem.RunAutomation.AutomationTemplateRef != nil {
					id11 := new(string)
					if !automationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsUnknown() && !automationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsNull() {
						*id11 = automationStepsItem.RunAutomation.AutomationTemplateRef.ID.ValueString()
					} else {
						id11 = nil
					}
					automationTemplateRef = &shared.AutomationTemplateRef{
						ID: id11,
					}
				}
				var automationContext *shared.AutomationContext
				if automationStepsItem.RunAutomation.AutomationContext != nil {
					var contextVar *shared.Context
					if automationStepsItem.RunAutomation.AutomationContext.Context != nil {
						contextVar = &shared.Context{}
					}
					automationContext = &shared.AutomationContext{
						Context: contextVar,
					}
				}
				runAutomation = &shared.RunAutomation{
					AutomationTemplateIDCel: automationTemplateIDCel,
					AutomationTemplateRef:   automationTemplateRef,
					AutomationContext:       automationContext,
				}
			}
			var sendEmail *shared.SendEmail
			if automationStepsItem.SendEmail != nil {
				body := new(string)
				if !automationStepsItem.SendEmail.Body.IsUnknown() && !automationStepsItem.SendEmail.Body.IsNull() {
					*body = automationStepsItem.SendEmail.Body.ValueString()
				} else {
					body = nil
				}
				subject := new(string)
				if !automationStepsItem.SendEmail.Subject.IsUnknown() && !automationStepsItem.SendEmail.Subject.IsNull() {
					*subject = automationStepsItem.SendEmail.Subject.ValueString()
				} else {
					subject = nil
				}
				title := new(string)
				if !automationStepsItem.SendEmail.Title.IsUnknown() && !automationStepsItem.SendEmail.Title.IsNull() {
					*title = automationStepsItem.SendEmail.Title.ValueString()
				} else {
					title = nil
				}
				useSubjectUser4 := new(bool)
				if !automationStepsItem.SendEmail.UseSubjectUser.IsUnknown() && !automationStepsItem.SendEmail.UseSubjectUser.IsNull() {
					*useSubjectUser4 = automationStepsItem.SendEmail.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser4 = nil
				}
				userIdsCel1 := new(string)
				if !automationStepsItem.SendEmail.UserIdsCel.IsUnknown() && !automationStepsItem.SendEmail.UserIdsCel.IsNull() {
					*userIdsCel1 = automationStepsItem.SendEmail.UserIdsCel.ValueString()
				} else {
					userIdsCel1 = nil
				}
				var userRefs1 []shared.UserRef
				if automationStepsItem.SendEmail.UserRefs != nil {
					userRefs1 = make([]shared.UserRef, 0, len(automationStepsItem.SendEmail.UserRefs))
					for _, userRefsItem1 := range automationStepsItem.SendEmail.UserRefs {
						id12 := new(string)
						if !userRefsItem1.ID.IsUnknown() && !userRefsItem1.ID.IsNull() {
							*id12 = userRefsItem1.ID.ValueString()
						} else {
							id12 = nil
						}
						userRefs1 = append(userRefs1, shared.UserRef{
							ID: id12,
						})
					}
				}
				sendEmail = &shared.SendEmail{
					Body:           body,
					Subject:        subject,
					Title:          title,
					UseSubjectUser: useSubjectUser4,
					UserIdsCel:     userIdsCel1,
					UserRefs:       userRefs1,
				}
			}
			var sendSlackMessage *shared.SendSlackMessage
			if automationStepsItem.SendSlackMessage != nil {
				body1 := new(string)
				if !automationStepsItem.SendSlackMessage.Body.IsUnknown() && !automationStepsItem.SendSlackMessage.Body.IsNull() {
					*body1 = automationStepsItem.SendSlackMessage.Body.ValueString()
				} else {
					body1 = nil
				}
				channelName := new(string)
				if !automationStepsItem.SendSlackMessage.ChannelName.IsUnknown() && !automationStepsItem.SendSlackMessage.ChannelName.IsNull() {
					*channelName = automationStepsItem.SendSlackMessage.ChannelName.ValueString()
				} else {
					channelName = nil
				}
				channelNameCel := new(string)
				if !automationStepsItem.SendSlackMessage.ChannelNameCel.IsUnknown() && !automationStepsItem.SendSlackMessage.ChannelNameCel.IsNull() {
					*channelNameCel = automationStepsItem.SendSlackMessage.ChannelNameCel.ValueString()
				} else {
					channelNameCel = nil
				}
				sendSlackMessage = &shared.SendSlackMessage{
					Body:           body1,
					ChannelName:    channelName,
					ChannelNameCel: channelNameCel,
				}
			}
			skipIfTrueCel := new(string)
			if !automationStepsItem.SkipIfTrueCel.IsUnknown() && !automationStepsItem.SkipIfTrueCel.IsNull() {
				*skipIfTrueCel = automationStepsItem.SkipIfTrueCel.ValueString()
			} else {
				skipIfTrueCel = nil
			}
			stepDisplayName := new(string)
			if !automationStepsItem.StepDisplayName.IsUnknown() && !automationStepsItem.StepDisplayName.IsNull() {
				*stepDisplayName = automationStepsItem.StepDisplayName.ValueString()
			} else {
				stepDisplayName = nil
			}
			stepName := new(string)
			if !automationStepsItem.StepName.IsUnknown() && !automationStepsItem.StepName.IsNull() {
				*stepName = automationStepsItem.StepName.ValueString()
			} else {
				stepName = nil
			}
			var taskAction *shared.TaskAction
			if automationStepsItem.TaskAction != nil {
				var closeAction *shared.CloseAction
				if automationStepsItem.TaskAction.CloseAction != nil {
					useSubjectUser5 := new(bool)
					if !automationStepsItem.TaskAction.CloseAction.UseSubjectUser.IsUnknown() && !automationStepsItem.TaskAction.CloseAction.UseSubjectUser.IsNull() {
						*useSubjectUser5 = automationStepsItem.TaskAction.CloseAction.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser5 = nil
					}
					userIDCel4 := new(string)
					if !automationStepsItem.TaskAction.CloseAction.UserIDCel.IsUnknown() && !automationStepsItem.TaskAction.CloseAction.UserIDCel.IsNull() {
						*userIDCel4 = automationStepsItem.TaskAction.CloseAction.UserIDCel.ValueString()
					} else {
						userIDCel4 = nil
					}
					var userRef3 *shared.UserRef
					if automationStepsItem.TaskAction.CloseAction.UserRef != nil {
						id13 := new(string)
						if !automationStepsItem.TaskAction.CloseAction.UserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.CloseAction.UserRef.ID.IsNull() {
							*id13 = automationStepsItem.TaskAction.CloseAction.UserRef.ID.ValueString()
						} else {
							id13 = nil
						}
						userRef3 = &shared.UserRef{
							ID: id13,
						}
					}
					closeAction = &shared.CloseAction{
						UseSubjectUser: useSubjectUser5,
						UserIDCel:      userIDCel4,
						UserRef:        userRef3,
					}
				}
				var reassignAction *shared.ReassignAction
				if automationStepsItem.TaskAction.ReassignAction != nil {
					assigneeUserIDCel := new(string)
					if !automationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.IsNull() {
						*assigneeUserIDCel = automationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.ValueString()
					} else {
						assigneeUserIDCel = nil
					}
					var userRef4 *shared.UserRef
					if automationStepsItem.TaskAction.ReassignAction.UserRef != nil {
						id14 := new(string)
						if !automationStepsItem.TaskAction.ReassignAction.UserRef.ID.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.UserRef.ID.IsNull() {
							*id14 = automationStepsItem.TaskAction.ReassignAction.UserRef.ID.ValueString()
						} else {
							id14 = nil
						}
						userRef4 = &shared.UserRef{
							ID: id14,
						}
					}
					subjectUserIDCel := new(string)
					if !automationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.IsNull() {
						*subjectUserIDCel = automationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.ValueString()
					} else {
						subjectUserIDCel = nil
					}
					var userRef12 *shared.UserRef
					if automationStepsItem.TaskAction.ReassignAction.UserRef1 != nil {
						id15 := new(string)
						if !automationStepsItem.TaskAction.ReassignAction.UserRef1.ID.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.UserRef1.ID.IsNull() {
							*id15 = automationStepsItem.TaskAction.ReassignAction.UserRef1.ID.ValueString()
						} else {
							id15 = nil
						}
						userRef12 = &shared.UserRef{
							ID: id15,
						}
					}
					useSubjectUser6 := new(bool)
					if !automationStepsItem.TaskAction.ReassignAction.UseSubjectUser.IsUnknown() && !automationStepsItem.TaskAction.ReassignAction.UseSubjectUser.IsNull() {
						*useSubjectUser6 = automationStepsItem.TaskAction.ReassignAction.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser6 = nil
					}
					reassignAction = &shared.ReassignAction{
						AssigneeUserIDCel: assigneeUserIDCel,
						UserRef:           userRef4,
						SubjectUserIDCel:  subjectUserIDCel,
						UserRef1:          userRef12,
						UseSubjectUser:    useSubjectUser6,
					}
				}
				var taskTypes []shared.TaskTypes
				if automationStepsItem.TaskAction.TaskTypes != nil {
					taskTypes = make([]shared.TaskTypes, 0, len(automationStepsItem.TaskAction.TaskTypes))
					for _, taskTypesItem := range automationStepsItem.TaskAction.TaskTypes {
						taskTypes = append(taskTypes, shared.TaskTypes(taskTypesItem.ValueString()))
					}
				}
				taskUserRelation := new(shared.TaskUserRelation)
				if !automationStepsItem.TaskAction.TaskUserRelation.IsUnknown() && !automationStepsItem.TaskAction.TaskUserRelation.IsNull() {
					*taskUserRelation = shared.TaskUserRelation(automationStepsItem.TaskAction.TaskUserRelation.ValueString())
				} else {
					taskUserRelation = nil
				}
				taskAction = &shared.TaskAction{
					CloseAction:      closeAction,
					ReassignAction:   reassignAction,
					TaskTypes:        taskTypes,
					TaskUserRelation: taskUserRelation,
				}
			}
			var unenrollFromAllAccessProfiles *shared.UnenrollFromAllAccessProfiles
			if automationStepsItem.UnenrollFromAllAccessProfiles != nil {
				var catalogIds []string
				if automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
					catalogIds = make([]string, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
					for _, catalogIdsItem := range automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
						catalogIds = append(catalogIds, catalogIdsItem.ValueString())
					}
				}
				catalogIdsCel := new(string)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsNull() {
					*catalogIdsCel = automationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.ValueString()
				} else {
					catalogIdsCel = nil
				}
				useSubjectUser7 := new(bool)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsNull() {
					*useSubjectUser7 = automationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser7 = nil
				}
				userIdsCel2 := new(string)
				if !automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsUnknown() && !automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsNull() {
					*userIdsCel2 = automationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.ValueString()
				} else {
					userIdsCel2 = nil
				}
				var userRefs2 []shared.UserRef
				if automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
					userRefs2 = make([]shared.UserRef, 0, len(automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs))
					for _, userRefsItem2 := range automationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
						id16 := new(string)
						if !userRefsItem2.ID.IsUnknown() && !userRefsItem2.ID.IsNull() {
							*id16 = userRefsItem2.ID.ValueString()
						} else {
							id16 = nil
						}
						userRefs2 = append(userRefs2, shared.UserRef{
							ID: id16,
						})
					}
				}
				unenrollFromAllAccessProfiles = &shared.UnenrollFromAllAccessProfiles{
					CatalogIds:     catalogIds,
					CatalogIdsCel:  catalogIdsCel,
					UseSubjectUser: useSubjectUser7,
					UserIdsCel:     userIdsCel2,
					UserRefs:       userRefs2,
				}
			}
			var updateUser *shared.UpdateUser
			if automationStepsItem.UpdateUser != nil {
				useSubjectUser8 := new(bool)
				if !automationStepsItem.UpdateUser.UseSubjectUser.IsUnknown() && !automationStepsItem.UpdateUser.UseSubjectUser.IsNull() {
					*useSubjectUser8 = automationStepsItem.UpdateUser.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser8 = nil
				}
				userIDCel5 := new(string)
				if !automationStepsItem.UpdateUser.UserIDCel.IsUnknown() && !automationStepsItem.UpdateUser.UserIDCel.IsNull() {
					*userIDCel5 = automationStepsItem.UpdateUser.UserIDCel.ValueString()
				} else {
					userIDCel5 = nil
				}
				var userRef5 *shared.UserRef
				if automationStepsItem.UpdateUser.UserRef != nil {
					id17 := new(string)
					if !automationStepsItem.UpdateUser.UserRef.ID.IsUnknown() && !automationStepsItem.UpdateUser.UserRef.ID.IsNull() {
						*id17 = automationStepsItem.UpdateUser.UserRef.ID.ValueString()
					} else {
						id17 = nil
					}
					userRef5 = &shared.UserRef{
						ID: id17,
					}
				}
				userStatusCel := new(string)
				if !automationStepsItem.UpdateUser.UserStatusCel.IsUnknown() && !automationStepsItem.UpdateUser.UserStatusCel.IsNull() {
					*userStatusCel = automationStepsItem.UpdateUser.UserStatusCel.ValueString()
				} else {
					userStatusCel = nil
				}
				userStatusEnum := new(shared.UserStatusEnum)
				if !automationStepsItem.UpdateUser.UserStatusEnum.IsUnknown() && !automationStepsItem.UpdateUser.UserStatusEnum.IsNull() {
					*userStatusEnum = shared.UserStatusEnum(automationStepsItem.UpdateUser.UserStatusEnum.ValueString())
				} else {
					userStatusEnum = nil
				}
				updateUser = &shared.UpdateUser{
					UseSubjectUser: useSubjectUser8,
					UserIDCel:      userIDCel5,
					UserRef:        userRef5,
					UserStatusCel:  userStatusCel,
					UserStatusEnum: userStatusEnum,
				}
			}
			var waitForDuration *shared.WaitForDuration
			if automationStepsItem.WaitForDuration != nil {
				duration := new(string)
				if !automationStepsItem.WaitForDuration.Duration.IsUnknown() && !automationStepsItem.WaitForDuration.Duration.IsNull() {
					*duration = automationStepsItem.WaitForDuration.Duration.ValueString()
				} else {
					duration = nil
				}
				waitForDuration = &shared.WaitForDuration{
					Duration: duration,
				}
			}
			var webhook *shared.Webhook
			if automationStepsItem.Webhook != nil {
				var payload *shared.Payload
				if automationStepsItem.Webhook.Payload != nil {
					payload = &shared.Payload{}
				}
				webhookID := new(string)
				if !automationStepsItem.Webhook.WebhookID.IsUnknown() && !automationStepsItem.Webhook.WebhookID.IsNull() {
					*webhookID = automationStepsItem.Webhook.WebhookID.ValueString()
				} else {
					webhookID = nil
				}
				webhookIDCel := new(string)
				if !automationStepsItem.Webhook.WebhookIDCel.IsUnknown() && !automationStepsItem.Webhook.WebhookIDCel.IsNull() {
					*webhookIDCel = automationStepsItem.Webhook.WebhookIDCel.ValueString()
				} else {
					webhookIDCel = nil
				}
				webhook = &shared.Webhook{
					Payload:      payload,
					WebhookID:    webhookID,
					WebhookIDCel: webhookIDCel,
				}
			}
			automationSteps = append(automationSteps, shared.AutomationStep{
				AccountLifecycleAction:        accountLifecycleAction,
				CallFunction:                  callFunction,
				ConnectorAction:               connectorAction,
				ConnectorCreateAccount:        connectorCreateAccount,
				CreateAccessReview:            createAccessReview,
				CreateRevokeTasks:             createRevokeTasks,
				GrantEntitlements:             grantEntitlements,
				RemoveFromDelegation:          removeFromDelegation,
				RunAutomation:                 runAutomation,
				SendEmail:                     sendEmail,
				SendSlackMessage:              sendSlackMessage,
				SkipIfTrueCel:                 skipIfTrueCel,
				StepDisplayName:               stepDisplayName,
				StepName:                      stepName,
				TaskAction:                    taskAction,
				UnenrollFromAllAccessProfiles: unenrollFromAllAccessProfiles,
				UpdateUser:                    updateUser,
				WaitForDuration:               waitForDuration,
				Webhook:                       webhook,
			})
		}
	}
	var automationContext1 *shared.AutomationContext
	if r.AutomationContext != nil {
		var contextVar1 *shared.Context
		if r.AutomationContext.Context != nil {
			contextVar1 = &shared.Context{}
		}
		automationContext1 = &shared.AutomationContext{
			Context: contextVar1,
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var draftAutomationSteps []shared.AutomationStep
	if r.DraftAutomationSteps != nil {
		draftAutomationSteps = make([]shared.AutomationStep, 0, len(r.DraftAutomationSteps))
		for _, draftAutomationStepsItem := range r.DraftAutomationSteps {
			var accountLifecycleAction1 *shared.AccountLifecycleAction
			if draftAutomationStepsItem.AccountLifecycleAction != nil {
				var accountInContext1 *shared.AccountInContext
				if draftAutomationStepsItem.AccountLifecycleAction.AccountInContext != nil {
					accountInContext1 = &shared.AccountInContext{}
				}
				var accountRef1 *shared.AccountRef
				if draftAutomationStepsItem.AccountLifecycleAction.AccountRef != nil {
					accountIDCel1 := new(string)
					if !draftAutomationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.IsUnknown() && !draftAutomationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.IsNull() {
						*accountIDCel1 = draftAutomationStepsItem.AccountLifecycleAction.AccountRef.AccountIDCel.ValueString()
					} else {
						accountIDCel1 = nil
					}
					accountRef1 = &shared.AccountRef{
						AccountIDCel: accountIDCel1,
					}
				}
				actionName2 := new(string)
				if !draftAutomationStepsItem.AccountLifecycleAction.ActionName.IsUnknown() && !draftAutomationStepsItem.AccountLifecycleAction.ActionName.IsNull() {
					*actionName2 = draftAutomationStepsItem.AccountLifecycleAction.ActionName.ValueString()
				} else {
					actionName2 = nil
				}
				var connectorRef3 *shared.ConnectorRef
				if draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef != nil {
					appId7 := new(string)
					if !draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.IsNull() {
						*appId7 = draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.AppID.ValueString()
					} else {
						appId7 = nil
					}
					id18 := new(string)
					if !draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.ID.IsNull() {
						*id18 = draftAutomationStepsItem.AccountLifecycleAction.ConnectorRef.ID.ValueString()
					} else {
						id18 = nil
					}
					connectorRef3 = &shared.ConnectorRef{
						AppID: appId7,
						ID:    id18,
					}
				}
				accountLifecycleAction1 = &shared.AccountLifecycleAction{
					AccountInContext: accountInContext1,
					AccountRef:       accountRef1,
					ActionName:       actionName2,
					ConnectorRef:     connectorRef3,
				}
			}
			var callFunction1 *shared.CallFunction
			if draftAutomationStepsItem.CallFunction != nil {
				args1 := make(map[string]string)
				for argsKey1, argsValue1 := range draftAutomationStepsItem.CallFunction.Args {
					var argsInst1 string
					argsInst1 = argsValue1.ValueString()

					args1[argsKey1] = argsInst1
				}
				functionId1 := new(string)
				if !draftAutomationStepsItem.CallFunction.FunctionID.IsUnknown() && !draftAutomationStepsItem.CallFunction.FunctionID.IsNull() {
					*functionId1 = draftAutomationStepsItem.CallFunction.FunctionID.ValueString()
				} else {
					functionId1 = nil
				}
				callFunction1 = &shared.CallFunction{
					Args:       args1,
					FunctionID: functionId1,
				}
			}
			var connectorAction1 *shared.ConnectorAction
			if draftAutomationStepsItem.ConnectorAction != nil {
				actionName3 := new(string)
				if !draftAutomationStepsItem.ConnectorAction.ActionName.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ActionName.IsNull() {
					*actionName3 = draftAutomationStepsItem.ConnectorAction.ActionName.ValueString()
				} else {
					actionName3 = nil
				}
				var argsTemplate1 *shared.ArgsTemplate
				if draftAutomationStepsItem.ConnectorAction.ArgsTemplate != nil {
					argsTemplate1 = &shared.ArgsTemplate{}
				}
				var connectorRef4 *shared.ConnectorRef
				if draftAutomationStepsItem.ConnectorAction.ConnectorRef != nil {
					appId8 := new(string)
					if !draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.IsNull() {
						*appId8 = draftAutomationStepsItem.ConnectorAction.ConnectorRef.AppID.ValueString()
					} else {
						appId8 = nil
					}
					id19 := new(string)
					if !draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.IsNull() {
						*id19 = draftAutomationStepsItem.ConnectorAction.ConnectorRef.ID.ValueString()
					} else {
						id19 = nil
					}
					connectorRef4 = &shared.ConnectorRef{
						AppID: appId8,
						ID:    id19,
					}
				}
				connectorAction1 = &shared.ConnectorAction{
					ActionName:   actionName3,
					ArgsTemplate: argsTemplate1,
					ConnectorRef: connectorRef4,
				}
			}
			var connectorCreateAccount1 *shared.ConnectorCreateAccount
			if draftAutomationStepsItem.ConnectorCreateAccount != nil {
				var connectorRef5 *shared.ConnectorRef
				if draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef != nil {
					appId9 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.IsNull() {
						*appId9 = draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.AppID.ValueString()
					} else {
						appId9 = nil
					}
					id20 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.IsNull() {
						*id20 = draftAutomationStepsItem.ConnectorCreateAccount.ConnectorRef.ID.ValueString()
					} else {
						id20 = nil
					}
					connectorRef5 = &shared.ConnectorRef{
						AppID: appId9,
						ID:    id20,
					}
				}
				userIDCel6 := new(string)
				if !draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.IsNull() {
					*userIDCel6 = draftAutomationStepsItem.ConnectorCreateAccount.UserIDCel.ValueString()
				} else {
					userIDCel6 = nil
				}
				var userProperties1 *shared.UserProperties
				if draftAutomationStepsItem.ConnectorCreateAccount.UserProperties != nil {
					displayNameCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.IsNull() {
						*displayNameCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.DisplayNameCel.ValueString()
					} else {
						displayNameCel1 = nil
					}
					emailCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.IsNull() {
						*emailCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.EmailCel.ValueString()
					} else {
						emailCel1 = nil
					}
					profileAttributeCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.IsNull() {
						*profileAttributeCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.ProfileAttributeCel.ValueString()
					} else {
						profileAttributeCel1 = nil
					}
					usernameCel1 := new(string)
					if !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsUnknown() && !draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.IsNull() {
						*usernameCel1 = draftAutomationStepsItem.ConnectorCreateAccount.UserProperties.UsernameCel.ValueString()
					} else {
						usernameCel1 = nil
					}
					userProperties1 = &shared.UserProperties{
						DisplayNameCel:      displayNameCel1,
						EmailCel:            emailCel1,
						ProfileAttributeCel: profileAttributeCel1,
						UsernameCel:         usernameCel1,
					}
				}
				connectorCreateAccount1 = &shared.ConnectorCreateAccount{
					ConnectorRef:   connectorRef5,
					UserIDCel:      userIDCel6,
					UserProperties: userProperties1,
				}
			}
			var createAccessReview1 *shared.CreateAccessReview
			if draftAutomationStepsItem.CreateAccessReview != nil {
				accessReviewTemplateCel1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.IsNull() {
					*accessReviewTemplateCel1 = draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateCel.ValueString()
				} else {
					accessReviewTemplateCel1 = nil
				}
				accessReviewTemplateId1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.IsNull() {
					*accessReviewTemplateId1 = draftAutomationStepsItem.CreateAccessReview.AccessReviewTemplateID.ValueString()
				} else {
					accessReviewTemplateId1 = nil
				}
				campaignName1 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.CampaignName.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.CampaignName.IsNull() {
					*campaignName1 = draftAutomationStepsItem.CreateAccessReview.CampaignName.ValueString()
				} else {
					campaignName1 = nil
				}
				useSubjectUser9 := new(bool)
				if !draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.IsNull() {
					*useSubjectUser9 = draftAutomationStepsItem.CreateAccessReview.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser9 = nil
				}
				userIdsCel3 := new(string)
				if !draftAutomationStepsItem.CreateAccessReview.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.CreateAccessReview.UserIdsCel.IsNull() {
					*userIdsCel3 = draftAutomationStepsItem.CreateAccessReview.UserIdsCel.ValueString()
				} else {
					userIdsCel3 = nil
				}
				var userRefs3 []shared.UserRef
				if draftAutomationStepsItem.CreateAccessReview.UserRefs != nil {
					userRefs3 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.CreateAccessReview.UserRefs))
					for _, userRefsItem3 := range draftAutomationStepsItem.CreateAccessReview.UserRefs {
						id21 := new(string)
						if !userRefsItem3.ID.IsUnknown() && !userRefsItem3.ID.IsNull() {
							*id21 = userRefsItem3.ID.ValueString()
						} else {
							id21 = nil
						}
						userRefs3 = append(userRefs3, shared.UserRef{
							ID: id21,
						})
					}
				}
				createAccessReview1 = &shared.CreateAccessReview{
					AccessReviewTemplateCel: accessReviewTemplateCel1,
					AccessReviewTemplateID:  accessReviewTemplateId1,
					CampaignName:            campaignName1,
					UseSubjectUser:          useSubjectUser9,
					UserIdsCel:              userIdsCel3,
					UserRefs:                userRefs3,
				}
			}
			var createRevokeTasks1 *shared.CreateRevokeTasks
			if draftAutomationStepsItem.CreateRevokeTasks != nil {
				var appEntitlementRefs2 []shared.AppEntitlementRef
				if draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs != nil {
					appEntitlementRefs2 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs))
					for _, appEntitlementRefsItem2 := range draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefs {
						appId10 := new(string)
						if !appEntitlementRefsItem2.AppID.IsUnknown() && !appEntitlementRefsItem2.AppID.IsNull() {
							*appId10 = appEntitlementRefsItem2.AppID.ValueString()
						} else {
							appId10 = nil
						}
						id22 := new(string)
						if !appEntitlementRefsItem2.ID.IsUnknown() && !appEntitlementRefsItem2.ID.IsNull() {
							*id22 = appEntitlementRefsItem2.ID.ValueString()
						} else {
							id22 = nil
						}
						appEntitlementRefs2 = append(appEntitlementRefs2, shared.AppEntitlementRef{
							AppID: appId10,
							ID:    id22,
						})
					}
				}
				appEntitlementRefsCel2 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel2 = draftAutomationStepsItem.CreateRevokeTasks.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel2 = nil
				}
				var excludedAppEntitlementRefs1 []shared.AppEntitlementRef
				if draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs != nil {
					excludedAppEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs))
					for _, excludedAppEntitlementRefsItem1 := range draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefs {
						appId11 := new(string)
						if !excludedAppEntitlementRefsItem1.AppID.IsUnknown() && !excludedAppEntitlementRefsItem1.AppID.IsNull() {
							*appId11 = excludedAppEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId11 = nil
						}
						id23 := new(string)
						if !excludedAppEntitlementRefsItem1.ID.IsUnknown() && !excludedAppEntitlementRefsItem1.ID.IsNull() {
							*id23 = excludedAppEntitlementRefsItem1.ID.ValueString()
						} else {
							id23 = nil
						}
						excludedAppEntitlementRefs1 = append(excludedAppEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId11,
							ID:    id23,
						})
					}
				}
				excludedAppEntitlementRefsCel1 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.IsNull() {
					*excludedAppEntitlementRefsCel1 = draftAutomationStepsItem.CreateRevokeTasks.ExcludedAppEntitlementRefsCel.ValueString()
				} else {
					excludedAppEntitlementRefsCel1 = nil
				}
				revokeAll1 := new(bool)
				if !draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.IsNull() {
					*revokeAll1 = draftAutomationStepsItem.CreateRevokeTasks.RevokeAll.ValueBool()
				} else {
					revokeAll1 = nil
				}
				useSubjectUser10 := new(bool)
				if !draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.IsNull() {
					*useSubjectUser10 = draftAutomationStepsItem.CreateRevokeTasks.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser10 = nil
				}
				userIDCel7 := new(string)
				if !draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.IsNull() {
					*userIDCel7 = draftAutomationStepsItem.CreateRevokeTasks.UserIDCel.ValueString()
				} else {
					userIDCel7 = nil
				}
				var userRef6 *shared.UserRef
				if draftAutomationStepsItem.CreateRevokeTasks.UserRef != nil {
					id24 := new(string)
					if !draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.IsNull() {
						*id24 = draftAutomationStepsItem.CreateRevokeTasks.UserRef.ID.ValueString()
					} else {
						id24 = nil
					}
					userRef6 = &shared.UserRef{
						ID: id24,
					}
				}
				createRevokeTasks1 = &shared.CreateRevokeTasks{
					AppEntitlementRefs:            appEntitlementRefs2,
					AppEntitlementRefsCel:         appEntitlementRefsCel2,
					ExcludedAppEntitlementRefs:    excludedAppEntitlementRefs1,
					ExcludedAppEntitlementRefsCel: excludedAppEntitlementRefsCel1,
					RevokeAll:                     revokeAll1,
					UseSubjectUser:                useSubjectUser10,
					UserIDCel:                     userIDCel7,
					UserRef:                       userRef6,
				}
			}
			var grantEntitlements1 *shared.GrantEntitlements
			if draftAutomationStepsItem.GrantEntitlements != nil {
				var appEntitlementRefs3 []shared.AppEntitlementRef
				if draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs != nil {
					appEntitlementRefs3 = make([]shared.AppEntitlementRef, 0, len(draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs))
					for _, appEntitlementRefsItem3 := range draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefs {
						appId12 := new(string)
						if !appEntitlementRefsItem3.AppID.IsUnknown() && !appEntitlementRefsItem3.AppID.IsNull() {
							*appId12 = appEntitlementRefsItem3.AppID.ValueString()
						} else {
							appId12 = nil
						}
						id25 := new(string)
						if !appEntitlementRefsItem3.ID.IsUnknown() && !appEntitlementRefsItem3.ID.IsNull() {
							*id25 = appEntitlementRefsItem3.ID.ValueString()
						} else {
							id25 = nil
						}
						appEntitlementRefs3 = append(appEntitlementRefs3, shared.AppEntitlementRef{
							AppID: appId12,
							ID:    id25,
						})
					}
				}
				appEntitlementRefsCel3 := new(string)
				if !draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.IsNull() {
					*appEntitlementRefsCel3 = draftAutomationStepsItem.GrantEntitlements.AppEntitlementRefsCel.ValueString()
				} else {
					appEntitlementRefsCel3 = nil
				}
				useSubjectUser11 := new(bool)
				if !draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.IsNull() {
					*useSubjectUser11 = draftAutomationStepsItem.GrantEntitlements.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser11 = nil
				}
				userIDCel8 := new(string)
				if !draftAutomationStepsItem.GrantEntitlements.UserIDCel.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UserIDCel.IsNull() {
					*userIDCel8 = draftAutomationStepsItem.GrantEntitlements.UserIDCel.ValueString()
				} else {
					userIDCel8 = nil
				}
				var userRef7 *shared.UserRef
				if draftAutomationStepsItem.GrantEntitlements.UserRef != nil {
					id26 := new(string)
					if !draftAutomationStepsItem.GrantEntitlements.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.GrantEntitlements.UserRef.ID.IsNull() {
						*id26 = draftAutomationStepsItem.GrantEntitlements.UserRef.ID.ValueString()
					} else {
						id26 = nil
					}
					userRef7 = &shared.UserRef{
						ID: id26,
					}
				}
				grantEntitlements1 = &shared.GrantEntitlements{
					AppEntitlementRefs:    appEntitlementRefs3,
					AppEntitlementRefsCel: appEntitlementRefsCel3,
					UseSubjectUser:        useSubjectUser11,
					UserIDCel:             userIDCel8,
					UserRef:               userRef7,
				}
			}
			var removeFromDelegation1 *shared.RemoveFromDelegation
			if draftAutomationStepsItem.RemoveFromDelegation != nil {
				replacementUserIDCel1 := new(string)
				if !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.IsNull() {
					*replacementUserIDCel1 = draftAutomationStepsItem.RemoveFromDelegation.ReplacementUserIDCel.ValueString()
				} else {
					replacementUserIDCel1 = nil
				}
				var userRef8 *shared.UserRef
				if draftAutomationStepsItem.RemoveFromDelegation.UserRef != nil {
					id27 := new(string)
					if !draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.IsNull() {
						*id27 = draftAutomationStepsItem.RemoveFromDelegation.UserRef.ID.ValueString()
					} else {
						id27 = nil
					}
					userRef8 = &shared.UserRef{
						ID: id27,
					}
				}
				useSubjectUser12 := new(bool)
				if !draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.IsNull() {
					*useSubjectUser12 = draftAutomationStepsItem.RemoveFromDelegation.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser12 = nil
				}
				userIDCel9 := new(string)
				if !draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.IsNull() {
					*userIDCel9 = draftAutomationStepsItem.RemoveFromDelegation.UserIDCel.ValueString()
				} else {
					userIDCel9 = nil
				}
				var userRef13 *shared.UserRef
				if draftAutomationStepsItem.RemoveFromDelegation.UserRef1 != nil {
					id28 := new(string)
					if !draftAutomationStepsItem.RemoveFromDelegation.UserRef1.ID.IsUnknown() && !draftAutomationStepsItem.RemoveFromDelegation.UserRef1.ID.IsNull() {
						*id28 = draftAutomationStepsItem.RemoveFromDelegation.UserRef1.ID.ValueString()
					} else {
						id28 = nil
					}
					userRef13 = &shared.UserRef{
						ID: id28,
					}
				}
				removeFromDelegation1 = &shared.RemoveFromDelegation{
					ReplacementUserIDCel: replacementUserIDCel1,
					UserRef:              userRef8,
					UseSubjectUser:       useSubjectUser12,
					UserIDCel:            userIDCel9,
					UserRef1:             userRef13,
				}
			}
			var runAutomation1 *shared.RunAutomation
			if draftAutomationStepsItem.RunAutomation != nil {
				automationTemplateIDCel1 := new(string)
				if !draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.IsUnknown() && !draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.IsNull() {
					*automationTemplateIDCel1 = draftAutomationStepsItem.RunAutomation.AutomationTemplateIDCel.ValueString()
				} else {
					automationTemplateIDCel1 = nil
				}
				var automationTemplateRef1 *shared.AutomationTemplateRef
				if draftAutomationStepsItem.RunAutomation.AutomationTemplateRef != nil {
					id29 := new(string)
					if !draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsUnknown() && !draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.IsNull() {
						*id29 = draftAutomationStepsItem.RunAutomation.AutomationTemplateRef.ID.ValueString()
					} else {
						id29 = nil
					}
					automationTemplateRef1 = &shared.AutomationTemplateRef{
						ID: id29,
					}
				}
				var automationContext2 *shared.AutomationContext
				if draftAutomationStepsItem.RunAutomation.AutomationContext != nil {
					var contextVar2 *shared.Context
					if draftAutomationStepsItem.RunAutomation.AutomationContext.Context != nil {
						contextVar2 = &shared.Context{}
					}
					automationContext2 = &shared.AutomationContext{
						Context: contextVar2,
					}
				}
				runAutomation1 = &shared.RunAutomation{
					AutomationTemplateIDCel: automationTemplateIDCel1,
					AutomationTemplateRef:   automationTemplateRef1,
					AutomationContext:       automationContext2,
				}
			}
			var sendEmail1 *shared.SendEmail
			if draftAutomationStepsItem.SendEmail != nil {
				body2 := new(string)
				if !draftAutomationStepsItem.SendEmail.Body.IsUnknown() && !draftAutomationStepsItem.SendEmail.Body.IsNull() {
					*body2 = draftAutomationStepsItem.SendEmail.Body.ValueString()
				} else {
					body2 = nil
				}
				subject1 := new(string)
				if !draftAutomationStepsItem.SendEmail.Subject.IsUnknown() && !draftAutomationStepsItem.SendEmail.Subject.IsNull() {
					*subject1 = draftAutomationStepsItem.SendEmail.Subject.ValueString()
				} else {
					subject1 = nil
				}
				title1 := new(string)
				if !draftAutomationStepsItem.SendEmail.Title.IsUnknown() && !draftAutomationStepsItem.SendEmail.Title.IsNull() {
					*title1 = draftAutomationStepsItem.SendEmail.Title.ValueString()
				} else {
					title1 = nil
				}
				useSubjectUser13 := new(bool)
				if !draftAutomationStepsItem.SendEmail.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.SendEmail.UseSubjectUser.IsNull() {
					*useSubjectUser13 = draftAutomationStepsItem.SendEmail.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser13 = nil
				}
				userIdsCel4 := new(string)
				if !draftAutomationStepsItem.SendEmail.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.SendEmail.UserIdsCel.IsNull() {
					*userIdsCel4 = draftAutomationStepsItem.SendEmail.UserIdsCel.ValueString()
				} else {
					userIdsCel4 = nil
				}
				var userRefs4 []shared.UserRef
				if draftAutomationStepsItem.SendEmail.UserRefs != nil {
					userRefs4 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.SendEmail.UserRefs))
					for _, userRefsItem4 := range draftAutomationStepsItem.SendEmail.UserRefs {
						id30 := new(string)
						if !userRefsItem4.ID.IsUnknown() && !userRefsItem4.ID.IsNull() {
							*id30 = userRefsItem4.ID.ValueString()
						} else {
							id30 = nil
						}
						userRefs4 = append(userRefs4, shared.UserRef{
							ID: id30,
						})
					}
				}
				sendEmail1 = &shared.SendEmail{
					Body:           body2,
					Subject:        subject1,
					Title:          title1,
					UseSubjectUser: useSubjectUser13,
					UserIdsCel:     userIdsCel4,
					UserRefs:       userRefs4,
				}
			}
			var sendSlackMessage1 *shared.SendSlackMessage
			if draftAutomationStepsItem.SendSlackMessage != nil {
				body3 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.Body.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.Body.IsNull() {
					*body3 = draftAutomationStepsItem.SendSlackMessage.Body.ValueString()
				} else {
					body3 = nil
				}
				channelName1 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.ChannelName.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.ChannelName.IsNull() {
					*channelName1 = draftAutomationStepsItem.SendSlackMessage.ChannelName.ValueString()
				} else {
					channelName1 = nil
				}
				channelNameCel1 := new(string)
				if !draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.IsUnknown() && !draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.IsNull() {
					*channelNameCel1 = draftAutomationStepsItem.SendSlackMessage.ChannelNameCel.ValueString()
				} else {
					channelNameCel1 = nil
				}
				sendSlackMessage1 = &shared.SendSlackMessage{
					Body:           body3,
					ChannelName:    channelName1,
					ChannelNameCel: channelNameCel1,
				}
			}
			skipIfTrueCel1 := new(string)
			if !draftAutomationStepsItem.SkipIfTrueCel.IsUnknown() && !draftAutomationStepsItem.SkipIfTrueCel.IsNull() {
				*skipIfTrueCel1 = draftAutomationStepsItem.SkipIfTrueCel.ValueString()
			} else {
				skipIfTrueCel1 = nil
			}
			stepDisplayName1 := new(string)
			if !draftAutomationStepsItem.StepDisplayName.IsUnknown() && !draftAutomationStepsItem.StepDisplayName.IsNull() {
				*stepDisplayName1 = draftAutomationStepsItem.StepDisplayName.ValueString()
			} else {
				stepDisplayName1 = nil
			}
			stepName1 := new(string)
			if !draftAutomationStepsItem.StepName.IsUnknown() && !draftAutomationStepsItem.StepName.IsNull() {
				*stepName1 = draftAutomationStepsItem.StepName.ValueString()
			} else {
				stepName1 = nil
			}
			var taskAction1 *shared.TaskAction
			if draftAutomationStepsItem.TaskAction != nil {
				var closeAction1 *shared.CloseAction
				if draftAutomationStepsItem.TaskAction.CloseAction != nil {
					useSubjectUser14 := new(bool)
					if !draftAutomationStepsItem.TaskAction.CloseAction.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.TaskAction.CloseAction.UseSubjectUser.IsNull() {
						*useSubjectUser14 = draftAutomationStepsItem.TaskAction.CloseAction.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser14 = nil
					}
					userIDCel10 := new(string)
					if !draftAutomationStepsItem.TaskAction.CloseAction.UserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.CloseAction.UserIDCel.IsNull() {
						*userIDCel10 = draftAutomationStepsItem.TaskAction.CloseAction.UserIDCel.ValueString()
					} else {
						userIDCel10 = nil
					}
					var userRef9 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.CloseAction.UserRef != nil {
						id31 := new(string)
						if !draftAutomationStepsItem.TaskAction.CloseAction.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.CloseAction.UserRef.ID.IsNull() {
							*id31 = draftAutomationStepsItem.TaskAction.CloseAction.UserRef.ID.ValueString()
						} else {
							id31 = nil
						}
						userRef9 = &shared.UserRef{
							ID: id31,
						}
					}
					closeAction1 = &shared.CloseAction{
						UseSubjectUser: useSubjectUser14,
						UserIDCel:      userIDCel10,
						UserRef:        userRef9,
					}
				}
				var reassignAction1 *shared.ReassignAction
				if draftAutomationStepsItem.TaskAction.ReassignAction != nil {
					assigneeUserIDCel1 := new(string)
					if !draftAutomationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.IsNull() {
						*assigneeUserIDCel1 = draftAutomationStepsItem.TaskAction.ReassignAction.AssigneeUserIDCel.ValueString()
					} else {
						assigneeUserIDCel1 = nil
					}
					var userRef10 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.ReassignAction.UserRef != nil {
						id32 := new(string)
						if !draftAutomationStepsItem.TaskAction.ReassignAction.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.UserRef.ID.IsNull() {
							*id32 = draftAutomationStepsItem.TaskAction.ReassignAction.UserRef.ID.ValueString()
						} else {
							id32 = nil
						}
						userRef10 = &shared.UserRef{
							ID: id32,
						}
					}
					subjectUserIDCel1 := new(string)
					if !draftAutomationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.IsNull() {
						*subjectUserIDCel1 = draftAutomationStepsItem.TaskAction.ReassignAction.SubjectUserIDCel.ValueString()
					} else {
						subjectUserIDCel1 = nil
					}
					var userRef14 *shared.UserRef
					if draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1 != nil {
						id33 := new(string)
						if !draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1.ID.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1.ID.IsNull() {
							*id33 = draftAutomationStepsItem.TaskAction.ReassignAction.UserRef1.ID.ValueString()
						} else {
							id33 = nil
						}
						userRef14 = &shared.UserRef{
							ID: id33,
						}
					}
					useSubjectUser15 := new(bool)
					if !draftAutomationStepsItem.TaskAction.ReassignAction.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.TaskAction.ReassignAction.UseSubjectUser.IsNull() {
						*useSubjectUser15 = draftAutomationStepsItem.TaskAction.ReassignAction.UseSubjectUser.ValueBool()
					} else {
						useSubjectUser15 = nil
					}
					reassignAction1 = &shared.ReassignAction{
						AssigneeUserIDCel: assigneeUserIDCel1,
						UserRef:           userRef10,
						SubjectUserIDCel:  subjectUserIDCel1,
						UserRef1:          userRef14,
						UseSubjectUser:    useSubjectUser15,
					}
				}
				var taskTypes1 []shared.TaskTypes
				if draftAutomationStepsItem.TaskAction.TaskTypes != nil {
					taskTypes1 = make([]shared.TaskTypes, 0, len(draftAutomationStepsItem.TaskAction.TaskTypes))
					for _, taskTypesItem1 := range draftAutomationStepsItem.TaskAction.TaskTypes {
						taskTypes1 = append(taskTypes1, shared.TaskTypes(taskTypesItem1.ValueString()))
					}
				}
				taskUserRelation1 := new(shared.TaskUserRelation)
				if !draftAutomationStepsItem.TaskAction.TaskUserRelation.IsUnknown() && !draftAutomationStepsItem.TaskAction.TaskUserRelation.IsNull() {
					*taskUserRelation1 = shared.TaskUserRelation(draftAutomationStepsItem.TaskAction.TaskUserRelation.ValueString())
				} else {
					taskUserRelation1 = nil
				}
				taskAction1 = &shared.TaskAction{
					CloseAction:      closeAction1,
					ReassignAction:   reassignAction1,
					TaskTypes:        taskTypes1,
					TaskUserRelation: taskUserRelation1,
				}
			}
			var unenrollFromAllAccessProfiles1 *shared.UnenrollFromAllAccessProfiles
			if draftAutomationStepsItem.UnenrollFromAllAccessProfiles != nil {
				var catalogIds1 []string
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds != nil {
					catalogIds1 = make([]string, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds))
					for _, catalogIdsItem1 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIds {
						catalogIds1 = append(catalogIds1, catalogIdsItem1.ValueString())
					}
				}
				catalogIdsCel1 := new(string)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.IsNull() {
					*catalogIdsCel1 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.CatalogIdsCel.ValueString()
				} else {
					catalogIdsCel1 = nil
				}
				useSubjectUser16 := new(bool)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.IsNull() {
					*useSubjectUser16 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser16 = nil
				}
				userIdsCel5 := new(string)
				if !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsUnknown() && !draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.IsNull() {
					*userIdsCel5 = draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserIdsCel.ValueString()
				} else {
					userIdsCel5 = nil
				}
				var userRefs5 []shared.UserRef
				if draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs != nil {
					userRefs5 = make([]shared.UserRef, 0, len(draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs))
					for _, userRefsItem5 := range draftAutomationStepsItem.UnenrollFromAllAccessProfiles.UserRefs {
						id34 := new(string)
						if !userRefsItem5.ID.IsUnknown() && !userRefsItem5.ID.IsNull() {
							*id34 = userRefsItem5.ID.ValueString()
						} else {
							id34 = nil
						}
						userRefs5 = append(userRefs5, shared.UserRef{
							ID: id34,
						})
					}
				}
				unenrollFromAllAccessProfiles1 = &shared.UnenrollFromAllAccessProfiles{
					CatalogIds:     catalogIds1,
					CatalogIdsCel:  catalogIdsCel1,
					UseSubjectUser: useSubjectUser16,
					UserIdsCel:     userIdsCel5,
					UserRefs:       userRefs5,
				}
			}
			var updateUser1 *shared.UpdateUser
			if draftAutomationStepsItem.UpdateUser != nil {
				useSubjectUser17 := new(bool)
				if !draftAutomationStepsItem.UpdateUser.UseSubjectUser.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UseSubjectUser.IsNull() {
					*useSubjectUser17 = draftAutomationStepsItem.UpdateUser.UseSubjectUser.ValueBool()
				} else {
					useSubjectUser17 = nil
				}
				userIDCel11 := new(string)
				if !draftAutomationStepsItem.UpdateUser.UserIDCel.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserIDCel.IsNull() {
					*userIDCel11 = draftAutomationStepsItem.UpdateUser.UserIDCel.ValueString()
				} else {
					userIDCel11 = nil
				}
				var userRef15 *shared.UserRef
				if draftAutomationStepsItem.UpdateUser.UserRef != nil {
					id35 := new(string)
					if !draftAutomationStepsItem.UpdateUser.UserRef.ID.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserRef.ID.IsNull() {
						*id35 = draftAutomationStepsItem.UpdateUser.UserRef.ID.ValueString()
					} else {
						id35 = nil
					}
					userRef15 = &shared.UserRef{
						ID: id35,
					}
				}
				userStatusCel1 := new(string)
				if !draftAutomationStepsItem.UpdateUser.UserStatusCel.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserStatusCel.IsNull() {
					*userStatusCel1 = draftAutomationStepsItem.UpdateUser.UserStatusCel.ValueString()
				} else {
					userStatusCel1 = nil
				}
				userStatusEnum1 := new(shared.UserStatusEnum)
				if !draftAutomationStepsItem.UpdateUser.UserStatusEnum.IsUnknown() && !draftAutomationStepsItem.UpdateUser.UserStatusEnum.IsNull() {
					*userStatusEnum1 = shared.UserStatusEnum(draftAutomationStepsItem.UpdateUser.UserStatusEnum.ValueString())
				} else {
					userStatusEnum1 = nil
				}
				updateUser1 = &shared.UpdateUser{
					UseSubjectUser: useSubjectUser17,
					UserIDCel:      userIDCel11,
					UserRef:        userRef15,
					UserStatusCel:  userStatusCel1,
					UserStatusEnum: userStatusEnum1,
				}
			}
			var waitForDuration1 *shared.WaitForDuration
			if draftAutomationStepsItem.WaitForDuration != nil {
				duration1 := new(string)
				if !draftAutomationStepsItem.WaitForDuration.Duration.IsUnknown() && !draftAutomationStepsItem.WaitForDuration.Duration.IsNull() {
					*duration1 = draftAutomationStepsItem.WaitForDuration.Duration.ValueString()
				} else {
					duration1 = nil
				}
				waitForDuration1 = &shared.WaitForDuration{
					Duration: duration1,
				}
			}
			var webhook1 *shared.Webhook
			if draftAutomationStepsItem.Webhook != nil {
				var payload1 *shared.Payload
				if draftAutomationStepsItem.Webhook.Payload != nil {
					payload1 = &shared.Payload{}
				}
				webhookId1 := new(string)
				if !draftAutomationStepsItem.Webhook.WebhookID.IsUnknown() && !draftAutomationStepsItem.Webhook.WebhookID.IsNull() {
					*webhookId1 = draftAutomationStepsItem.Webhook.WebhookID.ValueString()
				} else {
					webhookId1 = nil
				}
				webhookIDCel1 := new(string)
				if !draftAutomationStepsItem.Webhook.WebhookIDCel.IsUnknown() && !draftAutomationStepsItem.Webhook.WebhookIDCel.IsNull() {
					*webhookIDCel1 = draftAutomationStepsItem.Webhook.WebhookIDCel.ValueString()
				} else {
					webhookIDCel1 = nil
				}
				webhook1 = &shared.Webhook{
					Payload:      payload1,
					WebhookID:    webhookId1,
					WebhookIDCel: webhookIDCel1,
				}
			}
			draftAutomationSteps = append(draftAutomationSteps, shared.AutomationStep{
				AccountLifecycleAction:        accountLifecycleAction1,
				CallFunction:                  callFunction1,
				ConnectorAction:               connectorAction1,
				ConnectorCreateAccount:        connectorCreateAccount1,
				CreateAccessReview:            createAccessReview1,
				CreateRevokeTasks:             createRevokeTasks1,
				GrantEntitlements:             grantEntitlements1,
				RemoveFromDelegation:          removeFromDelegation1,
				RunAutomation:                 runAutomation1,
				SendEmail:                     sendEmail1,
				SendSlackMessage:              sendSlackMessage1,
				SkipIfTrueCel:                 skipIfTrueCel1,
				StepDisplayName:               stepDisplayName1,
				StepName:                      stepName1,
				TaskAction:                    taskAction1,
				UnenrollFromAllAccessProfiles: unenrollFromAllAccessProfiles1,
				UpdateUser:                    updateUser1,
				WaitForDuration:               waitForDuration1,
				Webhook:                       webhook1,
			})
		}
	}
	var draftTriggers []shared.AutomationTrigger
	if r.DraftTriggers != nil {
		draftTriggers = make([]shared.AutomationTrigger, 0, len(r.DraftTriggers))
		for _, draftTriggersItem := range r.DraftTriggers {
			var appUserCreatedTrigger *shared.AppUserCreatedTrigger
			if draftTriggersItem.AppUserCreatedTrigger != nil {
				appId13 := new(string)
				if !draftTriggersItem.AppUserCreatedTrigger.AppID.IsUnknown() && !draftTriggersItem.AppUserCreatedTrigger.AppID.IsNull() {
					*appId13 = draftTriggersItem.AppUserCreatedTrigger.AppID.ValueString()
				} else {
					appId13 = nil
				}
				appIDCel := new(string)
				if !draftTriggersItem.AppUserCreatedTrigger.AppIDCel.IsUnknown() && !draftTriggersItem.AppUserCreatedTrigger.AppIDCel.IsNull() {
					*appIDCel = draftTriggersItem.AppUserCreatedTrigger.AppIDCel.ValueString()
				} else {
					appIDCel = nil
				}
				condition := new(string)
				if !draftTriggersItem.AppUserCreatedTrigger.Condition.IsUnknown() && !draftTriggersItem.AppUserCreatedTrigger.Condition.IsNull() {
					*condition = draftTriggersItem.AppUserCreatedTrigger.Condition.ValueString()
				} else {
					condition = nil
				}
				appUserCreatedTrigger = &shared.AppUserCreatedTrigger{
					AppID:     appId13,
					AppIDCel:  appIDCel,
					Condition: condition,
				}
			}
			var appUserUpdatedTrigger *shared.AppUserUpdatedTrigger
			if draftTriggersItem.AppUserUpdatedTrigger != nil {
				appId14 := new(string)
				if !draftTriggersItem.AppUserUpdatedTrigger.AppID.IsUnknown() && !draftTriggersItem.AppUserUpdatedTrigger.AppID.IsNull() {
					*appId14 = draftTriggersItem.AppUserUpdatedTrigger.AppID.ValueString()
				} else {
					appId14 = nil
				}
				appIDCel1 := new(string)
				if !draftTriggersItem.AppUserUpdatedTrigger.AppIDCel.IsUnknown() && !draftTriggersItem.AppUserUpdatedTrigger.AppIDCel.IsNull() {
					*appIDCel1 = draftTriggersItem.AppUserUpdatedTrigger.AppIDCel.ValueString()
				} else {
					appIDCel1 = nil
				}
				condition1 := new(string)
				if !draftTriggersItem.AppUserUpdatedTrigger.Condition.IsUnknown() && !draftTriggersItem.AppUserUpdatedTrigger.Condition.IsNull() {
					*condition1 = draftTriggersItem.AppUserUpdatedTrigger.Condition.ValueString()
				} else {
					condition1 = nil
				}
				appUserUpdatedTrigger = &shared.AppUserUpdatedTrigger{
					AppID:     appId14,
					AppIDCel:  appIDCel1,
					Condition: condition1,
				}
			}
			var formTrigger interface{}
			if !draftTriggersItem.FormTrigger.IsUnknown() && !draftTriggersItem.FormTrigger.IsNull() {
				_ = json.Unmarshal([]byte(draftTriggersItem.FormTrigger.ValueString()), &formTrigger)
			}
			var grantDeletedTrigger *shared.GrantDeletedTrigger
			if draftTriggersItem.GrantDeletedTrigger != nil {
				var grantTriggerFilter *shared.GrantTriggerFilter
				if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter != nil {
					var accountFilter *shared.AccountFilter
					if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter != nil {
						accountType := new(shared.AccountType)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType = shared.AccountType(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType = nil
						}
						accountFilter = &shared.AccountFilter{
							AccountType: accountType,
						}
					}
					var entitlementFilter *shared.EntitlementFilter
					if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs4 []shared.AppEntitlementRef
						if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs4 = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem4 := range draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId15 := new(string)
								if !appEntitlementRefsItem4.AppID.IsUnknown() && !appEntitlementRefsItem4.AppID.IsNull() {
									*appId15 = appEntitlementRefsItem4.AppID.ValueString()
								} else {
									appId15 = nil
								}
								id36 := new(string)
								if !appEntitlementRefsItem4.ID.IsUnknown() && !appEntitlementRefsItem4.ID.IsNull() {
									*id36 = appEntitlementRefsItem4.ID.ValueString()
								} else {
									id36 = nil
								}
								appEntitlementRefs4 = append(appEntitlementRefs4, shared.AppEntitlementRef{
									AppID: appId15,
									ID:    id36,
								})
							}
						}
						appEntitlementRefsCel4 := new(string)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel4 = draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel4 = nil
						}
						appId16 := new(string)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId16 = draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId16 = nil
						}
						entitlementFilter = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs4,
							AppEntitlementRefsCel: appEntitlementRefsCel4,
							AppID:                 appId16,
						}
					}
					var grantFilter *shared.GrantFilter
					if draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType := new(shared.GrantFilterType)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType = shared.GrantFilterType(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType = nil
						}
						grantJustificationType := new(shared.GrantJustificationType)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType = shared.GrantJustificationType(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType = nil
						}
						grantSourceFilter := new(shared.GrantSourceFilter)
						if !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter = shared.GrantSourceFilter(draftTriggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter = nil
						}
						grantFilter = &shared.GrantFilter{
							GrantFilterType:        grantFilterType,
							GrantJustificationType: grantJustificationType,
							GrantSourceFilter:      grantSourceFilter,
						}
					}
					grantTriggerFilter = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter,
						EntitlementFilter: entitlementFilter,
						GrantFilter:       grantFilter,
					}
				}
				grantDeletedTrigger = &shared.GrantDeletedTrigger{
					GrantTriggerFilter: grantTriggerFilter,
				}
			}
			var grantFoundTrigger *shared.GrantFoundTrigger
			if draftTriggersItem.GrantFoundTrigger != nil {
				var grantTriggerFilter1 *shared.GrantTriggerFilter
				if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter != nil {
					var accountFilter1 *shared.AccountFilter
					if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter != nil {
						accountType1 := new(shared.AccountType)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType1 = shared.AccountType(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType1 = nil
						}
						accountFilter1 = &shared.AccountFilter{
							AccountType: accountType1,
						}
					}
					var entitlementFilter1 *shared.EntitlementFilter
					if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs5 []shared.AppEntitlementRef
						if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs5 = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem5 := range draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId17 := new(string)
								if !appEntitlementRefsItem5.AppID.IsUnknown() && !appEntitlementRefsItem5.AppID.IsNull() {
									*appId17 = appEntitlementRefsItem5.AppID.ValueString()
								} else {
									appId17 = nil
								}
								id37 := new(string)
								if !appEntitlementRefsItem5.ID.IsUnknown() && !appEntitlementRefsItem5.ID.IsNull() {
									*id37 = appEntitlementRefsItem5.ID.ValueString()
								} else {
									id37 = nil
								}
								appEntitlementRefs5 = append(appEntitlementRefs5, shared.AppEntitlementRef{
									AppID: appId17,
									ID:    id37,
								})
							}
						}
						appEntitlementRefsCel5 := new(string)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel5 = draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel5 = nil
						}
						appId18 := new(string)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId18 = draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId18 = nil
						}
						entitlementFilter1 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs5,
							AppEntitlementRefsCel: appEntitlementRefsCel5,
							AppID:                 appId18,
						}
					}
					var grantFilter1 *shared.GrantFilter
					if draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType1 := new(shared.GrantFilterType)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType1 = shared.GrantFilterType(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType1 = nil
						}
						grantJustificationType1 := new(shared.GrantJustificationType)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType1 = shared.GrantJustificationType(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType1 = nil
						}
						grantSourceFilter1 := new(shared.GrantSourceFilter)
						if !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter1 = shared.GrantSourceFilter(draftTriggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter1 = nil
						}
						grantFilter1 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType1,
							GrantJustificationType: grantJustificationType1,
							GrantSourceFilter:      grantSourceFilter1,
						}
					}
					grantTriggerFilter1 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter1,
						EntitlementFilter: entitlementFilter1,
						GrantFilter:       grantFilter1,
					}
				}
				grantFoundTrigger = &shared.GrantFoundTrigger{
					GrantTriggerFilter: grantTriggerFilter1,
				}
			}
			var manualAutomationTrigger *shared.ManualAutomationTrigger
			if draftTriggersItem.ManualAutomationTrigger != nil {
				manualAutomationTrigger = &shared.ManualAutomationTrigger{}
			}
			var scheduleTrigger *shared.ScheduleTrigger
			if draftTriggersItem.ScheduleTrigger != nil {
				advanced := new(bool)
				if !draftTriggersItem.ScheduleTrigger.Advanced.IsUnknown() && !draftTriggersItem.ScheduleTrigger.Advanced.IsNull() {
					*advanced = draftTriggersItem.ScheduleTrigger.Advanced.ValueBool()
				} else {
					advanced = nil
				}
				condition2 := new(string)
				if !draftTriggersItem.ScheduleTrigger.Condition.IsUnknown() && !draftTriggersItem.ScheduleTrigger.Condition.IsNull() {
					*condition2 = draftTriggersItem.ScheduleTrigger.Condition.ValueString()
				} else {
					condition2 = nil
				}
				cronSpec := new(string)
				if !draftTriggersItem.ScheduleTrigger.CronSpec.IsUnknown() && !draftTriggersItem.ScheduleTrigger.CronSpec.IsNull() {
					*cronSpec = draftTriggersItem.ScheduleTrigger.CronSpec.ValueString()
				} else {
					cronSpec = nil
				}
				skipIfTrueCel2 := new(string)
				if !draftTriggersItem.ScheduleTrigger.SkipIfTrueCel.IsUnknown() && !draftTriggersItem.ScheduleTrigger.SkipIfTrueCel.IsNull() {
					*skipIfTrueCel2 = draftTriggersItem.ScheduleTrigger.SkipIfTrueCel.ValueString()
				} else {
					skipIfTrueCel2 = nil
				}
				start := new(time.Time)
				if !draftTriggersItem.ScheduleTrigger.Start.IsUnknown() && !draftTriggersItem.ScheduleTrigger.Start.IsNull() {
					*start, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.ScheduleTrigger.Start.ValueString())
				} else {
					start = nil
				}
				timezone := new(string)
				if !draftTriggersItem.ScheduleTrigger.Timezone.IsUnknown() && !draftTriggersItem.ScheduleTrigger.Timezone.IsNull() {
					*timezone = draftTriggersItem.ScheduleTrigger.Timezone.ValueString()
				} else {
					timezone = nil
				}
				scheduleTrigger = &shared.ScheduleTrigger{
					Advanced:      advanced,
					Condition:     condition2,
					CronSpec:      cronSpec,
					SkipIfTrueCel: skipIfTrueCel2,
					Start:         start,
					Timezone:      timezone,
				}
			}
			var scheduleTriggerAppUser *shared.ScheduleTriggerAppUser
			if draftTriggersItem.ScheduleTriggerAppUser != nil {
				appId19 := new(string)
				if !draftTriggersItem.ScheduleTriggerAppUser.AppID.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.AppID.IsNull() {
					*appId19 = draftTriggersItem.ScheduleTriggerAppUser.AppID.ValueString()
				} else {
					appId19 = nil
				}
				condition3 := new(string)
				if !draftTriggersItem.ScheduleTriggerAppUser.Condition.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.Condition.IsNull() {
					*condition3 = draftTriggersItem.ScheduleTriggerAppUser.Condition.ValueString()
				} else {
					condition3 = nil
				}
				cronSpec1 := new(string)
				if !draftTriggersItem.ScheduleTriggerAppUser.CronSpec.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.CronSpec.IsNull() {
					*cronSpec1 = draftTriggersItem.ScheduleTriggerAppUser.CronSpec.ValueString()
				} else {
					cronSpec1 = nil
				}
				start1 := new(time.Time)
				if !draftTriggersItem.ScheduleTriggerAppUser.Start.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.Start.IsNull() {
					*start1, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.ScheduleTriggerAppUser.Start.ValueString())
				} else {
					start1 = nil
				}
				timezone1 := new(string)
				if !draftTriggersItem.ScheduleTriggerAppUser.Timezone.IsUnknown() && !draftTriggersItem.ScheduleTriggerAppUser.Timezone.IsNull() {
					*timezone1 = draftTriggersItem.ScheduleTriggerAppUser.Timezone.ValueString()
				} else {
					timezone1 = nil
				}
				scheduleTriggerAppUser = &shared.ScheduleTriggerAppUser{
					AppID:     appId19,
					Condition: condition3,
					CronSpec:  cronSpec1,
					Start:     start1,
					Timezone:  timezone1,
				}
			}
			var usageBasedRevocationTrigger *shared.UsageBasedRevocationTrigger
			if draftTriggersItem.UsageBasedRevocationTrigger != nil {
				appId20 := new(string)
				if !draftTriggersItem.UsageBasedRevocationTrigger.AppID.IsUnknown() && !draftTriggersItem.UsageBasedRevocationTrigger.AppID.IsNull() {
					*appId20 = draftTriggersItem.UsageBasedRevocationTrigger.AppID.ValueString()
				} else {
					appId20 = nil
				}
				enabledAt := new(time.Time)
				if !draftTriggersItem.UsageBasedRevocationTrigger.EnabledAt.IsUnknown() && !draftTriggersItem.UsageBasedRevocationTrigger.EnabledAt.IsNull() {
					*enabledAt, _ = time.Parse(time.RFC3339Nano, draftTriggersItem.UsageBasedRevocationTrigger.EnabledAt.ValueString())
				} else {
					enabledAt = nil
				}
				var excludedGroupRefs []shared.AppEntitlementRef
				if draftTriggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs != nil {
					excludedGroupRefs = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs))
					for _, excludedGroupRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs {
						appId21 := new(string)
						if !excludedGroupRefsItem.AppID.IsUnknown() && !excludedGroupRefsItem.AppID.IsNull() {
							*appId21 = excludedGroupRefsItem.AppID.ValueString()
						} else {
							appId21 = nil
						}
						id38 := new(string)
						if !excludedGroupRefsItem.ID.IsUnknown() && !excludedGroupRefsItem.ID.IsNull() {
							*id38 = excludedGroupRefsItem.ID.ValueString()
						} else {
							id38 = nil
						}
						excludedGroupRefs = append(excludedGroupRefs, shared.AppEntitlementRef{
							AppID: appId21,
							ID:    id38,
						})
					}
				}
				var excludedUserRefs []shared.UserRef
				if draftTriggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs != nil {
					excludedUserRefs = make([]shared.UserRef, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs))
					for _, excludedUserRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs {
						id39 := new(string)
						if !excludedUserRefsItem.ID.IsUnknown() && !excludedUserRefsItem.ID.IsNull() {
							*id39 = excludedUserRefsItem.ID.ValueString()
						} else {
							id39 = nil
						}
						excludedUserRefs = append(excludedUserRefs, shared.UserRef{
							ID: id39,
						})
					}
				}
				includeUsersWithNoActivity := new(bool)
				if !draftTriggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.IsUnknown() && !draftTriggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.IsNull() {
					*includeUsersWithNoActivity = draftTriggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.ValueBool()
				} else {
					includeUsersWithNoActivity = nil
				}
				var runDelayed *shared.RunDelayed
				if draftTriggersItem.UsageBasedRevocationTrigger.RunDelayed != nil {
					var coldStartDelayDays int64
					coldStartDelayDays = draftTriggersItem.UsageBasedRevocationTrigger.RunDelayed.ColdStartDelayDays.ValueInt64()

					runDelayed = &shared.RunDelayed{
						ColdStartDelayDays: coldStartDelayDays,
					}
				}
				var runImmediately *shared.RunImmediately
				if draftTriggersItem.UsageBasedRevocationTrigger.RunImmediately != nil {
					runImmediately = &shared.RunImmediately{}
				}
				var targetedAppUserTypes []shared.TargetedAppUserTypes
				if draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes != nil {
					targetedAppUserTypes = make([]shared.TargetedAppUserTypes, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes))
					for _, targetedAppUserTypesItem := range draftTriggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes {
						targetedAppUserTypes = append(targetedAppUserTypes, shared.TargetedAppUserTypes(targetedAppUserTypesItem.ValueString()))
					}
				}
				var targetedEntitlementRefs []shared.AppEntitlementRef
				if draftTriggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs != nil {
					targetedEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(draftTriggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs))
					for _, targetedEntitlementRefsItem := range draftTriggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs {
						appId22 := new(string)
						if !targetedEntitlementRefsItem.AppID.IsUnknown() && !targetedEntitlementRefsItem.AppID.IsNull() {
							*appId22 = targetedEntitlementRefsItem.AppID.ValueString()
						} else {
							appId22 = nil
						}
						id40 := new(string)
						if !targetedEntitlementRefsItem.ID.IsUnknown() && !targetedEntitlementRefsItem.ID.IsNull() {
							*id40 = targetedEntitlementRefsItem.ID.ValueString()
						} else {
							id40 = nil
						}
						targetedEntitlementRefs = append(targetedEntitlementRefs, shared.AppEntitlementRef{
							AppID: appId22,
							ID:    id40,
						})
					}
				}
				unusedForDays := new(int64)
				if !draftTriggersItem.UsageBasedRevocationTrigger.UnusedForDays.IsUnknown() && !draftTriggersItem.UsageBasedRevocationTrigger.UnusedForDays.IsNull() {
					*unusedForDays = draftTriggersItem.UsageBasedRevocationTrigger.UnusedForDays.ValueInt64()
				} else {
					unusedForDays = nil
				}
				usageBasedRevocationTrigger = &shared.UsageBasedRevocationTrigger{
					AppID:                      appId20,
					EnabledAt:                  enabledAt,
					ExcludedGroupRefs:          excludedGroupRefs,
					ExcludedUserRefs:           excludedUserRefs,
					IncludeUsersWithNoActivity: includeUsersWithNoActivity,
					RunDelayed:                 runDelayed,
					RunImmediately:             runImmediately,
					TargetedAppUserTypes:       targetedAppUserTypes,
					TargetedEntitlementRefs:    targetedEntitlementRefs,
					UnusedForDays:              unusedForDays,
				}
			}
			var userCreatedTrigger *shared.UserCreatedTrigger
			if draftTriggersItem.UserCreatedTrigger != nil {
				condition4 := new(string)
				if !draftTriggersItem.UserCreatedTrigger.Condition.IsUnknown() && !draftTriggersItem.UserCreatedTrigger.Condition.IsNull() {
					*condition4 = draftTriggersItem.UserCreatedTrigger.Condition.ValueString()
				} else {
					condition4 = nil
				}
				userCreatedTrigger = &shared.UserCreatedTrigger{
					Condition: condition4,
				}
			}
			var userProfileChangeTrigger *shared.UserProfileChangeTrigger
			if draftTriggersItem.UserProfileChangeTrigger != nil {
				condition5 := new(string)
				if !draftTriggersItem.UserProfileChangeTrigger.Condition.IsUnknown() && !draftTriggersItem.UserProfileChangeTrigger.Condition.IsNull() {
					*condition5 = draftTriggersItem.UserProfileChangeTrigger.Condition.ValueString()
				} else {
					condition5 = nil
				}
				userProfileChangeTrigger = &shared.UserProfileChangeTrigger{
					Condition: condition5,
				}
			}
			var webhookAutomationTrigger *shared.WebhookAutomationTrigger
			if draftTriggersItem.WebhookAutomationTrigger != nil {
				var webhookListenerAuthHMAC *shared.WebhookListenerAuthHMAC
				if draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthHMAC != nil {
					webhookListenerAuthHMAC = &shared.WebhookListenerAuthHMAC{}
				}
				var webhookListenerAuthJWT *shared.WebhookListenerAuthJWT
				if draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT != nil {
					jwksURL := new(string)
					if !draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.IsUnknown() && !draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.IsNull() {
						*jwksURL = draftTriggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.ValueString()
					} else {
						jwksURL = nil
					}
					webhookListenerAuthJWT = &shared.WebhookListenerAuthJWT{
						JwksURL: jwksURL,
					}
				}
				listenerID := new(string)
				if !draftTriggersItem.WebhookAutomationTrigger.ListenerID.IsUnknown() && !draftTriggersItem.WebhookAutomationTrigger.ListenerID.IsNull() {
					*listenerID = draftTriggersItem.WebhookAutomationTrigger.ListenerID.ValueString()
				} else {
					listenerID = nil
				}
				webhookAutomationTrigger = &shared.WebhookAutomationTrigger{
					WebhookListenerAuthHMAC: webhookListenerAuthHMAC,
					WebhookListenerAuthJWT:  webhookListenerAuthJWT,
					ListenerID:              listenerID,
				}
			}
			draftTriggers = append(draftTriggers, shared.AutomationTrigger{
				AppUserCreatedTrigger:       appUserCreatedTrigger,
				AppUserUpdatedTrigger:       appUserUpdatedTrigger,
				FormTrigger:                 formTrigger,
				GrantDeletedTrigger:         grantDeletedTrigger,
				GrantFoundTrigger:           grantFoundTrigger,
				ManualAutomationTrigger:     manualAutomationTrigger,
				ScheduleTrigger:             scheduleTrigger,
				ScheduleTriggerAppUser:      scheduleTriggerAppUser,
				UsageBasedRevocationTrigger: usageBasedRevocationTrigger,
				UserCreatedTrigger:          userCreatedTrigger,
				UserProfileChangeTrigger:    userProfileChangeTrigger,
				WebhookAutomationTrigger:    webhookAutomationTrigger,
			})
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	isDraft := new(bool)
	if !r.IsDraft.IsUnknown() && !r.IsDraft.IsNull() {
		*isDraft = r.IsDraft.ValueBool()
	} else {
		isDraft = nil
	}
	var triggers []shared.AutomationTrigger
	if r.Triggers != nil {
		triggers = make([]shared.AutomationTrigger, 0, len(r.Triggers))
		for _, triggersItem := range r.Triggers {
			var appUserCreatedTrigger1 *shared.AppUserCreatedTrigger
			if triggersItem.AppUserCreatedTrigger != nil {
				appId23 := new(string)
				if !triggersItem.AppUserCreatedTrigger.AppID.IsUnknown() && !triggersItem.AppUserCreatedTrigger.AppID.IsNull() {
					*appId23 = triggersItem.AppUserCreatedTrigger.AppID.ValueString()
				} else {
					appId23 = nil
				}
				appIDCel2 := new(string)
				if !triggersItem.AppUserCreatedTrigger.AppIDCel.IsUnknown() && !triggersItem.AppUserCreatedTrigger.AppIDCel.IsNull() {
					*appIDCel2 = triggersItem.AppUserCreatedTrigger.AppIDCel.ValueString()
				} else {
					appIDCel2 = nil
				}
				condition6 := new(string)
				if !triggersItem.AppUserCreatedTrigger.Condition.IsUnknown() && !triggersItem.AppUserCreatedTrigger.Condition.IsNull() {
					*condition6 = triggersItem.AppUserCreatedTrigger.Condition.ValueString()
				} else {
					condition6 = nil
				}
				appUserCreatedTrigger1 = &shared.AppUserCreatedTrigger{
					AppID:     appId23,
					AppIDCel:  appIDCel2,
					Condition: condition6,
				}
			}
			var appUserUpdatedTrigger1 *shared.AppUserUpdatedTrigger
			if triggersItem.AppUserUpdatedTrigger != nil {
				appId24 := new(string)
				if !triggersItem.AppUserUpdatedTrigger.AppID.IsUnknown() && !triggersItem.AppUserUpdatedTrigger.AppID.IsNull() {
					*appId24 = triggersItem.AppUserUpdatedTrigger.AppID.ValueString()
				} else {
					appId24 = nil
				}
				appIDCel3 := new(string)
				if !triggersItem.AppUserUpdatedTrigger.AppIDCel.IsUnknown() && !triggersItem.AppUserUpdatedTrigger.AppIDCel.IsNull() {
					*appIDCel3 = triggersItem.AppUserUpdatedTrigger.AppIDCel.ValueString()
				} else {
					appIDCel3 = nil
				}
				condition7 := new(string)
				if !triggersItem.AppUserUpdatedTrigger.Condition.IsUnknown() && !triggersItem.AppUserUpdatedTrigger.Condition.IsNull() {
					*condition7 = triggersItem.AppUserUpdatedTrigger.Condition.ValueString()
				} else {
					condition7 = nil
				}
				appUserUpdatedTrigger1 = &shared.AppUserUpdatedTrigger{
					AppID:     appId24,
					AppIDCel:  appIDCel3,
					Condition: condition7,
				}
			}
			var formTrigger1 interface{}
			if !triggersItem.FormTrigger.IsUnknown() && !triggersItem.FormTrigger.IsNull() {
				_ = json.Unmarshal([]byte(triggersItem.FormTrigger.ValueString()), &formTrigger1)
			}
			var grantDeletedTrigger1 *shared.GrantDeletedTrigger
			if triggersItem.GrantDeletedTrigger != nil {
				var grantTriggerFilter2 *shared.GrantTriggerFilter
				if triggersItem.GrantDeletedTrigger.GrantTriggerFilter != nil {
					var accountFilter2 *shared.AccountFilter
					if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter != nil {
						accountType2 := new(shared.AccountType)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType2 = shared.AccountType(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType2 = nil
						}
						accountFilter2 = &shared.AccountFilter{
							AccountType: accountType2,
						}
					}
					var entitlementFilter2 *shared.EntitlementFilter
					if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs6 []shared.AppEntitlementRef
						if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs6 = make([]shared.AppEntitlementRef, 0, len(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem6 := range triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId25 := new(string)
								if !appEntitlementRefsItem6.AppID.IsUnknown() && !appEntitlementRefsItem6.AppID.IsNull() {
									*appId25 = appEntitlementRefsItem6.AppID.ValueString()
								} else {
									appId25 = nil
								}
								id41 := new(string)
								if !appEntitlementRefsItem6.ID.IsUnknown() && !appEntitlementRefsItem6.ID.IsNull() {
									*id41 = appEntitlementRefsItem6.ID.ValueString()
								} else {
									id41 = nil
								}
								appEntitlementRefs6 = append(appEntitlementRefs6, shared.AppEntitlementRef{
									AppID: appId25,
									ID:    id41,
								})
							}
						}
						appEntitlementRefsCel6 := new(string)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel6 = triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel6 = nil
						}
						appId26 := new(string)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId26 = triggersItem.GrantDeletedTrigger.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId26 = nil
						}
						entitlementFilter2 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs6,
							AppEntitlementRefsCel: appEntitlementRefsCel6,
							AppID:                 appId26,
						}
					}
					var grantFilter2 *shared.GrantFilter
					if triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType2 := new(shared.GrantFilterType)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType2 = shared.GrantFilterType(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType2 = nil
						}
						grantJustificationType2 := new(shared.GrantJustificationType)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType2 = shared.GrantJustificationType(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType2 = nil
						}
						grantSourceFilter2 := new(shared.GrantSourceFilter)
						if !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter2 = shared.GrantSourceFilter(triggersItem.GrantDeletedTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter2 = nil
						}
						grantFilter2 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType2,
							GrantJustificationType: grantJustificationType2,
							GrantSourceFilter:      grantSourceFilter2,
						}
					}
					grantTriggerFilter2 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter2,
						EntitlementFilter: entitlementFilter2,
						GrantFilter:       grantFilter2,
					}
				}
				grantDeletedTrigger1 = &shared.GrantDeletedTrigger{
					GrantTriggerFilter: grantTriggerFilter2,
				}
			}
			var grantFoundTrigger1 *shared.GrantFoundTrigger
			if triggersItem.GrantFoundTrigger != nil {
				var grantTriggerFilter3 *shared.GrantTriggerFilter
				if triggersItem.GrantFoundTrigger.GrantTriggerFilter != nil {
					var accountFilter3 *shared.AccountFilter
					if triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter != nil {
						accountType3 := new(shared.AccountType)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.IsNull() {
							*accountType3 = shared.AccountType(triggersItem.GrantFoundTrigger.GrantTriggerFilter.AccountFilter.AccountType.ValueString())
						} else {
							accountType3 = nil
						}
						accountFilter3 = &shared.AccountFilter{
							AccountType: accountType3,
						}
					}
					var entitlementFilter3 *shared.EntitlementFilter
					if triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter != nil {
						var appEntitlementRefs7 []shared.AppEntitlementRef
						if triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs != nil {
							appEntitlementRefs7 = make([]shared.AppEntitlementRef, 0, len(triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs))
							for _, appEntitlementRefsItem7 := range triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefs {
								appId27 := new(string)
								if !appEntitlementRefsItem7.AppID.IsUnknown() && !appEntitlementRefsItem7.AppID.IsNull() {
									*appId27 = appEntitlementRefsItem7.AppID.ValueString()
								} else {
									appId27 = nil
								}
								id42 := new(string)
								if !appEntitlementRefsItem7.ID.IsUnknown() && !appEntitlementRefsItem7.ID.IsNull() {
									*id42 = appEntitlementRefsItem7.ID.ValueString()
								} else {
									id42 = nil
								}
								appEntitlementRefs7 = append(appEntitlementRefs7, shared.AppEntitlementRef{
									AppID: appId27,
									ID:    id42,
								})
							}
						}
						appEntitlementRefsCel7 := new(string)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.IsNull() {
							*appEntitlementRefsCel7 = triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppEntitlementRefsCel.ValueString()
						} else {
							appEntitlementRefsCel7 = nil
						}
						appId28 := new(string)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.IsNull() {
							*appId28 = triggersItem.GrantFoundTrigger.GrantTriggerFilter.EntitlementFilter.AppID.ValueString()
						} else {
							appId28 = nil
						}
						entitlementFilter3 = &shared.EntitlementFilter{
							AppEntitlementRefs:    appEntitlementRefs7,
							AppEntitlementRefsCel: appEntitlementRefsCel7,
							AppID:                 appId28,
						}
					}
					var grantFilter3 *shared.GrantFilter
					if triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter != nil {
						grantFilterType3 := new(shared.GrantFilterType)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.IsNull() {
							*grantFilterType3 = shared.GrantFilterType(triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantFilterType.ValueString())
						} else {
							grantFilterType3 = nil
						}
						grantJustificationType3 := new(shared.GrantJustificationType)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.IsNull() {
							*grantJustificationType3 = shared.GrantJustificationType(triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantJustificationType.ValueString())
						} else {
							grantJustificationType3 = nil
						}
						grantSourceFilter3 := new(shared.GrantSourceFilter)
						if !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsUnknown() && !triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.IsNull() {
							*grantSourceFilter3 = shared.GrantSourceFilter(triggersItem.GrantFoundTrigger.GrantTriggerFilter.GrantFilter.GrantSourceFilter.ValueString())
						} else {
							grantSourceFilter3 = nil
						}
						grantFilter3 = &shared.GrantFilter{
							GrantFilterType:        grantFilterType3,
							GrantJustificationType: grantJustificationType3,
							GrantSourceFilter:      grantSourceFilter3,
						}
					}
					grantTriggerFilter3 = &shared.GrantTriggerFilter{
						AccountFilter:     accountFilter3,
						EntitlementFilter: entitlementFilter3,
						GrantFilter:       grantFilter3,
					}
				}
				grantFoundTrigger1 = &shared.GrantFoundTrigger{
					GrantTriggerFilter: grantTriggerFilter3,
				}
			}
			var manualAutomationTrigger1 *shared.ManualAutomationTrigger
			if triggersItem.ManualAutomationTrigger != nil {
				manualAutomationTrigger1 = &shared.ManualAutomationTrigger{}
			}
			var scheduleTrigger1 *shared.ScheduleTrigger
			if triggersItem.ScheduleTrigger != nil {
				advanced1 := new(bool)
				if !triggersItem.ScheduleTrigger.Advanced.IsUnknown() && !triggersItem.ScheduleTrigger.Advanced.IsNull() {
					*advanced1 = triggersItem.ScheduleTrigger.Advanced.ValueBool()
				} else {
					advanced1 = nil
				}
				condition8 := new(string)
				if !triggersItem.ScheduleTrigger.Condition.IsUnknown() && !triggersItem.ScheduleTrigger.Condition.IsNull() {
					*condition8 = triggersItem.ScheduleTrigger.Condition.ValueString()
				} else {
					condition8 = nil
				}
				cronSpec2 := new(string)
				if !triggersItem.ScheduleTrigger.CronSpec.IsUnknown() && !triggersItem.ScheduleTrigger.CronSpec.IsNull() {
					*cronSpec2 = triggersItem.ScheduleTrigger.CronSpec.ValueString()
				} else {
					cronSpec2 = nil
				}
				skipIfTrueCel3 := new(string)
				if !triggersItem.ScheduleTrigger.SkipIfTrueCel.IsUnknown() && !triggersItem.ScheduleTrigger.SkipIfTrueCel.IsNull() {
					*skipIfTrueCel3 = triggersItem.ScheduleTrigger.SkipIfTrueCel.ValueString()
				} else {
					skipIfTrueCel3 = nil
				}
				start2 := new(time.Time)
				if !triggersItem.ScheduleTrigger.Start.IsUnknown() && !triggersItem.ScheduleTrigger.Start.IsNull() {
					*start2, _ = time.Parse(time.RFC3339Nano, triggersItem.ScheduleTrigger.Start.ValueString())
				} else {
					start2 = nil
				}
				timezone2 := new(string)
				if !triggersItem.ScheduleTrigger.Timezone.IsUnknown() && !triggersItem.ScheduleTrigger.Timezone.IsNull() {
					*timezone2 = triggersItem.ScheduleTrigger.Timezone.ValueString()
				} else {
					timezone2 = nil
				}
				scheduleTrigger1 = &shared.ScheduleTrigger{
					Advanced:      advanced1,
					Condition:     condition8,
					CronSpec:      cronSpec2,
					SkipIfTrueCel: skipIfTrueCel3,
					Start:         start2,
					Timezone:      timezone2,
				}
			}
			var scheduleTriggerAppUser1 *shared.ScheduleTriggerAppUser
			if triggersItem.ScheduleTriggerAppUser != nil {
				appId29 := new(string)
				if !triggersItem.ScheduleTriggerAppUser.AppID.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.AppID.IsNull() {
					*appId29 = triggersItem.ScheduleTriggerAppUser.AppID.ValueString()
				} else {
					appId29 = nil
				}
				condition9 := new(string)
				if !triggersItem.ScheduleTriggerAppUser.Condition.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.Condition.IsNull() {
					*condition9 = triggersItem.ScheduleTriggerAppUser.Condition.ValueString()
				} else {
					condition9 = nil
				}
				cronSpec3 := new(string)
				if !triggersItem.ScheduleTriggerAppUser.CronSpec.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.CronSpec.IsNull() {
					*cronSpec3 = triggersItem.ScheduleTriggerAppUser.CronSpec.ValueString()
				} else {
					cronSpec3 = nil
				}
				start3 := new(time.Time)
				if !triggersItem.ScheduleTriggerAppUser.Start.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.Start.IsNull() {
					*start3, _ = time.Parse(time.RFC3339Nano, triggersItem.ScheduleTriggerAppUser.Start.ValueString())
				} else {
					start3 = nil
				}
				timezone3 := new(string)
				if !triggersItem.ScheduleTriggerAppUser.Timezone.IsUnknown() && !triggersItem.ScheduleTriggerAppUser.Timezone.IsNull() {
					*timezone3 = triggersItem.ScheduleTriggerAppUser.Timezone.ValueString()
				} else {
					timezone3 = nil
				}
				scheduleTriggerAppUser1 = &shared.ScheduleTriggerAppUser{
					AppID:     appId29,
					Condition: condition9,
					CronSpec:  cronSpec3,
					Start:     start3,
					Timezone:  timezone3,
				}
			}
			var usageBasedRevocationTrigger1 *shared.UsageBasedRevocationTrigger
			if triggersItem.UsageBasedRevocationTrigger != nil {
				appId30 := new(string)
				if !triggersItem.UsageBasedRevocationTrigger.AppID.IsUnknown() && !triggersItem.UsageBasedRevocationTrigger.AppID.IsNull() {
					*appId30 = triggersItem.UsageBasedRevocationTrigger.AppID.ValueString()
				} else {
					appId30 = nil
				}
				enabledAt1 := new(time.Time)
				if !triggersItem.UsageBasedRevocationTrigger.EnabledAt.IsUnknown() && !triggersItem.UsageBasedRevocationTrigger.EnabledAt.IsNull() {
					*enabledAt1, _ = time.Parse(time.RFC3339Nano, triggersItem.UsageBasedRevocationTrigger.EnabledAt.ValueString())
				} else {
					enabledAt1 = nil
				}
				var excludedGroupRefs1 []shared.AppEntitlementRef
				if triggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs != nil {
					excludedGroupRefs1 = make([]shared.AppEntitlementRef, 0, len(triggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs))
					for _, excludedGroupRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.ExcludedGroupRefs {
						appId31 := new(string)
						if !excludedGroupRefsItem1.AppID.IsUnknown() && !excludedGroupRefsItem1.AppID.IsNull() {
							*appId31 = excludedGroupRefsItem1.AppID.ValueString()
						} else {
							appId31 = nil
						}
						id43 := new(string)
						if !excludedGroupRefsItem1.ID.IsUnknown() && !excludedGroupRefsItem1.ID.IsNull() {
							*id43 = excludedGroupRefsItem1.ID.ValueString()
						} else {
							id43 = nil
						}
						excludedGroupRefs1 = append(excludedGroupRefs1, shared.AppEntitlementRef{
							AppID: appId31,
							ID:    id43,
						})
					}
				}
				var excludedUserRefs1 []shared.UserRef
				if triggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs != nil {
					excludedUserRefs1 = make([]shared.UserRef, 0, len(triggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs))
					for _, excludedUserRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.ExcludedUserRefs {
						id44 := new(string)
						if !excludedUserRefsItem1.ID.IsUnknown() && !excludedUserRefsItem1.ID.IsNull() {
							*id44 = excludedUserRefsItem1.ID.ValueString()
						} else {
							id44 = nil
						}
						excludedUserRefs1 = append(excludedUserRefs1, shared.UserRef{
							ID: id44,
						})
					}
				}
				includeUsersWithNoActivity1 := new(bool)
				if !triggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.IsUnknown() && !triggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.IsNull() {
					*includeUsersWithNoActivity1 = triggersItem.UsageBasedRevocationTrigger.IncludeUsersWithNoActivity.ValueBool()
				} else {
					includeUsersWithNoActivity1 = nil
				}
				var runDelayed1 *shared.RunDelayed
				if triggersItem.UsageBasedRevocationTrigger.RunDelayed != nil {
					var coldStartDelayDays1 int64
					coldStartDelayDays1 = triggersItem.UsageBasedRevocationTrigger.RunDelayed.ColdStartDelayDays.ValueInt64()

					runDelayed1 = &shared.RunDelayed{
						ColdStartDelayDays: coldStartDelayDays1,
					}
				}
				var runImmediately1 *shared.RunImmediately
				if triggersItem.UsageBasedRevocationTrigger.RunImmediately != nil {
					runImmediately1 = &shared.RunImmediately{}
				}
				var targetedAppUserTypes1 []shared.TargetedAppUserTypes
				if triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes != nil {
					targetedAppUserTypes1 = make([]shared.TargetedAppUserTypes, 0, len(triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes))
					for _, targetedAppUserTypesItem1 := range triggersItem.UsageBasedRevocationTrigger.TargetedAppUserTypes {
						targetedAppUserTypes1 = append(targetedAppUserTypes1, shared.TargetedAppUserTypes(targetedAppUserTypesItem1.ValueString()))
					}
				}
				var targetedEntitlementRefs1 []shared.AppEntitlementRef
				if triggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs != nil {
					targetedEntitlementRefs1 = make([]shared.AppEntitlementRef, 0, len(triggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs))
					for _, targetedEntitlementRefsItem1 := range triggersItem.UsageBasedRevocationTrigger.TargetedEntitlementRefs {
						appId32 := new(string)
						if !targetedEntitlementRefsItem1.AppID.IsUnknown() && !targetedEntitlementRefsItem1.AppID.IsNull() {
							*appId32 = targetedEntitlementRefsItem1.AppID.ValueString()
						} else {
							appId32 = nil
						}
						id45 := new(string)
						if !targetedEntitlementRefsItem1.ID.IsUnknown() && !targetedEntitlementRefsItem1.ID.IsNull() {
							*id45 = targetedEntitlementRefsItem1.ID.ValueString()
						} else {
							id45 = nil
						}
						targetedEntitlementRefs1 = append(targetedEntitlementRefs1, shared.AppEntitlementRef{
							AppID: appId32,
							ID:    id45,
						})
					}
				}
				unusedForDays1 := new(int64)
				if !triggersItem.UsageBasedRevocationTrigger.UnusedForDays.IsUnknown() && !triggersItem.UsageBasedRevocationTrigger.UnusedForDays.IsNull() {
					*unusedForDays1 = triggersItem.UsageBasedRevocationTrigger.UnusedForDays.ValueInt64()
				} else {
					unusedForDays1 = nil
				}
				usageBasedRevocationTrigger1 = &shared.UsageBasedRevocationTrigger{
					AppID:                      appId30,
					EnabledAt:                  enabledAt1,
					ExcludedGroupRefs:          excludedGroupRefs1,
					ExcludedUserRefs:           excludedUserRefs1,
					IncludeUsersWithNoActivity: includeUsersWithNoActivity1,
					RunDelayed:                 runDelayed1,
					RunImmediately:             runImmediately1,
					TargetedAppUserTypes:       targetedAppUserTypes1,
					TargetedEntitlementRefs:    targetedEntitlementRefs1,
					UnusedForDays:              unusedForDays1,
				}
			}
			var userCreatedTrigger1 *shared.UserCreatedTrigger
			if triggersItem.UserCreatedTrigger != nil {
				condition10 := new(string)
				if !triggersItem.UserCreatedTrigger.Condition.IsUnknown() && !triggersItem.UserCreatedTrigger.Condition.IsNull() {
					*condition10 = triggersItem.UserCreatedTrigger.Condition.ValueString()
				} else {
					condition10 = nil
				}
				userCreatedTrigger1 = &shared.UserCreatedTrigger{
					Condition: condition10,
				}
			}
			var userProfileChangeTrigger1 *shared.UserProfileChangeTrigger
			if triggersItem.UserProfileChangeTrigger != nil {
				condition11 := new(string)
				if !triggersItem.UserProfileChangeTrigger.Condition.IsUnknown() && !triggersItem.UserProfileChangeTrigger.Condition.IsNull() {
					*condition11 = triggersItem.UserProfileChangeTrigger.Condition.ValueString()
				} else {
					condition11 = nil
				}
				userProfileChangeTrigger1 = &shared.UserProfileChangeTrigger{
					Condition: condition11,
				}
			}
			var webhookAutomationTrigger1 *shared.WebhookAutomationTrigger
			if triggersItem.WebhookAutomationTrigger != nil {
				var webhookListenerAuthHmac1 *shared.WebhookListenerAuthHMAC
				if triggersItem.WebhookAutomationTrigger.WebhookListenerAuthHMAC != nil {
					webhookListenerAuthHmac1 = &shared.WebhookListenerAuthHMAC{}
				}
				var webhookListenerAuthJwt1 *shared.WebhookListenerAuthJWT
				if triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT != nil {
					jwksUrl1 := new(string)
					if !triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.IsUnknown() && !triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.IsNull() {
						*jwksUrl1 = triggersItem.WebhookAutomationTrigger.WebhookListenerAuthJWT.JwksURL.ValueString()
					} else {
						jwksUrl1 = nil
					}
					webhookListenerAuthJwt1 = &shared.WebhookListenerAuthJWT{
						JwksURL: jwksUrl1,
					}
				}
				listenerId1 := new(string)
				if !triggersItem.WebhookAutomationTrigger.ListenerID.IsUnknown() && !triggersItem.WebhookAutomationTrigger.ListenerID.IsNull() {
					*listenerId1 = triggersItem.WebhookAutomationTrigger.ListenerID.ValueString()
				} else {
					listenerId1 = nil
				}
				webhookAutomationTrigger1 = &shared.WebhookAutomationTrigger{
					WebhookListenerAuthHMAC: webhookListenerAuthHmac1,
					WebhookListenerAuthJWT:  webhookListenerAuthJwt1,
					ListenerID:              listenerId1,
				}
			}
			triggers = append(triggers, shared.AutomationTrigger{
				AppUserCreatedTrigger:       appUserCreatedTrigger1,
				AppUserUpdatedTrigger:       appUserUpdatedTrigger1,
				FormTrigger:                 formTrigger1,
				GrantDeletedTrigger:         grantDeletedTrigger1,
				GrantFoundTrigger:           grantFoundTrigger1,
				ManualAutomationTrigger:     manualAutomationTrigger1,
				ScheduleTrigger:             scheduleTrigger1,
				ScheduleTriggerAppUser:      scheduleTriggerAppUser1,
				UsageBasedRevocationTrigger: usageBasedRevocationTrigger1,
				UserCreatedTrigger:          userCreatedTrigger1,
				UserProfileChangeTrigger:    userProfileChangeTrigger1,
				WebhookAutomationTrigger:    webhookAutomationTrigger1,
			})
		}
	}
	out := shared.CreateAutomationRequest{
		AppID:                appID,
		AutomationSteps:      automationSteps,
		AutomationContext:    automationContext1,
		Description:          description,
		DisplayName:          displayName,
		DraftAutomationSteps: draftAutomationSteps,
		DraftTriggers:        draftTriggers,
		Enabled:              enabled,
		IsDraft:              isDraft,
		Triggers:             triggers,
	}

	return &out, diags
}

func (r *AutomationResourceModel) ToSharedUpdateAutomationRequest(ctx context.Context) (*shared.UpdateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	automation, automationDiags := r.ToSharedAutomationInput(ctx)
	diags.Append(automationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateAutomationRequest{
		Automation: automation,
	}

	return &out, diags
}
