// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *RequestSchemaResourceModel) RefreshFromSharedForm(ctx context.Context, resp *shared.Form) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Description = types.StringPointerValue(resp.Description)
		if resp.FieldRelationships != nil {
			r.FieldRelationships = []tfTypes.FieldRelationship{}

			for _, fieldRelationshipsItem := range resp.FieldRelationships {
				var fieldRelationships tfTypes.FieldRelationship

				if fieldRelationshipsItem.AtLeastOne == nil {
					fieldRelationships.AtLeastOne = nil
				} else {
					fieldRelationships.AtLeastOne = &tfTypes.AtLeastOne{}
				}
				if fieldRelationshipsItem.FieldNames != nil {
					fieldRelationships.FieldNames = make([]types.String, 0, len(fieldRelationshipsItem.FieldNames))
					for _, v := range fieldRelationshipsItem.FieldNames {
						fieldRelationships.FieldNames = append(fieldRelationships.FieldNames, types.StringValue(v))
					}
				}
				if fieldRelationshipsItem.MutuallyExclusive == nil {
					fieldRelationships.MutuallyExclusive = nil
				} else {
					fieldRelationships.MutuallyExclusive = &tfTypes.MutuallyExclusive{}
				}
				if fieldRelationshipsItem.RequiredTogether == nil {
					fieldRelationships.RequiredTogether = nil
				} else {
					fieldRelationships.RequiredTogether = &tfTypes.RequiredTogether{}
				}

				r.FieldRelationships = append(r.FieldRelationships, fieldRelationships)
			}
		}
		if resp.Fields != nil {
			r.Fields = []tfTypes.Field{}

			for _, fieldsItem := range resp.Fields {
				var fields tfTypes.Field

				if fieldsItem.BoolField == nil {
					fields.BoolField = nil
				} else {
					fields.BoolField = &tfTypes.BoolField{}
					if fieldsItem.BoolField.BoolRules == nil {
						fields.BoolField.BoolRules = nil
					} else {
						fields.BoolField.BoolRules = &tfTypes.BoolRules{}
						fields.BoolField.BoolRules.Const = types.BoolPointerValue(fieldsItem.BoolField.BoolRules.Const)
					}
					if fieldsItem.BoolField.CheckboxField == nil {
						fields.BoolField.CheckboxField = nil
					} else {
						fields.BoolField.CheckboxField = &tfTypes.CheckboxField{}
					}
					fields.BoolField.DefaultValue = types.BoolPointerValue(fieldsItem.BoolField.DefaultValue)
				}
				fields.Description = types.StringPointerValue(fieldsItem.Description)
				fields.DisplayName = types.StringPointerValue(fieldsItem.DisplayName)
				if fieldsItem.Int64Field == nil {
					fields.Int64Field = nil
				} else {
					fields.Int64Field = &tfTypes.Int64Field{}
					fields.Int64Field.DefaultValue = types.StringPointerValue(fieldsItem.Int64Field.DefaultValue)
					if fieldsItem.Int64Field.Int64Rules == nil {
						fields.Int64Field.Int64Rules = nil
					} else {
						fields.Int64Field.Int64Rules = &tfTypes.Int64Rules{}
						fields.Int64Field.Int64Rules.Const = types.StringPointerValue(fieldsItem.Int64Field.Int64Rules.Const)
						fields.Int64Field.Int64Rules.Gt = types.StringPointerValue(fieldsItem.Int64Field.Int64Rules.Gt)
						fields.Int64Field.Int64Rules.Gte = types.StringPointerValue(fieldsItem.Int64Field.Int64Rules.Gte)
						fields.Int64Field.Int64Rules.IgnoreEmpty = types.BoolPointerValue(fieldsItem.Int64Field.Int64Rules.IgnoreEmpty)
						if fieldsItem.Int64Field.Int64Rules.In != nil {
							fields.Int64Field.Int64Rules.In = make([]types.String, 0, len(fieldsItem.Int64Field.Int64Rules.In))
							for _, v := range fieldsItem.Int64Field.Int64Rules.In {
								fields.Int64Field.Int64Rules.In = append(fields.Int64Field.Int64Rules.In, types.StringValue(v))
							}
						}
						fields.Int64Field.Int64Rules.Lt = types.StringPointerValue(fieldsItem.Int64Field.Int64Rules.Lt)
						fields.Int64Field.Int64Rules.Lte = types.StringPointerValue(fieldsItem.Int64Field.Int64Rules.Lte)
						if fieldsItem.Int64Field.Int64Rules.NotIn != nil {
							fields.Int64Field.Int64Rules.NotIn = make([]types.String, 0, len(fieldsItem.Int64Field.Int64Rules.NotIn))
							for _, v := range fieldsItem.Int64Field.Int64Rules.NotIn {
								fields.Int64Field.Int64Rules.NotIn = append(fields.Int64Field.Int64Rules.NotIn, types.StringValue(v))
							}
						}
					}
					if fieldsItem.Int64Field.NumberField == nil {
						fields.Int64Field.NumberField = nil
					} else {
						fields.Int64Field.NumberField = &tfTypes.NumberField{}
						fields.Int64Field.NumberField.MaxValue = types.StringPointerValue(fieldsItem.Int64Field.NumberField.MaxValue)
						fields.Int64Field.NumberField.MinValue = types.StringPointerValue(fieldsItem.Int64Field.NumberField.MinValue)
						fields.Int64Field.NumberField.Step = types.StringPointerValue(fieldsItem.Int64Field.NumberField.Step)
					}
					fields.Int64Field.Placeholder = types.StringPointerValue(fieldsItem.Int64Field.Placeholder)
				}
				fields.Name = types.StringPointerValue(fieldsItem.Name)
				if fieldsItem.StringField == nil {
					fields.StringField = nil
				} else {
					fields.StringField = &tfTypes.StringField{}
					fields.StringField.DefaultValue = types.StringPointerValue(fieldsItem.StringField.DefaultValue)
					if fieldsItem.StringField.PasswordField == nil {
						fields.StringField.PasswordField = nil
					} else {
						fields.StringField.PasswordField = &tfTypes.PasswordField{}
					}
					fields.StringField.Placeholder = types.StringPointerValue(fieldsItem.StringField.Placeholder)
					if fieldsItem.StringField.SelectField == nil {
						fields.StringField.SelectField = nil
					} else {
						fields.StringField.SelectField = &tfTypes.SelectField{}
						if fieldsItem.StringField.SelectField.Options != nil {
							fields.StringField.SelectField.Options = []tfTypes.SelectOption{}

							for _, optionsVarItem := range fieldsItem.StringField.SelectField.Options {
								var optionsVar tfTypes.SelectOption

								optionsVar.DisplayName = types.StringPointerValue(optionsVarItem.DisplayName)
								optionsVar.Value = types.StringPointerValue(optionsVarItem.Value)

								fields.StringField.SelectField.Options = append(fields.StringField.SelectField.Options, optionsVar)
							}
						}
					}
					if fieldsItem.StringField.StringRules == nil {
						fields.StringField.StringRules = nil
					} else {
						fields.StringField.StringRules = &tfTypes.StringRules{}
						fields.StringField.StringRules.Address = types.BoolPointerValue(fieldsItem.StringField.StringRules.Address)
						fields.StringField.StringRules.Const = types.StringPointerValue(fieldsItem.StringField.StringRules.Const)
						fields.StringField.StringRules.Contains = types.StringPointerValue(fieldsItem.StringField.StringRules.Contains)
						fields.StringField.StringRules.Email = types.BoolPointerValue(fieldsItem.StringField.StringRules.Email)
						fields.StringField.StringRules.Hostname = types.BoolPointerValue(fieldsItem.StringField.StringRules.Hostname)
						fields.StringField.StringRules.IgnoreEmpty = types.BoolPointerValue(fieldsItem.StringField.StringRules.IgnoreEmpty)
						if fieldsItem.StringField.StringRules.In != nil {
							fields.StringField.StringRules.In = make([]types.String, 0, len(fieldsItem.StringField.StringRules.In))
							for _, v := range fieldsItem.StringField.StringRules.In {
								fields.StringField.StringRules.In = append(fields.StringField.StringRules.In, types.StringValue(v))
							}
						}
						fields.StringField.StringRules.IP = types.BoolPointerValue(fieldsItem.StringField.StringRules.IP)
						fields.StringField.StringRules.Ipv4 = types.BoolPointerValue(fieldsItem.StringField.StringRules.Ipv4)
						fields.StringField.StringRules.Ipv6 = types.BoolPointerValue(fieldsItem.StringField.StringRules.Ipv6)
						fields.StringField.StringRules.LenBytes = types.StringPointerValue(fieldsItem.StringField.StringRules.LenBytes)
						fields.StringField.StringRules.Length = types.StringPointerValue(fieldsItem.StringField.StringRules.Length)
						fields.StringField.StringRules.MaxBytes = types.StringPointerValue(fieldsItem.StringField.StringRules.MaxBytes)
						fields.StringField.StringRules.MaxLen = types.StringPointerValue(fieldsItem.StringField.StringRules.MaxLen)
						fields.StringField.StringRules.MinBytes = types.StringPointerValue(fieldsItem.StringField.StringRules.MinBytes)
						fields.StringField.StringRules.MinLen = types.StringPointerValue(fieldsItem.StringField.StringRules.MinLen)
						fields.StringField.StringRules.NotContains = types.StringPointerValue(fieldsItem.StringField.StringRules.NotContains)
						if fieldsItem.StringField.StringRules.NotIn != nil {
							fields.StringField.StringRules.NotIn = make([]types.String, 0, len(fieldsItem.StringField.StringRules.NotIn))
							for _, v := range fieldsItem.StringField.StringRules.NotIn {
								fields.StringField.StringRules.NotIn = append(fields.StringField.StringRules.NotIn, types.StringValue(v))
							}
						}
						fields.StringField.StringRules.Pattern = types.StringPointerValue(fieldsItem.StringField.StringRules.Pattern)
						fields.StringField.StringRules.Prefix = types.StringPointerValue(fieldsItem.StringField.StringRules.Prefix)
						fields.StringField.StringRules.Strict = types.BoolPointerValue(fieldsItem.StringField.StringRules.Strict)
						fields.StringField.StringRules.Suffix = types.StringPointerValue(fieldsItem.StringField.StringRules.Suffix)
						fields.StringField.StringRules.URI = types.BoolPointerValue(fieldsItem.StringField.StringRules.URI)
						fields.StringField.StringRules.URIRef = types.BoolPointerValue(fieldsItem.StringField.StringRules.URIRef)
						fields.StringField.StringRules.UUID = types.BoolPointerValue(fieldsItem.StringField.StringRules.UUID)
						if fieldsItem.StringField.StringRules.WellKnownRegex != nil {
							fields.StringField.StringRules.WellKnownRegex = types.StringValue(string(*fieldsItem.StringField.StringRules.WellKnownRegex))
						} else {
							fields.StringField.StringRules.WellKnownRegex = types.StringNull()
						}
					}
					if fieldsItem.StringField.TextField == nil {
						fields.StringField.TextField = nil
					} else {
						fields.StringField.TextField = &tfTypes.TextField{}
						fields.StringField.TextField.Multiline = types.BoolPointerValue(fieldsItem.StringField.TextField.Multiline)
					}
				}

				r.Fields = append(r.Fields, fields)
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
	}

	return diags
}

func (r *RequestSchemaResourceModel) ToOperationsC1APIRequestSchemaV1RequestSchemaServiceDeleteRequest(ctx context.Context) (*operations.C1APIRequestSchemaV1RequestSchemaServiceDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIRequestSchemaV1RequestSchemaServiceDeleteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *RequestSchemaResourceModel) ToOperationsC1APIRequestSchemaV1RequestSchemaServiceGetRequest(ctx context.Context) (*operations.C1APIRequestSchemaV1RequestSchemaServiceGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIRequestSchemaV1RequestSchemaServiceGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *RequestSchemaResourceModel) ToOperationsC1APIRequestSchemaV1RequestSchemaServiceUpdateRequest(ctx context.Context) (*operations.C1APIRequestSchemaV1RequestSchemaServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	requestSchemaServiceUpdateRequest, requestSchemaServiceUpdateRequestDiags := r.ToSharedRequestSchemaServiceUpdateRequest(ctx)
	diags.Append(requestSchemaServiceUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIRequestSchemaV1RequestSchemaServiceUpdateRequest{
		ID:                                id,
		RequestSchemaServiceUpdateRequest: requestSchemaServiceUpdateRequest,
	}

	return &out, diags
}

func (r *RequestSchemaResourceModel) ToSharedForm(ctx context.Context) (*shared.Form, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var fieldRelationships []shared.FieldRelationship
	if r.FieldRelationships != nil {
		fieldRelationships = make([]shared.FieldRelationship, 0, len(r.FieldRelationships))
		for _, fieldRelationshipsItem := range r.FieldRelationships {
			var atLeastOne *shared.AtLeastOne
			if fieldRelationshipsItem.AtLeastOne != nil {
				atLeastOne = &shared.AtLeastOne{}
			}
			var fieldNames []string
			if fieldRelationshipsItem.FieldNames != nil {
				fieldNames = make([]string, 0, len(fieldRelationshipsItem.FieldNames))
				for _, fieldNamesItem := range fieldRelationshipsItem.FieldNames {
					fieldNames = append(fieldNames, fieldNamesItem.ValueString())
				}
			}
			var mutuallyExclusive *shared.MutuallyExclusive
			if fieldRelationshipsItem.MutuallyExclusive != nil {
				mutuallyExclusive = &shared.MutuallyExclusive{}
			}
			var requiredTogether *shared.RequiredTogether
			if fieldRelationshipsItem.RequiredTogether != nil {
				requiredTogether = &shared.RequiredTogether{}
			}
			fieldRelationships = append(fieldRelationships, shared.FieldRelationship{
				AtLeastOne:        atLeastOne,
				FieldNames:        fieldNames,
				MutuallyExclusive: mutuallyExclusive,
				RequiredTogether:  requiredTogether,
			})
		}
	}
	var fields []shared.Field
	if r.Fields != nil {
		fields = make([]shared.Field, 0, len(r.Fields))
		for _, fieldsItem := range r.Fields {
			var boolField *shared.BoolField
			if fieldsItem.BoolField != nil {
				var checkboxField *shared.CheckboxField
				if fieldsItem.BoolField.CheckboxField != nil {
					checkboxField = &shared.CheckboxField{}
				}
				defaultValue := new(bool)
				if !fieldsItem.BoolField.DefaultValue.IsUnknown() && !fieldsItem.BoolField.DefaultValue.IsNull() {
					*defaultValue = fieldsItem.BoolField.DefaultValue.ValueBool()
				} else {
					defaultValue = nil
				}
				var boolRules *shared.BoolRules
				if fieldsItem.BoolField.BoolRules != nil {
					constVar := new(bool)
					if !fieldsItem.BoolField.BoolRules.Const.IsUnknown() && !fieldsItem.BoolField.BoolRules.Const.IsNull() {
						*constVar = fieldsItem.BoolField.BoolRules.Const.ValueBool()
					} else {
						constVar = nil
					}
					boolRules = &shared.BoolRules{
						Const: constVar,
					}
				}
				boolField = &shared.BoolField{
					CheckboxField: checkboxField,
					DefaultValue:  defaultValue,
					BoolRules:     boolRules,
				}
			}
			description1 := new(string)
			if !fieldsItem.Description.IsUnknown() && !fieldsItem.Description.IsNull() {
				*description1 = fieldsItem.Description.ValueString()
			} else {
				description1 = nil
			}
			displayName := new(string)
			if !fieldsItem.DisplayName.IsUnknown() && !fieldsItem.DisplayName.IsNull() {
				*displayName = fieldsItem.DisplayName.ValueString()
			} else {
				displayName = nil
			}
			var int64Field *shared.Int64Field
			if fieldsItem.Int64Field != nil {
				defaultValue1 := new(string)
				if !fieldsItem.Int64Field.DefaultValue.IsUnknown() && !fieldsItem.Int64Field.DefaultValue.IsNull() {
					*defaultValue1 = fieldsItem.Int64Field.DefaultValue.ValueString()
				} else {
					defaultValue1 = nil
				}
				var numberField *shared.NumberField
				if fieldsItem.Int64Field.NumberField != nil {
					maxValue := new(string)
					if !fieldsItem.Int64Field.NumberField.MaxValue.IsUnknown() && !fieldsItem.Int64Field.NumberField.MaxValue.IsNull() {
						*maxValue = fieldsItem.Int64Field.NumberField.MaxValue.ValueString()
					} else {
						maxValue = nil
					}
					minValue := new(string)
					if !fieldsItem.Int64Field.NumberField.MinValue.IsUnknown() && !fieldsItem.Int64Field.NumberField.MinValue.IsNull() {
						*minValue = fieldsItem.Int64Field.NumberField.MinValue.ValueString()
					} else {
						minValue = nil
					}
					step := new(string)
					if !fieldsItem.Int64Field.NumberField.Step.IsUnknown() && !fieldsItem.Int64Field.NumberField.Step.IsNull() {
						*step = fieldsItem.Int64Field.NumberField.Step.ValueString()
					} else {
						step = nil
					}
					numberField = &shared.NumberField{
						MaxValue: maxValue,
						MinValue: minValue,
						Step:     step,
					}
				}
				placeholder := new(string)
				if !fieldsItem.Int64Field.Placeholder.IsUnknown() && !fieldsItem.Int64Field.Placeholder.IsNull() {
					*placeholder = fieldsItem.Int64Field.Placeholder.ValueString()
				} else {
					placeholder = nil
				}
				var int64Rules *shared.Int64Rules
				if fieldsItem.Int64Field.Int64Rules != nil {
					constVar1 := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Const.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Const.IsNull() {
						*constVar1 = fieldsItem.Int64Field.Int64Rules.Const.ValueString()
					} else {
						constVar1 = nil
					}
					gt := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Gt.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Gt.IsNull() {
						*gt = fieldsItem.Int64Field.Int64Rules.Gt.ValueString()
					} else {
						gt = nil
					}
					gte := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Gte.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Gte.IsNull() {
						*gte = fieldsItem.Int64Field.Int64Rules.Gte.ValueString()
					} else {
						gte = nil
					}
					ignoreEmpty := new(bool)
					if !fieldsItem.Int64Field.Int64Rules.IgnoreEmpty.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.IgnoreEmpty.IsNull() {
						*ignoreEmpty = fieldsItem.Int64Field.Int64Rules.IgnoreEmpty.ValueBool()
					} else {
						ignoreEmpty = nil
					}
					var in []string
					if fieldsItem.Int64Field.Int64Rules.In != nil {
						in = make([]string, 0, len(fieldsItem.Int64Field.Int64Rules.In))
						for _, inItem := range fieldsItem.Int64Field.Int64Rules.In {
							in = append(in, inItem.ValueString())
						}
					}
					lt := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Lt.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Lt.IsNull() {
						*lt = fieldsItem.Int64Field.Int64Rules.Lt.ValueString()
					} else {
						lt = nil
					}
					lte := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Lte.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Lte.IsNull() {
						*lte = fieldsItem.Int64Field.Int64Rules.Lte.ValueString()
					} else {
						lte = nil
					}
					var notIn []string
					if fieldsItem.Int64Field.Int64Rules.NotIn != nil {
						notIn = make([]string, 0, len(fieldsItem.Int64Field.Int64Rules.NotIn))
						for _, notInItem := range fieldsItem.Int64Field.Int64Rules.NotIn {
							notIn = append(notIn, notInItem.ValueString())
						}
					}
					int64Rules = &shared.Int64Rules{
						Const:       constVar1,
						Gt:          gt,
						Gte:         gte,
						IgnoreEmpty: ignoreEmpty,
						In:          in,
						Lt:          lt,
						Lte:         lte,
						NotIn:       notIn,
					}
				}
				int64Field = &shared.Int64Field{
					DefaultValue: defaultValue1,
					NumberField:  numberField,
					Placeholder:  placeholder,
					Int64Rules:   int64Rules,
				}
			}
			name1 := new(string)
			if !fieldsItem.Name.IsUnknown() && !fieldsItem.Name.IsNull() {
				*name1 = fieldsItem.Name.ValueString()
			} else {
				name1 = nil
			}
			var stringField *shared.StringField
			if fieldsItem.StringField != nil {
				defaultValue2 := new(string)
				if !fieldsItem.StringField.DefaultValue.IsUnknown() && !fieldsItem.StringField.DefaultValue.IsNull() {
					*defaultValue2 = fieldsItem.StringField.DefaultValue.ValueString()
				} else {
					defaultValue2 = nil
				}
				var passwordField *shared.PasswordField
				if fieldsItem.StringField.PasswordField != nil {
					passwordField = &shared.PasswordField{}
				}
				placeholder1 := new(string)
				if !fieldsItem.StringField.Placeholder.IsUnknown() && !fieldsItem.StringField.Placeholder.IsNull() {
					*placeholder1 = fieldsItem.StringField.Placeholder.ValueString()
				} else {
					placeholder1 = nil
				}
				var stringRules *shared.StringRules
				if fieldsItem.StringField.StringRules != nil {
					address := new(bool)
					if !fieldsItem.StringField.StringRules.Address.IsUnknown() && !fieldsItem.StringField.StringRules.Address.IsNull() {
						*address = fieldsItem.StringField.StringRules.Address.ValueBool()
					} else {
						address = nil
					}
					constVar2 := new(string)
					if !fieldsItem.StringField.StringRules.Const.IsUnknown() && !fieldsItem.StringField.StringRules.Const.IsNull() {
						*constVar2 = fieldsItem.StringField.StringRules.Const.ValueString()
					} else {
						constVar2 = nil
					}
					contains := new(string)
					if !fieldsItem.StringField.StringRules.Contains.IsUnknown() && !fieldsItem.StringField.StringRules.Contains.IsNull() {
						*contains = fieldsItem.StringField.StringRules.Contains.ValueString()
					} else {
						contains = nil
					}
					email := new(bool)
					if !fieldsItem.StringField.StringRules.Email.IsUnknown() && !fieldsItem.StringField.StringRules.Email.IsNull() {
						*email = fieldsItem.StringField.StringRules.Email.ValueBool()
					} else {
						email = nil
					}
					hostname := new(bool)
					if !fieldsItem.StringField.StringRules.Hostname.IsUnknown() && !fieldsItem.StringField.StringRules.Hostname.IsNull() {
						*hostname = fieldsItem.StringField.StringRules.Hostname.ValueBool()
					} else {
						hostname = nil
					}
					ignoreEmpty1 := new(bool)
					if !fieldsItem.StringField.StringRules.IgnoreEmpty.IsUnknown() && !fieldsItem.StringField.StringRules.IgnoreEmpty.IsNull() {
						*ignoreEmpty1 = fieldsItem.StringField.StringRules.IgnoreEmpty.ValueBool()
					} else {
						ignoreEmpty1 = nil
					}
					var in1 []string
					if fieldsItem.StringField.StringRules.In != nil {
						in1 = make([]string, 0, len(fieldsItem.StringField.StringRules.In))
						for _, inItem1 := range fieldsItem.StringField.StringRules.In {
							in1 = append(in1, inItem1.ValueString())
						}
					}
					ip := new(bool)
					if !fieldsItem.StringField.StringRules.IP.IsUnknown() && !fieldsItem.StringField.StringRules.IP.IsNull() {
						*ip = fieldsItem.StringField.StringRules.IP.ValueBool()
					} else {
						ip = nil
					}
					ipv4 := new(bool)
					if !fieldsItem.StringField.StringRules.Ipv4.IsUnknown() && !fieldsItem.StringField.StringRules.Ipv4.IsNull() {
						*ipv4 = fieldsItem.StringField.StringRules.Ipv4.ValueBool()
					} else {
						ipv4 = nil
					}
					ipv6 := new(bool)
					if !fieldsItem.StringField.StringRules.Ipv6.IsUnknown() && !fieldsItem.StringField.StringRules.Ipv6.IsNull() {
						*ipv6 = fieldsItem.StringField.StringRules.Ipv6.ValueBool()
					} else {
						ipv6 = nil
					}
					length := new(string)
					if !fieldsItem.StringField.StringRules.Length.IsUnknown() && !fieldsItem.StringField.StringRules.Length.IsNull() {
						*length = fieldsItem.StringField.StringRules.Length.ValueString()
					} else {
						length = nil
					}
					lenBytes := new(string)
					if !fieldsItem.StringField.StringRules.LenBytes.IsUnknown() && !fieldsItem.StringField.StringRules.LenBytes.IsNull() {
						*lenBytes = fieldsItem.StringField.StringRules.LenBytes.ValueString()
					} else {
						lenBytes = nil
					}
					maxBytes := new(string)
					if !fieldsItem.StringField.StringRules.MaxBytes.IsUnknown() && !fieldsItem.StringField.StringRules.MaxBytes.IsNull() {
						*maxBytes = fieldsItem.StringField.StringRules.MaxBytes.ValueString()
					} else {
						maxBytes = nil
					}
					maxLen := new(string)
					if !fieldsItem.StringField.StringRules.MaxLen.IsUnknown() && !fieldsItem.StringField.StringRules.MaxLen.IsNull() {
						*maxLen = fieldsItem.StringField.StringRules.MaxLen.ValueString()
					} else {
						maxLen = nil
					}
					minBytes := new(string)
					if !fieldsItem.StringField.StringRules.MinBytes.IsUnknown() && !fieldsItem.StringField.StringRules.MinBytes.IsNull() {
						*minBytes = fieldsItem.StringField.StringRules.MinBytes.ValueString()
					} else {
						minBytes = nil
					}
					minLen := new(string)
					if !fieldsItem.StringField.StringRules.MinLen.IsUnknown() && !fieldsItem.StringField.StringRules.MinLen.IsNull() {
						*minLen = fieldsItem.StringField.StringRules.MinLen.ValueString()
					} else {
						minLen = nil
					}
					notContains := new(string)
					if !fieldsItem.StringField.StringRules.NotContains.IsUnknown() && !fieldsItem.StringField.StringRules.NotContains.IsNull() {
						*notContains = fieldsItem.StringField.StringRules.NotContains.ValueString()
					} else {
						notContains = nil
					}
					var notIn1 []string
					if fieldsItem.StringField.StringRules.NotIn != nil {
						notIn1 = make([]string, 0, len(fieldsItem.StringField.StringRules.NotIn))
						for _, notInItem1 := range fieldsItem.StringField.StringRules.NotIn {
							notIn1 = append(notIn1, notInItem1.ValueString())
						}
					}
					pattern := new(string)
					if !fieldsItem.StringField.StringRules.Pattern.IsUnknown() && !fieldsItem.StringField.StringRules.Pattern.IsNull() {
						*pattern = fieldsItem.StringField.StringRules.Pattern.ValueString()
					} else {
						pattern = nil
					}
					prefix := new(string)
					if !fieldsItem.StringField.StringRules.Prefix.IsUnknown() && !fieldsItem.StringField.StringRules.Prefix.IsNull() {
						*prefix = fieldsItem.StringField.StringRules.Prefix.ValueString()
					} else {
						prefix = nil
					}
					strict := new(bool)
					if !fieldsItem.StringField.StringRules.Strict.IsUnknown() && !fieldsItem.StringField.StringRules.Strict.IsNull() {
						*strict = fieldsItem.StringField.StringRules.Strict.ValueBool()
					} else {
						strict = nil
					}
					suffix := new(string)
					if !fieldsItem.StringField.StringRules.Suffix.IsUnknown() && !fieldsItem.StringField.StringRules.Suffix.IsNull() {
						*suffix = fieldsItem.StringField.StringRules.Suffix.ValueString()
					} else {
						suffix = nil
					}
					uri := new(bool)
					if !fieldsItem.StringField.StringRules.URI.IsUnknown() && !fieldsItem.StringField.StringRules.URI.IsNull() {
						*uri = fieldsItem.StringField.StringRules.URI.ValueBool()
					} else {
						uri = nil
					}
					uriRef := new(bool)
					if !fieldsItem.StringField.StringRules.URIRef.IsUnknown() && !fieldsItem.StringField.StringRules.URIRef.IsNull() {
						*uriRef = fieldsItem.StringField.StringRules.URIRef.ValueBool()
					} else {
						uriRef = nil
					}
					uuid := new(bool)
					if !fieldsItem.StringField.StringRules.UUID.IsUnknown() && !fieldsItem.StringField.StringRules.UUID.IsNull() {
						*uuid = fieldsItem.StringField.StringRules.UUID.ValueBool()
					} else {
						uuid = nil
					}
					wellKnownRegex := new(shared.WellKnownRegex)
					if !fieldsItem.StringField.StringRules.WellKnownRegex.IsUnknown() && !fieldsItem.StringField.StringRules.WellKnownRegex.IsNull() {
						*wellKnownRegex = shared.WellKnownRegex(fieldsItem.StringField.StringRules.WellKnownRegex.ValueString())
					} else {
						wellKnownRegex = nil
					}
					stringRules = &shared.StringRules{
						Address:        address,
						Const:          constVar2,
						Contains:       contains,
						Email:          email,
						Hostname:       hostname,
						IgnoreEmpty:    ignoreEmpty1,
						In:             in1,
						IP:             ip,
						Ipv4:           ipv4,
						Ipv6:           ipv6,
						Length:         length,
						LenBytes:       lenBytes,
						MaxBytes:       maxBytes,
						MaxLen:         maxLen,
						MinBytes:       minBytes,
						MinLen:         minLen,
						NotContains:    notContains,
						NotIn:          notIn1,
						Pattern:        pattern,
						Prefix:         prefix,
						Strict:         strict,
						Suffix:         suffix,
						URI:            uri,
						URIRef:         uriRef,
						UUID:           uuid,
						WellKnownRegex: wellKnownRegex,
					}
				}
				var selectField *shared.SelectField
				if fieldsItem.StringField.SelectField != nil {
					var optionsVar []shared.SelectOption
					if fieldsItem.StringField.SelectField.Options != nil {
						optionsVar = make([]shared.SelectOption, 0, len(fieldsItem.StringField.SelectField.Options))
						for _, optionsItem := range fieldsItem.StringField.SelectField.Options {
							displayName1 := new(string)
							if !optionsItem.DisplayName.IsUnknown() && !optionsItem.DisplayName.IsNull() {
								*displayName1 = optionsItem.DisplayName.ValueString()
							} else {
								displayName1 = nil
							}
							value := new(string)
							if !optionsItem.Value.IsUnknown() && !optionsItem.Value.IsNull() {
								*value = optionsItem.Value.ValueString()
							} else {
								value = nil
							}
							optionsVar = append(optionsVar, shared.SelectOption{
								DisplayName: displayName1,
								Value:       value,
							})
						}
					}
					selectField = &shared.SelectField{
						Options: optionsVar,
					}
				}
				var textField *shared.TextField
				if fieldsItem.StringField.TextField != nil {
					multiline := new(bool)
					if !fieldsItem.StringField.TextField.Multiline.IsUnknown() && !fieldsItem.StringField.TextField.Multiline.IsNull() {
						*multiline = fieldsItem.StringField.TextField.Multiline.ValueBool()
					} else {
						multiline = nil
					}
					textField = &shared.TextField{
						Multiline: multiline,
					}
				}
				stringField = &shared.StringField{
					DefaultValue:  defaultValue2,
					PasswordField: passwordField,
					Placeholder:   placeholder1,
					StringRules:   stringRules,
					SelectField:   selectField,
					TextField:     textField,
				}
			}
			fields = append(fields, shared.Field{
				BoolField:   boolField,
				Description: description1,
				DisplayName: displayName,
				Int64Field:  int64Field,
				Name:        name1,
				StringField: stringField,
			})
		}
	}
	out := shared.Form{
		Description:        description,
		Name:               name,
		FieldRelationships: fieldRelationships,
		Fields:             fields,
	}

	return &out, diags
}

func (r *RequestSchemaResourceModel) ToSharedRequestSchema(ctx context.Context) (*shared.RequestSchema, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	form, formDiags := r.ToSharedForm(ctx)
	diags.Append(formDiags...)

	if diags.HasError() {
		return nil, diags
	}

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := shared.RequestSchema{
		CreatedAt: createdAt,
		DeletedAt: deletedAt,
		Form:      form,
		ID:        id,
	}

	return &out, diags
}

func (r *RequestSchemaResourceModel) ToSharedRequestSchemaServiceCreateRequest(ctx context.Context) (*shared.RequestSchemaServiceCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var fields []shared.Field
	if r.Fields != nil {
		fields = make([]shared.Field, 0, len(r.Fields))
		for _, fieldsItem := range r.Fields {
			var boolField *shared.BoolField
			if fieldsItem.BoolField != nil {
				var checkboxField *shared.CheckboxField
				if fieldsItem.BoolField.CheckboxField != nil {
					checkboxField = &shared.CheckboxField{}
				}
				defaultValue := new(bool)
				if !fieldsItem.BoolField.DefaultValue.IsUnknown() && !fieldsItem.BoolField.DefaultValue.IsNull() {
					*defaultValue = fieldsItem.BoolField.DefaultValue.ValueBool()
				} else {
					defaultValue = nil
				}
				var boolRules *shared.BoolRules
				if fieldsItem.BoolField.BoolRules != nil {
					constVar := new(bool)
					if !fieldsItem.BoolField.BoolRules.Const.IsUnknown() && !fieldsItem.BoolField.BoolRules.Const.IsNull() {
						*constVar = fieldsItem.BoolField.BoolRules.Const.ValueBool()
					} else {
						constVar = nil
					}
					boolRules = &shared.BoolRules{
						Const: constVar,
					}
				}
				boolField = &shared.BoolField{
					CheckboxField: checkboxField,
					DefaultValue:  defaultValue,
					BoolRules:     boolRules,
				}
			}
			description1 := new(string)
			if !fieldsItem.Description.IsUnknown() && !fieldsItem.Description.IsNull() {
				*description1 = fieldsItem.Description.ValueString()
			} else {
				description1 = nil
			}
			displayName := new(string)
			if !fieldsItem.DisplayName.IsUnknown() && !fieldsItem.DisplayName.IsNull() {
				*displayName = fieldsItem.DisplayName.ValueString()
			} else {
				displayName = nil
			}
			var int64Field *shared.Int64Field
			if fieldsItem.Int64Field != nil {
				defaultValue1 := new(string)
				if !fieldsItem.Int64Field.DefaultValue.IsUnknown() && !fieldsItem.Int64Field.DefaultValue.IsNull() {
					*defaultValue1 = fieldsItem.Int64Field.DefaultValue.ValueString()
				} else {
					defaultValue1 = nil
				}
				var numberField *shared.NumberField
				if fieldsItem.Int64Field.NumberField != nil {
					maxValue := new(string)
					if !fieldsItem.Int64Field.NumberField.MaxValue.IsUnknown() && !fieldsItem.Int64Field.NumberField.MaxValue.IsNull() {
						*maxValue = fieldsItem.Int64Field.NumberField.MaxValue.ValueString()
					} else {
						maxValue = nil
					}
					minValue := new(string)
					if !fieldsItem.Int64Field.NumberField.MinValue.IsUnknown() && !fieldsItem.Int64Field.NumberField.MinValue.IsNull() {
						*minValue = fieldsItem.Int64Field.NumberField.MinValue.ValueString()
					} else {
						minValue = nil
					}
					step := new(string)
					if !fieldsItem.Int64Field.NumberField.Step.IsUnknown() && !fieldsItem.Int64Field.NumberField.Step.IsNull() {
						*step = fieldsItem.Int64Field.NumberField.Step.ValueString()
					} else {
						step = nil
					}
					numberField = &shared.NumberField{
						MaxValue: maxValue,
						MinValue: minValue,
						Step:     step,
					}
				}
				placeholder := new(string)
				if !fieldsItem.Int64Field.Placeholder.IsUnknown() && !fieldsItem.Int64Field.Placeholder.IsNull() {
					*placeholder = fieldsItem.Int64Field.Placeholder.ValueString()
				} else {
					placeholder = nil
				}
				var int64Rules *shared.Int64Rules
				if fieldsItem.Int64Field.Int64Rules != nil {
					constVar1 := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Const.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Const.IsNull() {
						*constVar1 = fieldsItem.Int64Field.Int64Rules.Const.ValueString()
					} else {
						constVar1 = nil
					}
					gt := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Gt.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Gt.IsNull() {
						*gt = fieldsItem.Int64Field.Int64Rules.Gt.ValueString()
					} else {
						gt = nil
					}
					gte := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Gte.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Gte.IsNull() {
						*gte = fieldsItem.Int64Field.Int64Rules.Gte.ValueString()
					} else {
						gte = nil
					}
					ignoreEmpty := new(bool)
					if !fieldsItem.Int64Field.Int64Rules.IgnoreEmpty.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.IgnoreEmpty.IsNull() {
						*ignoreEmpty = fieldsItem.Int64Field.Int64Rules.IgnoreEmpty.ValueBool()
					} else {
						ignoreEmpty = nil
					}
					var in []string
					if fieldsItem.Int64Field.Int64Rules.In != nil {
						in = make([]string, 0, len(fieldsItem.Int64Field.Int64Rules.In))
						for _, inItem := range fieldsItem.Int64Field.Int64Rules.In {
							in = append(in, inItem.ValueString())
						}
					}
					lt := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Lt.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Lt.IsNull() {
						*lt = fieldsItem.Int64Field.Int64Rules.Lt.ValueString()
					} else {
						lt = nil
					}
					lte := new(string)
					if !fieldsItem.Int64Field.Int64Rules.Lte.IsUnknown() && !fieldsItem.Int64Field.Int64Rules.Lte.IsNull() {
						*lte = fieldsItem.Int64Field.Int64Rules.Lte.ValueString()
					} else {
						lte = nil
					}
					var notIn []string
					if fieldsItem.Int64Field.Int64Rules.NotIn != nil {
						notIn = make([]string, 0, len(fieldsItem.Int64Field.Int64Rules.NotIn))
						for _, notInItem := range fieldsItem.Int64Field.Int64Rules.NotIn {
							notIn = append(notIn, notInItem.ValueString())
						}
					}
					int64Rules = &shared.Int64Rules{
						Const:       constVar1,
						Gt:          gt,
						Gte:         gte,
						IgnoreEmpty: ignoreEmpty,
						In:          in,
						Lt:          lt,
						Lte:         lte,
						NotIn:       notIn,
					}
				}
				int64Field = &shared.Int64Field{
					DefaultValue: defaultValue1,
					NumberField:  numberField,
					Placeholder:  placeholder,
					Int64Rules:   int64Rules,
				}
			}
			name := new(string)
			if !fieldsItem.Name.IsUnknown() && !fieldsItem.Name.IsNull() {
				*name = fieldsItem.Name.ValueString()
			} else {
				name = nil
			}
			var stringField *shared.StringField
			if fieldsItem.StringField != nil {
				defaultValue2 := new(string)
				if !fieldsItem.StringField.DefaultValue.IsUnknown() && !fieldsItem.StringField.DefaultValue.IsNull() {
					*defaultValue2 = fieldsItem.StringField.DefaultValue.ValueString()
				} else {
					defaultValue2 = nil
				}
				var passwordField *shared.PasswordField
				if fieldsItem.StringField.PasswordField != nil {
					passwordField = &shared.PasswordField{}
				}
				placeholder1 := new(string)
				if !fieldsItem.StringField.Placeholder.IsUnknown() && !fieldsItem.StringField.Placeholder.IsNull() {
					*placeholder1 = fieldsItem.StringField.Placeholder.ValueString()
				} else {
					placeholder1 = nil
				}
				var stringRules *shared.StringRules
				if fieldsItem.StringField.StringRules != nil {
					address := new(bool)
					if !fieldsItem.StringField.StringRules.Address.IsUnknown() && !fieldsItem.StringField.StringRules.Address.IsNull() {
						*address = fieldsItem.StringField.StringRules.Address.ValueBool()
					} else {
						address = nil
					}
					constVar2 := new(string)
					if !fieldsItem.StringField.StringRules.Const.IsUnknown() && !fieldsItem.StringField.StringRules.Const.IsNull() {
						*constVar2 = fieldsItem.StringField.StringRules.Const.ValueString()
					} else {
						constVar2 = nil
					}
					contains := new(string)
					if !fieldsItem.StringField.StringRules.Contains.IsUnknown() && !fieldsItem.StringField.StringRules.Contains.IsNull() {
						*contains = fieldsItem.StringField.StringRules.Contains.ValueString()
					} else {
						contains = nil
					}
					email := new(bool)
					if !fieldsItem.StringField.StringRules.Email.IsUnknown() && !fieldsItem.StringField.StringRules.Email.IsNull() {
						*email = fieldsItem.StringField.StringRules.Email.ValueBool()
					} else {
						email = nil
					}
					hostname := new(bool)
					if !fieldsItem.StringField.StringRules.Hostname.IsUnknown() && !fieldsItem.StringField.StringRules.Hostname.IsNull() {
						*hostname = fieldsItem.StringField.StringRules.Hostname.ValueBool()
					} else {
						hostname = nil
					}
					ignoreEmpty1 := new(bool)
					if !fieldsItem.StringField.StringRules.IgnoreEmpty.IsUnknown() && !fieldsItem.StringField.StringRules.IgnoreEmpty.IsNull() {
						*ignoreEmpty1 = fieldsItem.StringField.StringRules.IgnoreEmpty.ValueBool()
					} else {
						ignoreEmpty1 = nil
					}
					var in1 []string
					if fieldsItem.StringField.StringRules.In != nil {
						in1 = make([]string, 0, len(fieldsItem.StringField.StringRules.In))
						for _, inItem1 := range fieldsItem.StringField.StringRules.In {
							in1 = append(in1, inItem1.ValueString())
						}
					}
					ip := new(bool)
					if !fieldsItem.StringField.StringRules.IP.IsUnknown() && !fieldsItem.StringField.StringRules.IP.IsNull() {
						*ip = fieldsItem.StringField.StringRules.IP.ValueBool()
					} else {
						ip = nil
					}
					ipv4 := new(bool)
					if !fieldsItem.StringField.StringRules.Ipv4.IsUnknown() && !fieldsItem.StringField.StringRules.Ipv4.IsNull() {
						*ipv4 = fieldsItem.StringField.StringRules.Ipv4.ValueBool()
					} else {
						ipv4 = nil
					}
					ipv6 := new(bool)
					if !fieldsItem.StringField.StringRules.Ipv6.IsUnknown() && !fieldsItem.StringField.StringRules.Ipv6.IsNull() {
						*ipv6 = fieldsItem.StringField.StringRules.Ipv6.ValueBool()
					} else {
						ipv6 = nil
					}
					length := new(string)
					if !fieldsItem.StringField.StringRules.Length.IsUnknown() && !fieldsItem.StringField.StringRules.Length.IsNull() {
						*length = fieldsItem.StringField.StringRules.Length.ValueString()
					} else {
						length = nil
					}
					lenBytes := new(string)
					if !fieldsItem.StringField.StringRules.LenBytes.IsUnknown() && !fieldsItem.StringField.StringRules.LenBytes.IsNull() {
						*lenBytes = fieldsItem.StringField.StringRules.LenBytes.ValueString()
					} else {
						lenBytes = nil
					}
					maxBytes := new(string)
					if !fieldsItem.StringField.StringRules.MaxBytes.IsUnknown() && !fieldsItem.StringField.StringRules.MaxBytes.IsNull() {
						*maxBytes = fieldsItem.StringField.StringRules.MaxBytes.ValueString()
					} else {
						maxBytes = nil
					}
					maxLen := new(string)
					if !fieldsItem.StringField.StringRules.MaxLen.IsUnknown() && !fieldsItem.StringField.StringRules.MaxLen.IsNull() {
						*maxLen = fieldsItem.StringField.StringRules.MaxLen.ValueString()
					} else {
						maxLen = nil
					}
					minBytes := new(string)
					if !fieldsItem.StringField.StringRules.MinBytes.IsUnknown() && !fieldsItem.StringField.StringRules.MinBytes.IsNull() {
						*minBytes = fieldsItem.StringField.StringRules.MinBytes.ValueString()
					} else {
						minBytes = nil
					}
					minLen := new(string)
					if !fieldsItem.StringField.StringRules.MinLen.IsUnknown() && !fieldsItem.StringField.StringRules.MinLen.IsNull() {
						*minLen = fieldsItem.StringField.StringRules.MinLen.ValueString()
					} else {
						minLen = nil
					}
					notContains := new(string)
					if !fieldsItem.StringField.StringRules.NotContains.IsUnknown() && !fieldsItem.StringField.StringRules.NotContains.IsNull() {
						*notContains = fieldsItem.StringField.StringRules.NotContains.ValueString()
					} else {
						notContains = nil
					}
					var notIn1 []string
					if fieldsItem.StringField.StringRules.NotIn != nil {
						notIn1 = make([]string, 0, len(fieldsItem.StringField.StringRules.NotIn))
						for _, notInItem1 := range fieldsItem.StringField.StringRules.NotIn {
							notIn1 = append(notIn1, notInItem1.ValueString())
						}
					}
					pattern := new(string)
					if !fieldsItem.StringField.StringRules.Pattern.IsUnknown() && !fieldsItem.StringField.StringRules.Pattern.IsNull() {
						*pattern = fieldsItem.StringField.StringRules.Pattern.ValueString()
					} else {
						pattern = nil
					}
					prefix := new(string)
					if !fieldsItem.StringField.StringRules.Prefix.IsUnknown() && !fieldsItem.StringField.StringRules.Prefix.IsNull() {
						*prefix = fieldsItem.StringField.StringRules.Prefix.ValueString()
					} else {
						prefix = nil
					}
					strict := new(bool)
					if !fieldsItem.StringField.StringRules.Strict.IsUnknown() && !fieldsItem.StringField.StringRules.Strict.IsNull() {
						*strict = fieldsItem.StringField.StringRules.Strict.ValueBool()
					} else {
						strict = nil
					}
					suffix := new(string)
					if !fieldsItem.StringField.StringRules.Suffix.IsUnknown() && !fieldsItem.StringField.StringRules.Suffix.IsNull() {
						*suffix = fieldsItem.StringField.StringRules.Suffix.ValueString()
					} else {
						suffix = nil
					}
					uri := new(bool)
					if !fieldsItem.StringField.StringRules.URI.IsUnknown() && !fieldsItem.StringField.StringRules.URI.IsNull() {
						*uri = fieldsItem.StringField.StringRules.URI.ValueBool()
					} else {
						uri = nil
					}
					uriRef := new(bool)
					if !fieldsItem.StringField.StringRules.URIRef.IsUnknown() && !fieldsItem.StringField.StringRules.URIRef.IsNull() {
						*uriRef = fieldsItem.StringField.StringRules.URIRef.ValueBool()
					} else {
						uriRef = nil
					}
					uuid := new(bool)
					if !fieldsItem.StringField.StringRules.UUID.IsUnknown() && !fieldsItem.StringField.StringRules.UUID.IsNull() {
						*uuid = fieldsItem.StringField.StringRules.UUID.ValueBool()
					} else {
						uuid = nil
					}
					wellKnownRegex := new(shared.WellKnownRegex)
					if !fieldsItem.StringField.StringRules.WellKnownRegex.IsUnknown() && !fieldsItem.StringField.StringRules.WellKnownRegex.IsNull() {
						*wellKnownRegex = shared.WellKnownRegex(fieldsItem.StringField.StringRules.WellKnownRegex.ValueString())
					} else {
						wellKnownRegex = nil
					}
					stringRules = &shared.StringRules{
						Address:        address,
						Const:          constVar2,
						Contains:       contains,
						Email:          email,
						Hostname:       hostname,
						IgnoreEmpty:    ignoreEmpty1,
						In:             in1,
						IP:             ip,
						Ipv4:           ipv4,
						Ipv6:           ipv6,
						Length:         length,
						LenBytes:       lenBytes,
						MaxBytes:       maxBytes,
						MaxLen:         maxLen,
						MinBytes:       minBytes,
						MinLen:         minLen,
						NotContains:    notContains,
						NotIn:          notIn1,
						Pattern:        pattern,
						Prefix:         prefix,
						Strict:         strict,
						Suffix:         suffix,
						URI:            uri,
						URIRef:         uriRef,
						UUID:           uuid,
						WellKnownRegex: wellKnownRegex,
					}
				}
				var selectField *shared.SelectField
				if fieldsItem.StringField.SelectField != nil {
					var optionsVar []shared.SelectOption
					if fieldsItem.StringField.SelectField.Options != nil {
						optionsVar = make([]shared.SelectOption, 0, len(fieldsItem.StringField.SelectField.Options))
						for _, optionsItem := range fieldsItem.StringField.SelectField.Options {
							displayName1 := new(string)
							if !optionsItem.DisplayName.IsUnknown() && !optionsItem.DisplayName.IsNull() {
								*displayName1 = optionsItem.DisplayName.ValueString()
							} else {
								displayName1 = nil
							}
							value := new(string)
							if !optionsItem.Value.IsUnknown() && !optionsItem.Value.IsNull() {
								*value = optionsItem.Value.ValueString()
							} else {
								value = nil
							}
							optionsVar = append(optionsVar, shared.SelectOption{
								DisplayName: displayName1,
								Value:       value,
							})
						}
					}
					selectField = &shared.SelectField{
						Options: optionsVar,
					}
				}
				var textField *shared.TextField
				if fieldsItem.StringField.TextField != nil {
					multiline := new(bool)
					if !fieldsItem.StringField.TextField.Multiline.IsUnknown() && !fieldsItem.StringField.TextField.Multiline.IsNull() {
						*multiline = fieldsItem.StringField.TextField.Multiline.ValueBool()
					} else {
						multiline = nil
					}
					textField = &shared.TextField{
						Multiline: multiline,
					}
				}
				stringField = &shared.StringField{
					DefaultValue:  defaultValue2,
					PasswordField: passwordField,
					Placeholder:   placeholder1,
					StringRules:   stringRules,
					SelectField:   selectField,
					TextField:     textField,
				}
			}
			fields = append(fields, shared.Field{
				BoolField:   boolField,
				Description: description1,
				DisplayName: displayName,
				Int64Field:  int64Field,
				Name:        name,
				StringField: stringField,
			})
		}
	}
	name1 := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name1 = r.Name.ValueString()
	} else {
		name1 = nil
	}
	out := shared.RequestSchemaServiceCreateRequest{
		Description: description,
		Fields:      fields,
		Name:        name1,
	}

	return &out, diags
}

func (r *RequestSchemaResourceModel) ToSharedRequestSchemaServiceUpdateRequest(ctx context.Context) (*shared.RequestSchemaServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	requestSchema, requestSchemaDiags := r.ToSharedRequestSchema(ctx)
	diags.Append(requestSchemaDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.RequestSchemaServiceUpdateRequest{
		RequestSchema: requestSchema,
	}

	return &out, diags
}
