// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *UserDataSourceModel) ToSharedSearchUsersRequest() *shared.SearchUsersRequest {
	email := new(string)
	if !r.Email.IsUnknown() && !r.Email.IsNull() {
		*email = r.Email.ValueString()
	} else {
		email = nil
	}
	var excludeIds []string = []string{}
	for _, excludeIdsItem := range r.ExcludeIds {
		excludeIds = append(excludeIds, excludeIdsItem.ValueString())
	}
	var ids []string = []string{}
	for _, idsItem := range r.Ids {
		ids = append(ids, idsItem.ValueString())
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	pageToken := new(string)
	if !r.PageToken.IsUnknown() && !r.PageToken.IsNull() {
		*pageToken = r.PageToken.ValueString()
	} else {
		pageToken = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var refs []shared.UserRef = []shared.UserRef{}
	for _, refsItem := range r.Refs {
		id := new(string)
		if !refsItem.ID.IsUnknown() && !refsItem.ID.IsNull() {
			*id = refsItem.ID.ValueString()
		} else {
			id = nil
		}
		refs = append(refs, shared.UserRef{
			ID: id,
		})
	}
	var roleIds []string = []string{}
	for _, roleIdsItem := range r.RoleIds {
		roleIds = append(roleIds, roleIdsItem.ValueString())
	}
	var userStatuses []shared.UserStatuses = []shared.UserStatuses{}
	for _, userStatusesItem := range r.UserStatuses {
		userStatuses = append(userStatuses, shared.UserStatuses(userStatusesItem.ValueString()))
	}
	out := shared.SearchUsersRequest{
		Email:        email,
		ExcludeIds:   excludeIds,
		Ids:          ids,
		PageSize:     pageSize,
		PageToken:    pageToken,
		Query:        query,
		Refs:         refs,
		RoleIds:      roleIds,
		UserStatuses: userStatuses,
	}
	return &out
}

func (r *UserDataSourceModel) RefreshFromSharedUser(resp *shared.User) {
	if resp != nil {
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.DelegatedUserID = types.StringPointerValue(resp.DelegatedUserID)
		if resp.DeletedAt != nil {
			r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339Nano))
		} else {
			r.DeletedAt = types.StringNull()
		}
		r.Department = types.StringPointerValue(resp.Department)
		if resp.DepartmentSources != nil {
			r.DepartmentSources = []tfTypes.UserAttributeMappingSource{}
			if len(r.DepartmentSources) > len(resp.DepartmentSources) {
				r.DepartmentSources = r.DepartmentSources[:len(resp.DepartmentSources)]
			}
			for departmentSourcesCount, departmentSourcesItem := range resp.DepartmentSources {
				var departmentSources1 tfTypes.UserAttributeMappingSource
				departmentSources1.AppID = types.StringPointerValue(departmentSourcesItem.AppID)
				departmentSources1.AppUserID = types.StringPointerValue(departmentSourcesItem.AppUserID)
				departmentSources1.AppUserProfileAttributeKey = types.StringPointerValue(departmentSourcesItem.AppUserProfileAttributeKey)
				departmentSources1.UserAttributeMappingID = types.StringPointerValue(departmentSourcesItem.UserAttributeMappingID)
				departmentSources1.Value = types.StringPointerValue(departmentSourcesItem.Value)
				if departmentSourcesCount+1 > len(r.DepartmentSources) {
					r.DepartmentSources = append(r.DepartmentSources, departmentSources1)
				} else {
					r.DepartmentSources[departmentSourcesCount].AppID = departmentSources1.AppID
					r.DepartmentSources[departmentSourcesCount].AppUserID = departmentSources1.AppUserID
					r.DepartmentSources[departmentSourcesCount].AppUserProfileAttributeKey = departmentSources1.AppUserProfileAttributeKey
					r.DepartmentSources[departmentSourcesCount].UserAttributeMappingID = departmentSources1.UserAttributeMappingID
					r.DepartmentSources[departmentSourcesCount].Value = departmentSources1.Value
				}
			}
		}
		if resp.DirectoryIds != nil {
			r.DirectoryIds = make([]types.String, 0, len(resp.DirectoryIds))
			for _, v := range resp.DirectoryIds {
				r.DirectoryIds = append(r.DirectoryIds, types.StringValue(v))
			}
		}
		if resp.DirectoryStatus != nil {
			r.DirectoryStatus = types.StringValue(string(*resp.DirectoryStatus))
		} else {
			r.DirectoryStatus = types.StringNull()
		}
		if resp.DirectoryStatusSources != nil {
			r.DirectoryStatusSources = []tfTypes.UserAttributeMappingSource{}
			if len(r.DirectoryStatusSources) > len(resp.DirectoryStatusSources) {
				r.DirectoryStatusSources = r.DirectoryStatusSources[:len(resp.DirectoryStatusSources)]
			}
			for directoryStatusSourcesCount, directoryStatusSourcesItem := range resp.DirectoryStatusSources {
				var directoryStatusSources1 tfTypes.UserAttributeMappingSource
				directoryStatusSources1.AppID = types.StringPointerValue(directoryStatusSourcesItem.AppID)
				directoryStatusSources1.AppUserID = types.StringPointerValue(directoryStatusSourcesItem.AppUserID)
				directoryStatusSources1.AppUserProfileAttributeKey = types.StringPointerValue(directoryStatusSourcesItem.AppUserProfileAttributeKey)
				directoryStatusSources1.UserAttributeMappingID = types.StringPointerValue(directoryStatusSourcesItem.UserAttributeMappingID)
				directoryStatusSources1.Value = types.StringPointerValue(directoryStatusSourcesItem.Value)
				if directoryStatusSourcesCount+1 > len(r.DirectoryStatusSources) {
					r.DirectoryStatusSources = append(r.DirectoryStatusSources, directoryStatusSources1)
				} else {
					r.DirectoryStatusSources[directoryStatusSourcesCount].AppID = directoryStatusSources1.AppID
					r.DirectoryStatusSources[directoryStatusSourcesCount].AppUserID = directoryStatusSources1.AppUserID
					r.DirectoryStatusSources[directoryStatusSourcesCount].AppUserProfileAttributeKey = directoryStatusSources1.AppUserProfileAttributeKey
					r.DirectoryStatusSources[directoryStatusSourcesCount].UserAttributeMappingID = directoryStatusSources1.UserAttributeMappingID
					r.DirectoryStatusSources[directoryStatusSourcesCount].Value = directoryStatusSources1.Value
				}
			}
		}
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.Email = types.StringPointerValue(resp.Email)
		if resp.Emails != nil {
			r.Emails = make([]types.String, 0, len(resp.Emails))
			for _, v := range resp.Emails {
				r.Emails = append(r.Emails, types.StringValue(v))
			}
		}
		r.EmploymentStatus = types.StringPointerValue(resp.EmploymentStatus)
		if resp.EmploymentStatusSources != nil {
			r.EmploymentStatusSources = []tfTypes.UserAttributeMappingSource{}
			if len(r.EmploymentStatusSources) > len(resp.EmploymentStatusSources) {
				r.EmploymentStatusSources = r.EmploymentStatusSources[:len(resp.EmploymentStatusSources)]
			}
			for employmentStatusSourcesCount, employmentStatusSourcesItem := range resp.EmploymentStatusSources {
				var employmentStatusSources1 tfTypes.UserAttributeMappingSource
				employmentStatusSources1.AppID = types.StringPointerValue(employmentStatusSourcesItem.AppID)
				employmentStatusSources1.AppUserID = types.StringPointerValue(employmentStatusSourcesItem.AppUserID)
				employmentStatusSources1.AppUserProfileAttributeKey = types.StringPointerValue(employmentStatusSourcesItem.AppUserProfileAttributeKey)
				employmentStatusSources1.UserAttributeMappingID = types.StringPointerValue(employmentStatusSourcesItem.UserAttributeMappingID)
				employmentStatusSources1.Value = types.StringPointerValue(employmentStatusSourcesItem.Value)
				if employmentStatusSourcesCount+1 > len(r.EmploymentStatusSources) {
					r.EmploymentStatusSources = append(r.EmploymentStatusSources, employmentStatusSources1)
				} else {
					r.EmploymentStatusSources[employmentStatusSourcesCount].AppID = employmentStatusSources1.AppID
					r.EmploymentStatusSources[employmentStatusSourcesCount].AppUserID = employmentStatusSources1.AppUserID
					r.EmploymentStatusSources[employmentStatusSourcesCount].AppUserProfileAttributeKey = employmentStatusSources1.AppUserProfileAttributeKey
					r.EmploymentStatusSources[employmentStatusSourcesCount].UserAttributeMappingID = employmentStatusSources1.UserAttributeMappingID
					r.EmploymentStatusSources[employmentStatusSourcesCount].Value = employmentStatusSources1.Value
				}
			}
		}
		r.EmploymentType = types.StringPointerValue(resp.EmploymentType)
		if resp.EmploymentTypeSources != nil {
			r.EmploymentTypeSources = []tfTypes.UserAttributeMappingSource{}
			if len(r.EmploymentTypeSources) > len(resp.EmploymentTypeSources) {
				r.EmploymentTypeSources = r.EmploymentTypeSources[:len(resp.EmploymentTypeSources)]
			}
			for employmentTypeSourcesCount, employmentTypeSourcesItem := range resp.EmploymentTypeSources {
				var employmentTypeSources1 tfTypes.UserAttributeMappingSource
				employmentTypeSources1.AppID = types.StringPointerValue(employmentTypeSourcesItem.AppID)
				employmentTypeSources1.AppUserID = types.StringPointerValue(employmentTypeSourcesItem.AppUserID)
				employmentTypeSources1.AppUserProfileAttributeKey = types.StringPointerValue(employmentTypeSourcesItem.AppUserProfileAttributeKey)
				employmentTypeSources1.UserAttributeMappingID = types.StringPointerValue(employmentTypeSourcesItem.UserAttributeMappingID)
				employmentTypeSources1.Value = types.StringPointerValue(employmentTypeSourcesItem.Value)
				if employmentTypeSourcesCount+1 > len(r.EmploymentTypeSources) {
					r.EmploymentTypeSources = append(r.EmploymentTypeSources, employmentTypeSources1)
				} else {
					r.EmploymentTypeSources[employmentTypeSourcesCount].AppID = employmentTypeSources1.AppID
					r.EmploymentTypeSources[employmentTypeSourcesCount].AppUserID = employmentTypeSources1.AppUserID
					r.EmploymentTypeSources[employmentTypeSourcesCount].AppUserProfileAttributeKey = employmentTypeSources1.AppUserProfileAttributeKey
					r.EmploymentTypeSources[employmentTypeSourcesCount].UserAttributeMappingID = employmentTypeSources1.UserAttributeMappingID
					r.EmploymentTypeSources[employmentTypeSourcesCount].Value = employmentTypeSources1.Value
				}
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.JobTitle = types.StringPointerValue(resp.JobTitle)
		if resp.JobTitleSources != nil {
			r.JobTitleSources = []tfTypes.UserAttributeMappingSource{}
			if len(r.JobTitleSources) > len(resp.JobTitleSources) {
				r.JobTitleSources = r.JobTitleSources[:len(resp.JobTitleSources)]
			}
			for jobTitleSourcesCount, jobTitleSourcesItem := range resp.JobTitleSources {
				var jobTitleSources1 tfTypes.UserAttributeMappingSource
				jobTitleSources1.AppID = types.StringPointerValue(jobTitleSourcesItem.AppID)
				jobTitleSources1.AppUserID = types.StringPointerValue(jobTitleSourcesItem.AppUserID)
				jobTitleSources1.AppUserProfileAttributeKey = types.StringPointerValue(jobTitleSourcesItem.AppUserProfileAttributeKey)
				jobTitleSources1.UserAttributeMappingID = types.StringPointerValue(jobTitleSourcesItem.UserAttributeMappingID)
				jobTitleSources1.Value = types.StringPointerValue(jobTitleSourcesItem.Value)
				if jobTitleSourcesCount+1 > len(r.JobTitleSources) {
					r.JobTitleSources = append(r.JobTitleSources, jobTitleSources1)
				} else {
					r.JobTitleSources[jobTitleSourcesCount].AppID = jobTitleSources1.AppID
					r.JobTitleSources[jobTitleSourcesCount].AppUserID = jobTitleSources1.AppUserID
					r.JobTitleSources[jobTitleSourcesCount].AppUserProfileAttributeKey = jobTitleSources1.AppUserProfileAttributeKey
					r.JobTitleSources[jobTitleSourcesCount].UserAttributeMappingID = jobTitleSources1.UserAttributeMappingID
					r.JobTitleSources[jobTitleSourcesCount].Value = jobTitleSources1.Value
				}
			}
		}
		if resp.ManagerIds != nil {
			r.ManagerIds = make([]types.String, 0, len(resp.ManagerIds))
			for _, v := range resp.ManagerIds {
				r.ManagerIds = append(r.ManagerIds, types.StringValue(v))
			}
		}
		if resp.ManagerSources != nil {
			r.ManagerSources = []tfTypes.UserAttributeMappingSource{}
			if len(r.ManagerSources) > len(resp.ManagerSources) {
				r.ManagerSources = r.ManagerSources[:len(resp.ManagerSources)]
			}
			for managerSourcesCount, managerSourcesItem := range resp.ManagerSources {
				var managerSources1 tfTypes.UserAttributeMappingSource
				managerSources1.AppID = types.StringPointerValue(managerSourcesItem.AppID)
				managerSources1.AppUserID = types.StringPointerValue(managerSourcesItem.AppUserID)
				managerSources1.AppUserProfileAttributeKey = types.StringPointerValue(managerSourcesItem.AppUserProfileAttributeKey)
				managerSources1.UserAttributeMappingID = types.StringPointerValue(managerSourcesItem.UserAttributeMappingID)
				managerSources1.Value = types.StringPointerValue(managerSourcesItem.Value)
				if managerSourcesCount+1 > len(r.ManagerSources) {
					r.ManagerSources = append(r.ManagerSources, managerSources1)
				} else {
					r.ManagerSources[managerSourcesCount].AppID = managerSources1.AppID
					r.ManagerSources[managerSourcesCount].AppUserID = managerSources1.AppUserID
					r.ManagerSources[managerSourcesCount].AppUserProfileAttributeKey = managerSources1.AppUserProfileAttributeKey
					r.ManagerSources[managerSourcesCount].UserAttributeMappingID = managerSources1.UserAttributeMappingID
					r.ManagerSources[managerSourcesCount].Value = managerSources1.Value
				}
			}
		}
		if resp.Profile == nil {
			r.Profile = nil
		} else {
			r.Profile = &tfTypes.Profile{}
		}
		if resp.RoleIds != nil {
			r.RoleIds = make([]types.String, 0, len(resp.RoleIds))
			for _, v := range resp.RoleIds {
				r.RoleIds = append(r.RoleIds, types.StringValue(v))
			}
		}
		if resp.Status != nil {
			r.Status = types.StringValue(string(*resp.Status))
		} else {
			r.Status = types.StringNull()
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
		r.Username = types.StringPointerValue(resp.Username)
		if resp.Usernames != nil {
			r.Usernames = make([]types.String, 0, len(resp.Usernames))
			for _, v := range resp.Usernames {
				r.Usernames = append(r.Usernames, types.StringValue(v))
			}
		}
		if resp.UsernameSources != nil {
			r.UsernameSources = []tfTypes.UserAttributeMappingSource{}
			if len(r.UsernameSources) > len(resp.UsernameSources) {
				r.UsernameSources = r.UsernameSources[:len(resp.UsernameSources)]
			}
			for usernameSourcesCount, usernameSourcesItem := range resp.UsernameSources {
				var usernameSources1 tfTypes.UserAttributeMappingSource
				usernameSources1.AppID = types.StringPointerValue(usernameSourcesItem.AppID)
				usernameSources1.AppUserID = types.StringPointerValue(usernameSourcesItem.AppUserID)
				usernameSources1.AppUserProfileAttributeKey = types.StringPointerValue(usernameSourcesItem.AppUserProfileAttributeKey)
				usernameSources1.UserAttributeMappingID = types.StringPointerValue(usernameSourcesItem.UserAttributeMappingID)
				usernameSources1.Value = types.StringPointerValue(usernameSourcesItem.Value)
				if usernameSourcesCount+1 > len(r.UsernameSources) {
					r.UsernameSources = append(r.UsernameSources, usernameSources1)
				} else {
					r.UsernameSources[usernameSourcesCount].AppID = usernameSources1.AppID
					r.UsernameSources[usernameSourcesCount].AppUserID = usernameSources1.AppUserID
					r.UsernameSources[usernameSourcesCount].AppUserProfileAttributeKey = usernameSources1.AppUserProfileAttributeKey
					r.UsernameSources[usernameSourcesCount].UserAttributeMappingID = usernameSources1.UserAttributeMappingID
					r.UsernameSources[usernameSourcesCount].Value = usernameSources1.Value
				}
			}
		}
	}
}
