// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppEntitlementsDataSourceModel) ToSharedAppEntitlementSearchServiceSearchRequest(ctx context.Context) (*shared.AppEntitlementSearchServiceSearchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessReviewID := new(string)
	if !r.AccessReviewID.IsUnknown() && !r.AccessReviewID.IsNull() {
		*accessReviewID = r.AccessReviewID.ValueString()
	} else {
		accessReviewID = nil
	}
	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	var appIds []string
	if r.AppIds != nil {
		appIds = make([]string, 0, len(r.AppIds))
		for _, appIdsItem := range r.AppIds {
			appIds = append(appIds, appIdsItem.ValueString())
		}
	}
	var appUserIds []string
	if r.AppUserIds != nil {
		appUserIds = make([]string, 0, len(r.AppUserIds))
		for _, appUserIdsItem := range r.AppUserIds {
			appUserIds = append(appUserIds, appUserIdsItem.ValueString())
		}
	}
	var complianceFrameworkIds []string
	if r.ComplianceFrameworkIds != nil {
		complianceFrameworkIds = make([]string, 0, len(r.ComplianceFrameworkIds))
		for _, complianceFrameworkIdsItem := range r.ComplianceFrameworkIds {
			complianceFrameworkIds = append(complianceFrameworkIds, complianceFrameworkIdsItem.ValueString())
		}
	}
	var excludeAppIds []string
	if r.ExcludeAppIds != nil {
		excludeAppIds = make([]string, 0, len(r.ExcludeAppIds))
		for _, excludeAppIdsItem := range r.ExcludeAppIds {
			excludeAppIds = append(excludeAppIds, excludeAppIdsItem.ValueString())
		}
	}
	var excludeAppUserIds []string
	if r.ExcludeAppUserIds != nil {
		excludeAppUserIds = make([]string, 0, len(r.ExcludeAppUserIds))
		for _, excludeAppUserIdsItem := range r.ExcludeAppUserIds {
			excludeAppUserIds = append(excludeAppUserIds, excludeAppUserIdsItem.ValueString())
		}
	}
	var excludeResourceTypeIds []string
	if r.ExcludeResourceTypeIds != nil {
		excludeResourceTypeIds = make([]string, 0, len(r.ExcludeResourceTypeIds))
		for _, excludeResourceTypeIdsItem := range r.ExcludeResourceTypeIds {
			excludeResourceTypeIds = append(excludeResourceTypeIds, excludeResourceTypeIdsItem.ValueString())
		}
	}
	includeDeleted := new(bool)
	if !r.IncludeDeleted.IsUnknown() && !r.IncludeDeleted.IsNull() {
		*includeDeleted = r.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	isAutomated := new(bool)
	if !r.IsAutomated.IsUnknown() && !r.IsAutomated.IsNull() {
		*isAutomated = r.IsAutomated.ValueBool()
	} else {
		isAutomated = nil
	}
	var membershipType []shared.MembershipType
	if r.MembershipType != nil {
		membershipType = make([]shared.MembershipType, 0, len(r.MembershipType))
		for _, membershipTypeItem := range r.MembershipType {
			membershipType = append(membershipType, shared.MembershipType(membershipTypeItem.ValueString()))
		}
	}
	onlyGetExpiring := new(bool)
	if !r.OnlyGetExpiring.IsUnknown() && !r.OnlyGetExpiring.IsNull() {
		*onlyGetExpiring = r.OnlyGetExpiring.ValueBool()
	} else {
		onlyGetExpiring = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var refs []shared.AppEntitlementRef
	if r.Refs != nil {
		refs = make([]shared.AppEntitlementRef, 0, len(r.Refs))
		for _, refsItem := range r.Refs {
			appID := new(string)
			if !refsItem.AppID.IsUnknown() && !refsItem.AppID.IsNull() {
				*appID = refsItem.AppID.ValueString()
			} else {
				appID = nil
			}
			id := new(string)
			if !refsItem.ID.IsUnknown() && !refsItem.ID.IsNull() {
				*id = refsItem.ID.ValueString()
			} else {
				id = nil
			}
			refs = append(refs, shared.AppEntitlementRef{
				AppID: appID,
				ID:    id,
			})
		}
	}
	var resourceIds []string
	if r.ResourceIds != nil {
		resourceIds = make([]string, 0, len(r.ResourceIds))
		for _, resourceIdsItem := range r.ResourceIds {
			resourceIds = append(resourceIds, resourceIdsItem.ValueString())
		}
	}
	var resourceTraitIds []string
	if r.ResourceTraitIds != nil {
		resourceTraitIds = make([]string, 0, len(r.ResourceTraitIds))
		for _, resourceTraitIdsItem := range r.ResourceTraitIds {
			resourceTraitIds = append(resourceTraitIds, resourceTraitIdsItem.ValueString())
		}
	}
	var resourceTypeIds []string
	if r.ResourceTypeIds != nil {
		resourceTypeIds = make([]string, 0, len(r.ResourceTypeIds))
		for _, resourceTypeIdsItem := range r.ResourceTypeIds {
			resourceTypeIds = append(resourceTypeIds, resourceTypeIdsItem.ValueString())
		}
	}
	var riskLevelIds []string
	if r.RiskLevelIds != nil {
		riskLevelIds = make([]string, 0, len(r.RiskLevelIds))
		for _, riskLevelIdsItem := range r.RiskLevelIds {
			riskLevelIds = append(riskLevelIds, riskLevelIdsItem.ValueString())
		}
	}
	sourceConnectorID := new(string)
	if !r.SourceConnectorID.IsUnknown() && !r.SourceConnectorID.IsNull() {
		*sourceConnectorID = r.SourceConnectorID.ValueString()
	} else {
		sourceConnectorID = nil
	}
	out := shared.AppEntitlementSearchServiceSearchRequest{
		AccessReviewID:         accessReviewID,
		Alias:                  alias,
		AppIds:                 appIds,
		AppUserIds:             appUserIds,
		ComplianceFrameworkIds: complianceFrameworkIds,
		ExcludeAppIds:          excludeAppIds,
		ExcludeAppUserIds:      excludeAppUserIds,
		ExcludeResourceTypeIds: excludeResourceTypeIds,
		IncludeDeleted:         includeDeleted,
		IsAutomated:            isAutomated,
		MembershipType:         membershipType,
		OnlyGetExpiring:        onlyGetExpiring,
		Query:                  query,
		Refs:                   refs,
		ResourceIds:            resourceIds,
		ResourceTraitIds:       resourceTraitIds,
		ResourceTypeIds:        resourceTypeIds,
		RiskLevelIds:           riskLevelIds,
		SourceConnectorID:      sourceConnectorID,
	}

	return &out, diags
}

func (r *AppEntitlementsDataSourceModel) RefreshFromSharedAppEntitlementSearchServiceSearchResponse(ctx context.Context, resp *shared.AppEntitlementSearchServiceSearchResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.List != nil {
			r.List = []tfTypes.AppEntitlementView{}
			if len(r.List) > len(resp.List) {
				r.List = r.List[:len(resp.List)]
			}
			for listCount, listItem := range resp.List {
				var list tfTypes.AppEntitlementView
				if listItem.AppEntitlement == nil {
					list.AppEntitlement = nil
				} else {
					list.AppEntitlement = &tfTypes.AppEntitlement{}
					list.AppEntitlement.Alias = types.StringPointerValue(listItem.AppEntitlement.Alias)
					list.AppEntitlement.AppID = types.StringPointerValue(listItem.AppEntitlement.AppID)
					list.AppEntitlement.AppResourceID = types.StringPointerValue(listItem.AppEntitlement.AppResourceID)
					list.AppEntitlement.AppResourceTypeID = types.StringPointerValue(listItem.AppEntitlement.AppResourceTypeID)
					list.AppEntitlement.CertifyPolicyID = types.StringPointerValue(listItem.AppEntitlement.CertifyPolicyID)
					if listItem.AppEntitlement.ComplianceFrameworkValueIds != nil {
						list.AppEntitlement.ComplianceFrameworkValueIds = make([]types.String, 0, len(listItem.AppEntitlement.ComplianceFrameworkValueIds))
						for _, v := range listItem.AppEntitlement.ComplianceFrameworkValueIds {
							list.AppEntitlement.ComplianceFrameworkValueIds = append(list.AppEntitlement.ComplianceFrameworkValueIds, types.StringValue(v))
						}
					}
					list.AppEntitlement.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.CreatedAt))
					list.AppEntitlement.DefaultValuesApplied = types.BoolPointerValue(listItem.AppEntitlement.DefaultValuesApplied)
					list.AppEntitlement.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.DeletedAt))
					if listItem.AppEntitlement.DeprovisionerPolicy == nil {
						list.AppEntitlement.DeprovisionerPolicy = nil
					} else {
						list.AppEntitlement.DeprovisionerPolicy = &tfTypes.DeprovisionerPolicy{}
						if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision = &tfTypes.ConnectorProvision{}
							if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision == nil {
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision = nil
							} else {
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision = &tfTypes.AccountProvision{}
								if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.Config == nil {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.Config = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.Config = &tfTypes.AccountProvisionConfig{}
								}
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.ConnectorID)
								if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.DoNotSave == nil {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.DoNotSave = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.DoNotSave = &tfTypes.DoNotSave{}
								}
								if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault == nil {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault = &tfTypes.SaveToVault{}
									if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds != nil {
										list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds = make([]types.String, 0, len(listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds))
										for _, v := range listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds {
											list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds = append(list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds, types.StringValue(v))
										}
									}
								}
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SchemaID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.AccountProvision.SchemaID)
							}
							if listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior == nil {
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior = nil
							} else {
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior = &tfTypes.DefaultBehavior{}
								list.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ConnectorProvision.DefaultBehavior.ConnectorID)
							}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.DelegatedProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.DelegatedProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.DelegatedProvision = &tfTypes.DelegatedProvision{}
							list.AppEntitlement.DeprovisionerPolicy.DelegatedProvision.AppID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.DelegatedProvision.AppID)
							list.AppEntitlement.DeprovisionerPolicy.DelegatedProvision.EntitlementID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.DelegatedProvision.EntitlementID)
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision = &tfTypes.ExternalTicketProvision{}
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.AppID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.AppID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.ConnectorID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.Instructions = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicketProvision.Instructions)
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.ManualProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.ManualProvision = &tfTypes.ManualProvision{}
							list.AppEntitlement.DeprovisionerPolicy.ManualProvision.Instructions = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision.Instructions)
							if listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds != nil {
								list.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds = make([]types.String, 0, len(listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds))
								for _, v := range listItem.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds {
									list.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds = append(list.AppEntitlement.DeprovisionerPolicy.ManualProvision.UserIds, types.StringValue(v))
								}
							}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.MultiStep == nil {
							list.AppEntitlement.DeprovisionerPolicy.MultiStep = types.StringNull()
						} else {
							multiStepResult, _ := json.Marshal(listItem.AppEntitlement.DeprovisionerPolicy.MultiStep)
							list.AppEntitlement.DeprovisionerPolicy.MultiStep = types.StringValue(string(multiStepResult))
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.UnconfiguredProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.UnconfiguredProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.UnconfiguredProvision = &tfTypes.UnconfiguredProvision{}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.WebhookProvision == nil {
							list.AppEntitlement.DeprovisionerPolicy.WebhookProvision = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.WebhookProvision = &tfTypes.WebhookProvision{}
							list.AppEntitlement.DeprovisionerPolicy.WebhookProvision.WebhookID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.WebhookProvision.WebhookID)
						}
					}
					list.AppEntitlement.Description = types.StringPointerValue(listItem.AppEntitlement.Description)
					list.AppEntitlement.DisplayName = types.StringPointerValue(listItem.AppEntitlement.DisplayName)
					list.AppEntitlement.DurationGrant = types.StringPointerValue(listItem.AppEntitlement.DurationGrant)
					if listItem.AppEntitlement.DurationUnset == nil {
						list.AppEntitlement.DurationUnset = nil
					} else {
						list.AppEntitlement.DurationUnset = &tfTypes.AppEntitlementDurationUnset{}
					}
					list.AppEntitlement.EmergencyGrantEnabled = types.BoolPointerValue(listItem.AppEntitlement.EmergencyGrantEnabled)
					list.AppEntitlement.EmergencyGrantPolicyID = types.StringPointerValue(listItem.AppEntitlement.EmergencyGrantPolicyID)
					list.AppEntitlement.GrantCount = types.StringPointerValue(listItem.AppEntitlement.GrantCount)
					list.AppEntitlement.GrantPolicyID = types.StringPointerValue(listItem.AppEntitlement.GrantPolicyID)
					list.AppEntitlement.ID = types.StringPointerValue(listItem.AppEntitlement.ID)
					list.AppEntitlement.IsAutomationEnabled = types.BoolPointerValue(listItem.AppEntitlement.IsAutomationEnabled)
					list.AppEntitlement.IsManuallyManaged = types.BoolPointerValue(listItem.AppEntitlement.IsManuallyManaged)
					list.AppEntitlement.MatchBatonID = types.StringPointerValue(listItem.AppEntitlement.MatchBatonID)
					list.AppEntitlement.OverrideAccessRequestsDefaults = types.BoolPointerValue(listItem.AppEntitlement.OverrideAccessRequestsDefaults)
					if listItem.AppEntitlement.ProvisionPolicy == nil {
						list.AppEntitlement.ProvisionPolicy = nil
					} else {
						list.AppEntitlement.ProvisionPolicy = &tfTypes.ProvisionPolicy{}
						if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision == nil {
							list.AppEntitlement.ProvisionPolicy.ConnectorProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.ConnectorProvision = &tfTypes.ConnectorProvision{}
							if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision == nil {
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision = nil
							} else {
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision = &tfTypes.AccountProvision{}
								if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.Config == nil {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.Config = nil
								} else {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.Config = &tfTypes.AccountProvisionConfig{}
								}
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.ConnectorID)
								if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.DoNotSave == nil {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.DoNotSave = nil
								} else {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.DoNotSave = &tfTypes.DoNotSave{}
								}
								if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault == nil {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault = nil
								} else {
									list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault = &tfTypes.SaveToVault{}
									if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds != nil {
										list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds = make([]types.String, 0, len(listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds))
										for _, v := range listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds {
											list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds = append(list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SaveToVault.VaultIds, types.StringValue(v))
										}
									}
								}
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.AccountProvision.SchemaID)
							}
							if listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior == nil {
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior = nil
							} else {
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior = &tfTypes.DefaultBehavior{}
								list.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ConnectorProvision.DefaultBehavior.ConnectorID)
							}
						}
						if listItem.AppEntitlement.ProvisionPolicy.DelegatedProvision == nil {
							list.AppEntitlement.ProvisionPolicy.DelegatedProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.DelegatedProvision = &tfTypes.DelegatedProvision{}
							list.AppEntitlement.ProvisionPolicy.DelegatedProvision.AppID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.DelegatedProvision.AppID)
							list.AppEntitlement.ProvisionPolicy.DelegatedProvision.EntitlementID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.DelegatedProvision.EntitlementID)
						}
						if listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision == nil {
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision = &tfTypes.ExternalTicketProvision{}
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.AppID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.AppID)
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.ConnectorID)
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.ExternalTicketProvisionerConfigID)
							list.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.Instructions = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ExternalTicketProvision.Instructions)
						}
						if listItem.AppEntitlement.ProvisionPolicy.ManualProvision == nil {
							list.AppEntitlement.ProvisionPolicy.ManualProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.ManualProvision = &tfTypes.ManualProvision{}
							list.AppEntitlement.ProvisionPolicy.ManualProvision.Instructions = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.ManualProvision.Instructions)
							if listItem.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds != nil {
								list.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds = make([]types.String, 0, len(listItem.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds))
								for _, v := range listItem.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds {
									list.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds = append(list.AppEntitlement.ProvisionPolicy.ManualProvision.UserIds, types.StringValue(v))
								}
							}
						}
						if listItem.AppEntitlement.ProvisionPolicy.MultiStep == nil {
							list.AppEntitlement.ProvisionPolicy.MultiStep = types.StringNull()
						} else {
							multiStepResult1, _ := json.Marshal(listItem.AppEntitlement.ProvisionPolicy.MultiStep)
							list.AppEntitlement.ProvisionPolicy.MultiStep = types.StringValue(string(multiStepResult1))
						}
						if listItem.AppEntitlement.ProvisionPolicy.UnconfiguredProvision == nil {
							list.AppEntitlement.ProvisionPolicy.UnconfiguredProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.UnconfiguredProvision = &tfTypes.UnconfiguredProvision{}
						}
						if listItem.AppEntitlement.ProvisionPolicy.WebhookProvision == nil {
							list.AppEntitlement.ProvisionPolicy.WebhookProvision = nil
						} else {
							list.AppEntitlement.ProvisionPolicy.WebhookProvision = &tfTypes.WebhookProvision{}
							list.AppEntitlement.ProvisionPolicy.WebhookProvision.WebhookID = types.StringPointerValue(listItem.AppEntitlement.ProvisionPolicy.WebhookProvision.WebhookID)
						}
					}
					if listItem.AppEntitlement.Purpose != nil {
						list.AppEntitlement.Purpose = types.StringValue(string(*listItem.AppEntitlement.Purpose))
					} else {
						list.AppEntitlement.Purpose = types.StringNull()
					}
					list.AppEntitlement.RevokePolicyID = types.StringPointerValue(listItem.AppEntitlement.RevokePolicyID)
					list.AppEntitlement.RiskLevelValueID = types.StringPointerValue(listItem.AppEntitlement.RiskLevelValueID)
					list.AppEntitlement.Slug = types.StringPointerValue(listItem.AppEntitlement.Slug)
					if len(listItem.AppEntitlement.SourceConnectorIds) > 0 {
						list.AppEntitlement.SourceConnectorIds = make(map[string]types.String, len(listItem.AppEntitlement.SourceConnectorIds))
						for key, value := range listItem.AppEntitlement.SourceConnectorIds {
							list.AppEntitlement.SourceConnectorIds[key] = types.StringValue(value)
						}
					}
					list.AppEntitlement.SystemBuiltin = types.BoolPointerValue(listItem.AppEntitlement.SystemBuiltin)
					list.AppEntitlement.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.UpdatedAt))
				}
				if listCount+1 > len(r.List) {
					r.List = append(r.List, list)
				} else {
					r.List[listCount].AppEntitlement = list.AppEntitlement
				}
			}
		}
		r.NextPageToken = types.StringPointerValue(resp.NextPageToken)
	}

	return diags
}
