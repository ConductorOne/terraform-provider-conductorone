// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppEntitlementsDataSourceModel) RefreshFromSharedAppEntitlementSearchServiceSearchResponse(ctx context.Context, resp *shared.AppEntitlementSearchServiceSearchResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.List != nil {
			if r.List == nil {
				r.List = []tfTypes.AppEntitlementView{}
			}

			for _, listItem := range resp.List {
				var list tfTypes.AppEntitlementView

				if listItem.AppEntitlement == nil {
					list.AppEntitlement = nil
				} else {
					list.AppEntitlement = &tfTypes.AppEntitlement{}
					list.AppEntitlement.Alias = types.StringPointerValue(listItem.AppEntitlement.Alias)
					list.AppEntitlement.AppID = types.StringPointerValue(listItem.AppEntitlement.AppID)
					list.AppEntitlement.AppResourceID = types.StringPointerValue(listItem.AppEntitlement.AppResourceID)
					list.AppEntitlement.AppResourceTypeID = types.StringPointerValue(listItem.AppEntitlement.AppResourceTypeID)
					list.AppEntitlement.CertifyPolicyID = types.StringPointerValue(listItem.AppEntitlement.CertifyPolicyID)
					if listItem.AppEntitlement.ComplianceFrameworkValueIds != nil {
						if list.AppEntitlement.ComplianceFrameworkValueIds == nil {
							list.AppEntitlement.ComplianceFrameworkValueIds = make([]types.String, 0, len(listItem.AppEntitlement.ComplianceFrameworkValueIds))
						}
						for _, v := range listItem.AppEntitlement.ComplianceFrameworkValueIds {
							list.AppEntitlement.ComplianceFrameworkValueIds = append(list.AppEntitlement.ComplianceFrameworkValueIds, types.StringValue(v))
						}
					}
					list.AppEntitlement.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.CreatedAt))
					list.AppEntitlement.DefaultValuesApplied = types.BoolPointerValue(listItem.AppEntitlement.DefaultValuesApplied)
					list.AppEntitlement.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.DeletedAt))
					if listItem.AppEntitlement.DeprovisionerPolicy == nil {
						list.AppEntitlement.DeprovisionerPolicy = nil
					} else {
						list.AppEntitlement.DeprovisionerPolicy = &tfTypes.DeprovisionerPolicy{}
						if listItem.AppEntitlement.DeprovisionerPolicy.Connector == nil {
							list.AppEntitlement.DeprovisionerPolicy.Connector = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.Connector = &tfTypes.ConnectorProvision{}
							if listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account == nil {
								list.AppEntitlement.DeprovisionerPolicy.Connector.Account = nil
							} else {
								list.AppEntitlement.DeprovisionerPolicy.Connector.Account = &tfTypes.AccountProvision{}
								if listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account.Config == nil {
									list.AppEntitlement.DeprovisionerPolicy.Connector.Account.Config = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.Connector.Account.Config = &tfTypes.Config{}
								}
								list.AppEntitlement.DeprovisionerPolicy.Connector.Account.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account.ConnectorID)
								if listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account.DoNotSave == nil {
									list.AppEntitlement.DeprovisionerPolicy.Connector.Account.DoNotSave = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.Connector.Account.DoNotSave = &tfTypes.DoNotSave{}
								}
								if listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault == nil {
									list.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault = nil
								} else {
									list.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault = &tfTypes.SaveToVault{}
									if listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds != nil {
										if list.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds == nil {
											list.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds = make([]types.String, 0, len(listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds))
										}
										for _, v := range listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds {
											list.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds = append(list.AppEntitlement.DeprovisionerPolicy.Connector.Account.SaveToVault.VaultIds, types.StringValue(v))
										}
									}
								}
								list.AppEntitlement.DeprovisionerPolicy.Connector.Account.SchemaID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.Connector.Account.SchemaID)
							}
							if listItem.AppEntitlement.DeprovisionerPolicy.Connector.DefaultBehavior == nil {
								list.AppEntitlement.DeprovisionerPolicy.Connector.DefaultBehavior = nil
							} else {
								list.AppEntitlement.DeprovisionerPolicy.Connector.DefaultBehavior = &tfTypes.DefaultBehavior{}
								list.AppEntitlement.DeprovisionerPolicy.Connector.DefaultBehavior.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.Connector.DefaultBehavior.ConnectorID)
							}
							if listItem.AppEntitlement.DeprovisionerPolicy.Connector.DeleteAccount == nil {
								list.AppEntitlement.DeprovisionerPolicy.Connector.DeleteAccount = nil
							} else {
								list.AppEntitlement.DeprovisionerPolicy.Connector.DeleteAccount = &tfTypes.DeleteAccount{}
								list.AppEntitlement.DeprovisionerPolicy.Connector.DeleteAccount.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.Connector.DeleteAccount.ConnectorID)
							}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.Delegated == nil {
							list.AppEntitlement.DeprovisionerPolicy.Delegated = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.Delegated = &tfTypes.DelegatedProvision{}
							list.AppEntitlement.DeprovisionerPolicy.Delegated.AppID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.Delegated.AppID)
							list.AppEntitlement.DeprovisionerPolicy.Delegated.EntitlementID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.Delegated.EntitlementID)
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicket == nil {
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicket = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicket = &tfTypes.ExternalTicketProvision{}
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicket.AppID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicket.AppID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicket.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicket.ConnectorID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicket.ExternalTicketProvisionerConfigID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicket.ExternalTicketProvisionerConfigID)
							list.AppEntitlement.DeprovisionerPolicy.ExternalTicket.Instructions = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.ExternalTicket.Instructions)
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.Manual == nil {
							list.AppEntitlement.DeprovisionerPolicy.Manual = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.Manual = &tfTypes.ManualProvision{}
							list.AppEntitlement.DeprovisionerPolicy.Manual.Instructions = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.Manual.Instructions)
							if listItem.AppEntitlement.DeprovisionerPolicy.Manual.UserIds != nil {
								if list.AppEntitlement.DeprovisionerPolicy.Manual.UserIds == nil {
									list.AppEntitlement.DeprovisionerPolicy.Manual.UserIds = make([]types.String, 0, len(listItem.AppEntitlement.DeprovisionerPolicy.Manual.UserIds))
								}
								for _, v := range listItem.AppEntitlement.DeprovisionerPolicy.Manual.UserIds {
									list.AppEntitlement.DeprovisionerPolicy.Manual.UserIds = append(list.AppEntitlement.DeprovisionerPolicy.Manual.UserIds, types.StringValue(v))
								}
							}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.MultiStep == nil {
							list.AppEntitlement.DeprovisionerPolicy.MultiStep = jsontypes.NewNormalizedNull()
						} else {
							multiStepResult, _ := json.Marshal(listItem.AppEntitlement.DeprovisionerPolicy.MultiStep)
							list.AppEntitlement.DeprovisionerPolicy.MultiStep = jsontypes.NewNormalizedValue(string(multiStepResult))
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.Unconfigured == nil {
							list.AppEntitlement.DeprovisionerPolicy.Unconfigured = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.Unconfigured = &tfTypes.UnconfiguredProvision{}
						}
						if listItem.AppEntitlement.DeprovisionerPolicy.Webhook == nil {
							list.AppEntitlement.DeprovisionerPolicy.Webhook = nil
						} else {
							list.AppEntitlement.DeprovisionerPolicy.Webhook = &tfTypes.WebhookProvision{}
							list.AppEntitlement.DeprovisionerPolicy.Webhook.WebhookID = types.StringPointerValue(listItem.AppEntitlement.DeprovisionerPolicy.Webhook.WebhookID)
						}
					}
					list.AppEntitlement.Description = types.StringPointerValue(listItem.AppEntitlement.Description)
					list.AppEntitlement.DisplayName = types.StringPointerValue(listItem.AppEntitlement.DisplayName)
					list.AppEntitlement.DurationGrant = types.StringPointerValue(listItem.AppEntitlement.DurationGrant)
					if listItem.AppEntitlement.DurationUnset == nil {
						list.AppEntitlement.DurationUnset = nil
					} else {
						list.AppEntitlement.DurationUnset = &tfTypes.AppEntitlementDurationUnset{}
					}
					list.AppEntitlement.EmergencyGrantEnabled = types.BoolPointerValue(listItem.AppEntitlement.EmergencyGrantEnabled)
					list.AppEntitlement.EmergencyGrantPolicyID = types.StringPointerValue(listItem.AppEntitlement.EmergencyGrantPolicyID)
					list.AppEntitlement.GrantCount = types.StringPointerValue(listItem.AppEntitlement.GrantCount)
					list.AppEntitlement.GrantPolicyID = types.StringPointerValue(listItem.AppEntitlement.GrantPolicyID)
					list.AppEntitlement.ID = types.StringPointerValue(listItem.AppEntitlement.ID)
					list.AppEntitlement.IsAutomationEnabled = types.BoolPointerValue(listItem.AppEntitlement.IsAutomationEnabled)
					list.AppEntitlement.IsManuallyManaged = types.BoolPointerValue(listItem.AppEntitlement.IsManuallyManaged)
					list.AppEntitlement.MatchBatonID = types.StringPointerValue(listItem.AppEntitlement.MatchBatonID)
					list.AppEntitlement.OverrideAccessRequestsDefaults = types.BoolPointerValue(listItem.AppEntitlement.OverrideAccessRequestsDefaults)
					if listItem.AppEntitlement.ProvisionerPolicy == nil {
						list.AppEntitlement.ProvisionerPolicy = nil
					} else {
						list.AppEntitlement.ProvisionerPolicy = &tfTypes.ProvisionPolicy{}
						if listItem.AppEntitlement.ProvisionerPolicy.Connector == nil {
							list.AppEntitlement.ProvisionerPolicy.Connector = nil
						} else {
							list.AppEntitlement.ProvisionerPolicy.Connector = &tfTypes.ConnectorProvision{}
							if listItem.AppEntitlement.ProvisionerPolicy.Connector.Account == nil {
								list.AppEntitlement.ProvisionerPolicy.Connector.Account = nil
							} else {
								list.AppEntitlement.ProvisionerPolicy.Connector.Account = &tfTypes.AccountProvision{}
								if listItem.AppEntitlement.ProvisionerPolicy.Connector.Account.Config == nil {
									list.AppEntitlement.ProvisionerPolicy.Connector.Account.Config = nil
								} else {
									list.AppEntitlement.ProvisionerPolicy.Connector.Account.Config = &tfTypes.Config{}
								}
								list.AppEntitlement.ProvisionerPolicy.Connector.Account.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.Connector.Account.ConnectorID)
								if listItem.AppEntitlement.ProvisionerPolicy.Connector.Account.DoNotSave == nil {
									list.AppEntitlement.ProvisionerPolicy.Connector.Account.DoNotSave = nil
								} else {
									list.AppEntitlement.ProvisionerPolicy.Connector.Account.DoNotSave = &tfTypes.DoNotSave{}
								}
								if listItem.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault == nil {
									list.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault = nil
								} else {
									list.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault = &tfTypes.SaveToVault{}
									if listItem.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds != nil {
										if list.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds == nil {
											list.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds = make([]types.String, 0, len(listItem.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds))
										}
										for _, v := range listItem.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds {
											list.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds = append(list.AppEntitlement.ProvisionerPolicy.Connector.Account.SaveToVault.VaultIds, types.StringValue(v))
										}
									}
								}
								list.AppEntitlement.ProvisionerPolicy.Connector.Account.SchemaID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.Connector.Account.SchemaID)
							}
							if listItem.AppEntitlement.ProvisionerPolicy.Connector.DefaultBehavior == nil {
								list.AppEntitlement.ProvisionerPolicy.Connector.DefaultBehavior = nil
							} else {
								list.AppEntitlement.ProvisionerPolicy.Connector.DefaultBehavior = &tfTypes.DefaultBehavior{}
								list.AppEntitlement.ProvisionerPolicy.Connector.DefaultBehavior.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.Connector.DefaultBehavior.ConnectorID)
							}
							if listItem.AppEntitlement.ProvisionerPolicy.Connector.DeleteAccount == nil {
								list.AppEntitlement.ProvisionerPolicy.Connector.DeleteAccount = nil
							} else {
								list.AppEntitlement.ProvisionerPolicy.Connector.DeleteAccount = &tfTypes.DeleteAccount{}
								list.AppEntitlement.ProvisionerPolicy.Connector.DeleteAccount.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.Connector.DeleteAccount.ConnectorID)
							}
						}
						if listItem.AppEntitlement.ProvisionerPolicy.Delegated == nil {
							list.AppEntitlement.ProvisionerPolicy.Delegated = nil
						} else {
							list.AppEntitlement.ProvisionerPolicy.Delegated = &tfTypes.DelegatedProvision{}
							list.AppEntitlement.ProvisionerPolicy.Delegated.AppID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.Delegated.AppID)
							list.AppEntitlement.ProvisionerPolicy.Delegated.EntitlementID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.Delegated.EntitlementID)
						}
						if listItem.AppEntitlement.ProvisionerPolicy.ExternalTicket == nil {
							list.AppEntitlement.ProvisionerPolicy.ExternalTicket = nil
						} else {
							list.AppEntitlement.ProvisionerPolicy.ExternalTicket = &tfTypes.ExternalTicketProvision{}
							list.AppEntitlement.ProvisionerPolicy.ExternalTicket.AppID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.ExternalTicket.AppID)
							list.AppEntitlement.ProvisionerPolicy.ExternalTicket.ConnectorID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.ExternalTicket.ConnectorID)
							list.AppEntitlement.ProvisionerPolicy.ExternalTicket.ExternalTicketProvisionerConfigID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.ExternalTicket.ExternalTicketProvisionerConfigID)
							list.AppEntitlement.ProvisionerPolicy.ExternalTicket.Instructions = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.ExternalTicket.Instructions)
						}
						if listItem.AppEntitlement.ProvisionerPolicy.Manual == nil {
							list.AppEntitlement.ProvisionerPolicy.Manual = nil
						} else {
							list.AppEntitlement.ProvisionerPolicy.Manual = &tfTypes.ManualProvision{}
							list.AppEntitlement.ProvisionerPolicy.Manual.Instructions = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.Manual.Instructions)
							if listItem.AppEntitlement.ProvisionerPolicy.Manual.UserIds != nil {
								if list.AppEntitlement.ProvisionerPolicy.Manual.UserIds == nil {
									list.AppEntitlement.ProvisionerPolicy.Manual.UserIds = make([]types.String, 0, len(listItem.AppEntitlement.ProvisionerPolicy.Manual.UserIds))
								}
								for _, v := range listItem.AppEntitlement.ProvisionerPolicy.Manual.UserIds {
									list.AppEntitlement.ProvisionerPolicy.Manual.UserIds = append(list.AppEntitlement.ProvisionerPolicy.Manual.UserIds, types.StringValue(v))
								}
							}
						}
						if listItem.AppEntitlement.ProvisionerPolicy.MultiStep == nil {
							list.AppEntitlement.ProvisionerPolicy.MultiStep = jsontypes.NewNormalizedNull()
						} else {
							multiStepResult1, _ := json.Marshal(listItem.AppEntitlement.ProvisionerPolicy.MultiStep)
							list.AppEntitlement.ProvisionerPolicy.MultiStep = jsontypes.NewNormalizedValue(string(multiStepResult1))
						}
						if listItem.AppEntitlement.ProvisionerPolicy.Unconfigured == nil {
							list.AppEntitlement.ProvisionerPolicy.Unconfigured = nil
						} else {
							list.AppEntitlement.ProvisionerPolicy.Unconfigured = &tfTypes.UnconfiguredProvision{}
						}
						if listItem.AppEntitlement.ProvisionerPolicy.Webhook == nil {
							list.AppEntitlement.ProvisionerPolicy.Webhook = nil
						} else {
							list.AppEntitlement.ProvisionerPolicy.Webhook = &tfTypes.WebhookProvision{}
							list.AppEntitlement.ProvisionerPolicy.Webhook.WebhookID = types.StringPointerValue(listItem.AppEntitlement.ProvisionerPolicy.Webhook.WebhookID)
						}
					}
					if listItem.AppEntitlement.Purpose != nil {
						list.AppEntitlement.Purpose = types.StringValue(string(*listItem.AppEntitlement.Purpose))
					} else {
						list.AppEntitlement.Purpose = types.StringNull()
					}
					list.AppEntitlement.RequestSchemaID = types.StringPointerValue(listItem.AppEntitlement.RequestSchemaID)
					list.AppEntitlement.RevokePolicyID = types.StringPointerValue(listItem.AppEntitlement.RevokePolicyID)
					list.AppEntitlement.RiskLevelValueID = types.StringPointerValue(listItem.AppEntitlement.RiskLevelValueID)
					list.AppEntitlement.Slug = types.StringPointerValue(listItem.AppEntitlement.Slug)
					if listItem.AppEntitlement.SourceConnectorIds != nil {
						list.AppEntitlement.SourceConnectorIds = make(map[string]types.String, len(listItem.AppEntitlement.SourceConnectorIds))
						for key, value := range listItem.AppEntitlement.SourceConnectorIds {
							list.AppEntitlement.SourceConnectorIds[key] = types.StringValue(value)
						}
					}
					list.AppEntitlement.SystemBuiltin = types.BoolPointerValue(listItem.AppEntitlement.SystemBuiltin)
					list.AppEntitlement.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.AppEntitlement.UpdatedAt))
				}

				r.List = append(r.List, list)
			}
		}
		r.NextPageToken = types.StringPointerValue(resp.NextPageToken)
	}

	return diags
}

func (r *AppEntitlementsDataSourceModel) ToSharedAppEntitlementSearchServiceSearchRequest(ctx context.Context) (*shared.AppEntitlementSearchServiceSearchRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessReviewID := new(string)
	if !r.AccessReviewID.IsUnknown() && !r.AccessReviewID.IsNull() {
		*accessReviewID = r.AccessReviewID.ValueString()
	} else {
		accessReviewID = nil
	}
	alias := new(string)
	if !r.Alias.IsUnknown() && !r.Alias.IsNull() {
		*alias = r.Alias.ValueString()
	} else {
		alias = nil
	}
	var appIds []string
	if r.AppIds != nil {
		appIds = make([]string, 0, len(r.AppIds))
		for _, appIdsItem := range r.AppIds {
			appIds = append(appIds, appIdsItem.ValueString())
		}
	}
	var appUserIds []string
	if r.AppUserIds != nil {
		appUserIds = make([]string, 0, len(r.AppUserIds))
		for _, appUserIdsItem := range r.AppUserIds {
			appUserIds = append(appUserIds, appUserIdsItem.ValueString())
		}
	}
	var complianceFrameworkIds []string
	if r.ComplianceFrameworkIds != nil {
		complianceFrameworkIds = make([]string, 0, len(r.ComplianceFrameworkIds))
		for _, complianceFrameworkIdsItem := range r.ComplianceFrameworkIds {
			complianceFrameworkIds = append(complianceFrameworkIds, complianceFrameworkIdsItem.ValueString())
		}
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var excludeAppIds []string
	if r.ExcludeAppIds != nil {
		excludeAppIds = make([]string, 0, len(r.ExcludeAppIds))
		for _, excludeAppIdsItem := range r.ExcludeAppIds {
			excludeAppIds = append(excludeAppIds, excludeAppIdsItem.ValueString())
		}
	}
	var excludeAppUserIds []string
	if r.ExcludeAppUserIds != nil {
		excludeAppUserIds = make([]string, 0, len(r.ExcludeAppUserIds))
		for _, excludeAppUserIdsItem := range r.ExcludeAppUserIds {
			excludeAppUserIds = append(excludeAppUserIds, excludeAppUserIdsItem.ValueString())
		}
	}
	excludeImmutable := new(bool)
	if !r.ExcludeImmutable.IsUnknown() && !r.ExcludeImmutable.IsNull() {
		*excludeImmutable = r.ExcludeImmutable.ValueBool()
	} else {
		excludeImmutable = nil
	}
	var excludeResourceTypeIds []string
	if r.ExcludeResourceTypeIds != nil {
		excludeResourceTypeIds = make([]string, 0, len(r.ExcludeResourceTypeIds))
		for _, excludeResourceTypeIdsItem := range r.ExcludeResourceTypeIds {
			excludeResourceTypeIds = append(excludeResourceTypeIds, excludeResourceTypeIdsItem.ValueString())
		}
	}
	var excludedEntitlementRefs []shared.AppEntitlementRef
	if r.ExcludedEntitlementRefs != nil {
		excludedEntitlementRefs = make([]shared.AppEntitlementRef, 0, len(r.ExcludedEntitlementRefs))
		for _, excludedEntitlementRefsItem := range r.ExcludedEntitlementRefs {
			appID := new(string)
			if !excludedEntitlementRefsItem.AppID.IsUnknown() && !excludedEntitlementRefsItem.AppID.IsNull() {
				*appID = excludedEntitlementRefsItem.AppID.ValueString()
			} else {
				appID = nil
			}
			id := new(string)
			if !excludedEntitlementRefsItem.ID.IsUnknown() && !excludedEntitlementRefsItem.ID.IsNull() {
				*id = excludedEntitlementRefsItem.ID.ValueString()
			} else {
				id = nil
			}
			excludedEntitlementRefs = append(excludedEntitlementRefs, shared.AppEntitlementRef{
				AppID: appID,
				ID:    id,
			})
		}
	}
	includeDeleted := new(bool)
	if !r.IncludeDeleted.IsUnknown() && !r.IncludeDeleted.IsNull() {
		*includeDeleted = r.IncludeDeleted.ValueBool()
	} else {
		includeDeleted = nil
	}
	isAutomated := new(bool)
	if !r.IsAutomated.IsUnknown() && !r.IsAutomated.IsNull() {
		*isAutomated = r.IsAutomated.ValueBool()
	} else {
		isAutomated = nil
	}
	var membershipType []shared.MembershipType
	if r.MembershipType != nil {
		membershipType = make([]shared.MembershipType, 0, len(r.MembershipType))
		for _, membershipTypeItem := range r.MembershipType {
			membershipType = append(membershipType, shared.MembershipType(membershipTypeItem.ValueString()))
		}
	}
	onlyGetExpiring := new(bool)
	if !r.OnlyGetExpiring.IsUnknown() && !r.OnlyGetExpiring.IsNull() {
		*onlyGetExpiring = r.OnlyGetExpiring.ValueBool()
	} else {
		onlyGetExpiring = nil
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	var policyRefs []shared.PolicyRef
	if r.PolicyRefs != nil {
		policyRefs = make([]shared.PolicyRef, 0, len(r.PolicyRefs))
		for _, policyRefsItem := range r.PolicyRefs {
			id1 := new(string)
			if !policyRefsItem.ID.IsUnknown() && !policyRefsItem.ID.IsNull() {
				*id1 = policyRefsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			policyRefs = append(policyRefs, shared.PolicyRef{
				ID: id1,
			})
		}
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var refs []shared.AppEntitlementRef
	if r.Refs != nil {
		refs = make([]shared.AppEntitlementRef, 0, len(r.Refs))
		for _, refsItem := range r.Refs {
			appId1 := new(string)
			if !refsItem.AppID.IsUnknown() && !refsItem.AppID.IsNull() {
				*appId1 = refsItem.AppID.ValueString()
			} else {
				appId1 = nil
			}
			id2 := new(string)
			if !refsItem.ID.IsUnknown() && !refsItem.ID.IsNull() {
				*id2 = refsItem.ID.ValueString()
			} else {
				id2 = nil
			}
			refs = append(refs, shared.AppEntitlementRef{
				AppID: appId1,
				ID:    id2,
			})
		}
	}
	var resourceIds []string
	if r.ResourceIds != nil {
		resourceIds = make([]string, 0, len(r.ResourceIds))
		for _, resourceIdsItem := range r.ResourceIds {
			resourceIds = append(resourceIds, resourceIdsItem.ValueString())
		}
	}
	var resourceTraitIds []string
	if r.ResourceTraitIds != nil {
		resourceTraitIds = make([]string, 0, len(r.ResourceTraitIds))
		for _, resourceTraitIdsItem := range r.ResourceTraitIds {
			resourceTraitIds = append(resourceTraitIds, resourceTraitIdsItem.ValueString())
		}
	}
	var resourceTypeIds []string
	if r.ResourceTypeIds != nil {
		resourceTypeIds = make([]string, 0, len(r.ResourceTypeIds))
		for _, resourceTypeIdsItem := range r.ResourceTypeIds {
			resourceTypeIds = append(resourceTypeIds, resourceTypeIdsItem.ValueString())
		}
	}
	var riskLevelIds []string
	if r.RiskLevelIds != nil {
		riskLevelIds = make([]string, 0, len(r.RiskLevelIds))
		for _, riskLevelIdsItem := range r.RiskLevelIds {
			riskLevelIds = append(riskLevelIds, riskLevelIdsItem.ValueString())
		}
	}
	sourceConnectorID := new(string)
	if !r.SourceConnectorID.IsUnknown() && !r.SourceConnectorID.IsNull() {
		*sourceConnectorID = r.SourceConnectorID.ValueString()
	} else {
		sourceConnectorID = nil
	}
	out := shared.AppEntitlementSearchServiceSearchRequest{
		AccessReviewID:          accessReviewID,
		Alias:                   alias,
		AppIds:                  appIds,
		AppUserIds:              appUserIds,
		ComplianceFrameworkIds:  complianceFrameworkIds,
		DisplayName:             displayName,
		ExcludeAppIds:           excludeAppIds,
		ExcludeAppUserIds:       excludeAppUserIds,
		ExcludeImmutable:        excludeImmutable,
		ExcludeResourceTypeIds:  excludeResourceTypeIds,
		ExcludedEntitlementRefs: excludedEntitlementRefs,
		IncludeDeleted:          includeDeleted,
		IsAutomated:             isAutomated,
		MembershipType:          membershipType,
		OnlyGetExpiring:         onlyGetExpiring,
		PageSize:                pageSize,
		PolicyRefs:              policyRefs,
		Query:                   query,
		Refs:                    refs,
		ResourceIds:             resourceIds,
		ResourceTraitIds:        resourceTraitIds,
		ResourceTypeIds:         resourceTypeIds,
		RiskLevelIds:            riskLevelIds,
		SourceConnectorID:       sourceConnectorID,
	}

	return &out, diags
}
