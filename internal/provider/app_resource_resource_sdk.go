// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AppResourceResourceModel) ToSharedCreateManuallyManagedAppResourceRequest() *shared.CreateManuallyManagedAppResourceRequest {
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var displayName string
	displayName = r.DisplayName.ValueString()

	out := shared.CreateManuallyManagedAppResourceRequest{
		Description: description,
		DisplayName: displayName,
	}
	return &out
}

func (r *AppResourceResourceModel) RefreshFromSharedAppResource(ctx context.Context, resp *shared.AppResource) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppID = types.StringPointerValue(resp.AppID)
		r.AppResourceTypeID = types.StringPointerValue(resp.AppResourceTypeID)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.GrantCount = types.StringPointerValue(resp.GrantCount)
		r.ID = types.StringPointerValue(resp.ID)
		r.ParentAppResourceID = types.StringPointerValue(resp.ParentAppResourceID)
		r.ParentAppResourceTypeID = types.StringPointerValue(resp.ParentAppResourceTypeID)
		if resp.SecretTrait == nil {
			r.SecretTrait = nil
		} else {
			r.SecretTrait = &tfTypes.SecretTrait{}
			r.SecretTrait.IdentityAppUserID = types.StringPointerValue(resp.SecretTrait.IdentityAppUserID)
			r.SecretTrait.LastUsedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SecretTrait.LastUsedAt))
			r.SecretTrait.SecretCreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SecretTrait.SecretCreatedAt))
			r.SecretTrait.SecretExpiresAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.SecretTrait.SecretExpiresAt))
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *AppResourceResourceModel) ToSharedAppResourceInput() *shared.AppResourceInput {
	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appResourceTypeID := new(string)
	if !r.AppResourceTypeID.IsUnknown() && !r.AppResourceTypeID.IsNull() {
		*appResourceTypeID = r.AppResourceTypeID.ValueString()
	} else {
		appResourceTypeID = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	grantCount := new(string)
	if !r.GrantCount.IsUnknown() && !r.GrantCount.IsNull() {
		*grantCount = r.GrantCount.ValueString()
	} else {
		grantCount = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	parentAppResourceID := new(string)
	if !r.ParentAppResourceID.IsUnknown() && !r.ParentAppResourceID.IsNull() {
		*parentAppResourceID = r.ParentAppResourceID.ValueString()
	} else {
		parentAppResourceID = nil
	}
	parentAppResourceTypeID := new(string)
	if !r.ParentAppResourceTypeID.IsUnknown() && !r.ParentAppResourceTypeID.IsNull() {
		*parentAppResourceTypeID = r.ParentAppResourceTypeID.ValueString()
	} else {
		parentAppResourceTypeID = nil
	}
	var secretTrait *shared.SecretTrait
	if r.SecretTrait != nil {
		identityAppUserID := new(string)
		if !r.SecretTrait.IdentityAppUserID.IsUnknown() && !r.SecretTrait.IdentityAppUserID.IsNull() {
			*identityAppUserID = r.SecretTrait.IdentityAppUserID.ValueString()
		} else {
			identityAppUserID = nil
		}
		lastUsedAt := new(time.Time)
		if !r.SecretTrait.LastUsedAt.IsUnknown() && !r.SecretTrait.LastUsedAt.IsNull() {
			*lastUsedAt, _ = time.Parse(time.RFC3339Nano, r.SecretTrait.LastUsedAt.ValueString())
		} else {
			lastUsedAt = nil
		}
		secretCreatedAt := new(time.Time)
		if !r.SecretTrait.SecretCreatedAt.IsUnknown() && !r.SecretTrait.SecretCreatedAt.IsNull() {
			*secretCreatedAt, _ = time.Parse(time.RFC3339Nano, r.SecretTrait.SecretCreatedAt.ValueString())
		} else {
			secretCreatedAt = nil
		}
		secretExpiresAt := new(time.Time)
		if !r.SecretTrait.SecretExpiresAt.IsUnknown() && !r.SecretTrait.SecretExpiresAt.IsNull() {
			*secretExpiresAt, _ = time.Parse(time.RFC3339Nano, r.SecretTrait.SecretExpiresAt.ValueString())
		} else {
			secretExpiresAt = nil
		}
		secretTrait = &shared.SecretTrait{
			IdentityAppUserID: identityAppUserID,
			LastUsedAt:        lastUsedAt,
			SecretCreatedAt:   secretCreatedAt,
			SecretExpiresAt:   secretExpiresAt,
		}
	}
	out := shared.AppResourceInput{
		AppID:                   appID,
		AppResourceTypeID:       appResourceTypeID,
		Description:             description,
		DisplayName:             displayName,
		GrantCount:              grantCount,
		ID:                      id,
		ParentAppResourceID:     parentAppResourceID,
		ParentAppResourceTypeID: parentAppResourceTypeID,
		SecretTrait:             secretTrait,
	}
	return &out
}
