// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"conductorone/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *AppResourceModel) ToCreateSDKType() *shared.CreateAppRequest {
	certifyPolicyID := new(string)
	if !r.CertifyPolicyID.IsUnknown() && !r.CertifyPolicyID.IsNull() {
		*certifyPolicyID = r.CertifyPolicyID.ValueString()
	} else {
		certifyPolicyID = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	grantPolicyID := new(string)
	if !r.GrantPolicyID.IsUnknown() && !r.GrantPolicyID.IsNull() {
		*grantPolicyID = r.GrantPolicyID.ValueString()
	} else {
		grantPolicyID = nil
	}
	monthlyCostUsd := new(float64)
	if !r.MonthlyCostUsd.IsUnknown() && !r.MonthlyCostUsd.IsNull() {
		*monthlyCostUsd, _ = r.MonthlyCostUsd.ValueBigFloat().Float64()
	} else {
		monthlyCostUsd = nil
	}
	owners := make([]string, 0)
	for _, ownersItem := range r.Owners {
		owners = append(owners, ownersItem.ValueString())
	}
	revokePolicyID := new(string)
	if !r.RevokePolicyID.IsUnknown() && !r.RevokePolicyID.IsNull() {
		*revokePolicyID = r.RevokePolicyID.ValueString()
	} else {
		revokePolicyID = nil
	}
	out := shared.CreateAppRequest{
		CertifyPolicyID: certifyPolicyID,
		Description:     description,
		DisplayName:     displayName,
		GrantPolicyID:   grantPolicyID,
		MonthlyCostUsd:  monthlyCostUsd,
		Owners:          owners,
		RevokePolicyID:  revokePolicyID,
	}
	return &out
}

func (r *AppResourceModel) ToGetSDKType() *shared.CreateAppRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *AppResourceModel) ToUpdateSDKType() *shared.App {
	appAccountID := new(string)
	if !r.AppAccountID.IsUnknown() && !r.AppAccountID.IsNull() {
		*appAccountID = r.AppAccountID.ValueString()
	} else {
		appAccountID = nil
	}
	appAccountName := new(string)
	if !r.AppAccountName.IsUnknown() && !r.AppAccountName.IsNull() {
		*appAccountName = r.AppAccountName.ValueString()
	} else {
		appAccountName = nil
	}
	certifyPolicyID := new(string)
	if !r.CertifyPolicyID.IsUnknown() && !r.CertifyPolicyID.IsNull() {
		*certifyPolicyID = r.CertifyPolicyID.ValueString()
	} else {
		certifyPolicyID = nil
	}
	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	fieldMask := new(string)
	if !r.FieldMask.IsUnknown() && !r.FieldMask.IsNull() {
		*fieldMask = r.FieldMask.ValueString()
	} else {
		fieldMask = nil
	}
	grantPolicyID := new(string)
	if !r.GrantPolicyID.IsUnknown() && !r.GrantPolicyID.IsNull() {
		*grantPolicyID = r.GrantPolicyID.ValueString()
	} else {
		grantPolicyID = nil
	}
	iconURL := new(string)
	if !r.IconURL.IsUnknown() && !r.IconURL.IsNull() {
		*iconURL = r.IconURL.ValueString()
	} else {
		iconURL = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	logoURI := new(string)
	if !r.LogoURI.IsUnknown() && !r.LogoURI.IsNull() {
		*logoURI = r.LogoURI.ValueString()
	} else {
		logoURI = nil
	}
	monthlyCostUsd := new(float64)
	if !r.MonthlyCostUsd.IsUnknown() && !r.MonthlyCostUsd.IsNull() {
		*monthlyCostUsd, _ = r.MonthlyCostUsd.ValueBigFloat().Float64()
	} else {
		monthlyCostUsd = nil
	}
	parentAppID := new(string)
	if !r.ParentAppID.IsUnknown() && !r.ParentAppID.IsNull() {
		*parentAppID = r.ParentAppID.ValueString()
	} else {
		parentAppID = nil
	}
	revokePolicyID := new(string)
	if !r.RevokePolicyID.IsUnknown() && !r.RevokePolicyID.IsNull() {
		*revokePolicyID = r.RevokePolicyID.ValueString()
	} else {
		revokePolicyID = nil
	}
	userCount := new(string)
	if !r.UserCount.IsUnknown() && !r.UserCount.IsNull() {
		*userCount = r.UserCount.ValueString()
	} else {
		userCount = nil
	}
	out := shared.App{
		AppAccountID:    appAccountID,
		AppAccountName:  appAccountName,
		CertifyPolicyID: certifyPolicyID,
		CreatedAt:       createdAt,
		DeletedAt:       deletedAt,
		Description:     description,
		DisplayName:     displayName,
		FieldMask:       fieldMask,
		GrantPolicyID:   grantPolicyID,
		IconURL:         iconURL,
		ID:              id,
		LogoURI:         logoURI,
		MonthlyCostUsd:  monthlyCostUsd,
		ParentAppID:     parentAppID,
		RevokePolicyID:  revokePolicyID,
		UserCount:       userCount,
	}
	return &out
}

func (r *AppResourceModel) ToDeleteSDKType() *shared.DeleteAppRequest {
	out := shared.DeleteAppRequest{}
	return &out
}

func (r *AppResourceModel) RefreshFromGetResponse(resp *shared.App) {
	if resp.AppAccountID != nil {
		r.AppAccountID = types.StringValue(*resp.AppAccountID)
	} else {
		r.AppAccountID = types.StringNull()
	}
	if resp.AppAccountName != nil {
		r.AppAccountName = types.StringValue(*resp.AppAccountName)
	} else {
		r.AppAccountName = types.StringNull()
	}
	if resp.CertifyPolicyID != nil {
		r.CertifyPolicyID = types.StringValue(*resp.CertifyPolicyID)
	} else {
		r.CertifyPolicyID = types.StringNull()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.Description != nil {
		r.Description = types.StringValue(*resp.Description)
	} else {
		r.Description = types.StringNull()
	}
	if resp.DisplayName != nil {
		r.DisplayName = types.StringValue(*resp.DisplayName)
	} else {
		r.DisplayName = types.StringNull()
	}
	if resp.FieldMask != nil {
		r.FieldMask = types.StringValue(*resp.FieldMask)
	} else {
		r.FieldMask = types.StringNull()
	}
	if resp.GrantPolicyID != nil {
		r.GrantPolicyID = types.StringValue(*resp.GrantPolicyID)
	} else {
		r.GrantPolicyID = types.StringNull()
	}
	if resp.IconURL != nil {
		r.IconURL = types.StringValue(*resp.IconURL)
	} else {
		r.IconURL = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.LogoURI != nil {
		r.LogoURI = types.StringValue(*resp.LogoURI)
	} else {
		r.LogoURI = types.StringNull()
	}
	if resp.MonthlyCostUsd != nil {
		r.MonthlyCostUsd = types.NumberValue(big.NewFloat(*resp.MonthlyCostUsd))
	} else {
		r.MonthlyCostUsd = types.NumberNull()
	}
	if resp.ParentAppID != nil {
		r.ParentAppID = types.StringValue(*resp.ParentAppID)
	} else {
		r.ParentAppID = types.StringNull()
	}
	if resp.RevokePolicyID != nil {
		r.RevokePolicyID = types.StringValue(*resp.RevokePolicyID)
	} else {
		r.RevokePolicyID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	if resp.UserCount != nil {
		r.UserCount = types.StringValue(*resp.UserCount)
	} else {
		r.UserCount = types.StringNull()
	}
}

func (r *AppResourceModel) RefreshFromCreateResponse(resp *shared.App) {
	r.RefreshFromGetResponse(resp)
}

func (r *AppResourceModel) RefreshFromUpdateResponse(resp *shared.App) {
	r.RefreshFromGetResponse(resp)
}
