// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AppResourceModel) RefreshFromSharedApp(ctx context.Context, resp *shared.App) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppAccountID = types.StringPointerValue(resp.AppAccountID)
		r.AppAccountName = types.StringPointerValue(resp.AppAccountName)
		r.CertifyPolicyID = types.StringPointerValue(resp.CertifyPolicyID)
		r.ConnectorVersion = types.Int64PointerValue(resp.ConnectorVersion)
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DefaultRequestCatalogID = types.StringPointerValue(resp.DefaultRequestCatalogID)
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.GrantPolicyID = types.StringPointerValue(resp.GrantPolicyID)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.IdentityMatching != nil {
			r.IdentityMatching = types.StringValue(string(*resp.IdentityMatching))
		} else {
			r.IdentityMatching = types.StringNull()
		}
		r.Instructions = types.StringPointerValue(resp.Instructions)
		r.IsDirectory = types.BoolPointerValue(resp.IsDirectory)
		r.IsManuallyManaged = types.BoolPointerValue(resp.IsManuallyManaged)
		r.MonthlyCostUsd = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.MonthlyCostUsd))
		r.ParentAppID = types.StringPointerValue(resp.ParentAppID)
		r.RevokePolicyID = types.StringPointerValue(resp.RevokePolicyID)
		r.StrictAccessEntitlementProvisioning = types.BoolPointerValue(resp.StrictAccessEntitlementProvisioning)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.UserCount = types.StringPointerValue(resp.UserCount)
	}

	return diags
}

func (r *AppResourceModel) ToOperationsC1APIAppV1AppsDeleteRequest(ctx context.Context) (*operations.C1APIAppV1AppsDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIAppV1AppsDeleteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AppResourceModel) ToOperationsC1APIAppV1AppsGetRequest(ctx context.Context) (*operations.C1APIAppV1AppsGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIAppV1AppsGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AppResourceModel) ToOperationsC1APIAppV1AppsUpdateRequest(ctx context.Context) (*operations.C1APIAppV1AppsUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	updateAppRequest, updateAppRequestDiags := r.ToSharedUpdateAppRequest(ctx)
	diags.Append(updateAppRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAppV1AppsUpdateRequest{
		ID:               id,
		UpdateAppRequest: updateAppRequest,
	}

	return &out, diags
}

func (r *AppResourceModel) ToSharedAppInput(ctx context.Context) (*shared.AppInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	certifyPolicyID := new(string)
	if !r.CertifyPolicyID.IsUnknown() && !r.CertifyPolicyID.IsNull() {
		*certifyPolicyID = r.CertifyPolicyID.ValueString()
	} else {
		certifyPolicyID = nil
	}
	connectorVersion := new(int64)
	if !r.ConnectorVersion.IsUnknown() && !r.ConnectorVersion.IsNull() {
		*connectorVersion = r.ConnectorVersion.ValueInt64()
	} else {
		connectorVersion = nil
	}
	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	defaultRequestCatalogID := new(string)
	if !r.DefaultRequestCatalogID.IsUnknown() && !r.DefaultRequestCatalogID.IsNull() {
		*defaultRequestCatalogID = r.DefaultRequestCatalogID.ValueString()
	} else {
		defaultRequestCatalogID = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	grantPolicyID := new(string)
	if !r.GrantPolicyID.IsUnknown() && !r.GrantPolicyID.IsNull() {
		*grantPolicyID = r.GrantPolicyID.ValueString()
	} else {
		grantPolicyID = nil
	}
	identityMatching := new(shared.IdentityMatching)
	if !r.IdentityMatching.IsUnknown() && !r.IdentityMatching.IsNull() {
		*identityMatching = shared.IdentityMatching(r.IdentityMatching.ValueString())
	} else {
		identityMatching = nil
	}
	instructions := new(string)
	if !r.Instructions.IsUnknown() && !r.Instructions.IsNull() {
		*instructions = r.Instructions.ValueString()
	} else {
		instructions = nil
	}
	isManuallyManaged := new(bool)
	if !r.IsManuallyManaged.IsUnknown() && !r.IsManuallyManaged.IsNull() {
		*isManuallyManaged = r.IsManuallyManaged.ValueBool()
	} else {
		isManuallyManaged = nil
	}
	monthlyCostUsd := new(int)
	if !r.MonthlyCostUsd.IsUnknown() && !r.MonthlyCostUsd.IsNull() {
		*monthlyCostUsd = int(r.MonthlyCostUsd.ValueInt32())
	} else {
		monthlyCostUsd = nil
	}
	revokePolicyID := new(string)
	if !r.RevokePolicyID.IsUnknown() && !r.RevokePolicyID.IsNull() {
		*revokePolicyID = r.RevokePolicyID.ValueString()
	} else {
		revokePolicyID = nil
	}
	strictAccessEntitlementProvisioning := new(bool)
	if !r.StrictAccessEntitlementProvisioning.IsUnknown() && !r.StrictAccessEntitlementProvisioning.IsNull() {
		*strictAccessEntitlementProvisioning = r.StrictAccessEntitlementProvisioning.ValueBool()
	} else {
		strictAccessEntitlementProvisioning = nil
	}
	updatedAt := new(time.Time)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, r.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	out := shared.AppInput{
		CertifyPolicyID:                     certifyPolicyID,
		ConnectorVersion:                    connectorVersion,
		CreatedAt:                           createdAt,
		DefaultRequestCatalogID:             defaultRequestCatalogID,
		DeletedAt:                           deletedAt,
		Description:                         description,
		DisplayName:                         displayName,
		GrantPolicyID:                       grantPolicyID,
		IdentityMatching:                    identityMatching,
		Instructions:                        instructions,
		IsManuallyManaged:                   isManuallyManaged,
		MonthlyCostUsd:                      monthlyCostUsd,
		RevokePolicyID:                      revokePolicyID,
		StrictAccessEntitlementProvisioning: strictAccessEntitlementProvisioning,
		UpdatedAt:                           updatedAt,
	}

	return &out, diags
}

func (r *AppResourceModel) ToSharedCreateAppRequest(ctx context.Context) (*shared.CreateAppRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	certifyPolicyID := new(string)
	if !r.CertifyPolicyID.IsUnknown() && !r.CertifyPolicyID.IsNull() {
		*certifyPolicyID = r.CertifyPolicyID.ValueString()
	} else {
		certifyPolicyID = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var displayName string
	displayName = r.DisplayName.ValueString()

	grantPolicyID := new(string)
	if !r.GrantPolicyID.IsUnknown() && !r.GrantPolicyID.IsNull() {
		*grantPolicyID = r.GrantPolicyID.ValueString()
	} else {
		grantPolicyID = nil
	}
	identityMatching := new(shared.CreateAppRequestIdentityMatching)
	if !r.IdentityMatching.IsUnknown() && !r.IdentityMatching.IsNull() {
		*identityMatching = shared.CreateAppRequestIdentityMatching(r.IdentityMatching.ValueString())
	} else {
		identityMatching = nil
	}
	monthlyCostUsd := new(int)
	if !r.MonthlyCostUsd.IsUnknown() && !r.MonthlyCostUsd.IsNull() {
		*monthlyCostUsd = int(r.MonthlyCostUsd.ValueInt32())
	} else {
		monthlyCostUsd = nil
	}
	revokePolicyID := new(string)
	if !r.RevokePolicyID.IsUnknown() && !r.RevokePolicyID.IsNull() {
		*revokePolicyID = r.RevokePolicyID.ValueString()
	} else {
		revokePolicyID = nil
	}
	strictAccessEntitlementProvisioning := new(bool)
	if !r.StrictAccessEntitlementProvisioning.IsUnknown() && !r.StrictAccessEntitlementProvisioning.IsNull() {
		*strictAccessEntitlementProvisioning = r.StrictAccessEntitlementProvisioning.ValueBool()
	} else {
		strictAccessEntitlementProvisioning = nil
	}
	out := shared.CreateAppRequest{
		CertifyPolicyID:                     certifyPolicyID,
		Description:                         description,
		DisplayName:                         displayName,
		GrantPolicyID:                       grantPolicyID,
		IdentityMatching:                    identityMatching,
		MonthlyCostUsd:                      monthlyCostUsd,
		RevokePolicyID:                      revokePolicyID,
		StrictAccessEntitlementProvisioning: strictAccessEntitlementProvisioning,
	}

	return &out, diags
}

func (r *AppResourceModel) ToSharedUpdateAppRequest(ctx context.Context) (*shared.UpdateAppRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	app, appDiags := r.ToSharedAppInput(ctx)
	diags.Append(appDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.UpdateAppRequest{
		App: app,
	}

	return &out, diags
}
