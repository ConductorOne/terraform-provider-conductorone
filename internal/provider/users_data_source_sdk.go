// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *UsersDataSourceModel) RefreshFromSharedSearchUsersResponse(ctx context.Context, resp *shared.SearchUsersResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Expanded != nil {
		}
		if resp.List != nil {
			if r.List == nil {
				r.List = []tfTypes.UserView{}
			}

			for _, listItem := range resp.List {
				var list tfTypes.UserView

				list.DelegatedUserPath = types.StringPointerValue(listItem.DelegatedUserPath)
				list.DirectoriesPath = types.StringPointerValue(listItem.DirectoriesPath)
				list.ManagersPath = types.StringPointerValue(listItem.ManagersPath)
				list.RolesPath = types.StringPointerValue(listItem.RolesPath)
				if listItem.User == nil {
					list.User = nil
				} else {
					list.User = &tfTypes.User{}
					list.User.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.User.CreatedAt))
					list.User.DelegatedUserID = types.StringPointerValue(listItem.User.DelegatedUserID)
					list.User.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.User.DeletedAt))
					list.User.Department = types.StringPointerValue(listItem.User.Department)
					if listItem.User.DepartmentSources != nil {
						if list.User.DepartmentSources == nil {
							list.User.DepartmentSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, departmentSourcesItem := range listItem.User.DepartmentSources {
							var departmentSources tfTypes.UserAttributeMappingSource

							departmentSources.AppID = types.StringPointerValue(departmentSourcesItem.AppID)
							departmentSources.AppUserID = types.StringPointerValue(departmentSourcesItem.AppUserID)
							departmentSources.AppUserProfileAttributeKey = types.StringPointerValue(departmentSourcesItem.AppUserProfileAttributeKey)
							departmentSources.UserAttributeMappingID = types.StringPointerValue(departmentSourcesItem.UserAttributeMappingID)
							departmentSources.Value = types.StringPointerValue(departmentSourcesItem.Value)

							list.User.DepartmentSources = append(list.User.DepartmentSources, departmentSources)
						}
					}
					if listItem.User.DirectoryIds != nil {
						if list.User.DirectoryIds == nil {
							list.User.DirectoryIds = make([]types.String, 0, len(listItem.User.DirectoryIds))
						}
						for _, v := range listItem.User.DirectoryIds {
							list.User.DirectoryIds = append(list.User.DirectoryIds, types.StringValue(v))
						}
					}
					if listItem.User.DirectoryStatus != nil {
						list.User.DirectoryStatus = types.StringValue(string(*listItem.User.DirectoryStatus))
					} else {
						list.User.DirectoryStatus = types.StringNull()
					}
					if listItem.User.DirectoryStatusSources != nil {
						if list.User.DirectoryStatusSources == nil {
							list.User.DirectoryStatusSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, directoryStatusSourcesItem := range listItem.User.DirectoryStatusSources {
							var directoryStatusSources tfTypes.UserAttributeMappingSource

							directoryStatusSources.AppID = types.StringPointerValue(directoryStatusSourcesItem.AppID)
							directoryStatusSources.AppUserID = types.StringPointerValue(directoryStatusSourcesItem.AppUserID)
							directoryStatusSources.AppUserProfileAttributeKey = types.StringPointerValue(directoryStatusSourcesItem.AppUserProfileAttributeKey)
							directoryStatusSources.UserAttributeMappingID = types.StringPointerValue(directoryStatusSourcesItem.UserAttributeMappingID)
							directoryStatusSources.Value = types.StringPointerValue(directoryStatusSourcesItem.Value)

							list.User.DirectoryStatusSources = append(list.User.DirectoryStatusSources, directoryStatusSources)
						}
					}
					list.User.DisplayName = types.StringPointerValue(listItem.User.DisplayName)
					list.User.Email = types.StringPointerValue(listItem.User.Email)
					if listItem.User.Emails != nil {
						if list.User.Emails == nil {
							list.User.Emails = make([]types.String, 0, len(listItem.User.Emails))
						}
						for _, v := range listItem.User.Emails {
							list.User.Emails = append(list.User.Emails, types.StringValue(v))
						}
					}
					if listItem.User.EmailSources != nil {
						if list.User.EmailSources == nil {
							list.User.EmailSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, emailSourcesItem := range listItem.User.EmailSources {
							var emailSources tfTypes.UserAttributeMappingSource

							emailSources.AppID = types.StringPointerValue(emailSourcesItem.AppID)
							emailSources.AppUserID = types.StringPointerValue(emailSourcesItem.AppUserID)
							emailSources.AppUserProfileAttributeKey = types.StringPointerValue(emailSourcesItem.AppUserProfileAttributeKey)
							emailSources.UserAttributeMappingID = types.StringPointerValue(emailSourcesItem.UserAttributeMappingID)
							emailSources.Value = types.StringPointerValue(emailSourcesItem.Value)

							list.User.EmailSources = append(list.User.EmailSources, emailSources)
						}
					}
					if listItem.User.EmployeeIds != nil {
						if list.User.EmployeeIds == nil {
							list.User.EmployeeIds = make([]types.String, 0, len(listItem.User.EmployeeIds))
						}
						for _, v := range listItem.User.EmployeeIds {
							list.User.EmployeeIds = append(list.User.EmployeeIds, types.StringValue(v))
						}
					}
					if listItem.User.EmployeeIDSources != nil {
						if list.User.EmployeeIDSources == nil {
							list.User.EmployeeIDSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, employeeIDSourcesItem := range listItem.User.EmployeeIDSources {
							var employeeIDSources tfTypes.UserAttributeMappingSource

							employeeIDSources.AppID = types.StringPointerValue(employeeIDSourcesItem.AppID)
							employeeIDSources.AppUserID = types.StringPointerValue(employeeIDSourcesItem.AppUserID)
							employeeIDSources.AppUserProfileAttributeKey = types.StringPointerValue(employeeIDSourcesItem.AppUserProfileAttributeKey)
							employeeIDSources.UserAttributeMappingID = types.StringPointerValue(employeeIDSourcesItem.UserAttributeMappingID)
							employeeIDSources.Value = types.StringPointerValue(employeeIDSourcesItem.Value)

							list.User.EmployeeIDSources = append(list.User.EmployeeIDSources, employeeIDSources)
						}
					}
					list.User.EmploymentStatus = types.StringPointerValue(listItem.User.EmploymentStatus)
					if listItem.User.EmploymentStatusSources != nil {
						if list.User.EmploymentStatusSources == nil {
							list.User.EmploymentStatusSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, employmentStatusSourcesItem := range listItem.User.EmploymentStatusSources {
							var employmentStatusSources tfTypes.UserAttributeMappingSource

							employmentStatusSources.AppID = types.StringPointerValue(employmentStatusSourcesItem.AppID)
							employmentStatusSources.AppUserID = types.StringPointerValue(employmentStatusSourcesItem.AppUserID)
							employmentStatusSources.AppUserProfileAttributeKey = types.StringPointerValue(employmentStatusSourcesItem.AppUserProfileAttributeKey)
							employmentStatusSources.UserAttributeMappingID = types.StringPointerValue(employmentStatusSourcesItem.UserAttributeMappingID)
							employmentStatusSources.Value = types.StringPointerValue(employmentStatusSourcesItem.Value)

							list.User.EmploymentStatusSources = append(list.User.EmploymentStatusSources, employmentStatusSources)
						}
					}
					list.User.EmploymentType = types.StringPointerValue(listItem.User.EmploymentType)
					if listItem.User.EmploymentTypeSources != nil {
						if list.User.EmploymentTypeSources == nil {
							list.User.EmploymentTypeSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, employmentTypeSourcesItem := range listItem.User.EmploymentTypeSources {
							var employmentTypeSources tfTypes.UserAttributeMappingSource

							employmentTypeSources.AppID = types.StringPointerValue(employmentTypeSourcesItem.AppID)
							employmentTypeSources.AppUserID = types.StringPointerValue(employmentTypeSourcesItem.AppUserID)
							employmentTypeSources.AppUserProfileAttributeKey = types.StringPointerValue(employmentTypeSourcesItem.AppUserProfileAttributeKey)
							employmentTypeSources.UserAttributeMappingID = types.StringPointerValue(employmentTypeSourcesItem.UserAttributeMappingID)
							employmentTypeSources.Value = types.StringPointerValue(employmentTypeSourcesItem.Value)

							list.User.EmploymentTypeSources = append(list.User.EmploymentTypeSources, employmentTypeSources)
						}
					}
					list.User.ID = types.StringPointerValue(listItem.User.ID)
					list.User.JobTitle = types.StringPointerValue(listItem.User.JobTitle)
					if listItem.User.JobTitleSources != nil {
						if list.User.JobTitleSources == nil {
							list.User.JobTitleSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, jobTitleSourcesItem := range listItem.User.JobTitleSources {
							var jobTitleSources tfTypes.UserAttributeMappingSource

							jobTitleSources.AppID = types.StringPointerValue(jobTitleSourcesItem.AppID)
							jobTitleSources.AppUserID = types.StringPointerValue(jobTitleSourcesItem.AppUserID)
							jobTitleSources.AppUserProfileAttributeKey = types.StringPointerValue(jobTitleSourcesItem.AppUserProfileAttributeKey)
							jobTitleSources.UserAttributeMappingID = types.StringPointerValue(jobTitleSourcesItem.UserAttributeMappingID)
							jobTitleSources.Value = types.StringPointerValue(jobTitleSourcesItem.Value)

							list.User.JobTitleSources = append(list.User.JobTitleSources, jobTitleSources)
						}
					}
					if listItem.User.ManagerIds != nil {
						if list.User.ManagerIds == nil {
							list.User.ManagerIds = make([]types.String, 0, len(listItem.User.ManagerIds))
						}
						for _, v := range listItem.User.ManagerIds {
							list.User.ManagerIds = append(list.User.ManagerIds, types.StringValue(v))
						}
					}
					if listItem.User.ManagerSources != nil {
						if list.User.ManagerSources == nil {
							list.User.ManagerSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, managerSourcesItem := range listItem.User.ManagerSources {
							var managerSources tfTypes.UserAttributeMappingSource

							managerSources.AppID = types.StringPointerValue(managerSourcesItem.AppID)
							managerSources.AppUserID = types.StringPointerValue(managerSourcesItem.AppUserID)
							managerSources.AppUserProfileAttributeKey = types.StringPointerValue(managerSourcesItem.AppUserProfileAttributeKey)
							managerSources.UserAttributeMappingID = types.StringPointerValue(managerSourcesItem.UserAttributeMappingID)
							managerSources.Value = types.StringPointerValue(managerSourcesItem.Value)

							list.User.ManagerSources = append(list.User.ManagerSources, managerSources)
						}
					}
					if listItem.User.Profile == nil {
						list.User.Profile = nil
					} else {
						list.User.Profile = &tfTypes.Profile{}
					}
					if listItem.User.RoleIds != nil {
						if list.User.RoleIds == nil {
							list.User.RoleIds = make([]types.String, 0, len(listItem.User.RoleIds))
						}
						for _, v := range listItem.User.RoleIds {
							list.User.RoleIds = append(list.User.RoleIds, types.StringValue(v))
						}
					}
					if listItem.User.Status != nil {
						list.User.Status = types.StringValue(string(*listItem.User.Status))
					} else {
						list.User.Status = types.StringNull()
					}
					if listItem.User.Type != nil {
						list.User.Type = types.StringValue(string(*listItem.User.Type))
					} else {
						list.User.Type = types.StringNull()
					}
					list.User.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.User.UpdatedAt))
					list.User.Username = types.StringPointerValue(listItem.User.Username)
					if listItem.User.Usernames != nil {
						if list.User.Usernames == nil {
							list.User.Usernames = make([]types.String, 0, len(listItem.User.Usernames))
						}
						for _, v := range listItem.User.Usernames {
							list.User.Usernames = append(list.User.Usernames, types.StringValue(v))
						}
					}
					if listItem.User.UsernameSources != nil {
						if list.User.UsernameSources == nil {
							list.User.UsernameSources = []tfTypes.UserAttributeMappingSource{}
						}

						for _, usernameSourcesItem := range listItem.User.UsernameSources {
							var usernameSources tfTypes.UserAttributeMappingSource

							usernameSources.AppID = types.StringPointerValue(usernameSourcesItem.AppID)
							usernameSources.AppUserID = types.StringPointerValue(usernameSourcesItem.AppUserID)
							usernameSources.AppUserProfileAttributeKey = types.StringPointerValue(usernameSourcesItem.AppUserProfileAttributeKey)
							usernameSources.UserAttributeMappingID = types.StringPointerValue(usernameSourcesItem.UserAttributeMappingID)
							usernameSources.Value = types.StringPointerValue(usernameSourcesItem.Value)

							list.User.UsernameSources = append(list.User.UsernameSources, usernameSources)
						}
					}
				}

				r.List = append(r.List, list)
			}
		}
		r.NextPageToken = types.StringPointerValue(resp.NextPageToken)
	}

	return diags
}

func (r *UsersDataSourceModel) ToSharedSearchUsersRequest(ctx context.Context) (*shared.SearchUsersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var departments []string
	if r.Departments != nil {
		departments = make([]string, 0, len(r.Departments))
		for _, departmentsItem := range r.Departments {
			departments = append(departments, departmentsItem.ValueString())
		}
	}
	email := new(string)
	if !r.Email.IsUnknown() && !r.Email.IsNull() {
		*email = r.Email.ValueString()
	} else {
		email = nil
	}
	var excludeIds []string
	if r.ExcludeIds != nil {
		excludeIds = make([]string, 0, len(r.ExcludeIds))
		for _, excludeIdsItem := range r.ExcludeIds {
			excludeIds = append(excludeIds, excludeIdsItem.ValueString())
		}
	}
	var excludeTypes []shared.ExcludeTypes
	if r.ExcludeTypes != nil {
		excludeTypes = make([]shared.ExcludeTypes, 0, len(r.ExcludeTypes))
		for _, excludeTypesItem := range r.ExcludeTypes {
			excludeTypes = append(excludeTypes, shared.ExcludeTypes(excludeTypesItem.ValueString()))
		}
	}
	var ids []string
	if r.Ids != nil {
		ids = make([]string, 0, len(r.Ids))
		for _, idsItem := range r.Ids {
			ids = append(ids, idsItem.ValueString())
		}
	}
	var jobTitles []string
	if r.JobTitles != nil {
		jobTitles = make([]string, 0, len(r.JobTitles))
		for _, jobTitlesItem := range r.JobTitles {
			jobTitles = append(jobTitles, jobTitlesItem.ValueString())
		}
	}
	var managerIds []string
	if r.ManagerIds != nil {
		managerIds = make([]string, 0, len(r.ManagerIds))
		for _, managerIdsItem := range r.ManagerIds {
			managerIds = append(managerIds, managerIdsItem.ValueString())
		}
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var refs []shared.UserRef
	if r.Refs != nil {
		refs = make([]shared.UserRef, 0, len(r.Refs))
		for _, refsItem := range r.Refs {
			id := new(string)
			if !refsItem.ID.IsUnknown() && !refsItem.ID.IsNull() {
				*id = refsItem.ID.ValueString()
			} else {
				id = nil
			}
			refs = append(refs, shared.UserRef{
				ID: id,
			})
		}
	}
	var roleIds []string
	if r.RoleIds != nil {
		roleIds = make([]string, 0, len(r.RoleIds))
		for _, roleIdsItem := range r.RoleIds {
			roleIds = append(roleIds, roleIdsItem.ValueString())
		}
	}
	var userStatuses []shared.UserStatuses
	if r.UserStatuses != nil {
		userStatuses = make([]shared.UserStatuses, 0, len(r.UserStatuses))
		for _, userStatusesItem := range r.UserStatuses {
			userStatuses = append(userStatuses, shared.UserStatuses(userStatusesItem.ValueString()))
		}
	}
	out := shared.SearchUsersRequest{
		Departments:  departments,
		Email:        email,
		ExcludeIds:   excludeIds,
		ExcludeTypes: excludeTypes,
		Ids:          ids,
		JobTitles:    jobTitles,
		ManagerIds:   managerIds,
		PageSize:     pageSize,
		Query:        query,
		Refs:         refs,
		RoleIds:      roleIds,
		UserStatuses: userStatuses,
	}

	return &out, diags
}
