// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AccessConflictResourceModel) ToSharedConflictMonitorCreateRequest(ctx context.Context) (*shared.ConflictMonitorCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var displayName string
	displayName = r.DisplayName.ValueString()

	var notificationConfig *shared.NotificationConfig
	if r.NotificationConfig != nil {
		var emailNotifications *shared.EmailNotifications
		if r.NotificationConfig.EmailNotifications != nil {
			enabled := new(bool)
			if !r.NotificationConfig.EmailNotifications.Enabled.IsUnknown() && !r.NotificationConfig.EmailNotifications.Enabled.IsNull() {
				*enabled = r.NotificationConfig.EmailNotifications.Enabled.ValueBool()
			} else {
				enabled = nil
			}
			var identityUserIds []string
			if r.NotificationConfig.EmailNotifications.IdentityUserIds != nil {
				identityUserIds = make([]string, 0, len(r.NotificationConfig.EmailNotifications.IdentityUserIds))
				for _, identityUserIdsItem := range r.NotificationConfig.EmailNotifications.IdentityUserIds {
					identityUserIds = append(identityUserIds, identityUserIdsItem.ValueString())
				}
			}
			emailNotifications = &shared.EmailNotifications{
				Enabled:         enabled,
				IdentityUserIds: identityUserIds,
			}
		}
		var slackNotifications *shared.SlackNotifications
		if r.NotificationConfig.SlackNotifications != nil {
			channelID := new(string)
			if !r.NotificationConfig.SlackNotifications.ChannelID.IsUnknown() && !r.NotificationConfig.SlackNotifications.ChannelID.IsNull() {
				*channelID = r.NotificationConfig.SlackNotifications.ChannelID.ValueString()
			} else {
				channelID = nil
			}
			channelName := new(string)
			if !r.NotificationConfig.SlackNotifications.ChannelName.IsUnknown() && !r.NotificationConfig.SlackNotifications.ChannelName.IsNull() {
				*channelName = r.NotificationConfig.SlackNotifications.ChannelName.ValueString()
			} else {
				channelName = nil
			}
			enabled1 := new(bool)
			if !r.NotificationConfig.SlackNotifications.Enabled.IsUnknown() && !r.NotificationConfig.SlackNotifications.Enabled.IsNull() {
				*enabled1 = r.NotificationConfig.SlackNotifications.Enabled.ValueBool()
			} else {
				enabled1 = nil
			}
			slackNotifications = &shared.SlackNotifications{
				ChannelID:   channelID,
				ChannelName: channelName,
				Enabled:     enabled1,
			}
		}
		notificationConfig = &shared.NotificationConfig{
			EmailNotifications: emailNotifications,
			SlackNotifications: slackNotifications,
		}
	}
	out := shared.ConflictMonitorCreateRequest{
		Description:        description,
		DisplayName:        displayName,
		NotificationConfig: notificationConfig,
	}

	return &out, diags
}

func (r *AccessConflictResourceModel) ToSharedConflictMonitorUpdateRequest(ctx context.Context) (*shared.ConflictMonitorUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var notificationConfig *shared.NotificationConfig
	if r.NotificationConfig != nil {
		var emailNotifications *shared.EmailNotifications
		if r.NotificationConfig.EmailNotifications != nil {
			enabled := new(bool)
			if !r.NotificationConfig.EmailNotifications.Enabled.IsUnknown() && !r.NotificationConfig.EmailNotifications.Enabled.IsNull() {
				*enabled = r.NotificationConfig.EmailNotifications.Enabled.ValueBool()
			} else {
				enabled = nil
			}
			var identityUserIds []string
			if r.NotificationConfig.EmailNotifications.IdentityUserIds != nil {
				identityUserIds = make([]string, 0, len(r.NotificationConfig.EmailNotifications.IdentityUserIds))
				for _, identityUserIdsItem := range r.NotificationConfig.EmailNotifications.IdentityUserIds {
					identityUserIds = append(identityUserIds, identityUserIdsItem.ValueString())
				}
			}
			emailNotifications = &shared.EmailNotifications{
				Enabled:         enabled,
				IdentityUserIds: identityUserIds,
			}
		}
		var slackNotifications *shared.SlackNotifications
		if r.NotificationConfig.SlackNotifications != nil {
			channelID := new(string)
			if !r.NotificationConfig.SlackNotifications.ChannelID.IsUnknown() && !r.NotificationConfig.SlackNotifications.ChannelID.IsNull() {
				*channelID = r.NotificationConfig.SlackNotifications.ChannelID.ValueString()
			} else {
				channelID = nil
			}
			channelName := new(string)
			if !r.NotificationConfig.SlackNotifications.ChannelName.IsUnknown() && !r.NotificationConfig.SlackNotifications.ChannelName.IsNull() {
				*channelName = r.NotificationConfig.SlackNotifications.ChannelName.ValueString()
			} else {
				channelName = nil
			}
			enabled1 := new(bool)
			if !r.NotificationConfig.SlackNotifications.Enabled.IsUnknown() && !r.NotificationConfig.SlackNotifications.Enabled.IsNull() {
				*enabled1 = r.NotificationConfig.SlackNotifications.Enabled.ValueBool()
			} else {
				enabled1 = nil
			}
			slackNotifications = &shared.SlackNotifications{
				ChannelID:   channelID,
				ChannelName: channelName,
				Enabled:     enabled1,
			}
		}
		notificationConfig = &shared.NotificationConfig{
			EmailNotifications: emailNotifications,
			SlackNotifications: slackNotifications,
		}
	}
	out := shared.ConflictMonitorUpdateRequest{
		Description:        description,
		DisplayName:        displayName,
		NotificationConfig: notificationConfig,
	}

	return &out, diags
}

func (r *AccessConflictResourceModel) ToOperationsC1APIAccessconflictV1AccessConflictServiceUpdateMonitorRequest(ctx context.Context) (*operations.C1APIAccessconflictV1AccessConflictServiceUpdateMonitorRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	conflictMonitorUpdateRequest, conflictMonitorUpdateRequestDiags := r.ToSharedConflictMonitorUpdateRequest(ctx)
	diags.Append(conflictMonitorUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAccessconflictV1AccessConflictServiceUpdateMonitorRequest{
		ID:                           id,
		ConflictMonitorUpdateRequest: conflictMonitorUpdateRequest,
	}

	return &out, diags
}

func (r *AccessConflictResourceModel) ToSharedConflictMonitorDeleteRequest(ctx context.Context) (*shared.ConflictMonitorDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	out := shared.ConflictMonitorDeleteRequest{}

	return &out, diags
}

func (r *AccessConflictResourceModel) ToOperationsC1APIAccessconflictV1AccessConflictServiceDeleteMonitorRequest(ctx context.Context) (*operations.C1APIAccessconflictV1AccessConflictServiceDeleteMonitorRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var conflictMonitorDeleteRequest *shared.ConflictMonitorDeleteRequest
	if r.ConflictMonitorDeleteRequest != nil {
		conflictMonitorDeleteRequest = &shared.ConflictMonitorDeleteRequest{}
	}
	out := operations.C1APIAccessconflictV1AccessConflictServiceDeleteMonitorRequest{
		ID:                           id,
		ConflictMonitorDeleteRequest: conflictMonitorDeleteRequest,
	}

	return &out, diags
}

func (r *AccessConflictResourceModel) ToOperationsC1APIAccessconflictV1AccessConflictServiceGetMonitorRequest(ctx context.Context) (*operations.C1APIAccessconflictV1AccessConflictServiceGetMonitorRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIAccessconflictV1AccessConflictServiceGetMonitorRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AccessConflictResourceModel) RefreshFromSharedConflictMonitor(ctx context.Context, resp *shared.ConflictMonitor) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EntitlementSetAID = types.StringPointerValue(resp.EntitlementSetAID)
		r.EntitlementSetBID = types.StringPointerValue(resp.EntitlementSetBID)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.NotificationConfig == nil {
			r.NotificationConfig = nil
		} else {
			r.NotificationConfig = &tfTypes.NotificationConfig{}
			if resp.NotificationConfig.EmailNotifications == nil {
				r.NotificationConfig.EmailNotifications = nil
			} else {
				r.NotificationConfig.EmailNotifications = &tfTypes.EmailNotifications{}
				r.NotificationConfig.EmailNotifications.Enabled = types.BoolPointerValue(resp.NotificationConfig.EmailNotifications.Enabled)
				if resp.NotificationConfig.EmailNotifications.IdentityUserIds != nil {
					r.NotificationConfig.EmailNotifications.IdentityUserIds = make([]types.String, 0, len(resp.NotificationConfig.EmailNotifications.IdentityUserIds))
					for _, v := range resp.NotificationConfig.EmailNotifications.IdentityUserIds {
						r.NotificationConfig.EmailNotifications.IdentityUserIds = append(r.NotificationConfig.EmailNotifications.IdentityUserIds, types.StringValue(v))
					}
				}
			}
			if resp.NotificationConfig.SlackNotifications == nil {
				r.NotificationConfig.SlackNotifications = nil
			} else {
				r.NotificationConfig.SlackNotifications = &tfTypes.SlackNotifications{}
				r.NotificationConfig.SlackNotifications.ChannelID = types.StringPointerValue(resp.NotificationConfig.SlackNotifications.ChannelID)
				r.NotificationConfig.SlackNotifications.ChannelName = types.StringPointerValue(resp.NotificationConfig.SlackNotifications.ChannelName)
				r.NotificationConfig.SlackNotifications.Enabled = types.BoolPointerValue(resp.NotificationConfig.SlackNotifications.Enabled)
			}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
