// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/pkg/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/pkg/models/shared"
	"github.com/conductorone/terraform-provider-conductorone/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &AppResourceResource{}
var _ resource.ResourceWithImportState = &AppResourceResource{}

func NewAppResourceResource() resource.Resource {
	return &AppResourceResource{}
}

// AppResourceResource defines the resource implementation.
type AppResourceResource struct {
	client *sdk.ConductoroneAPI
}

// AppResourceResourceModel describes the resource data model.
type AppResourceResourceModel struct {
	AppID                   types.String `tfsdk:"app_id"`
	AppResourceTypeID       types.String `tfsdk:"app_resource_type_id"`
	CreatedAt               types.String `tfsdk:"created_at"`
	DeletedAt               types.String `tfsdk:"deleted_at"`
	Description             types.String `tfsdk:"description"`
	DisplayName             types.String `tfsdk:"display_name"`
	GrantCount              types.String `tfsdk:"grant_count"`
	ID                      types.String `tfsdk:"id"`
	ParentAppResourceID     types.String `tfsdk:"parent_app_resource_id"`
	ParentAppResourceTypeID types.String `tfsdk:"parent_app_resource_type_id"`
	UpdatedAt               types.String `tfsdk:"updated_at"`
}

func (r *AppResourceResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_resource"
}

func (r *AppResourceResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AppResource Resource",
		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Required: true,
			},
			"app_resource_type_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The description field. Requires replacement if changed.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The displayName field.`,
			},
			"grant_count": schema.StringAttribute{
				Computed:    true,
				Description: `The number of grants to this resource.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the resource.`,
			},
			"parent_app_resource_id": schema.StringAttribute{
				Computed:    true,
				Description: `The parent resource id, if this resource is a child of another resource.`,
			},
			"parent_app_resource_type_id": schema.StringAttribute{
				Computed:    true,
				Description: `The parent resource type id, if this resource is a child of another resource.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
		},
	}
}

func (r *AppResourceResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Conductorone, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppResourceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *AppResourceResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var appID string
	appID = data.AppID.ValueString()

	var appResourceTypeID string
	appResourceTypeID = data.AppResourceTypeID.ValueString()

	createManuallyManagedAppResourceRequest := data.ToSharedCreateManuallyManagedAppResourceRequest()
	request := operations.C1APIAppV1AppResourceServiceCreateManuallyManagedAppResourceRequest{
		AppID:                                   appID,
		AppResourceTypeID:                       appResourceTypeID,
		CreateManuallyManagedAppResourceRequest: createManuallyManagedAppResourceRequest,
	}
	res, err := r.client.AppResource.CreateManuallyManagedAppResource(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CreateManuallyManagedAppResourceResponse != nil && res.CreateManuallyManagedAppResourceResponse.AppResource != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAppResource(res.CreateManuallyManagedAppResourceResponse.AppResource)
	var appId1 string
	appId1 = data.AppID.ValueString()

	var appResourceTypeId1 string
	appResourceTypeId1 = data.AppResourceTypeID.ValueString()

	var id string
	id = data.ID.ValueString()

	request1 := operations.C1APIAppV1AppResourceServiceGetRequest{
		AppID:             appId1,
		AppResourceTypeID: appResourceTypeId1,
		ID:                id,
	}
	res1, err := r.client.AppResource.Get(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.AppResourceServiceGetResponse != nil && res1.AppResourceServiceGetResponse.AppResourceView != nil && res1.AppResourceServiceGetResponse.AppResourceView.AppResource != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedAppResource(res1.AppResourceServiceGetResponse.AppResourceView.AppResource)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppResourceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *AppResourceResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var appID string
	appID = data.AppID.ValueString()

	var appResourceTypeID string
	appResourceTypeID = data.AppResourceTypeID.ValueString()

	var id string
	id = data.ID.ValueString()

	request := operations.C1APIAppV1AppResourceServiceGetRequest{
		AppID:             appID,
		AppResourceTypeID: appResourceTypeID,
		ID:                id,
	}
	res, err := r.client.AppResource.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AppResourceServiceGetResponse != nil && res.AppResourceServiceGetResponse.AppResourceView != nil && res.AppResourceServiceGetResponse.AppResourceView.AppResource != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAppResource(res.AppResourceServiceGetResponse.AppResourceView.AppResource)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppResourceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *AppResourceResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var appID string
	appID = data.AppID.ValueString()

	var appResourceTypeID string
	appResourceTypeID = data.AppResourceTypeID.ValueString()

	var id string
	id = data.ID.ValueString()

	var appResourceServiceUpdateRequest *shared.AppResourceServiceUpdateRequest
	appResource := data.ToSharedAppResourceInput()
	var appResourceExpandMask *shared.AppResourceExpandMask
	appResourceExpandMask = &shared.AppResourceExpandMask{}
	updateMask := "displayName,description"
	appResourceServiceUpdateRequest = &shared.AppResourceServiceUpdateRequest{
		AppResource:           appResource,
		AppResourceExpandMask: appResourceExpandMask,
		UpdateMask:            &updateMask,
	}
	request := operations.C1APIAppV1AppResourceServiceUpdateRequest{
		AppID:                           appID,
		AppResourceTypeID:               appResourceTypeID,
		ID:                              id,
		AppResourceServiceUpdateRequest: appResourceServiceUpdateRequest,
	}
	res, err := r.client.AppResource.Update(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AppResourceServiceUpdateResponse != nil && res.AppResourceServiceUpdateResponse.AppResourceView != nil && res.AppResourceServiceUpdateResponse.AppResourceView.AppResource != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedAppResource(res.AppResourceServiceUpdateResponse.AppResourceView.AppResource)
	var appId1 string
	appId1 = data.AppID.ValueString()

	var appResourceTypeId1 string
	appResourceTypeId1 = data.AppResourceTypeID.ValueString()

	var id1 string
	id1 = data.ID.ValueString()

	request1 := operations.C1APIAppV1AppResourceServiceGetRequest{
		AppID:             appId1,
		AppResourceTypeID: appResourceTypeId1,
		ID:                id1,
	}
	res1, err := r.client.AppResource.Get(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.AppResourceServiceGetResponse != nil && res1.AppResourceServiceGetResponse.AppResourceView != nil && res1.AppResourceServiceGetResponse.AppResourceView.AppResource != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedAppResource(res1.AppResourceServiceGetResponse.AppResourceView.AppResource)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AppResourceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *AppResourceResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var appID string
	appID = data.AppID.ValueString()

	var appResourceTypeID string
	appResourceTypeID = data.AppResourceTypeID.ValueString()

	var id string
	id = data.ID.ValueString()

	deleteManuallyManagedAppResourceRequest := data.ToSharedDeleteManuallyManagedAppResourceRequest()
	request := operations.C1APIAppV1AppResourceServiceDeleteManuallyManagedAppResourceRequest{
		AppID:                                   appID,
		AppResourceTypeID:                       appResourceTypeID,
		ID:                                      id,
		DeleteManuallyManagedAppResourceRequest: deleteManuallyManagedAppResourceRequest,
	}
	res, err := r.client.AppResource.DeleteManuallyManagedAppResource(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *AppResourceResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		AppID             string `json:"app_id"`
		AppResourceTypeID string `json:"app_resource_type_id"`
		ID                string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The ID is not valid. It's expected to be a JSON object alike '{ "app_id": "",  "app_resource_type_id": "",  "id": ""}': `+err.Error())
		return
	}

	if len(data.AppID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field app_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("app_id"), data.AppID)...)
	if len(data.AppResourceTypeID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field app_resource_type_id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("app_resource_type_id"), data.AppResourceTypeID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)

}
