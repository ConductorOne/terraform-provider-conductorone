// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &UsersDataSource{}
var _ datasource.DataSourceWithConfigure = &UsersDataSource{}

func NewUsersDataSource() datasource.DataSource {
	return &UsersDataSource{}
}

// UsersDataSource is the data source implementation.
type UsersDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// UsersDataSourceModel describes the data model.
type UsersDataSourceModel struct {
	Email         types.String                          `tfsdk:"email"`
	ExcludeIds    []types.String                        `tfsdk:"exclude_ids"`
	ExcludeTypes  []types.String                        `tfsdk:"exclude_types"`
	Expanded      []tfTypes.SearchUsersResponseExpanded `tfsdk:"expanded"`
	Ids           []types.String                        `tfsdk:"ids"`
	List          []tfTypes.UserView                    `tfsdk:"list"`
	NextPageToken types.String                          `tfsdk:"next_page_token"`
	PageSize      types.Int32                           `tfsdk:"page_size"`
	PageToken     types.String                          `tfsdk:"page_token"`
	Query         types.String                          `tfsdk:"query"`
	Refs          []tfTypes.UserRef                     `tfsdk:"refs"`
	RoleIds       []types.String                        `tfsdk:"role_ids"`
	UserStatuses  []types.String                        `tfsdk:"user_statuses"`
}

// Metadata returns the data source type name.
func (r *UsersDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_users"
}

// Schema defines the schema for the data source.
func (r *UsersDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Users DataSource",

		Attributes: map[string]schema.Attribute{
			"email": schema.StringAttribute{
				Optional:    true,
				Description: `Search for users based on their email (exact match).`,
			},
			"exclude_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `An array of users IDs to exclude from the results.`,
			},
			"exclude_types": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `An array of types to exclude from the results.`,
			},
			"expanded": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `List of related objects`,
			},
			"ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Deprecated. Use refs array instead.`,
			},
			"list": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"delegated_user_path": schema.StringAttribute{
							Computed:    true,
							Description: `JSONPATH expression indicating the location of the user objects of delegates of the current user in the expanded array.`,
						},
						"directories_path": schema.StringAttribute{
							Computed:    true,
							Description: `JSONPATH expression indicating the location of directory objects in the expanded array.`,
						},
						"managers_path": schema.StringAttribute{
							Computed:    true,
							Description: `JSONPATH expression indicating the location of the user objects that managed the current user in the expanded array.`,
						},
						"roles_path": schema.StringAttribute{
							Computed:    true,
							Description: `JSONPATH expression indicating the location of the roles of the current user in the expanded array.`,
						},
						"user": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"delegated_user_id": schema.StringAttribute{
									Computed:    true,
									Description: `The id of the user to whom tasks will be automatically reassigned to.`,
								},
								"deleted_at": schema.StringAttribute{
									Computed: true,
								},
								"department": schema.StringAttribute{
									Computed:    true,
									Description: `The department which the user belongs to in the organization.`,
								},
								"department_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of objects mapped based on department attribute mappings configured in the system.`,
								},
								"directory_ids": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `A list of unique ids that represent different directories.`,
								},
								"directory_status": schema.StringAttribute{
									Computed:    true,
									Description: `The status of the user in the directory.`,
								},
								"directory_status_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of objects mapped based on directoryStatus attribute mappings configured in the system.`,
								},
								"display_name": schema.StringAttribute{
									Computed:    true,
									Description: `The display name of the user.`,
								},
								"email": schema.StringAttribute{
									Computed:    true,
									Description: `This is the user's email.`,
								},
								"email_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of source data for the email attribute.`,
								},
								"emails": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `This is a list of all of the user's emails from app users.`,
								},
								"employee_id_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of source data for the employee IDs attribute.`,
								},
								"employee_ids": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `This is a list of all of the user's employee IDs from app users.`,
								},
								"employment_status": schema.StringAttribute{
									Computed:    true,
									Description: `The users employment status.`,
								},
								"employment_status_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of objects mapped based on employmentStatus attribute mappings configured in the system.`,
								},
								"employment_type": schema.StringAttribute{
									Computed:    true,
									Description: `The employment type of the user.`,
								},
								"employment_type_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of objects mapped based on employmentType attribute mappings configured in the system.`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `A unique identifier of the user.`,
								},
								"job_title": schema.StringAttribute{
									Computed:    true,
									Description: `The job title of the user.`,
								},
								"job_title_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of objects mapped based on jobTitle attribute mappings configured in the system.`,
								},
								"manager_ids": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `A list of ids of the user's managers.`,
								},
								"manager_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of objects mapped based on managerId attribute mappings configured in the system.`,
								},
								"profile": schema.SingleNestedAttribute{
									Computed: true,
								},
								"role_ids": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `A list of unique identifiers that maps to ConductorOne's user roles let you assign users permissions tailored to the work they do in the software.`,
								},
								"status": schema.StringAttribute{
									Computed:    true,
									Description: `The status of the user in the system.`,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `The type of the user.`,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"username": schema.StringAttribute{
									Computed:    true,
									Description: `This is the user's primary username. Typically sourced from the primary directory.`,
								},
								"username_sources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"app_user_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserId field.`,
											},
											"app_user_profile_attribute_key": schema.StringAttribute{
												Computed:    true,
												Description: `The appUserProfileAttributeKey field.`,
											},
											"user_attribute_mapping_id": schema.StringAttribute{
												Computed:    true,
												Description: `The userAttributeMappingId field.`,
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `A list of source data for the usernames attribute.`,
								},
								"usernames": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `This is a list of all of the user's usernames from app users.`,
								},
							},
							Description: `The User object provides all of the details for an user, as well as some configuration.`,
						},
					},
				},
				Description: `The list of results containing up to X results, where X is the page size defined in the request`,
			},
			"next_page_token": schema.StringAttribute{
				Computed:    true,
				Description: `The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.`,
			},
			"page_size": schema.Int32Attribute{
				Optional:    true,
				Description: `The pageSize where 0 <= pageSize <= 100. Values < 10 will be set to 10. A value of 0 returns the default page size (currently 25)`,
			},
			"page_token": schema.StringAttribute{
				Optional:    true,
				Description: `The pageToken field.`,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `Query the apps with a fuzzy search on display name and emails.`,
			},
			"refs": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Optional:    true,
							Description: `The id of the user.`,
						},
					},
				},
				Description: `An array of user refs to restrict the return values to by ID.`,
			},
			"role_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for users that have any of the role IDs on this list.`,
			},
			"user_statuses": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for users that have any of the statuses on this list. This can only be ENABLED, DISABLED, and DELETED`,
			},
		},
	}
}

func (r *UsersDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *UsersDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *UsersDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedSearchUsersRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.UserSearch.Search(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SearchUsersResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSearchUsersResponse(ctx, res.SearchUsersResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}
	for {
		res, err := res.Next()

		if err != nil {
			resp.Diagnostics.AddError(fmt.Sprintf("failed to retrieve next page of results: %v", err), debugResponse(res.RawResponse))
			return
		}

		if res == nil {
			break
		}

		resp.Diagnostics.Append(data.RefreshFromSharedSearchUsersResponse(ctx, res.SearchUsersResponse)...)

		if resp.Diagnostics.HasError() {
			return
		}
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
