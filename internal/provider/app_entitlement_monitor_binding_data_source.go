// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppEntitlementMonitorBindingDataSource{}
var _ datasource.DataSourceWithConfigure = &AppEntitlementMonitorBindingDataSource{}

func NewAppEntitlementMonitorBindingDataSource() datasource.DataSource {
	return &AppEntitlementMonitorBindingDataSource{}
}

// AppEntitlementMonitorBindingDataSource is the data source implementation.
type AppEntitlementMonitorBindingDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// AppEntitlementMonitorBindingDataSourceModel describes the data model.
type AppEntitlementMonitorBindingDataSourceModel struct {
	AppEntitlementID types.String `tfsdk:"app_entitlement_id"`
	AppID            types.String `tfsdk:"app_id"`
	CreatedAt        types.String `tfsdk:"created_at"`
	DeletedAt        types.String `tfsdk:"deleted_at"`
	EntitlementGroup types.String `tfsdk:"entitlement_group"`
	MonitorID        types.String `tfsdk:"monitor_id"`
	UpdatedAt        types.String `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *AppEntitlementMonitorBindingDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_entitlement_monitor_binding"
}

// Schema defines the schema for the data source.
func (r *AppEntitlementMonitorBindingDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AppEntitlementMonitorBinding DataSource",

		Attributes: map[string]schema.Attribute{
			"app_entitlement_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The appEntitlementId field.`,
			},
			"app_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The appId field.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"entitlement_group": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The entitlementGroup field. must be one of ["ENTITLEMENT_GROUP_UNSPECIFIED", "ENTITLEMENT_GROUP_A", "ENTITLEMENT_GROUP_B"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ENTITLEMENT_GROUP_UNSPECIFIED",
						"ENTITLEMENT_GROUP_A",
						"ENTITLEMENT_GROUP_B",
					),
				},
			},
			"monitor_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The monitorId field.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *AppEntitlementMonitorBindingDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppEntitlementMonitorBindingDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppEntitlementMonitorBindingDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedGetAppEntitlementMonitorBindingRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppEntitlementMonitorBinding.GetAppEntitlementMonitorBinding(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AppEntitlementMonitorBinding != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAppEntitlementMonitorBinding(ctx, res.AppEntitlementMonitorBinding)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
