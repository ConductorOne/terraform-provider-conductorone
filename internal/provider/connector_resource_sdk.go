// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"conductorone/internal/sdk/pkg/models/shared"
	"time"
)

func (r *ConnectorResourceModel) ToCreateSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	var connectorExpandMask *shared.ConnectorExpandMask
	if r.ConnectorExpandMask != nil {
		paths := make([]string, 0)
		for _, pathsItem := range r.ConnectorExpandMask.Paths {
			paths = append(paths, pathsItem.ValueString())
		}
		connectorExpandMask = &shared.ConnectorExpandMask{
			Paths: paths,
		}
	}
	catalogID := new(string)
	if !r.CatalogID.IsUnknown() && !r.CatalogID.IsNull() {
		*catalogID = r.CatalogID.ValueString()
	} else {
		catalogID = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.ConnectorServiceCreateDelegatedRequest{
		ConnectorExpandMask: connectorExpandMask,
		CatalogID:           catalogID,
		Description:         description,
		DisplayName:         displayName,
		UserIds:             userIds,
	}
	return &out
}

func (r *ConnectorResourceModel) ToGetSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *ConnectorResourceModel) ToDeleteSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *ConnectorResourceModel) RefreshFromGetResponse(resp *shared.ConnectorServiceGetResponse) {
	if r.ConnectorView == nil {
		r.ConnectorView = &ConnectorView{}
	}
	if resp.ConnectorView == nil {
		r.ConnectorView = nil
	} else {
		r.ConnectorView = &ConnectorView{}
		if r.ConnectorView.Connector == nil {
			r.ConnectorView.Connector = &Connector{}
		}
		if resp.ConnectorView.Connector == nil {
			r.ConnectorView.Connector = nil
		} else {
			r.ConnectorView.Connector = &Connector{}
			if r.ConnectorView.Connector.ConnectorStatus == nil {
				r.ConnectorView.Connector.ConnectorStatus = &ConnectorStatus1{}
			}
			if resp.ConnectorView.Connector.ConnectorStatus == nil {
				r.ConnectorView.Connector.ConnectorStatus = nil
			} else {
				r.ConnectorView.Connector.ConnectorStatus = &ConnectorStatus1{}
				if resp.ConnectorView.Connector.ConnectorStatus.CompletedAt != nil {
					r.ConnectorView.Connector.ConnectorStatus.CompletedAt = types.StringValue(resp.ConnectorView.Connector.ConnectorStatus.CompletedAt.Format(time.RFC3339))
				} else {
					r.ConnectorView.Connector.ConnectorStatus.CompletedAt = types.StringNull()
				}
				if resp.ConnectorView.Connector.ConnectorStatus.LastError != nil {
					r.ConnectorView.Connector.ConnectorStatus.LastError = types.StringValue(*resp.ConnectorView.Connector.ConnectorStatus.LastError)
				} else {
					r.ConnectorView.Connector.ConnectorStatus.LastError = types.StringNull()
				}
				if resp.ConnectorView.Connector.ConnectorStatus.StartedAt != nil {
					r.ConnectorView.Connector.ConnectorStatus.StartedAt = types.StringValue(resp.ConnectorView.Connector.ConnectorStatus.StartedAt.Format(time.RFC3339))
				} else {
					r.ConnectorView.Connector.ConnectorStatus.StartedAt = types.StringNull()
				}
				if resp.ConnectorView.Connector.ConnectorStatus.Status != nil {
					r.ConnectorView.Connector.ConnectorStatus.Status = types.StringValue(string(*resp.ConnectorView.Connector.ConnectorStatus.Status))
				} else {
					r.ConnectorView.Connector.ConnectorStatus.Status = types.StringNull()
				}
				if resp.ConnectorView.Connector.ConnectorStatus.UpdatedAt != nil {
					r.ConnectorView.Connector.ConnectorStatus.UpdatedAt = types.StringValue(resp.ConnectorView.Connector.ConnectorStatus.UpdatedAt.Format(time.RFC3339))
				} else {
					r.ConnectorView.Connector.ConnectorStatus.UpdatedAt = types.StringNull()
				}
			}
			if r.ConnectorView.Connector.OAuth2AuthorizedAs == nil {
				r.ConnectorView.Connector.OAuth2AuthorizedAs = &OAuth2AuthorizedAs{}
			}
			if resp.ConnectorView.Connector.OAuth2AuthorizedAs == nil {
				r.ConnectorView.Connector.OAuth2AuthorizedAs = nil
			} else {
				r.ConnectorView.Connector.OAuth2AuthorizedAs = &OAuth2AuthorizedAs{}
				if resp.ConnectorView.Connector.OAuth2AuthorizedAs.AuthEmail != nil {
					r.ConnectorView.Connector.OAuth2AuthorizedAs.AuthEmail = types.StringValue(*resp.ConnectorView.Connector.OAuth2AuthorizedAs.AuthEmail)
				} else {
					r.ConnectorView.Connector.OAuth2AuthorizedAs.AuthEmail = types.StringNull()
				}
				if resp.ConnectorView.Connector.OAuth2AuthorizedAs.AuthorizedAt != nil {
					r.ConnectorView.Connector.OAuth2AuthorizedAs.AuthorizedAt = types.StringValue(resp.ConnectorView.Connector.OAuth2AuthorizedAs.AuthorizedAt.Format(time.RFC3339))
				} else {
					r.ConnectorView.Connector.OAuth2AuthorizedAs.AuthorizedAt = types.StringNull()
				}
			}
			if resp.ConnectorView.Connector.AppID != nil {
				r.ConnectorView.Connector.AppID = types.StringValue(*resp.ConnectorView.Connector.AppID)
			} else {
				r.ConnectorView.Connector.AppID = types.StringNull()
			}
			if resp.ConnectorView.Connector.CatalogID != nil {
				r.ConnectorView.Connector.CatalogID = types.StringValue(*resp.ConnectorView.Connector.CatalogID)
			} else {
				r.ConnectorView.Connector.CatalogID = types.StringNull()
			}
			if r.ConnectorView.Connector.Config == nil {
				r.ConnectorView.Connector.Config = &ConnectorConfig1{}
			}
			if resp.ConnectorView.Connector.Config == nil {
				r.ConnectorView.Connector.Config = nil
			} else {
				r.ConnectorView.Connector.Config = &ConnectorConfig1{}
				if resp.ConnectorView.Connector.Config.AtType != nil {
					r.ConnectorView.Connector.Config.AtType = types.StringValue(*resp.ConnectorView.Connector.Config.AtType)
				} else {
					r.ConnectorView.Connector.Config.AtType = types.StringNull()
				}
				if r.ConnectorView.Connector.Config.AdditionalProperties.IsUnknown() {
					if resp.ConnectorView.Connector.Config.AdditionalProperties == nil {
						r.ConnectorView.Connector.Config.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult, _ := json.Marshal(resp.ConnectorView.Connector.Config.AdditionalProperties)
						r.ConnectorView.Connector.Config.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
					}
				}
			}
			if resp.ConnectorView.Connector.CreatedAt != nil {
				r.ConnectorView.Connector.CreatedAt = types.StringValue(resp.ConnectorView.Connector.CreatedAt.Format(time.RFC3339))
			} else {
				r.ConnectorView.Connector.CreatedAt = types.StringNull()
			}
			if resp.ConnectorView.Connector.DeletedAt != nil {
				r.ConnectorView.Connector.DeletedAt = types.StringValue(resp.ConnectorView.Connector.DeletedAt.Format(time.RFC3339))
			} else {
				r.ConnectorView.Connector.DeletedAt = types.StringNull()
			}
			if resp.ConnectorView.Connector.Description != nil {
				r.ConnectorView.Connector.Description = types.StringValue(*resp.ConnectorView.Connector.Description)
			} else {
				r.ConnectorView.Connector.Description = types.StringNull()
			}
			if resp.ConnectorView.Connector.DisplayName != nil {
				r.ConnectorView.Connector.DisplayName = types.StringValue(*resp.ConnectorView.Connector.DisplayName)
			} else {
				r.ConnectorView.Connector.DisplayName = types.StringNull()
			}
			if resp.ConnectorView.Connector.DownloadURL != nil {
				r.ConnectorView.Connector.DownloadURL = types.StringValue(*resp.ConnectorView.Connector.DownloadURL)
			} else {
				r.ConnectorView.Connector.DownloadURL = types.StringNull()
			}
			if resp.ConnectorView.Connector.ID != nil {
				r.ConnectorView.Connector.ID = types.StringValue(*resp.ConnectorView.Connector.ID)
			} else {
				r.ConnectorView.Connector.ID = types.StringNull()
			}
			if resp.ConnectorView.Connector.UpdatedAt != nil {
				r.ConnectorView.Connector.UpdatedAt = types.StringValue(resp.ConnectorView.Connector.UpdatedAt.Format(time.RFC3339))
			} else {
				r.ConnectorView.Connector.UpdatedAt = types.StringNull()
			}
			r.ConnectorView.Connector.UserIds = nil
			for _, v := range resp.ConnectorView.Connector.UserIds {
				r.ConnectorView.Connector.UserIds = append(r.ConnectorView.Connector.UserIds, types.StringValue(v))
			}
		}
		if resp.ConnectorView.AppPath != nil {
			r.ConnectorView.AppPath = types.StringValue(*resp.ConnectorView.AppPath)
		} else {
			r.ConnectorView.AppPath = types.StringNull()
		}
		if resp.ConnectorView.UsersPath != nil {
			r.ConnectorView.UsersPath = types.StringValue(*resp.ConnectorView.UsersPath)
		} else {
			r.ConnectorView.UsersPath = types.StringNull()
		}
	}
	r.Expanded = nil
	for _, expandedItem := range resp.Expanded {
		var expanded1 ConnectorServiceGetResponseExpanded
		if expandedItem.AtType != nil {
			expanded1.AtType = types.StringValue(*expandedItem.AtType)
		} else {
			expanded1.AtType = types.StringNull()
		}
		// if expanded1.AdditionalProperties.IsUnknown() {
		// 	if expandedItem.AdditionalProperties == nil {
		// 		expanded1.AdditionalProperties = types.StringNull()
		// 	} else {
		// 		additionalPropertiesResult1, _ := json.Marshal(expandedItem.AdditionalProperties)
		// 		expanded1.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
		// 	}
		// }
		r.Expanded = append(r.Expanded, expanded1)
	}
}

func (r *ConnectorResourceModel) RefreshFromCreateResponse(resp *shared.Connector) {
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}
	if resp.CatalogID != nil {
		r.CatalogID = types.StringValue(*resp.CatalogID)
	} else {
		r.CatalogID = types.StringNull()
	}
	if r.Config == nil {
		r.Config = &ConnectorConfig{}
	}
	if resp.Config == nil {
		r.Config = nil
	} else {
		r.Config = &ConnectorConfig{}
		if resp.Config.AtType != nil {
			r.Config.AtType = types.StringValue(*resp.Config.AtType)
		} else {
			r.Config.AtType = types.StringNull()
		}
		if r.Config.AdditionalProperties.IsUnknown() {
			if resp.Config.AdditionalProperties == nil {
				r.Config.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult, _ := json.Marshal(resp.Config.AdditionalProperties)
				r.Config.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
			}
		}
	}
	if r.ConnectorStatus == nil {
		r.ConnectorStatus = &ConnectorStatus{}
	}
	if resp.ConnectorStatus == nil {
		r.ConnectorStatus = nil
	} else {
		r.ConnectorStatus = &ConnectorStatus{}
		if resp.ConnectorStatus.CompletedAt != nil {
			r.ConnectorStatus.CompletedAt = types.StringValue(resp.ConnectorStatus.CompletedAt.Format(time.RFC3339))
		} else {
			r.ConnectorStatus.CompletedAt = types.StringNull()
		}
		if resp.ConnectorStatus.LastError != nil {
			r.ConnectorStatus.LastError = types.StringValue(*resp.ConnectorStatus.LastError)
		} else {
			r.ConnectorStatus.LastError = types.StringNull()
		}
		if resp.ConnectorStatus.StartedAt != nil {
			r.ConnectorStatus.StartedAt = types.StringValue(resp.ConnectorStatus.StartedAt.Format(time.RFC3339))
		} else {
			r.ConnectorStatus.StartedAt = types.StringNull()
		}
		if resp.ConnectorStatus.Status != nil {
			r.ConnectorStatus.Status = types.StringValue(string(*resp.ConnectorStatus.Status))
		} else {
			r.ConnectorStatus.Status = types.StringNull()
		}
		if resp.ConnectorStatus.UpdatedAt != nil {
			r.ConnectorStatus.UpdatedAt = types.StringValue(resp.ConnectorStatus.UpdatedAt.Format(time.RFC3339))
		} else {
			r.ConnectorStatus.UpdatedAt = types.StringNull()
		}
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.Description != nil {
		r.Description = types.StringValue(*resp.Description)
	} else {
		r.Description = types.StringNull()
	}
	if resp.DisplayName != nil {
		r.DisplayName = types.StringValue(*resp.DisplayName)
	} else {
		r.DisplayName = types.StringNull()
	}
	if resp.DownloadURL != nil {
		r.DownloadURL = types.StringValue(*resp.DownloadURL)
	} else {
		r.DownloadURL = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if r.OAuth2AuthorizedAs == nil {
		r.OAuth2AuthorizedAs = &OAuth2AuthorizedAs1{}
	}
	if resp.OAuth2AuthorizedAs == nil {
		r.OAuth2AuthorizedAs = nil
	} else {
		r.OAuth2AuthorizedAs = &OAuth2AuthorizedAs1{}
		if resp.OAuth2AuthorizedAs.AuthEmail != nil {
			r.OAuth2AuthorizedAs.AuthEmail = types.StringValue(*resp.OAuth2AuthorizedAs.AuthEmail)
		} else {
			r.OAuth2AuthorizedAs.AuthEmail = types.StringNull()
		}
		if resp.OAuth2AuthorizedAs.AuthorizedAt != nil {
			r.OAuth2AuthorizedAs.AuthorizedAt = types.StringValue(resp.OAuth2AuthorizedAs.AuthorizedAt.Format(time.RFC3339))
		} else {
			r.OAuth2AuthorizedAs.AuthorizedAt = types.StringNull()
		}
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}
}
