// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppResourceTypeDataSourceModel) RefreshFromSharedAppResourceType(ctx context.Context, resp *shared.AppResourceType) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AppID = types.StringPointerValue(resp.AppID)
	r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
	r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
	r.DisplayName = types.StringPointerValue(resp.DisplayName)
	r.ID = types.StringPointerValue(resp.ID)
	if resp.TraitIds != nil {
		if r.TraitIds == nil {
			r.TraitIds = make([]types.String, 0, len(resp.TraitIds))
		}
		for _, v := range resp.TraitIds {
			r.TraitIds = append(r.TraitIds, types.StringValue(v))
		}
	}
	r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))

	return diags
}

func (r *AppResourceTypeDataSourceModel) ToSharedSearchAppResourceTypesRequest(ctx context.Context) (*shared.SearchAppResourceTypesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appIds []string
	if r.AppIds != nil {
		appIds = make([]string, 0, len(r.AppIds))
		for _, appIdsItem := range r.AppIds {
			appIds = append(appIds, appIdsItem.ValueString())
		}
	}
	var appUserIds []string
	if r.AppUserIds != nil {
		appUserIds = make([]string, 0, len(r.AppUserIds))
		for _, appUserIdsItem := range r.AppUserIds {
			appUserIds = append(appUserIds, appUserIdsItem.ValueString())
		}
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var excludeResourceTypeIds []string
	if r.ExcludeResourceTypeIds != nil {
		excludeResourceTypeIds = make([]string, 0, len(r.ExcludeResourceTypeIds))
		for _, excludeResourceTypeIdsItem := range r.ExcludeResourceTypeIds {
			excludeResourceTypeIds = append(excludeResourceTypeIds, excludeResourceTypeIdsItem.ValueString())
		}
	}
	var excludeResourceTypeTraitIds []string
	if r.ExcludeResourceTypeTraitIds != nil {
		excludeResourceTypeTraitIds = make([]string, 0, len(r.ExcludeResourceTypeTraitIds))
		for _, excludeResourceTypeTraitIdsItem := range r.ExcludeResourceTypeTraitIds {
			excludeResourceTypeTraitIds = append(excludeResourceTypeTraitIds, excludeResourceTypeTraitIdsItem.ValueString())
		}
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	var resourceTypeIds []string
	if r.ResourceTypeIds != nil {
		resourceTypeIds = make([]string, 0, len(r.ResourceTypeIds))
		for _, resourceTypeIdsItem := range r.ResourceTypeIds {
			resourceTypeIds = append(resourceTypeIds, resourceTypeIdsItem.ValueString())
		}
	}
	var resourceTypeTraitIds []string
	if r.ResourceTypeTraitIds != nil {
		resourceTypeTraitIds = make([]string, 0, len(r.ResourceTypeTraitIds))
		for _, resourceTypeTraitIdsItem := range r.ResourceTypeTraitIds {
			resourceTypeTraitIds = append(resourceTypeTraitIds, resourceTypeTraitIdsItem.ValueString())
		}
	}
	out := shared.SearchAppResourceTypesRequest{
		AppIds:                      appIds,
		AppUserIds:                  appUserIds,
		DisplayName:                 displayName,
		ExcludeResourceTypeIds:      excludeResourceTypeIds,
		ExcludeResourceTypeTraitIds: excludeResourceTypeTraitIds,
		PageSize:                    pageSize,
		Query:                       query,
		ResourceTypeIds:             resourceTypeIds,
		ResourceTypeTraitIds:        resourceTypeTraitIds,
	}

	return &out, diags
}
