// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AccessProfileResourceModel) RefreshFromSharedRequestCatalog(ctx context.Context, resp *shared.RequestCatalog) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CreatedByUserID = types.StringPointerValue(resp.CreatedByUserID)
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		if resp.EnrollmentBehavior != nil {
			r.EnrollmentBehavior = types.StringValue(string(*resp.EnrollmentBehavior))
		} else {
			r.EnrollmentBehavior = types.StringNull()
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Published = types.BoolPointerValue(resp.Published)
		r.RequestBundle = types.BoolPointerValue(resp.RequestBundle)
		if resp.UnenrollmentBehavior != nil {
			r.UnenrollmentBehavior = types.StringValue(string(*resp.UnenrollmentBehavior))
		} else {
			r.UnenrollmentBehavior = types.StringNull()
		}
		if resp.UnenrollmentEntitlementBehavior != nil {
			r.UnenrollmentEntitlementBehavior = types.StringValue(string(*resp.UnenrollmentEntitlementBehavior))
		} else {
			r.UnenrollmentEntitlementBehavior = types.StringNull()
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.VisibleToEveryone = types.BoolPointerValue(resp.VisibleToEveryone)
	}

	return diags
}

func (r *AccessProfileResourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceDeleteRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceDeleteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AccessProfileResourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceGetRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AccessProfileResourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceUpdateRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	requestCatalogManagementServiceUpdateRequest, requestCatalogManagementServiceUpdateRequestDiags := r.ToSharedRequestCatalogManagementServiceUpdateRequest(ctx)
	diags.Append(requestCatalogManagementServiceUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceUpdateRequest{
		ID: id,
		RequestCatalogManagementServiceUpdateRequest: requestCatalogManagementServiceUpdateRequest,
	}

	return &out, diags
}

func (r *AccessProfileResourceModel) ToSharedRequestCatalog(ctx context.Context) (*shared.RequestCatalog, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	createdByUserID := new(string)
	if !r.CreatedByUserID.IsUnknown() && !r.CreatedByUserID.IsNull() {
		*createdByUserID = r.CreatedByUserID.ValueString()
	} else {
		createdByUserID = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	enrollmentBehavior := new(shared.EnrollmentBehavior)
	if !r.EnrollmentBehavior.IsUnknown() && !r.EnrollmentBehavior.IsNull() {
		*enrollmentBehavior = shared.EnrollmentBehavior(r.EnrollmentBehavior.ValueString())
	} else {
		enrollmentBehavior = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	requestBundle := new(bool)
	if !r.RequestBundle.IsUnknown() && !r.RequestBundle.IsNull() {
		*requestBundle = r.RequestBundle.ValueBool()
	} else {
		requestBundle = nil
	}
	unenrollmentBehavior := new(shared.UnenrollmentBehavior)
	if !r.UnenrollmentBehavior.IsUnknown() && !r.UnenrollmentBehavior.IsNull() {
		*unenrollmentBehavior = shared.UnenrollmentBehavior(r.UnenrollmentBehavior.ValueString())
	} else {
		unenrollmentBehavior = nil
	}
	unenrollmentEntitlementBehavior := new(shared.UnenrollmentEntitlementBehavior)
	if !r.UnenrollmentEntitlementBehavior.IsUnknown() && !r.UnenrollmentEntitlementBehavior.IsNull() {
		*unenrollmentEntitlementBehavior = shared.UnenrollmentEntitlementBehavior(r.UnenrollmentEntitlementBehavior.ValueString())
	} else {
		unenrollmentEntitlementBehavior = nil
	}
	updatedAt := new(time.Time)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, r.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	visibleToEveryone := new(bool)
	if !r.VisibleToEveryone.IsUnknown() && !r.VisibleToEveryone.IsNull() {
		*visibleToEveryone = r.VisibleToEveryone.ValueBool()
	} else {
		visibleToEveryone = nil
	}
	out := shared.RequestCatalog{
		CreatedAt:                       createdAt,
		CreatedByUserID:                 createdByUserID,
		DeletedAt:                       deletedAt,
		Description:                     description,
		DisplayName:                     displayName,
		EnrollmentBehavior:              enrollmentBehavior,
		ID:                              id,
		Published:                       published,
		RequestBundle:                   requestBundle,
		UnenrollmentBehavior:            unenrollmentBehavior,
		UnenrollmentEntitlementBehavior: unenrollmentEntitlementBehavior,
		UpdatedAt:                       updatedAt,
		VisibleToEveryone:               visibleToEveryone,
	}

	return &out, diags
}

func (r *AccessProfileResourceModel) ToSharedRequestCatalogManagementServiceCreateRequest(ctx context.Context) (*shared.RequestCatalogManagementServiceCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var displayName string
	displayName = r.DisplayName.ValueString()

	enrollmentBehavior := new(shared.RequestCatalogManagementServiceCreateRequestEnrollmentBehavior)
	if !r.EnrollmentBehavior.IsUnknown() && !r.EnrollmentBehavior.IsNull() {
		*enrollmentBehavior = shared.RequestCatalogManagementServiceCreateRequestEnrollmentBehavior(r.EnrollmentBehavior.ValueString())
	} else {
		enrollmentBehavior = nil
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	requestBundle := new(bool)
	if !r.RequestBundle.IsUnknown() && !r.RequestBundle.IsNull() {
		*requestBundle = r.RequestBundle.ValueBool()
	} else {
		requestBundle = nil
	}
	unenrollmentBehavior := new(shared.RequestCatalogManagementServiceCreateRequestUnenrollmentBehavior)
	if !r.UnenrollmentBehavior.IsUnknown() && !r.UnenrollmentBehavior.IsNull() {
		*unenrollmentBehavior = shared.RequestCatalogManagementServiceCreateRequestUnenrollmentBehavior(r.UnenrollmentBehavior.ValueString())
	} else {
		unenrollmentBehavior = nil
	}
	unenrollmentEntitlementBehavior := new(shared.RequestCatalogManagementServiceCreateRequestUnenrollmentEntitlementBehavior)
	if !r.UnenrollmentEntitlementBehavior.IsUnknown() && !r.UnenrollmentEntitlementBehavior.IsNull() {
		*unenrollmentEntitlementBehavior = shared.RequestCatalogManagementServiceCreateRequestUnenrollmentEntitlementBehavior(r.UnenrollmentEntitlementBehavior.ValueString())
	} else {
		unenrollmentEntitlementBehavior = nil
	}
	visibleToEveryone := new(bool)
	if !r.VisibleToEveryone.IsUnknown() && !r.VisibleToEveryone.IsNull() {
		*visibleToEveryone = r.VisibleToEveryone.ValueBool()
	} else {
		visibleToEveryone = nil
	}
	out := shared.RequestCatalogManagementServiceCreateRequest{
		Description:                     description,
		DisplayName:                     displayName,
		EnrollmentBehavior:              enrollmentBehavior,
		Published:                       published,
		RequestBundle:                   requestBundle,
		UnenrollmentBehavior:            unenrollmentBehavior,
		UnenrollmentEntitlementBehavior: unenrollmentEntitlementBehavior,
		VisibleToEveryone:               visibleToEveryone,
	}

	return &out, diags
}

func (r *AccessProfileResourceModel) ToSharedRequestCatalogManagementServiceUpdateRequest(ctx context.Context) (*shared.RequestCatalogManagementServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	catalog, catalogDiags := r.ToSharedRequestCatalog(ctx)
	diags.Append(catalogDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.RequestCatalogManagementServiceUpdateRequest{
		Catalog: catalog,
	}

	return &out, diags
}
