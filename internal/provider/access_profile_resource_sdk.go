// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AccessProfileResourceModel) ToSharedRequestCatalogManagementServiceCreateRequest() *shared.RequestCatalogManagementServiceCreateRequest {
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var displayName string
	displayName = r.DisplayName.ValueString()

	enrollmentBehavior := new(shared.EnrollmentBehavior)
	if !r.EnrollmentBehavior.IsUnknown() && !r.EnrollmentBehavior.IsNull() {
		*enrollmentBehavior = shared.EnrollmentBehavior(r.EnrollmentBehavior.ValueString())
	} else {
		enrollmentBehavior = nil
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	requestBundle := new(bool)
	if !r.RequestBundle.IsUnknown() && !r.RequestBundle.IsNull() {
		*requestBundle = r.RequestBundle.ValueBool()
	} else {
		requestBundle = nil
	}
	unenrollmentBehavior := new(shared.UnenrollmentBehavior)
	if !r.UnenrollmentBehavior.IsUnknown() && !r.UnenrollmentBehavior.IsNull() {
		*unenrollmentBehavior = shared.UnenrollmentBehavior(r.UnenrollmentBehavior.ValueString())
	} else {
		unenrollmentBehavior = nil
	}
	unenrollmentEntitlementBehavior := new(shared.UnenrollmentEntitlementBehavior)
	if !r.UnenrollmentEntitlementBehavior.IsUnknown() && !r.UnenrollmentEntitlementBehavior.IsNull() {
		*unenrollmentEntitlementBehavior = shared.UnenrollmentEntitlementBehavior(r.UnenrollmentEntitlementBehavior.ValueString())
	} else {
		unenrollmentEntitlementBehavior = nil
	}
	visibleToEveryone := new(bool)
	if !r.VisibleToEveryone.IsUnknown() && !r.VisibleToEveryone.IsNull() {
		*visibleToEveryone = r.VisibleToEveryone.ValueBool()
	} else {
		visibleToEveryone = nil
	}
	out := shared.RequestCatalogManagementServiceCreateRequest{
		Description:                     description,
		DisplayName:                     displayName,
		EnrollmentBehavior:              enrollmentBehavior,
		Published:                       published,
		RequestBundle:                   requestBundle,
		UnenrollmentBehavior:            unenrollmentBehavior,
		UnenrollmentEntitlementBehavior: unenrollmentEntitlementBehavior,
		VisibleToEveryone:               visibleToEveryone,
	}
	return &out
}

func (r *AccessProfileResourceModel) RefreshFromSharedRequestCatalog(resp *shared.RequestCatalog) {
	if resp != nil {
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.CreatedByUserID = types.StringPointerValue(resp.CreatedByUserID)
		if resp.DeletedAt != nil {
			r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339Nano))
		} else {
			r.DeletedAt = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		if resp.EnrollmentBehavior != nil {
			r.EnrollmentBehavior = types.StringValue(string(*resp.EnrollmentBehavior))
		} else {
			r.EnrollmentBehavior = types.StringNull()
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Published = types.BoolPointerValue(resp.Published)
		r.RequestBundle = types.BoolPointerValue(resp.RequestBundle)
		if resp.UnenrollmentBehavior != nil {
			r.UnenrollmentBehavior = types.StringValue(string(*resp.UnenrollmentBehavior))
		} else {
			r.UnenrollmentBehavior = types.StringNull()
		}
		if resp.UnenrollmentEntitlementBehavior != nil {
			r.UnenrollmentEntitlementBehavior = types.StringValue(string(*resp.UnenrollmentEntitlementBehavior))
		} else {
			r.UnenrollmentEntitlementBehavior = types.StringNull()
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
		r.VisibleToEveryone = types.BoolPointerValue(resp.VisibleToEveryone)
	}
}

func (r *AccessProfileResourceModel) ToSharedRequestCatalogInput() *shared.RequestCatalogInput {
	createdByUserID := new(string)
	if !r.CreatedByUserID.IsUnknown() && !r.CreatedByUserID.IsNull() {
		*createdByUserID = r.CreatedByUserID.ValueString()
	} else {
		createdByUserID = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	enrollmentBehavior := new(shared.RequestCatalogEnrollmentBehavior)
	if !r.EnrollmentBehavior.IsUnknown() && !r.EnrollmentBehavior.IsNull() {
		*enrollmentBehavior = shared.RequestCatalogEnrollmentBehavior(r.EnrollmentBehavior.ValueString())
	} else {
		enrollmentBehavior = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	published := new(bool)
	if !r.Published.IsUnknown() && !r.Published.IsNull() {
		*published = r.Published.ValueBool()
	} else {
		published = nil
	}
	requestBundle := new(bool)
	if !r.RequestBundle.IsUnknown() && !r.RequestBundle.IsNull() {
		*requestBundle = r.RequestBundle.ValueBool()
	} else {
		requestBundle = nil
	}
	unenrollmentBehavior := new(shared.RequestCatalogUnenrollmentBehavior)
	if !r.UnenrollmentBehavior.IsUnknown() && !r.UnenrollmentBehavior.IsNull() {
		*unenrollmentBehavior = shared.RequestCatalogUnenrollmentBehavior(r.UnenrollmentBehavior.ValueString())
	} else {
		unenrollmentBehavior = nil
	}
	unenrollmentEntitlementBehavior := new(shared.RequestCatalogUnenrollmentEntitlementBehavior)
	if !r.UnenrollmentEntitlementBehavior.IsUnknown() && !r.UnenrollmentEntitlementBehavior.IsNull() {
		*unenrollmentEntitlementBehavior = shared.RequestCatalogUnenrollmentEntitlementBehavior(r.UnenrollmentEntitlementBehavior.ValueString())
	} else {
		unenrollmentEntitlementBehavior = nil
	}
	visibleToEveryone := new(bool)
	if !r.VisibleToEveryone.IsUnknown() && !r.VisibleToEveryone.IsNull() {
		*visibleToEveryone = r.VisibleToEveryone.ValueBool()
	} else {
		visibleToEveryone = nil
	}
	out := shared.RequestCatalogInput{
		CreatedByUserID:                 createdByUserID,
		Description:                     description,
		DisplayName:                     displayName,
		EnrollmentBehavior:              enrollmentBehavior,
		ID:                              id,
		Published:                       published,
		RequestBundle:                   requestBundle,
		UnenrollmentBehavior:            unenrollmentBehavior,
		UnenrollmentEntitlementBehavior: unenrollmentEntitlementBehavior,
		VisibleToEveryone:               visibleToEveryone,
	}
	return &out
}
