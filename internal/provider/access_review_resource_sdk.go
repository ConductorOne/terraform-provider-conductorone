// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AccessReviewResourceModel) RefreshFromSharedAccessReview(ctx context.Context, resp *shared.AccessReview) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AccessReviewExclusionScope == nil {
			r.AccessReviewExclusionScope = nil
		} else {
			r.AccessReviewExclusionScope = &tfTypes.AccessReviewExclusionScope{}
			if resp.AccessReviewExclusionScope.AppUserStatuses != nil {
				r.AccessReviewExclusionScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewExclusionScope.AppUserStatuses))
				for _, v := range resp.AccessReviewExclusionScope.AppUserStatuses {
					r.AccessReviewExclusionScope.AppUserStatuses = append(r.AccessReviewExclusionScope.AppUserStatuses, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewExclusionScope.AppUserTypes != nil {
				r.AccessReviewExclusionScope.AppUserTypes = make([]types.String, 0, len(resp.AccessReviewExclusionScope.AppUserTypes))
				for _, v := range resp.AccessReviewExclusionScope.AppUserTypes {
					r.AccessReviewExclusionScope.AppUserTypes = append(r.AccessReviewExclusionScope.AppUserTypes, types.StringValue(string(v)))
				}
			}
		}
		if resp.AccessReviewInclusionScope == nil {
			r.AccessReviewInclusionScope = nil
		} else {
			r.AccessReviewInclusionScope = &tfTypes.AccessReviewInclusionScope{}
			if resp.AccessReviewInclusionScope.AppUserStatuses != nil {
				r.AccessReviewInclusionScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewInclusionScope.AppUserStatuses))
				for _, v := range resp.AccessReviewInclusionScope.AppUserStatuses {
					r.AccessReviewInclusionScope.AppUserStatuses = append(r.AccessReviewInclusionScope.AppUserStatuses, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewInclusionScope.AppUserTypes != nil {
				r.AccessReviewInclusionScope.AppUserTypes = make([]types.String, 0, len(resp.AccessReviewInclusionScope.AppUserTypes))
				for _, v := range resp.AccessReviewInclusionScope.AppUserTypes {
					r.AccessReviewInclusionScope.AppUserTypes = append(r.AccessReviewInclusionScope.AppUserTypes, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewInclusionScope.ManagerIds != nil {
				r.AccessReviewInclusionScope.ManagerIds = make([]types.String, 0, len(resp.AccessReviewInclusionScope.ManagerIds))
				for _, v := range resp.AccessReviewInclusionScope.ManagerIds {
					r.AccessReviewInclusionScope.ManagerIds = append(r.AccessReviewInclusionScope.ManagerIds, types.StringValue(v))
				}
			}
			if len(resp.AccessReviewInclusionScope.MultiUserProfileAttributes) > 0 {
				r.AccessReviewInclusionScope.MultiUserProfileAttributes = make(map[string]tfTypes.IncludedUserAttributeValues, len(resp.AccessReviewInclusionScope.MultiUserProfileAttributes))
				for includedUserAttributeValuesKey, includedUserAttributeValuesValue := range resp.AccessReviewInclusionScope.MultiUserProfileAttributes {
					var includedUserAttributeValuesResult tfTypes.IncludedUserAttributeValues
					if includedUserAttributeValuesValue.Values != nil {
						includedUserAttributeValuesResult.Values = []tfTypes.IncludedUserAttributeValue{}

						for _, valuesItem := range includedUserAttributeValuesValue.Values {
							var values tfTypes.IncludedUserAttributeValue

							values.Value = types.StringPointerValue(valuesItem.Value)

							includedUserAttributeValuesResult.Values = append(includedUserAttributeValuesResult.Values, values)
						}
					}

					r.AccessReviewInclusionScope.MultiUserProfileAttributes[includedUserAttributeValuesKey] = includedUserAttributeValuesResult
				}
			}
			r.AccessReviewInclusionScope.NoAccountOwners = types.BoolPointerValue(resp.AccessReviewInclusionScope.NoAccountOwners)
			if resp.AccessReviewInclusionScope.UserIds != nil {
				r.AccessReviewInclusionScope.UserIds = make([]types.String, 0, len(resp.AccessReviewInclusionScope.UserIds))
				for _, v := range resp.AccessReviewInclusionScope.UserIds {
					r.AccessReviewInclusionScope.UserIds = append(r.AccessReviewInclusionScope.UserIds, types.StringValue(v))
				}
			}
			if resp.AccessReviewInclusionScope.UserStatuses != nil {
				r.AccessReviewInclusionScope.UserStatuses = make([]types.String, 0, len(resp.AccessReviewInclusionScope.UserStatuses))
				for _, v := range resp.AccessReviewInclusionScope.UserStatuses {
					r.AccessReviewInclusionScope.UserStatuses = append(r.AccessReviewInclusionScope.UserStatuses, types.StringValue(string(v)))
				}
			}
		}
		if resp.AccessReviewScope == nil {
			r.AccessReviewScope = nil
		} else {
			r.AccessReviewScope = &tfTypes.AccessReviewScope{}
			if resp.AccessReviewScope.AppUserStatuses != nil {
				r.AccessReviewScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewScope.AppUserStatuses))
				for _, v := range resp.AccessReviewScope.AppUserStatuses {
					r.AccessReviewScope.AppUserStatuses = append(r.AccessReviewScope.AppUserStatuses, types.StringValue(string(v)))
				}
			}
			if resp.AccessReviewScope.AppUserTypes != nil {
				r.AccessReviewScope.AppUserTypes = make([]types.String, 0, len(resp.AccessReviewScope.AppUserTypes))
				for _, v := range resp.AccessReviewScope.AppUserTypes {
					r.AccessReviewScope.AppUserTypes = append(r.AccessReviewScope.AppUserTypes, types.StringValue(string(v)))
				}
			}
		}
		if resp.AccessReviewScopeV2 == nil {
			r.AccessReviewScopeV2 = nil
		} else {
			r.AccessReviewScopeV2 = &tfTypes.AccessReviewScopeV2{}
			if resp.AccessReviewScopeV2.AccountCriteriaScope == nil {
				r.AccessReviewScopeV2.AccountCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.AccountCriteriaScope = &tfTypes.AccountCriteriaScope{}
				if resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes != nil {
					r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes = make([]types.String, 0, len(resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes))
					for _, v := range resp.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes {
						r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes = append(r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes, types.StringValue(string(v)))
					}
				}
				if resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses != nil {
					r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses = make([]types.String, 0, len(resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses))
					for _, v := range resp.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses {
						r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses = append(r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses, types.StringValue(string(v)))
					}
				}
				r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner = types.BoolPointerValue(resp.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner)
			}
			if resp.AccessReviewScopeV2.AllAccountsScope == nil {
				r.AccessReviewScopeV2.AllAccountsScope = nil
			} else {
				r.AccessReviewScopeV2.AllAccountsScope = &tfTypes.AllAccountsScope{}
			}
			if resp.AccessReviewScopeV2.AllGrantsScope == nil {
				r.AccessReviewScopeV2.AllGrantsScope = nil
			} else {
				r.AccessReviewScopeV2.AllGrantsScope = &tfTypes.AllGrantsScope{}
			}
			if resp.AccessReviewScopeV2.AllUsersScope == nil {
				r.AccessReviewScopeV2.AllUsersScope = nil
			} else {
				r.AccessReviewScopeV2.AllUsersScope = &tfTypes.AllUsersScope{}
			}
			if resp.AccessReviewScopeV2.ApplicationAccessScope == nil {
				r.AccessReviewScopeV2.ApplicationAccessScope = nil
			} else {
				r.AccessReviewScopeV2.ApplicationAccessScope = &tfTypes.ApplicationAccessScope{}
			}
			if resp.AccessReviewScopeV2.AppSelectionCriteriaScope == nil {
				r.AccessReviewScopeV2.AppSelectionCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.AppSelectionCriteriaScope = &tfTypes.AppSelectionCriteriaScope{}
			}
			if resp.AccessReviewScopeV2.GrantsByCriteriaScope == nil {
				r.AccessReviewScopeV2.GrantsByCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.GrantsByCriteriaScope = &tfTypes.GrantsByCriteriaScope{}
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded)
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed)
				r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed = types.StringPointerValue(resp.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed)
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter == nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter = nil
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter = &tfTypes.GrantAccessProfileFilter{}
					if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds != nil {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds))
						for _, v := range resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds {
							r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds = append(r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds, types.StringValue(v))
						}
					}
					if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType != nil {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType))
					} else {
						r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType = types.StringNull()
					}
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween == nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween = nil
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween = &tfTypes.GrantsAddedBetween{}
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate))
					r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate))
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter != nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter))
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter = types.StringNull()
				}
				if resp.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter != nil {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter = types.StringValue(string(*resp.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter))
				} else {
					r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter = types.StringNull()
				}
			}
			if resp.AccessReviewScopeV2.ResourceTypeSelectionScope == nil {
				r.AccessReviewScopeV2.ResourceTypeSelectionScope = nil
			} else {
				r.AccessReviewScopeV2.ResourceTypeSelectionScope = &tfTypes.ResourceTypeSelectionScope{}
			}
			if resp.AccessReviewScopeV2.SelectedUsersScope == nil {
				r.AccessReviewScopeV2.SelectedUsersScope = nil
			} else {
				r.AccessReviewScopeV2.SelectedUsersScope = &tfTypes.SelectedUsersScope{}
				if resp.AccessReviewScopeV2.SelectedUsersScope.UserIds != nil {
					r.AccessReviewScopeV2.SelectedUsersScope.UserIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.SelectedUsersScope.UserIds))
					for _, v := range resp.AccessReviewScopeV2.SelectedUsersScope.UserIds {
						r.AccessReviewScopeV2.SelectedUsersScope.UserIds = append(r.AccessReviewScopeV2.SelectedUsersScope.UserIds, types.StringValue(v))
					}
				}
			}
			if resp.AccessReviewScopeV2.SpecificResourcesScope == nil {
				r.AccessReviewScopeV2.SpecificResourcesScope = nil
			} else {
				r.AccessReviewScopeV2.SpecificResourcesScope = &tfTypes.SpecificResourcesScope{}
			}
			if resp.AccessReviewScopeV2.UserCriteriaScope == nil {
				r.AccessReviewScopeV2.UserCriteriaScope = nil
			} else {
				r.AccessReviewScopeV2.UserCriteriaScope = &tfTypes.UserCriteriaScope{}
				if resp.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef = []tfTypes.AppEntitlementRef{}

					for _, groupAppEntitlementsRefItem := range resp.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef {
						var groupAppEntitlementsRef tfTypes.AppEntitlementRef

						groupAppEntitlementsRef.AppID = types.StringPointerValue(groupAppEntitlementsRefItem.AppID)
						groupAppEntitlementsRef.ID = types.StringPointerValue(groupAppEntitlementsRefItem.ID)

						r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef = append(r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef, groupAppEntitlementsRef)
					}
				}
				if resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds = make([]types.String, 0, len(resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds))
					for _, v := range resp.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds {
						r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds = append(r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds, types.StringValue(v))
					}
				}
				if len(resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes) > 0 {
					r.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes = make(map[string]tfTypes.IncludedUserAttributeValues, len(resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes))
					for includedUserAttributeValuesKey1, includedUserAttributeValuesValue1 := range resp.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes {
						var includedUserAttributeValuesResult1 tfTypes.IncludedUserAttributeValues
						if includedUserAttributeValuesValue1.Values != nil {
							includedUserAttributeValuesResult1.Values = []tfTypes.IncludedUserAttributeValue{}

							for _, valuesItem1 := range includedUserAttributeValuesValue1.Values {
								var values1 tfTypes.IncludedUserAttributeValue

								values1.Value = types.StringPointerValue(valuesItem1.Value)

								includedUserAttributeValuesResult1.Values = append(includedUserAttributeValuesResult1.Values, values1)
							}
						}

						r.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes[includedUserAttributeValuesKey1] = includedUserAttributeValuesResult1
					}
				}
				if resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus != nil {
					r.AccessReviewScopeV2.UserCriteriaScope.UserStatus = make([]types.String, 0, len(resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus))
					for _, v := range resp.AccessReviewScopeV2.UserCriteriaScope.UserStatus {
						r.AccessReviewScopeV2.UserCriteriaScope.UserStatus = append(r.AccessReviewScopeV2.UserCriteriaScope.UserStatus, types.StringValue(string(v)))
					}
				}
			}
		}
		r.AccessReviewTemplateID = types.StringPointerValue(resp.AccessReviewTemplateID)
		r.AutoResolve = types.BoolPointerValue(resp.AutoResolve)
		if resp.BindingObjectSetup == nil {
			r.BindingObjectSetup = nil
		} else {
			r.BindingObjectSetup = &tfTypes.BindingObjectSetup{}
		}
		r.ClosedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ClosedAt))
		r.CompletionDate = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CompletionDate))
		r.ConnectorSourcesFrozenAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ConnectorSourcesFrozenAt))
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.CreatedByID = types.StringPointerValue(resp.CreatedByID)
		if resp.DefaultView != nil {
			r.DefaultView = types.StringValue(string(*resp.DefaultView))
		} else {
			r.DefaultView = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ExpectedTicketCount = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(resp.ExpectedTicketCount))
		r.HasAccuracySupport = types.BoolPointerValue(resp.HasAccuracySupport)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.MultiAppSetup == nil {
			r.MultiAppSetup = nil
		} else {
			r.MultiAppSetup = &tfTypes.MultiAppSetup{}
			if len(resp.MultiAppSetup.AppEntitlementDetails) > 0 {
				r.MultiAppSetup.AppEntitlementDetails = make(map[string]tfTypes.EntitlementToDetails, len(resp.MultiAppSetup.AppEntitlementDetails))
				for entitlementToDetailsKey, entitlementToDetailsValue := range resp.MultiAppSetup.AppEntitlementDetails {
					var entitlementToDetailsResult tfTypes.EntitlementToDetails
					if len(entitlementToDetailsValue.EntitlementDetails) > 0 {
						entitlementToDetailsResult.EntitlementDetails = make(map[string]tfTypes.CampaignEntitlementDetails, len(entitlementToDetailsValue.EntitlementDetails))
						for campaignEntitlementDetailsKey, campaignEntitlementDetailsValue := range entitlementToDetailsValue.EntitlementDetails {
							var campaignEntitlementDetailsResult tfTypes.CampaignEntitlementDetails
							campaignEntitlementDetailsResult.AppID = types.StringPointerValue(campaignEntitlementDetailsValue.AppID)
							campaignEntitlementDetailsResult.EntitlementID = types.StringPointerValue(campaignEntitlementDetailsValue.EntitlementID)
							campaignEntitlementDetailsResult.PolicyID = types.StringPointerValue(campaignEntitlementDetailsValue.PolicyID)

							entitlementToDetailsResult.EntitlementDetails[campaignEntitlementDetailsKey] = campaignEntitlementDetailsResult
						}
					}

					r.MultiAppSetup.AppEntitlementDetails[entitlementToDetailsKey] = entitlementToDetailsResult
				}
			}
			if len(resp.MultiAppSetup.AppEntitlements) > 0 {
				r.MultiAppSetup.AppEntitlements = make(map[string]tfTypes.MultiAppEntitlement, len(resp.MultiAppSetup.AppEntitlements))
				for multiAppEntitlementKey, multiAppEntitlementValue := range resp.MultiAppSetup.AppEntitlements {
					var multiAppEntitlementResult tfTypes.MultiAppEntitlement
					multiAppEntitlementResult.AppID = types.StringPointerValue(multiAppEntitlementValue.AppID)
					if multiAppEntitlementValue.EntitlementIds != nil {
						multiAppEntitlementResult.EntitlementIds = make([]types.String, 0, len(multiAppEntitlementValue.EntitlementIds))
						for _, v := range multiAppEntitlementValue.EntitlementIds {
							multiAppEntitlementResult.EntitlementIds = append(multiAppEntitlementResult.EntitlementIds, types.StringValue(v))
						}
					}

					r.MultiAppSetup.AppEntitlements[multiAppEntitlementKey] = multiAppEntitlementResult
				}
			}
		}
		r.PolicyID = types.StringPointerValue(resp.PolicyID)
		r.ReviewInstructions = types.StringPointerValue(resp.ReviewInstructions)
		r.ScopingVersion = types.StringPointerValue(resp.ScopingVersion)
		if resp.SingleAppSetup == nil {
			r.SingleAppSetup = nil
		} else {
			r.SingleAppSetup = &tfTypes.SingleAppSetup{}
			r.SingleAppSetup.AppID = types.StringPointerValue(resp.SingleAppSetup.AppID)
		}
		r.StartedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.StartedAt))
		if resp.State != nil {
			r.State = types.StringValue(string(*resp.State))
		} else {
			r.State = types.StringNull()
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.UsePolicyOverride = types.BoolPointerValue(resp.UsePolicyOverride)
	}

	return diags
}

func (r *AccessReviewResourceModel) ToOperationsC1APIAccessreviewV1AccessReviewServiceDeleteRequest(ctx context.Context) (*operations.C1APIAccessreviewV1AccessReviewServiceDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIAccessreviewV1AccessReviewServiceDeleteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AccessReviewResourceModel) ToOperationsC1APIAccessreviewV1AccessReviewServiceGetRequest(ctx context.Context) (*operations.C1APIAccessreviewV1AccessReviewServiceGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIAccessreviewV1AccessReviewServiceGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AccessReviewResourceModel) ToOperationsC1APIAccessreviewV1AccessReviewServiceUpdateRequest(ctx context.Context) (*operations.C1APIAccessreviewV1AccessReviewServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	accessReviewServiceUpdateRequest, accessReviewServiceUpdateRequestDiags := r.ToSharedAccessReviewServiceUpdateRequest(ctx)
	diags.Append(accessReviewServiceUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAccessreviewV1AccessReviewServiceUpdateRequest{
		ID:                               id,
		AccessReviewServiceUpdateRequest: accessReviewServiceUpdateRequest,
	}

	return &out, diags
}

func (r *AccessReviewResourceModel) ToSharedAccessReviewInput(ctx context.Context) (*shared.AccessReviewInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessReviewTemplateID := new(string)
	if !r.AccessReviewTemplateID.IsUnknown() && !r.AccessReviewTemplateID.IsNull() {
		*accessReviewTemplateID = r.AccessReviewTemplateID.ValueString()
	} else {
		accessReviewTemplateID = nil
	}
	autoResolve := new(bool)
	if !r.AutoResolve.IsUnknown() && !r.AutoResolve.IsNull() {
		*autoResolve = r.AutoResolve.ValueBool()
	} else {
		autoResolve = nil
	}
	var bindingObjectSetup *shared.BindingObjectSetup
	if r.BindingObjectSetup != nil {
		bindingObjectSetup = &shared.BindingObjectSetup{}
	}
	closedAt := new(time.Time)
	if !r.ClosedAt.IsUnknown() && !r.ClosedAt.IsNull() {
		*closedAt, _ = time.Parse(time.RFC3339Nano, r.ClosedAt.ValueString())
	} else {
		closedAt = nil
	}
	completionDate := new(time.Time)
	if !r.CompletionDate.IsUnknown() && !r.CompletionDate.IsNull() {
		*completionDate, _ = time.Parse(time.RFC3339Nano, r.CompletionDate.ValueString())
	} else {
		completionDate = nil
	}
	connectorSourcesFrozenAt := new(time.Time)
	if !r.ConnectorSourcesFrozenAt.IsUnknown() && !r.ConnectorSourcesFrozenAt.IsNull() {
		*connectorSourcesFrozenAt, _ = time.Parse(time.RFC3339Nano, r.ConnectorSourcesFrozenAt.ValueString())
	} else {
		connectorSourcesFrozenAt = nil
	}
	createdByID := new(string)
	if !r.CreatedByID.IsUnknown() && !r.CreatedByID.IsNull() {
		*createdByID = r.CreatedByID.ValueString()
	} else {
		createdByID = nil
	}
	defaultView := new(shared.DefaultView)
	if !r.DefaultView.IsUnknown() && !r.DefaultView.IsNull() {
		*defaultView = shared.DefaultView(r.DefaultView.ValueString())
	} else {
		defaultView = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var accessReviewExclusionScope *shared.AccessReviewExclusionScope
	if r.AccessReviewExclusionScope != nil {
		var appUserStatuses []shared.AppUserStatuses
		if r.AccessReviewExclusionScope.AppUserStatuses != nil {
			appUserStatuses = make([]shared.AppUserStatuses, 0, len(r.AccessReviewExclusionScope.AppUserStatuses))
			for _, appUserStatusesItem := range r.AccessReviewExclusionScope.AppUserStatuses {
				appUserStatuses = append(appUserStatuses, shared.AppUserStatuses(appUserStatusesItem.ValueString()))
			}
		}
		var appUserTypes []shared.AppUserTypes
		if r.AccessReviewExclusionScope.AppUserTypes != nil {
			appUserTypes = make([]shared.AppUserTypes, 0, len(r.AccessReviewExclusionScope.AppUserTypes))
			for _, appUserTypesItem := range r.AccessReviewExclusionScope.AppUserTypes {
				appUserTypes = append(appUserTypes, shared.AppUserTypes(appUserTypesItem.ValueString()))
			}
		}
		accessReviewExclusionScope = &shared.AccessReviewExclusionScope{
			AppUserStatuses: appUserStatuses,
			AppUserTypes:    appUserTypes,
		}
	}
	expectedTicketCount := new(int)
	if !r.ExpectedTicketCount.IsUnknown() && !r.ExpectedTicketCount.IsNull() {
		*expectedTicketCount = int(r.ExpectedTicketCount.ValueInt32())
	} else {
		expectedTicketCount = nil
	}
	hasAccuracySupport := new(bool)
	if !r.HasAccuracySupport.IsUnknown() && !r.HasAccuracySupport.IsNull() {
		*hasAccuracySupport = r.HasAccuracySupport.ValueBool()
	} else {
		hasAccuracySupport = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var accessReviewInclusionScope *shared.AccessReviewInclusionScope
	if r.AccessReviewInclusionScope != nil {
		var appUserStatuses1 []shared.AccessReviewInclusionScopeAppUserStatuses
		if r.AccessReviewInclusionScope.AppUserStatuses != nil {
			appUserStatuses1 = make([]shared.AccessReviewInclusionScopeAppUserStatuses, 0, len(r.AccessReviewInclusionScope.AppUserStatuses))
			for _, appUserStatusesItem1 := range r.AccessReviewInclusionScope.AppUserStatuses {
				appUserStatuses1 = append(appUserStatuses1, shared.AccessReviewInclusionScopeAppUserStatuses(appUserStatusesItem1.ValueString()))
			}
		}
		var appUserTypes1 []shared.AccessReviewInclusionScopeAppUserTypes
		if r.AccessReviewInclusionScope.AppUserTypes != nil {
			appUserTypes1 = make([]shared.AccessReviewInclusionScopeAppUserTypes, 0, len(r.AccessReviewInclusionScope.AppUserTypes))
			for _, appUserTypesItem1 := range r.AccessReviewInclusionScope.AppUserTypes {
				appUserTypes1 = append(appUserTypes1, shared.AccessReviewInclusionScopeAppUserTypes(appUserTypesItem1.ValueString()))
			}
		}
		var managerIds []string
		if r.AccessReviewInclusionScope.ManagerIds != nil {
			managerIds = make([]string, 0, len(r.AccessReviewInclusionScope.ManagerIds))
			for _, managerIdsItem := range r.AccessReviewInclusionScope.ManagerIds {
				managerIds = append(managerIds, managerIdsItem.ValueString())
			}
		}
		multiUserProfileAttributes := make(map[string]shared.IncludedUserAttributeValues)
		for multiUserProfileAttributesKey, multiUserProfileAttributesValue := range r.AccessReviewInclusionScope.MultiUserProfileAttributes {
			var values []shared.IncludedUserAttributeValue
			if multiUserProfileAttributesValue.Values != nil {
				values = make([]shared.IncludedUserAttributeValue, 0, len(multiUserProfileAttributesValue.Values))
				for _, valuesItem := range multiUserProfileAttributesValue.Values {
					value := new(string)
					if !valuesItem.Value.IsUnknown() && !valuesItem.Value.IsNull() {
						*value = valuesItem.Value.ValueString()
					} else {
						value = nil
					}
					values = append(values, shared.IncludedUserAttributeValue{
						Value: value,
					})
				}
			}
			multiUserProfileAttributesInst := shared.IncludedUserAttributeValues{
				Values: values,
			}
			multiUserProfileAttributes[multiUserProfileAttributesKey] = multiUserProfileAttributesInst
		}
		noAccountOwners := new(bool)
		if !r.AccessReviewInclusionScope.NoAccountOwners.IsUnknown() && !r.AccessReviewInclusionScope.NoAccountOwners.IsNull() {
			*noAccountOwners = r.AccessReviewInclusionScope.NoAccountOwners.ValueBool()
		} else {
			noAccountOwners = nil
		}
		var userIds []string
		if r.AccessReviewInclusionScope.UserIds != nil {
			userIds = make([]string, 0, len(r.AccessReviewInclusionScope.UserIds))
			for _, userIdsItem := range r.AccessReviewInclusionScope.UserIds {
				userIds = append(userIds, userIdsItem.ValueString())
			}
		}
		var userStatuses []shared.UserStatuses
		if r.AccessReviewInclusionScope.UserStatuses != nil {
			userStatuses = make([]shared.UserStatuses, 0, len(r.AccessReviewInclusionScope.UserStatuses))
			for _, userStatusesItem := range r.AccessReviewInclusionScope.UserStatuses {
				userStatuses = append(userStatuses, shared.UserStatuses(userStatusesItem.ValueString()))
			}
		}
		accessReviewInclusionScope = &shared.AccessReviewInclusionScope{
			AppUserStatuses:            appUserStatuses1,
			AppUserTypes:               appUserTypes1,
			ManagerIds:                 managerIds,
			MultiUserProfileAttributes: multiUserProfileAttributes,
			NoAccountOwners:            noAccountOwners,
			UserIds:                    userIds,
			UserStatuses:               userStatuses,
		}
	}
	var multiAppSetup *shared.MultiAppSetup
	if r.MultiAppSetup != nil {
		appEntitlementDetails := make(map[string]shared.EntitlementToDetails)
		for appEntitlementDetailsKey, appEntitlementDetailsValue := range r.MultiAppSetup.AppEntitlementDetails {
			entitlementDetails := make(map[string]shared.CampaignEntitlementDetails)
			for entitlementDetailsKey, entitlementDetailsValue := range appEntitlementDetailsValue.EntitlementDetails {
				appID := new(string)
				if !entitlementDetailsValue.AppID.IsUnknown() && !entitlementDetailsValue.AppID.IsNull() {
					*appID = entitlementDetailsValue.AppID.ValueString()
				} else {
					appID = nil
				}
				entitlementID := new(string)
				if !entitlementDetailsValue.EntitlementID.IsUnknown() && !entitlementDetailsValue.EntitlementID.IsNull() {
					*entitlementID = entitlementDetailsValue.EntitlementID.ValueString()
				} else {
					entitlementID = nil
				}
				policyID := new(string)
				if !entitlementDetailsValue.PolicyID.IsUnknown() && !entitlementDetailsValue.PolicyID.IsNull() {
					*policyID = entitlementDetailsValue.PolicyID.ValueString()
				} else {
					policyID = nil
				}
				entitlementDetailsInst := shared.CampaignEntitlementDetails{
					AppID:         appID,
					EntitlementID: entitlementID,
					PolicyID:      policyID,
				}
				entitlementDetails[entitlementDetailsKey] = entitlementDetailsInst
			}
			appEntitlementDetailsInst := shared.EntitlementToDetails{
				EntitlementDetails: entitlementDetails,
			}
			appEntitlementDetails[appEntitlementDetailsKey] = appEntitlementDetailsInst
		}
		appEntitlements := make(map[string]shared.MultiAppEntitlement)
		for appEntitlementsKey, appEntitlementsValue := range r.MultiAppSetup.AppEntitlements {
			appId1 := new(string)
			if !appEntitlementsValue.AppID.IsUnknown() && !appEntitlementsValue.AppID.IsNull() {
				*appId1 = appEntitlementsValue.AppID.ValueString()
			} else {
				appId1 = nil
			}
			var entitlementIds []string
			if appEntitlementsValue.EntitlementIds != nil {
				entitlementIds = make([]string, 0, len(appEntitlementsValue.EntitlementIds))
				for _, entitlementIdsItem := range appEntitlementsValue.EntitlementIds {
					entitlementIds = append(entitlementIds, entitlementIdsItem.ValueString())
				}
			}
			appEntitlementsInst := shared.MultiAppEntitlement{
				AppID:          appId1,
				EntitlementIds: entitlementIds,
			}
			appEntitlements[appEntitlementsKey] = appEntitlementsInst
		}
		multiAppSetup = &shared.MultiAppSetup{
			AppEntitlementDetails: appEntitlementDetails,
			AppEntitlements:       appEntitlements,
		}
	}
	policyId1 := new(string)
	if !r.PolicyID.IsUnknown() && !r.PolicyID.IsNull() {
		*policyId1 = r.PolicyID.ValueString()
	} else {
		policyId1 = nil
	}
	reviewInstructions := new(string)
	if !r.ReviewInstructions.IsUnknown() && !r.ReviewInstructions.IsNull() {
		*reviewInstructions = r.ReviewInstructions.ValueString()
	} else {
		reviewInstructions = nil
	}
	var accessReviewScope *shared.AccessReviewScope
	if r.AccessReviewScope != nil {
		var appUserStatuses2 []shared.AccessReviewScopeAppUserStatuses
		if r.AccessReviewScope.AppUserStatuses != nil {
			appUserStatuses2 = make([]shared.AccessReviewScopeAppUserStatuses, 0, len(r.AccessReviewScope.AppUserStatuses))
			for _, appUserStatusesItem2 := range r.AccessReviewScope.AppUserStatuses {
				appUserStatuses2 = append(appUserStatuses2, shared.AccessReviewScopeAppUserStatuses(appUserStatusesItem2.ValueString()))
			}
		}
		var appUserTypes2 []shared.AccessReviewScopeAppUserTypes
		if r.AccessReviewScope.AppUserTypes != nil {
			appUserTypes2 = make([]shared.AccessReviewScopeAppUserTypes, 0, len(r.AccessReviewScope.AppUserTypes))
			for _, appUserTypesItem2 := range r.AccessReviewScope.AppUserTypes {
				appUserTypes2 = append(appUserTypes2, shared.AccessReviewScopeAppUserTypes(appUserTypesItem2.ValueString()))
			}
		}
		accessReviewScope = &shared.AccessReviewScope{
			AppUserStatuses: appUserStatuses2,
			AppUserTypes:    appUserTypes2,
		}
	}
	var accessReviewScopeV2 *shared.AccessReviewScopeV2
	if r.AccessReviewScopeV2 != nil {
		var accountCriteriaScope *shared.AccountCriteriaScope
		if r.AccessReviewScopeV2.AccountCriteriaScope != nil {
			var accountTypes []shared.AccountTypes
			if r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes != nil {
				accountTypes = make([]shared.AccountTypes, 0, len(r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes))
				for _, accountTypesItem := range r.AccessReviewScopeV2.AccountCriteriaScope.AccountTypes {
					accountTypes = append(accountTypes, shared.AccountTypes(accountTypesItem.ValueString()))
				}
			}
			var appUserStatuses3 []shared.AccountCriteriaScopeAppUserStatuses
			if r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses != nil {
				appUserStatuses3 = make([]shared.AccountCriteriaScopeAppUserStatuses, 0, len(r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses))
				for _, appUserStatusesItem3 := range r.AccessReviewScopeV2.AccountCriteriaScope.AppUserStatuses {
					appUserStatuses3 = append(appUserStatuses3, shared.AccountCriteriaScopeAppUserStatuses(appUserStatusesItem3.ValueString()))
				}
			}
			noAccountOwner := new(bool)
			if !r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner.IsUnknown() && !r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner.IsNull() {
				*noAccountOwner = r.AccessReviewScopeV2.AccountCriteriaScope.NoAccountOwner.ValueBool()
			} else {
				noAccountOwner = nil
			}
			accountCriteriaScope = &shared.AccountCriteriaScope{
				AccountTypes:    accountTypes,
				AppUserStatuses: appUserStatuses3,
				NoAccountOwner:  noAccountOwner,
			}
		}
		var allAccountsScope *shared.AllAccountsScope
		if r.AccessReviewScopeV2.AllAccountsScope != nil {
			allAccountsScope = &shared.AllAccountsScope{}
		}
		var allGrantsScope *shared.AllGrantsScope
		if r.AccessReviewScopeV2.AllGrantsScope != nil {
			allGrantsScope = &shared.AllGrantsScope{}
		}
		var allUsersScope *shared.AllUsersScope
		if r.AccessReviewScopeV2.AllUsersScope != nil {
			allUsersScope = &shared.AllUsersScope{}
		}
		var applicationAccessScope *shared.ApplicationAccessScope
		if r.AccessReviewScopeV2.ApplicationAccessScope != nil {
			applicationAccessScope = &shared.ApplicationAccessScope{}
		}
		var appSelectionCriteriaScope *shared.AppSelectionCriteriaScope
		if r.AccessReviewScopeV2.AppSelectionCriteriaScope != nil {
			appSelectionCriteriaScope = &shared.AppSelectionCriteriaScope{}
		}
		var grantsByCriteriaScope *shared.GrantsByCriteriaScope
		if r.AccessReviewScopeV2.GrantsByCriteriaScope != nil {
			var grantAccessProfileFilter *shared.GrantAccessProfileFilter
			if r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter != nil {
				var excludedAccessProfileIds []string
				if r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds != nil {
					excludedAccessProfileIds = make([]string, 0, len(r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds))
					for _, excludedAccessProfileIdsItem := range r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.ExcludedAccessProfileIds {
						excludedAccessProfileIds = append(excludedAccessProfileIds, excludedAccessProfileIdsItem.ValueString())
					}
				}
				filterType := new(shared.FilterType)
				if !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType.IsNull() {
					*filterType = shared.FilterType(r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantAccessProfileFilter.FilterType.ValueString())
				} else {
					filterType = nil
				}
				grantAccessProfileFilter = &shared.GrantAccessProfileFilter{
					ExcludedAccessProfileIds: excludedAccessProfileIds,
					FilterType:               filterType,
				}
			}
			daysSinceAdded := new(string)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded.IsNull() {
				*daysSinceAdded = r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceAdded.ValueString()
			} else {
				daysSinceAdded = nil
			}
			daysSinceLastUsed := new(string)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed.IsNull() {
				*daysSinceLastUsed = r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceLastUsed.ValueString()
			} else {
				daysSinceLastUsed = nil
			}
			daysSinceReviewed := new(string)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed.IsNull() {
				*daysSinceReviewed = r.AccessReviewScopeV2.GrantsByCriteriaScope.DaysSinceReviewed.ValueString()
			} else {
				daysSinceReviewed = nil
			}
			var grantsAddedBetween *shared.GrantsAddedBetween
			if r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween != nil {
				endDate := new(time.Time)
				if !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate.IsNull() {
					*endDate, _ = time.Parse(time.RFC3339Nano, r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.EndDate.ValueString())
				} else {
					endDate = nil
				}
				startDate := new(time.Time)
				if !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate.IsNull() {
					*startDate, _ = time.Parse(time.RFC3339Nano, r.AccessReviewScopeV2.GrantsByCriteriaScope.GrantsAddedBetween.StartDate.ValueString())
				} else {
					startDate = nil
				}
				grantsAddedBetween = &shared.GrantsAddedBetween{
					EndDate:   endDate,
					StartDate: startDate,
				}
			}
			sourceFilter := new(shared.SourceFilter)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter.IsNull() {
				*sourceFilter = shared.SourceFilter(r.AccessReviewScopeV2.GrantsByCriteriaScope.SourceFilter.ValueString())
			} else {
				sourceFilter = nil
			}
			typeFilter := new(shared.TypeFilter)
			if !r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter.IsUnknown() && !r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter.IsNull() {
				*typeFilter = shared.TypeFilter(r.AccessReviewScopeV2.GrantsByCriteriaScope.TypeFilter.ValueString())
			} else {
				typeFilter = nil
			}
			grantsByCriteriaScope = &shared.GrantsByCriteriaScope{
				GrantAccessProfileFilter: grantAccessProfileFilter,
				DaysSinceAdded:           daysSinceAdded,
				DaysSinceLastUsed:        daysSinceLastUsed,
				DaysSinceReviewed:        daysSinceReviewed,
				GrantsAddedBetween:       grantsAddedBetween,
				SourceFilter:             sourceFilter,
				TypeFilter:               typeFilter,
			}
		}
		var resourceTypeSelectionScope *shared.ResourceTypeSelectionScope
		if r.AccessReviewScopeV2.ResourceTypeSelectionScope != nil {
			resourceTypeSelectionScope = &shared.ResourceTypeSelectionScope{}
		}
		var selectedUsersScope *shared.SelectedUsersScope
		if r.AccessReviewScopeV2.SelectedUsersScope != nil {
			var userIds1 []string
			if r.AccessReviewScopeV2.SelectedUsersScope.UserIds != nil {
				userIds1 = make([]string, 0, len(r.AccessReviewScopeV2.SelectedUsersScope.UserIds))
				for _, userIdsItem1 := range r.AccessReviewScopeV2.SelectedUsersScope.UserIds {
					userIds1 = append(userIds1, userIdsItem1.ValueString())
				}
			}
			selectedUsersScope = &shared.SelectedUsersScope{
				UserIds: userIds1,
			}
		}
		var specificResourcesScope *shared.SpecificResourcesScope
		if r.AccessReviewScopeV2.SpecificResourcesScope != nil {
			specificResourcesScope = &shared.SpecificResourcesScope{}
		}
		var userCriteriaScope *shared.UserCriteriaScope
		if r.AccessReviewScopeV2.UserCriteriaScope != nil {
			var groupAppEntitlementsRef []shared.AppEntitlementRef
			if r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef != nil {
				groupAppEntitlementsRef = make([]shared.AppEntitlementRef, 0, len(r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef))
				for _, groupAppEntitlementsRefItem := range r.AccessReviewScopeV2.UserCriteriaScope.GroupAppEntitlementsRef {
					appId2 := new(string)
					if !groupAppEntitlementsRefItem.AppID.IsUnknown() && !groupAppEntitlementsRefItem.AppID.IsNull() {
						*appId2 = groupAppEntitlementsRefItem.AppID.ValueString()
					} else {
						appId2 = nil
					}
					id1 := new(string)
					if !groupAppEntitlementsRefItem.ID.IsUnknown() && !groupAppEntitlementsRefItem.ID.IsNull() {
						*id1 = groupAppEntitlementsRefItem.ID.ValueString()
					} else {
						id1 = nil
					}
					groupAppEntitlementsRef = append(groupAppEntitlementsRef, shared.AppEntitlementRef{
						AppID: appId2,
						ID:    id1,
					})
				}
			}
			var managerUserIds []string
			if r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds != nil {
				managerUserIds = make([]string, 0, len(r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds))
				for _, managerUserIdsItem := range r.AccessReviewScopeV2.UserCriteriaScope.ManagerUserIds {
					managerUserIds = append(managerUserIds, managerUserIdsItem.ValueString())
				}
			}
			multiUserProfileAttributes1 := make(map[string]shared.IncludedUserAttributeValues)
			for multiUserProfileAttributesKey1, multiUserProfileAttributesValue1 := range r.AccessReviewScopeV2.UserCriteriaScope.MultiUserProfileAttributes {
				var values1 []shared.IncludedUserAttributeValue
				if multiUserProfileAttributesValue1.Values != nil {
					values1 = make([]shared.IncludedUserAttributeValue, 0, len(multiUserProfileAttributesValue1.Values))
					for _, valuesItem1 := range multiUserProfileAttributesValue1.Values {
						value1 := new(string)
						if !valuesItem1.Value.IsUnknown() && !valuesItem1.Value.IsNull() {
							*value1 = valuesItem1.Value.ValueString()
						} else {
							value1 = nil
						}
						values1 = append(values1, shared.IncludedUserAttributeValue{
							Value: value1,
						})
					}
				}
				multiUserProfileAttributesInst1 := shared.IncludedUserAttributeValues{
					Values: values1,
				}
				multiUserProfileAttributes1[multiUserProfileAttributesKey1] = multiUserProfileAttributesInst1
			}
			var userStatus []shared.UserStatus
			if r.AccessReviewScopeV2.UserCriteriaScope.UserStatus != nil {
				userStatus = make([]shared.UserStatus, 0, len(r.AccessReviewScopeV2.UserCriteriaScope.UserStatus))
				for _, userStatusItem := range r.AccessReviewScopeV2.UserCriteriaScope.UserStatus {
					userStatus = append(userStatus, shared.UserStatus(userStatusItem.ValueString()))
				}
			}
			userCriteriaScope = &shared.UserCriteriaScope{
				GroupAppEntitlementsRef:    groupAppEntitlementsRef,
				ManagerUserIds:             managerUserIds,
				MultiUserProfileAttributes: multiUserProfileAttributes1,
				UserStatus:                 userStatus,
			}
		}
		accessReviewScopeV2 = &shared.AccessReviewScopeV2{
			AccountCriteriaScope:       accountCriteriaScope,
			AllAccountsScope:           allAccountsScope,
			AllGrantsScope:             allGrantsScope,
			AllUsersScope:              allUsersScope,
			ApplicationAccessScope:     applicationAccessScope,
			AppSelectionCriteriaScope:  appSelectionCriteriaScope,
			GrantsByCriteriaScope:      grantsByCriteriaScope,
			ResourceTypeSelectionScope: resourceTypeSelectionScope,
			SelectedUsersScope:         selectedUsersScope,
			SpecificResourcesScope:     specificResourcesScope,
			UserCriteriaScope:          userCriteriaScope,
		}
	}
	scopingVersion := new(string)
	if !r.ScopingVersion.IsUnknown() && !r.ScopingVersion.IsNull() {
		*scopingVersion = r.ScopingVersion.ValueString()
	} else {
		scopingVersion = nil
	}
	var singleAppSetup *shared.SingleAppSetup
	if r.SingleAppSetup != nil {
		appId3 := new(string)
		if !r.SingleAppSetup.AppID.IsUnknown() && !r.SingleAppSetup.AppID.IsNull() {
			*appId3 = r.SingleAppSetup.AppID.ValueString()
		} else {
			appId3 = nil
		}
		singleAppSetup = &shared.SingleAppSetup{
			AppID: appId3,
		}
	}
	startedAt := new(time.Time)
	if !r.StartedAt.IsUnknown() && !r.StartedAt.IsNull() {
		*startedAt, _ = time.Parse(time.RFC3339Nano, r.StartedAt.ValueString())
	} else {
		startedAt = nil
	}
	state := new(shared.State)
	if !r.State.IsUnknown() && !r.State.IsNull() {
		*state = shared.State(r.State.ValueString())
	} else {
		state = nil
	}
	usePolicyOverride := new(bool)
	if !r.UsePolicyOverride.IsUnknown() && !r.UsePolicyOverride.IsNull() {
		*usePolicyOverride = r.UsePolicyOverride.ValueBool()
	} else {
		usePolicyOverride = nil
	}
	out := shared.AccessReviewInput{
		AccessReviewTemplateID:     accessReviewTemplateID,
		AutoResolve:                autoResolve,
		BindingObjectSetup:         bindingObjectSetup,
		ClosedAt:                   closedAt,
		CompletionDate:             completionDate,
		ConnectorSourcesFrozenAt:   connectorSourcesFrozenAt,
		CreatedByID:                createdByID,
		DefaultView:                defaultView,
		Description:                description,
		DisplayName:                displayName,
		AccessReviewExclusionScope: accessReviewExclusionScope,
		ExpectedTicketCount:        expectedTicketCount,
		HasAccuracySupport:         hasAccuracySupport,
		ID:                         id,
		AccessReviewInclusionScope: accessReviewInclusionScope,
		MultiAppSetup:              multiAppSetup,
		PolicyID:                   policyId1,
		ReviewInstructions:         reviewInstructions,
		AccessReviewScope:          accessReviewScope,
		AccessReviewScopeV2:        accessReviewScopeV2,
		ScopingVersion:             scopingVersion,
		SingleAppSetup:             singleAppSetup,
		StartedAt:                  startedAt,
		State:                      state,
		UsePolicyOverride:          usePolicyOverride,
	}

	return &out, diags
}

func (r *AccessReviewResourceModel) ToSharedAccessReviewServiceCreateRequest(ctx context.Context) (*shared.AccessReviewServiceCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	completionDate := new(time.Time)
	if !r.CompletionDate.IsUnknown() && !r.CompletionDate.IsNull() {
		*completionDate, _ = time.Parse(time.RFC3339Nano, r.CompletionDate.ValueString())
	} else {
		completionDate = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	duplicateFrom := new(string)
	if !r.DuplicateFrom.IsUnknown() && !r.DuplicateFrom.IsNull() {
		*duplicateFrom = r.DuplicateFrom.ValueString()
	} else {
		duplicateFrom = nil
	}
	var ownerIds []string
	if r.OwnerIds != nil {
		ownerIds = make([]string, 0, len(r.OwnerIds))
		for _, ownerIdsItem := range r.OwnerIds {
			ownerIds = append(ownerIds, ownerIdsItem.ValueString())
		}
	}
	policyID := new(string)
	if !r.PolicyID.IsUnknown() && !r.PolicyID.IsNull() {
		*policyID = r.PolicyID.ValueString()
	} else {
		policyID = nil
	}
	out := shared.AccessReviewServiceCreateRequest{
		CompletionDate: completionDate,
		Description:    description,
		DisplayName:    displayName,
		DuplicateFrom:  duplicateFrom,
		OwnerIds:       ownerIds,
		PolicyID:       policyID,
	}

	return &out, diags
}

func (r *AccessReviewResourceModel) ToSharedAccessReviewServiceUpdateRequest(ctx context.Context) (*shared.AccessReviewServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessReview, accessReviewDiags := r.ToSharedAccessReviewInput(ctx)
	diags.Append(accessReviewDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.AccessReviewServiceUpdateRequest{
		AccessReview: accessReview,
	}

	return &out, diags
}
