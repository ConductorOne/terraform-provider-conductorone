// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
)

func (r *AccessProfileVisibilityBindingsResourceModel) ToSharedRequestCatalogManagementServiceAddAccessEntitlementsRequest() *shared.RequestCatalogManagementServiceAddAccessEntitlementsRequest {
	var accessEntitlements []shared.AppEntitlementRef = []shared.AppEntitlementRef{}
	for _, accessEntitlementsItem := range r.AccessEntitlements {
		appID := new(string)
		if !accessEntitlementsItem.AppID.IsUnknown() && !accessEntitlementsItem.AppID.IsNull() {
			*appID = accessEntitlementsItem.AppID.ValueString()
		} else {
			appID = nil
		}
		id := new(string)
		if !accessEntitlementsItem.ID.IsUnknown() && !accessEntitlementsItem.ID.IsNull() {
			*id = accessEntitlementsItem.ID.ValueString()
		} else {
			id = nil
		}
		accessEntitlements = append(accessEntitlements, shared.AppEntitlementRef{
			AppID: appID,
			ID:    id,
		})
	}
	out := shared.RequestCatalogManagementServiceAddAccessEntitlementsRequest{
		AccessEntitlements: accessEntitlements,
	}
	return &out
}

func (r *AccessProfileVisibilityBindingsResourceModel) RefreshFromSharedRequestCatalogManagementServiceAddAccessEntitlementsResponse(resp *shared.RequestCatalogManagementServiceAddAccessEntitlementsResponse) {
	if resp != nil {
	}
}

func (r *AccessProfileVisibilityBindingsResourceModel) ToSharedRequestCatalogManagementServiceRemoveAccessEntitlementsRequest() *shared.RequestCatalogManagementServiceRemoveAccessEntitlementsRequest {
	var accessEntitlements []shared.AppEntitlementRef = []shared.AppEntitlementRef{}
	for _, accessEntitlementsItem := range r.AccessEntitlements {
		appID := new(string)
		if !accessEntitlementsItem.AppID.IsUnknown() && !accessEntitlementsItem.AppID.IsNull() {
			*appID = accessEntitlementsItem.AppID.ValueString()
		} else {
			appID = nil
		}
		id := new(string)
		if !accessEntitlementsItem.ID.IsUnknown() && !accessEntitlementsItem.ID.IsNull() {
			*id = accessEntitlementsItem.ID.ValueString()
		} else {
			id = nil
		}
		accessEntitlements = append(accessEntitlements, shared.AppEntitlementRef{
			AppID: appID,
			ID:    id,
		})
	}
	out := shared.RequestCatalogManagementServiceRemoveAccessEntitlementsRequest{
		AccessEntitlements: accessEntitlements,
	}
	return &out
}
