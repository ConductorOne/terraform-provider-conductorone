// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
)

func (r *AccessProfileVisibilityBindingsResourceModel) ToSharedRequestCatalogManagementServiceAddAccessEntitlementsRequest(ctx context.Context) (*shared.RequestCatalogManagementServiceAddAccessEntitlementsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accessEntitlements []shared.AppEntitlementRef = []shared.AppEntitlementRef{}
	for _, accessEntitlementsItem := range r.AccessEntitlements {
		appID := new(string)
		if !accessEntitlementsItem.AppID.IsUnknown() && !accessEntitlementsItem.AppID.IsNull() {
			*appID = accessEntitlementsItem.AppID.ValueString()
		} else {
			appID = nil
		}
		id := new(string)
		if !accessEntitlementsItem.ID.IsUnknown() && !accessEntitlementsItem.ID.IsNull() {
			*id = accessEntitlementsItem.ID.ValueString()
		} else {
			id = nil
		}
		accessEntitlements = append(accessEntitlements, shared.AppEntitlementRef{
			AppID: appID,
			ID:    id,
		})
	}
	out := shared.RequestCatalogManagementServiceAddAccessEntitlementsRequest{
		AccessEntitlements: accessEntitlements,
	}

	return &out, diags
}

func (r *AccessProfileVisibilityBindingsResourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var catalogID string
	catalogID = r.CatalogID.ValueString()

	requestCatalogManagementServiceAddAccessEntitlementsRequest, requestCatalogManagementServiceAddAccessEntitlementsRequestDiags := r.ToSharedRequestCatalogManagementServiceAddAccessEntitlementsRequest(ctx)
	diags.Append(requestCatalogManagementServiceAddAccessEntitlementsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceAddAccessEntitlementsRequest{
		CatalogID: catalogID,
		RequestCatalogManagementServiceAddAccessEntitlementsRequest: requestCatalogManagementServiceAddAccessEntitlementsRequest,
	}

	return &out, diags
}

func (r *AccessProfileVisibilityBindingsResourceModel) ToSharedRequestCatalogManagementServiceRemoveAccessEntitlementsRequest(ctx context.Context) (*shared.RequestCatalogManagementServiceRemoveAccessEntitlementsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accessEntitlements []shared.AppEntitlementRef = []shared.AppEntitlementRef{}
	for _, accessEntitlementsItem := range r.AccessEntitlements {
		appID := new(string)
		if !accessEntitlementsItem.AppID.IsUnknown() && !accessEntitlementsItem.AppID.IsNull() {
			*appID = accessEntitlementsItem.AppID.ValueString()
		} else {
			appID = nil
		}
		id := new(string)
		if !accessEntitlementsItem.ID.IsUnknown() && !accessEntitlementsItem.ID.IsNull() {
			*id = accessEntitlementsItem.ID.ValueString()
		} else {
			id = nil
		}
		accessEntitlements = append(accessEntitlements, shared.AppEntitlementRef{
			AppID: appID,
			ID:    id,
		})
	}
	out := shared.RequestCatalogManagementServiceRemoveAccessEntitlementsRequest{
		AccessEntitlements: accessEntitlements,
	}

	return &out, diags
}

func (r *AccessProfileVisibilityBindingsResourceModel) ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest(ctx context.Context) (*operations.C1APIRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var catalogID string
	catalogID = r.CatalogID.ValueString()

	requestCatalogManagementServiceRemoveAccessEntitlementsRequest, requestCatalogManagementServiceRemoveAccessEntitlementsRequestDiags := r.ToSharedRequestCatalogManagementServiceRemoveAccessEntitlementsRequest(ctx)
	diags.Append(requestCatalogManagementServiceRemoveAccessEntitlementsRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIRequestcatalogV1RequestCatalogManagementServiceRemoveAccessEntitlementsRequest{
		CatalogID: catalogID,
		RequestCatalogManagementServiceRemoveAccessEntitlementsRequest: requestCatalogManagementServiceRemoveAccessEntitlementsRequest,
	}

	return &out, diags
}

func (r *AccessProfileVisibilityBindingsResourceModel) RefreshFromSharedRequestCatalogManagementServiceAddAccessEntitlementsResponse(ctx context.Context, resp *shared.RequestCatalogManagementServiceAddAccessEntitlementsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}
