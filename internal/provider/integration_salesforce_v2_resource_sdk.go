// Generated by tf-integration-gen. DO NOT EDIT.
package provider

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

const salesforceV2CatalogID = "2k4W58EZuLALKVuoMIaFKRHvx9p"

func (r *IntegrationSalesforceV2ResourceModel) ToCreateDelegatedSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	catalogID := sdk.String(salesforceV2CatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}
	out := shared.ConnectorServiceCreateDelegatedRequest{
		DisplayName: sdk.String("Salesforce v2"),
		CatalogID:   catalogID,
		UserIds:     userIds,
	}
	return &out
}

func (r *IntegrationSalesforceV2ResourceModel) ToCreateSDKType() (*shared.ConnectorServiceCreateRequest, error) {
	catalogID := sdk.String(salesforceV2CatalogID)
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configOut, configSet := r.getConfig()
	if !configSet {
		return nil, fmt.Errorf("config must be set for create request")
	}

	out := shared.ConnectorServiceCreateRequest{
		CatalogID: catalogID,
		UserIds:   userIds,
		Config: &shared.ConnectorServiceCreateRequestConfig{
			AtType: sdk.String(envConfigType),
			AdditionalProperties: map[string]interface{}{
				"configuration": configOut,
			},
		},
	}
	return &out, nil
}

func (r *IntegrationSalesforceV2ResourceModel) ToUpdateSDKType() (*shared.ConnectorInput, bool) {
	userIds := make([]string, 0)
	for _, userIdsItem := range r.UserIds {
		userIds = append(userIds, userIdsItem.ValueString())
	}

	configValues := r.populateConfig()

	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}

	out := shared.ConnectorInput{
		DisplayName: sdk.String("Salesforce v2"),
		AppID:       sdk.String(r.AppID.ValueString()),
		CatalogID:   sdk.String(salesforceV2CatalogID),
		ID:          sdk.String(r.ID.ValueString()),
		UserIds:     userIds,
		Config:      makeConnectorConfig(configOut),
	}

	return &out, configSet
}

func (r *IntegrationSalesforceV2ResourceModel) populateConfig() map[string]interface{} {
	configValues := make(map[string]interface{})

	if !r.SalesforceGroupOauth.IsUnknown() && !r.SalesforceGroupOauth.IsNull() {
		configValues["C1_selected_field_group_name"] = "salesforce_group_oauth"
		for k, v := range r.SalesforceGroupOauth.Attributes() {
			if v.IsUnknown() || v.IsNull() {
				continue
			}
			if val, ok := v.(basetypes.StringValue); ok {
				configValues[k] = val.ValueString()
			}
			if val, ok := v.(basetypes.BoolValue); ok {
				configValues[k] = strconv.FormatBool(val.ValueBool())
			}
			if val, ok := v.(basetypes.ListValue); ok {
				elements := val.Elements()
				lv := make([]string, 0, len(elements))
				for _, element := range elements {
					if e, ok := element.(basetypes.StringValue); ok {
						lv = append(lv, e.ValueString())
					}
				}
				configValues[k] = strings.Join(lv, ",")
			}
		}
	}

	if !r.SalesforceGroupAccessToken.IsUnknown() && !r.SalesforceGroupAccessToken.IsNull() {
		configValues["C1_selected_field_group_name"] = "salesforce_group_access_token"
		for k, v := range r.SalesforceGroupAccessToken.Attributes() {
			if v.IsUnknown() || v.IsNull() {
				continue
			}
			if val, ok := v.(basetypes.StringValue); ok {
				configValues[k] = val.ValueString()
			}
			if val, ok := v.(basetypes.BoolValue); ok {
				configValues[k] = strconv.FormatBool(val.ValueBool())
			}
			if val, ok := v.(basetypes.ListValue); ok {
				elements := val.Elements()
				lv := make([]string, 0, len(elements))
				for _, element := range elements {
					if e, ok := element.(basetypes.StringValue); ok {
						lv = append(lv, e.ValueString())
					}
				}
				configValues[k] = strings.Join(lv, ",")
			}
		}
	}

	return configValues
}

func (r *IntegrationSalesforceV2ResourceModel) getConfig() (map[string]interface{}, bool) {
	configValues := r.populateConfig()
	configOut := make(map[string]interface{})
	configSet := false
	for key, configValue := range configValues {
		configOut[key] = ""
		if configValue != nil {
			configOut[key] = makeStringValue(configValue)
			configSet = true
		}
	}
	if !configSet {
		configOut = nil
	}
	return configOut, configSet
}

func (r *IntegrationSalesforceV2ResourceModel) ToGetSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationSalesforceV2ResourceModel) ToDeleteSDKType() *shared.ConnectorServiceCreateDelegatedRequest {
	out := r.ToCreateDelegatedSDKType()
	return out
}

func (r *IntegrationSalesforceV2ResourceModel) RefreshFromGetResponse(resp *shared.Connector) {
	if resp == nil {
		return
	}
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}

	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "salesforce_group_oauth" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "salesforce_instance_url"); ok {
							attributeTypes["salesforce_instance_url"] = types.StringType
							attributeValues["salesforce_instance_url"] = types.StringValue(val)
						}
						if _, ok := configValues["salesforce_username_for_email"]; ok {
							if val, ok := getStringValue(values, "salesforce_username_for_email"); ok {
								bv, err := strconv.ParseBool(val)
								if err == nil {
									attributeTypes["salesforce_username_for_email"] = types.BoolType
									attributeValues["salesforce_username_for_email"] = types.BoolValue(bv)
								}
							}
						} else {
							attributeTypes["salesforce_username_for_email"] = types.BoolType
							attributeValues["salesforce_username_for_email"] = types.BoolNull()
						}
						if _, ok := configValues["salesforce_sync_connected_apps"]; ok {
							if val, ok := getStringValue(values, "salesforce_sync_connected_apps"); ok {
								bv, err := strconv.ParseBool(val)
								if err == nil {
									attributeTypes["salesforce_sync_connected_apps"] = types.BoolType
									attributeValues["salesforce_sync_connected_apps"] = types.BoolValue(bv)
								}
							}
						} else {
							attributeTypes["salesforce_sync_connected_apps"] = types.BoolType
							attributeValues["salesforce_sync_connected_apps"] = types.BoolNull()
						}
						r.SalesforceGroupOauth = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "salesforce_group_access_token" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "salesforce_username"); ok {
							attributeTypes["salesforce_username"] = types.StringType
							attributeValues["salesforce_username"] = types.StringValue(val)
						}

						attributeTypes["salesforce_password"] = types.StringType
						if sv, ok := configValues["salesforce_password"].(string); ok {
							attributeValues["salesforce_password"] = types.StringValue(sv)
						} else {
							attributeValues["salesforce_password"] = types.StringNull()
						}

						attributeTypes["salesforce_security_token"] = types.StringType
						if sv, ok := configValues["salesforce_security_token"].(string); ok {
							attributeValues["salesforce_security_token"] = types.StringValue(sv)
						} else {
							attributeValues["salesforce_security_token"] = types.StringNull()
						}

						if val, ok := getStringValue(values, "salesforce_instance_url"); ok {
							attributeTypes["salesforce_instance_url"] = types.StringType
							attributeValues["salesforce_instance_url"] = types.StringValue(val)
						}
						if _, ok := configValues["salesforce_username_for_email"]; ok {
							if val, ok := getStringValue(values, "salesforce_username_for_email"); ok {
								bv, err := strconv.ParseBool(val)
								if err == nil {
									attributeTypes["salesforce_username_for_email"] = types.BoolType
									attributeValues["salesforce_username_for_email"] = types.BoolValue(bv)
								}
							}
						} else {
							attributeTypes["salesforce_username_for_email"] = types.BoolType
							attributeValues["salesforce_username_for_email"] = types.BoolNull()
						}
						if _, ok := configValues["salesforce_sync_connected_apps"]; ok {
							if val, ok := getStringValue(values, "salesforce_sync_connected_apps"); ok {
								bv, err := strconv.ParseBool(val)
								if err == nil {
									attributeTypes["salesforce_sync_connected_apps"] = types.BoolType
									attributeValues["salesforce_sync_connected_apps"] = types.BoolValue(bv)
								}
							}
						} else {
							attributeTypes["salesforce_sync_connected_apps"] = types.BoolType
							attributeValues["salesforce_sync_connected_apps"] = types.BoolNull()
						}
						r.SalesforceGroupAccessToken = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

			}
		}
	}
}

func (r *IntegrationSalesforceV2ResourceModel) RefreshFromUpdateResponse(resp *shared.Connector) {
	r.RefreshFromGetResponse(resp)
}

func (r *IntegrationSalesforceV2ResourceModel) RefreshFromCreateResponse(resp *shared.Connector) {
	if resp.AppID != nil {
		r.AppID = types.StringValue(*resp.AppID)
	} else {
		r.AppID = types.StringNull()
	}
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.DeletedAt != nil {
		r.DeletedAt = types.StringValue(resp.DeletedAt.Format(time.RFC3339))
	} else {
		r.DeletedAt = types.StringNull()
	}
	if resp.ID != nil {
		r.ID = types.StringValue(*resp.ID)
	} else {
		r.ID = types.StringNull()
	}
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339))
	} else {
		r.UpdatedAt = types.StringNull()
	}
	r.UserIds = nil
	for _, v := range resp.UserIds {
		r.UserIds = append(r.UserIds, types.StringValue(v))
	}

	configValues := r.populateConfig()
	if resp.Config != nil && *resp.Config.AtType == envConfigType {
		if config, ok := resp.Config.AdditionalProperties.(map[string]interface{}); ok {
			if values, ok := config["configuration"].(map[string]interface{}); ok {
				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "salesforce_group_oauth" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "salesforce_instance_url"); ok {
							attributeTypes["salesforce_instance_url"] = types.StringType
							attributeValues["salesforce_instance_url"] = types.StringValue(val)
						}
						if _, ok := configValues["salesforce_username_for_email"]; ok {
							if val, ok := getStringValue(values, "salesforce_username_for_email"); ok {
								bv, err := strconv.ParseBool(val)
								if err == nil {
									attributeTypes["salesforce_username_for_email"] = types.BoolType
									attributeValues["salesforce_username_for_email"] = types.BoolValue(bv)
								}
							}
						} else {
							attributeTypes["salesforce_username_for_email"] = types.BoolType
							attributeValues["salesforce_username_for_email"] = types.BoolNull()
						}
						if _, ok := configValues["salesforce_sync_connected_apps"]; ok {
							if val, ok := getStringValue(values, "salesforce_sync_connected_apps"); ok {
								bv, err := strconv.ParseBool(val)
								if err == nil {
									attributeTypes["salesforce_sync_connected_apps"] = types.BoolType
									attributeValues["salesforce_sync_connected_apps"] = types.BoolValue(bv)
								}
							}
						} else {
							attributeTypes["salesforce_sync_connected_apps"] = types.BoolType
							attributeValues["salesforce_sync_connected_apps"] = types.BoolNull()
						}
						r.SalesforceGroupOauth = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

				if groupName, ok := getStringValue(values, "C1_selected_field_group_name"); ok {
					if groupName == "salesforce_group_access_token" {
						attributeTypes := make(map[string]attr.Type, len(values))
						attributeValues := make(map[string]attr.Value, len(values))

						if val, ok := getStringValue(values, "salesforce_username"); ok {
							attributeTypes["salesforce_username"] = types.StringType
							attributeValues["salesforce_username"] = types.StringValue(val)
						}

						attributeTypes["salesforce_password"] = types.StringType
						if sv, ok := configValues["salesforce_password"].(string); ok {
							attributeValues["salesforce_password"] = types.StringValue(sv)
						} else {
							attributeValues["salesforce_password"] = types.StringNull()
						}

						attributeTypes["salesforce_security_token"] = types.StringType
						if sv, ok := configValues["salesforce_security_token"].(string); ok {
							attributeValues["salesforce_security_token"] = types.StringValue(sv)
						} else {
							attributeValues["salesforce_security_token"] = types.StringNull()
						}

						if val, ok := getStringValue(values, "salesforce_instance_url"); ok {
							attributeTypes["salesforce_instance_url"] = types.StringType
							attributeValues["salesforce_instance_url"] = types.StringValue(val)
						}
						if _, ok := configValues["salesforce_username_for_email"]; ok {
							if val, ok := getStringValue(values, "salesforce_username_for_email"); ok {
								bv, err := strconv.ParseBool(val)
								if err == nil {
									attributeTypes["salesforce_username_for_email"] = types.BoolType
									attributeValues["salesforce_username_for_email"] = types.BoolValue(bv)
								}
							}
						} else {
							attributeTypes["salesforce_username_for_email"] = types.BoolType
							attributeValues["salesforce_username_for_email"] = types.BoolNull()
						}
						if _, ok := configValues["salesforce_sync_connected_apps"]; ok {
							if val, ok := getStringValue(values, "salesforce_sync_connected_apps"); ok {
								bv, err := strconv.ParseBool(val)
								if err == nil {
									attributeTypes["salesforce_sync_connected_apps"] = types.BoolType
									attributeValues["salesforce_sync_connected_apps"] = types.BoolValue(bv)
								}
							}
						} else {
							attributeTypes["salesforce_sync_connected_apps"] = types.BoolType
							attributeValues["salesforce_sync_connected_apps"] = types.BoolNull()
						}
						r.SalesforceGroupAccessToken = types.ObjectValueMust(attributeTypes, attributeValues)
					}
				}

			}
		}
	}
}
