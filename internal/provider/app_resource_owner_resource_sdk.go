// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppResourceOwnerResourceModel) RefreshFromSharedListAppResourceOwnerIDsResponse(ctx context.Context, resp *shared.ListAppResourceOwnerIDsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.UserIds != nil {
			r.UserIds = make([]types.String, 0, len(resp.UserIds))
			for _, v := range resp.UserIds {
				r.UserIds = append(r.UserIds, types.StringValue(v))
			}
		}
	}

	return diags
}

func (r *AppResourceOwnerResourceModel) RefreshFromSharedSetAppResourceOwnersResponse(ctx context.Context, resp *shared.SetAppResourceOwnersResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
	}

	return diags
}

func (r *AppResourceOwnerResourceModel) ToOperationsC1APIAppV1AppResourceOwnersDeleteRequest(ctx context.Context) (*operations.C1APIAppV1AppResourceOwnersDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appID string
	appID = r.AppID.ValueString()

	var resourceTypeID string
	resourceTypeID = r.ResourceTypeID.ValueString()

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	deleteAppResourceOwnersRequest, deleteAppResourceOwnersRequestDiags := r.ToSharedDeleteAppResourceOwnersRequest(ctx)
	diags.Append(deleteAppResourceOwnersRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAppV1AppResourceOwnersDeleteRequest{
		AppID:                          appID,
		ResourceTypeID:                 resourceTypeID,
		ResourceID:                     resourceID,
		DeleteAppResourceOwnersRequest: deleteAppResourceOwnersRequest,
	}

	return &out, diags
}

func (r *AppResourceOwnerResourceModel) ToOperationsC1APIAppV1AppResourceOwnersListOwnerIDsRequest(ctx context.Context) (*operations.C1APIAppV1AppResourceOwnersListOwnerIDsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appID string
	appID = r.AppID.ValueString()

	var resourceTypeID string
	resourceTypeID = r.ResourceTypeID.ValueString()

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	out := operations.C1APIAppV1AppResourceOwnersListOwnerIDsRequest{
		AppID:          appID,
		ResourceTypeID: resourceTypeID,
		ResourceID:     resourceID,
	}

	return &out, diags
}

func (r *AppResourceOwnerResourceModel) ToOperationsC1APIAppV1AppResourceOwnersSetRequest(ctx context.Context) (*operations.C1APIAppV1AppResourceOwnersSetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appID string
	appID = r.AppID.ValueString()

	var resourceTypeID string
	resourceTypeID = r.ResourceTypeID.ValueString()

	var resourceID string
	resourceID = r.ResourceID.ValueString()

	setAppResourceOwnersRequest, setAppResourceOwnersRequestDiags := r.ToSharedSetAppResourceOwnersRequest(ctx)
	diags.Append(setAppResourceOwnersRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAppV1AppResourceOwnersSetRequest{
		AppID:                       appID,
		ResourceTypeID:              resourceTypeID,
		ResourceID:                  resourceID,
		SetAppResourceOwnersRequest: setAppResourceOwnersRequest,
	}

	return &out, diags
}

func (r *AppResourceOwnerResourceModel) ToSharedDeleteAppResourceOwnersRequest(ctx context.Context) (*shared.DeleteAppResourceOwnersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var userIds []string
	if r.UserIds != nil {
		userIds = make([]string, 0, len(r.UserIds))
		for _, userIdsItem := range r.UserIds {
			userIds = append(userIds, userIdsItem.ValueString())
		}
	}
	out := shared.DeleteAppResourceOwnersRequest{
		UserIds: userIds,
	}

	return &out, diags
}

func (r *AppResourceOwnerResourceModel) ToSharedSetAppResourceOwnersRequest(ctx context.Context) (*shared.SetAppResourceOwnersRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var userIds []string
	if r.UserIds != nil {
		userIds = make([]string, 0, len(r.UserIds))
		for _, userIdsItem := range r.UserIds {
			userIds = append(userIds, userIdsItem.ValueString())
		}
	}
	out := shared.SetAppResourceOwnersRequest{
		UserIds: userIds,
	}

	return &out, diags
}
