// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &RequestSchemaResource{}
var _ resource.ResourceWithImportState = &RequestSchemaResource{}

func NewRequestSchemaResource() resource.Resource {
	return &RequestSchemaResource{}
}

// RequestSchemaResource defines the resource implementation.
type RequestSchemaResource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// RequestSchemaResourceModel describes the resource data model.
type RequestSchemaResourceModel struct {
	CreatedAt       types.String    `tfsdk:"created_at"`
	DeletedAt       types.String    `tfsdk:"-"`
	Description     types.String    `tfsdk:"description"`
	Fields          []tfTypes.Field `tfsdk:"fields"`
	Form            *tfTypes.Form   `tfsdk:"form"`
	ID              types.String    `tfsdk:"id"`
	ModifiedAt      types.String    `tfsdk:"modified_at"`
	Name            types.String    `tfsdk:"name"`
	RequestSchemaID types.String    `tfsdk:"request_schema_id"`
}

func (r *RequestSchemaResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_request_schema"
}

func (r *RequestSchemaResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "RequestSchema Resource",
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"description": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `The description field. Requires replacement if changed.`,
			},
			"fields": schema.ListNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				NestedObject: schema.NestedAttributeObject{
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
					},
					Attributes: map[string]schema.Attribute{
						"bool_field": schema.SingleNestedAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
							},
							Attributes: map[string]schema.Attribute{
								"bool_rules": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"const": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Const specifies that this field must be exactly the specified value. Requires replacement if changed.`,
										},
									},
									Description: `BoolRules describes the constraints applied to ` + "`" + `bool` + "`" + ` values. Requires replacement if changed.`,
								},
								"checkbox_field": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `The CheckboxField message. Requires replacement if changed.`,
								},
								"default_value": schema.BoolAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Bool{
										boolplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `The defaultValue field. Requires replacement if changed.`,
								},
							},
							MarkdownDescription: `The BoolField message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
								`  - checkboxField` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
								`  - rules` + "\n" +
								`Requires replacement if changed.`,
						},
						"description": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `The description field. Requires replacement if changed.`,
						},
						"display_name": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `The displayName field. Requires replacement if changed.`,
						},
						"int64_field": schema.SingleNestedAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
							},
							Attributes: map[string]schema.Attribute{
								"default_value": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									MarkdownDescription: `The defaultValue field.` + "\n" +
										`This field is part of the ` + "`" + `_default_value` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.form.v1.Int64Field` + "`" + ` for more details.` + "\n" +
										`Requires replacement if changed.`,
								},
								"int64_rules": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"const": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Const specifies that this field must be exactly the specified value. Requires replacement if changed.`,
										},
										"gt": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `Gt specifies that this field must be greater than the specified value,` + "\n" +
												` exclusive. If the value of Gt is larger than a specified Lt or Lte, the` + "\n" +
												` range is reversed.` + "\n" +
												`Requires replacement if changed.`,
										},
										"gte": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `Gte specifies that this field must be greater than or equal to the` + "\n" +
												` specified value, inclusive. If the value of Gte is larger than a` + "\n" +
												` specified Lt or Lte, the range is reversed.` + "\n" +
												`Requires replacement if changed.`,
										},
										"ignore_empty": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `IgnoreEmpty specifies that the validation rules of this field should be` + "\n" +
												` evaluated only if the field is not empty` + "\n" +
												`Requires replacement if changed.`,
										},
										"in": schema.ListAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.List{
												listplanmodifier.RequiresReplaceIfConfigured(),
											},
											ElementType: types.StringType,
											MarkdownDescription: `In specifies that this field must be equal to one of the specified` + "\n" +
												` values` + "\n" +
												`Requires replacement if changed.`,
										},
										"lt": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `Lt specifies that this field must be less than the specified value,` + "\n" +
												` exclusive` + "\n" +
												`Requires replacement if changed.`,
										},
										"lte": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `Lte specifies that this field must be less than or equal to the` + "\n" +
												` specified value, inclusive` + "\n" +
												`Requires replacement if changed.`,
										},
										"not_in": schema.ListAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.List{
												listplanmodifier.RequiresReplaceIfConfigured(),
											},
											ElementType: types.StringType,
											MarkdownDescription: `NotIn specifies that this field cannot be equal to one of the specified` + "\n" +
												` values` + "\n" +
												`Requires replacement if changed.`,
										},
									},
									Description: `Int64Rules describes the constraints applied to ` + "`" + `int64` + "`" + ` values. Requires replacement if changed.`,
								},
								"number_field": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"max_value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `The maxValue field. Requires replacement if changed.`,
										},
										"min_value": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `The minValue field. Requires replacement if changed.`,
										},
										"step": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `The step field. Requires replacement if changed.`,
										},
									},
									Description: `The NumberField message. Requires replacement if changed.`,
								},
								"placeholder": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `The placeholder field. Requires replacement if changed.`,
								},
							},
							MarkdownDescription: `The Int64Field message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
								`  - numberField` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _default_value. Only a single field of the following list may be set at a time:` + "\n" +
								`  - defaultValue` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
								`  - rules` + "\n" +
								`Requires replacement if changed.`,
						},
						"name": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `The name field. Requires replacement if changed.`,
						},
						"string_field": schema.SingleNestedAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
							},
							Attributes: map[string]schema.Attribute{
								"default_value": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `The defaultValue field. Requires replacement if changed.`,
								},
								"password_field": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `The PasswordField message. Requires replacement if changed.`,
								},
								"placeholder": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `The placeholder field. Requires replacement if changed.`,
								},
								"select_field": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"options": schema.ListNestedAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.List{
												listplanmodifier.RequiresReplaceIfConfigured(),
											},
											NestedObject: schema.NestedAttributeObject{
												PlanModifiers: []planmodifier.Object{
													objectplanmodifier.RequiresReplaceIfConfigured(),
												},
												Attributes: map[string]schema.Attribute{
													"display_name": schema.StringAttribute{
														Optional: true,
														PlanModifiers: []planmodifier.String{
															stringplanmodifier.RequiresReplaceIfConfigured(),
														},
														Description: `The displayName field. Requires replacement if changed.`,
													},
													"value": schema.StringAttribute{
														Optional: true,
														PlanModifiers: []planmodifier.String{
															stringplanmodifier.RequiresReplaceIfConfigured(),
														},
														Description: `The value field. Requires replacement if changed.`,
													},
												},
											},
											Description: `The options field. Requires replacement if changed.`,
										},
									},
									Description: `The SelectField message. Requires replacement if changed.`,
								},
								"string_rules": schema.StringAttribute{
									CustomType: jsontypes.NormalizedType{},
									Optional:   true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									MarkdownDescription: `StringRules describe the constraints applied to ` + "`" + `string` + "`" + ` values` + "\n" +
										`` + "\n" +
										`This message contains a oneof named well_known. Only a single field of the following list may be set at a time:` + "\n" +
										`  - email` + "\n" +
										`  - hostname` + "\n" +
										`  - ip` + "\n" +
										`  - ipv4` + "\n" +
										`  - ipv6` + "\n" +
										`  - uri` + "\n" +
										`  - uriRef` + "\n" +
										`  - address` + "\n" +
										`  - uuid` + "\n" +
										`  - wellKnownRegex` + "\n" +
										`Requires replacement if changed.; Parsed as JSON.`,
								},
								"text_field": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"multiline": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `The multiline field. Requires replacement if changed.`,
										},
									},
									Description: `The TextField message. Requires replacement if changed.`,
								},
							},
							MarkdownDescription: `The StringField message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
								`  - textField` + "\n" +
								`  - passwordField` + "\n" +
								`  - selectField` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
								`  - rules` + "\n" +
								`Requires replacement if changed.`,
						},
						"string_slice_field": schema.SingleNestedAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
							},
							Attributes: map[string]schema.Attribute{
								"chips_field": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `The ChipsField message. Requires replacement if changed.`,
								},
								"default_values": schema.ListAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.List{
										listplanmodifier.RequiresReplaceIfConfigured(),
									},
									ElementType: types.StringType,
									Description: `The defaultValues field. Requires replacement if changed.`,
								},
								"placeholder": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `The placeholder field. Requires replacement if changed.`,
								},
								"repeated_rules": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"field_rules": schema.StringAttribute{
											CustomType: jsontypes.NormalizedType{},
											Optional:   true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `FieldRules encapsulates the rules for each type of field. Depending on the` + "\n" +
												` field, the correct set should be used to ensure proper validations.` + "\n" +
												`` + "\n" +
												`This message contains a oneof named type. Only a single field of the following list may be set at a time:` + "\n" +
												`  - float` + "\n" +
												`  - double` + "\n" +
												`  - int32` + "\n" +
												`  - int64` + "\n" +
												`  - uint32` + "\n" +
												`  - uint64` + "\n" +
												`  - sint32` + "\n" +
												`  - sint64` + "\n" +
												`  - fixed32` + "\n" +
												`  - fixed64` + "\n" +
												`  - sfixed32` + "\n" +
												`  - sfixed64` + "\n" +
												`  - bool` + "\n" +
												`  - string` + "\n" +
												`  - bytes` + "\n" +
												`  - enum` + "\n" +
												`  - repeated` + "\n" +
												`  - map` + "\n" +
												`  - any` + "\n" +
												`  - duration` + "\n" +
												`  - timestamp` + "\n" +
												`Requires replacement if changed.; Parsed as JSON.`,
										},
										"ignore_empty": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `IgnoreEmpty specifies that the validation rules of this field should be` + "\n" +
												` evaluated only if the field is not empty` + "\n" +
												`Requires replacement if changed.`,
										},
										"max_items": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `MaxItems specifies that this field must have the specified number of` + "\n" +
												` items at a maximum` + "\n" +
												`Requires replacement if changed.`,
										},
										"min_items": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `MinItems specifies that this field must have the specified number of` + "\n" +
												` items at a minimum` + "\n" +
												`Requires replacement if changed.`,
										},
										"unique": schema.BoolAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.Bool{
												boolplanmodifier.RequiresReplaceIfConfigured(),
											},
											MarkdownDescription: `Unique specifies that all elements in this field must be unique. This` + "\n" +
												` contraint is only applicable to scalar and enum types (messages are not` + "\n" +
												` supported).` + "\n" +
												`Requires replacement if changed.`,
										},
									},
									Description: `RepeatedRules describe the constraints applied to ` + "`" + `repeated` + "`" + ` values. Requires replacement if changed.`,
								},
							},
							MarkdownDescription: `The StringSliceField message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
								`  - chipsField` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
								`  - rules` + "\n" +
								`Requires replacement if changed.`,
						},
					},
				},
				Description: `The fields field. Requires replacement if changed.`,
			},
			"form": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Computed:    true,
						Description: `The description field.`,
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The displayName field.`,
					},
					"field_relationships": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"at_least_one": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The AtLeastOne message.`,
								},
								"field_names": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `The names of the fields that share this relationship`,
								},
								"mutually_exclusive": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The MutuallyExclusive message.`,
								},
								"required_together": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The RequiredTogether message.`,
								},
							},
						},
						Description: `The fieldRelationships field.`,
					},
					"fields": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"bool_field": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"bool_rules": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"const": schema.BoolAttribute{
													Computed:    true,
													Description: `Const specifies that this field must be exactly the specified value`,
												},
											},
											Description: `BoolRules describes the constraints applied to ` + "`" + `bool` + "`" + ` values`,
										},
										"checkbox_field": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `The CheckboxField message.`,
										},
										"default_value": schema.BoolAttribute{
											Computed:    true,
											Description: `The defaultValue field.`,
										},
									},
									MarkdownDescription: `The BoolField message.` + "\n" +
										`` + "\n" +
										`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
										`  - checkboxField` + "\n" +
										`` + "\n" +
										`` + "\n" +
										`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
										`  - rules`,
								},
								"description": schema.StringAttribute{
									Computed:    true,
									Description: `The description field.`,
								},
								"display_name": schema.StringAttribute{
									Computed:    true,
									Description: `The displayName field.`,
								},
								"int64_field": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"default_value": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `The defaultValue field.` + "\n" +
												`This field is part of the ` + "`" + `_default_value` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `c1.api.form.v1.Int64Field` + "`" + ` for more details.`,
										},
										"int64_rules": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"const": schema.StringAttribute{
													Computed:    true,
													Description: `Const specifies that this field must be exactly the specified value`,
												},
												"gt": schema.StringAttribute{
													Computed: true,
													MarkdownDescription: `Gt specifies that this field must be greater than the specified value,` + "\n" +
														` exclusive. If the value of Gt is larger than a specified Lt or Lte, the` + "\n" +
														` range is reversed.`,
												},
												"gte": schema.StringAttribute{
													Computed: true,
													MarkdownDescription: `Gte specifies that this field must be greater than or equal to the` + "\n" +
														` specified value, inclusive. If the value of Gte is larger than a` + "\n" +
														` specified Lt or Lte, the range is reversed.`,
												},
												"ignore_empty": schema.BoolAttribute{
													Computed: true,
													MarkdownDescription: `IgnoreEmpty specifies that the validation rules of this field should be` + "\n" +
														` evaluated only if the field is not empty`,
												},
												"in": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
													MarkdownDescription: `In specifies that this field must be equal to one of the specified` + "\n" +
														` values`,
												},
												"lt": schema.StringAttribute{
													Computed: true,
													MarkdownDescription: `Lt specifies that this field must be less than the specified value,` + "\n" +
														` exclusive`,
												},
												"lte": schema.StringAttribute{
													Computed: true,
													MarkdownDescription: `Lte specifies that this field must be less than or equal to the` + "\n" +
														` specified value, inclusive`,
												},
												"not_in": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
													MarkdownDescription: `NotIn specifies that this field cannot be equal to one of the specified` + "\n" +
														` values`,
												},
											},
											Description: `Int64Rules describes the constraints applied to ` + "`" + `int64` + "`" + ` values`,
										},
										"number_field": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"max_value": schema.StringAttribute{
													Computed:    true,
													Description: `The maxValue field.`,
												},
												"min_value": schema.StringAttribute{
													Computed:    true,
													Description: `The minValue field.`,
												},
												"step": schema.StringAttribute{
													Computed:    true,
													Description: `The step field.`,
												},
											},
											Description: `The NumberField message.`,
										},
										"placeholder": schema.StringAttribute{
											Computed:    true,
											Description: `The placeholder field.`,
										},
									},
									MarkdownDescription: `The Int64Field message.` + "\n" +
										`` + "\n" +
										`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
										`  - numberField` + "\n" +
										`` + "\n" +
										`` + "\n" +
										`This message contains a oneof named _default_value. Only a single field of the following list may be set at a time:` + "\n" +
										`  - defaultValue` + "\n" +
										`` + "\n" +
										`` + "\n" +
										`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
										`  - rules`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Description: `The name field.`,
								},
								"string_field": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"default_value": schema.StringAttribute{
											Computed:    true,
											Description: `The defaultValue field.`,
										},
										"password_field": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `The PasswordField message.`,
										},
										"placeholder": schema.StringAttribute{
											Computed:    true,
											Description: `The placeholder field.`,
										},
										"select_field": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"options": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"display_name": schema.StringAttribute{
																Computed:    true,
																Description: `The displayName field.`,
															},
															"value": schema.StringAttribute{
																Computed:    true,
																Description: `The value field.`,
															},
														},
													},
													Description: `The options field.`,
												},
											},
											Description: `The SelectField message.`,
										},
										"string_rules": schema.StringAttribute{
											CustomType: jsontypes.NormalizedType{},
											Computed:   true,
											MarkdownDescription: `StringRules describe the constraints applied to ` + "`" + `string` + "`" + ` values` + "\n" +
												`` + "\n" +
												`This message contains a oneof named well_known. Only a single field of the following list may be set at a time:` + "\n" +
												`  - email` + "\n" +
												`  - hostname` + "\n" +
												`  - ip` + "\n" +
												`  - ipv4` + "\n" +
												`  - ipv6` + "\n" +
												`  - uri` + "\n" +
												`  - uriRef` + "\n" +
												`  - address` + "\n" +
												`  - uuid` + "\n" +
												`  - wellKnownRegex` + "\n" +
												`Parsed as JSON.`,
										},
										"text_field": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"multiline": schema.BoolAttribute{
													Computed:    true,
													Description: `The multiline field.`,
												},
											},
											Description: `The TextField message.`,
										},
									},
									MarkdownDescription: `The StringField message.` + "\n" +
										`` + "\n" +
										`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
										`  - textField` + "\n" +
										`  - passwordField` + "\n" +
										`  - selectField` + "\n" +
										`` + "\n" +
										`` + "\n" +
										`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
										`  - rules`,
								},
								"string_slice_field": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"chips_field": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `The ChipsField message.`,
										},
										"default_values": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `The defaultValues field.`,
										},
										"placeholder": schema.StringAttribute{
											Computed:    true,
											Description: `The placeholder field.`,
										},
										"repeated_rules": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"field_rules": schema.StringAttribute{
													CustomType: jsontypes.NormalizedType{},
													Computed:   true,
													MarkdownDescription: `FieldRules encapsulates the rules for each type of field. Depending on the` + "\n" +
														` field, the correct set should be used to ensure proper validations.` + "\n" +
														`` + "\n" +
														`This message contains a oneof named type. Only a single field of the following list may be set at a time:` + "\n" +
														`  - float` + "\n" +
														`  - double` + "\n" +
														`  - int32` + "\n" +
														`  - int64` + "\n" +
														`  - uint32` + "\n" +
														`  - uint64` + "\n" +
														`  - sint32` + "\n" +
														`  - sint64` + "\n" +
														`  - fixed32` + "\n" +
														`  - fixed64` + "\n" +
														`  - sfixed32` + "\n" +
														`  - sfixed64` + "\n" +
														`  - bool` + "\n" +
														`  - string` + "\n" +
														`  - bytes` + "\n" +
														`  - enum` + "\n" +
														`  - repeated` + "\n" +
														`  - map` + "\n" +
														`  - any` + "\n" +
														`  - duration` + "\n" +
														`  - timestamp` + "\n" +
														`Parsed as JSON.`,
												},
												"ignore_empty": schema.BoolAttribute{
													Computed: true,
													MarkdownDescription: `IgnoreEmpty specifies that the validation rules of this field should be` + "\n" +
														` evaluated only if the field is not empty`,
												},
												"max_items": schema.StringAttribute{
													Computed: true,
													MarkdownDescription: `MaxItems specifies that this field must have the specified number of` + "\n" +
														` items at a maximum`,
												},
												"min_items": schema.StringAttribute{
													Computed: true,
													MarkdownDescription: `MinItems specifies that this field must have the specified number of` + "\n" +
														` items at a minimum`,
												},
												"unique": schema.BoolAttribute{
													Computed: true,
													MarkdownDescription: `Unique specifies that all elements in this field must be unique. This` + "\n" +
														` contraint is only applicable to scalar and enum types (messages are not` + "\n" +
														` supported).`,
												},
											},
											Description: `RepeatedRules describe the constraints applied to ` + "`" + `repeated` + "`" + ` values`,
										},
									},
									MarkdownDescription: `The StringSliceField message.` + "\n" +
										`` + "\n" +
										`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
										`  - chipsField` + "\n" +
										`` + "\n" +
										`` + "\n" +
										`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
										`  - rules`,
								},
							},
						},
						Description: `The fields field.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `The id field.`,
					},
				},
				Description: `A form is a collection of fields to be filled out by a user`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id field.`,
			},
			"modified_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"name": schema.StringAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `The name field. Requires replacement if changed.`,
			},
			"request_schema_id": schema.StringAttribute{
				Computed:    true,
				Description: `The requestSchemaId field.`,
			},
		},
	}
}

func (r *RequestSchemaResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RequestSchemaResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *RequestSchemaResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedRequestSchemaServiceCreateRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RequestSchema.Create(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RequestSchemaServiceCreateResponse != nil && res.RequestSchemaServiceCreateResponse.RequestSchema != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRequestSchema(ctx, res.RequestSchemaServiceCreateResponse.RequestSchema)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RequestSchemaResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *RequestSchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RequestSchemaResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *RequestSchemaResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIRequestSchemaV1RequestSchemaServiceUpdateRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RequestSchema.Update(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RequestSchemaServiceUpdateResponse != nil && res.RequestSchemaServiceUpdateResponse.RequestSchema != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRequestSchema(ctx, res.RequestSchemaServiceUpdateResponse.RequestSchema)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *RequestSchemaResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *RequestSchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIRequestSchemaV1RequestSchemaServiceDeleteRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RequestSchema.Delete(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *RequestSchemaResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource request_schema.")
}
