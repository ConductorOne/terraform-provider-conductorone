// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &BundleAutomationDataSource{}
var _ datasource.DataSourceWithConfigure = &BundleAutomationDataSource{}

func NewBundleAutomationDataSource() datasource.DataSource {
	return &BundleAutomationDataSource{}
}

// BundleAutomationDataSource is the data source implementation.
type BundleAutomationDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// BundleAutomationDataSourceModel describes the data model.
type BundleAutomationDataSourceModel struct {
	BundleAutomationCircuitBreaker  *tfTypes.BundleAutomationCircuitBreaker  `tfsdk:"bundle_automation_circuit_breaker"`
	BundleAutomationLastRunState    *tfTypes.BundleAutomationLastRunState    `tfsdk:"bundle_automation_last_run_state"`
	BundleAutomationRuleEntitlement *tfTypes.BundleAutomationRuleEntitlement `tfsdk:"bundle_automation_rule_entitlement"`
	CreateTasks                     types.Bool                               `tfsdk:"create_tasks"`
	CreatedAt                       types.String                             `tfsdk:"created_at"`
	DeletedAt                       types.String                             `tfsdk:"deleted_at"`
	DisableCircuitBreaker           types.Bool                               `tfsdk:"disable_circuit_breaker"`
	Enabled                         types.Bool                               `tfsdk:"enabled"`
	RequestCatalogID                types.String                             `tfsdk:"request_catalog_id"`
	TenantID                        types.String                             `tfsdk:"tenant_id"`
	UpdatedAt                       types.String                             `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *BundleAutomationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_bundle_automation"
}

// Schema defines the schema for the data source.
func (r *BundleAutomationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "BundleAutomation DataSource",

		Attributes: map[string]schema.Attribute{
			"bundle_automation_circuit_breaker": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"removed_members_threshold_percentage": schema.StringAttribute{
						Computed:    true,
						Description: `The removedMembersThresholdPercentage field.`,
					},
					"state": schema.StringAttribute{
						Computed:    true,
						Description: `The state field.`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
					},
					"user_ref": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `The id of the user.`,
							},
						},
						Description: `A reference to a user.`,
					},
				},
				Description: `The BundleAutomationCircuitBreaker message.`,
			},
			"bundle_automation_last_run_state": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"error_message": schema.StringAttribute{
						Computed:    true,
						Description: `The errorMessage field.`,
					},
					"last_run_at": schema.StringAttribute{
						Computed: true,
					},
					"status": schema.StringAttribute{
						Computed:    true,
						Description: `The status field.`,
					},
				},
				Description: `The BundleAutomationLastRunState message.`,
			},
			"bundle_automation_rule_entitlement": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"entitlement_refs": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed:    true,
									Description: `The appId field.`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `The id field.`,
								},
							},
						},
						Description: `The entitlementRefs field.`,
					},
				},
				Description: `The BundleAutomationRuleEntitlement message.`,
			},
			"create_tasks": schema.BoolAttribute{
				Computed:    true,
				Description: `The createTasks field.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"disable_circuit_breaker": schema.BoolAttribute{
				Computed:    true,
				Description: `The disableCircuitBreaker field.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `The enabled field.`,
			},
			"request_catalog_id": schema.StringAttribute{
				Required: true,
			},
			"tenant_id": schema.StringAttribute{
				Computed:    true,
				Description: `The tenantId field.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *BundleAutomationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *BundleAutomationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *BundleAutomationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIRequestcatalogV1RequestCatalogManagementServiceGetBundleAutomationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RequestCatalogManagement.GetBundleAutomation(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.BundleAutomation != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedBundleAutomation(ctx, res.BundleAutomation)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
