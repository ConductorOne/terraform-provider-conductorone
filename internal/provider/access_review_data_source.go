// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AccessReviewDataSource{}
var _ datasource.DataSourceWithConfigure = &AccessReviewDataSource{}

func NewAccessReviewDataSource() datasource.DataSource {
	return &AccessReviewDataSource{}
}

// AccessReviewDataSource is the data source implementation.
type AccessReviewDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// AccessReviewDataSourceModel describes the data model.
type AccessReviewDataSourceModel struct {
	AccessReviewExclusionScope *tfTypes.AccessReviewExclusionScope              `tfsdk:"access_review_exclusion_scope"`
	AccessReviewInclusionScope *tfTypes.AccessReviewInclusionScope              `tfsdk:"access_review_inclusion_scope"`
	AccessReviewScope          *tfTypes.AccessReviewScope                       `tfsdk:"access_review_scope"`
	AccessReviewScopeV2        *tfTypes.AccessReviewScopeV2                     `tfsdk:"access_review_scope_v2"`
	AccessReviewTemplateID     types.String                                     `tfsdk:"access_review_template_id"`
	AutoResolve                types.Bool                                       `tfsdk:"auto_resolve"`
	BindingObjectSetup         *tfTypes.BindingObjectSetup                      `tfsdk:"binding_object_setup"`
	ClosedAt                   types.String                                     `tfsdk:"closed_at"`
	CompletionDate             types.String                                     `tfsdk:"completion_date"`
	ConnectorSourcesFrozenAt   types.String                                     `tfsdk:"connector_sources_frozen_at"`
	CreatedAt                  types.String                                     `tfsdk:"created_at"`
	CreatedByID                types.String                                     `tfsdk:"created_by_id"`
	DefaultView                types.String                                     `tfsdk:"default_view"`
	Description                types.String                                     `tfsdk:"description"`
	DisplayName                types.String                                     `tfsdk:"display_name"`
	Expanded                   []tfTypes.AccessReviewServiceGetResponseExpanded `tfsdk:"expanded"`
	ExpectedTicketCount        types.Int32                                      `tfsdk:"expected_ticket_count"`
	HasAccuracySupport         types.Bool                                       `tfsdk:"has_accuracy_support"`
	ID                         types.String                                     `tfsdk:"id"`
	MultiAppSetup              *tfTypes.MultiAppSetup                           `tfsdk:"multi_app_setup"`
	PolicyID                   types.String                                     `tfsdk:"policy_id"`
	ReviewInstructions         types.String                                     `tfsdk:"review_instructions"`
	ScopingVersion             types.String                                     `tfsdk:"scoping_version"`
	SingleAppSetup             *tfTypes.SingleAppSetup                          `tfsdk:"single_app_setup"`
	StartedAt                  types.String                                     `tfsdk:"started_at"`
	State                      types.String                                     `tfsdk:"state"`
	UpdatedAt                  types.String                                     `tfsdk:"updated_at"`
	UsePolicyOverride          types.Bool                                       `tfsdk:"use_policy_override"`
}

// Metadata returns the data source type name.
func (r *AccessReviewDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_access_review"
}

// Schema defines the schema for the data source.
func (r *AccessReviewDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AccessReview DataSource",

		Attributes: map[string]schema.Attribute{
			"access_review_exclusion_scope": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"app_user_statuses": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The appUserStatuses field.`,
					},
					"app_user_types": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The appUserTypes field.`,
					},
				},
				Description: `The AccessReviewExclusionScope message.`,
			},
			"access_review_inclusion_scope": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"app_user_statuses": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The appUserStatuses field.`,
					},
					"app_user_types": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The appUserTypes field.`,
					},
					"manager_ids": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The managerIds field.`,
					},
					"multi_user_profile_attributes": schema.MapNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"values": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"value": schema.StringAttribute{
												Computed:    true,
												Description: `The value field.`,
											},
										},
									},
									Description: `The values field.`,
								},
							},
						},
						Description: `The multiUserProfileAttributes field.`,
					},
					"no_account_owners": schema.BoolAttribute{
						Computed:    true,
						Description: `The noAccountOwners field.`,
					},
					"user_ids": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The userIds field.`,
					},
					"user_statuses": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The userStatuses field.`,
					},
				},
				Description: `The AccessReviewInclusionScope message.`,
			},
			"access_review_scope": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"app_user_statuses": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The appUserStatuses field.`,
					},
					"app_user_types": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `The appUserTypes field.`,
					},
				},
				Description: `The AccessReviewScope message.`,
			},
			"access_review_scope_v2": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"account_criteria_scope": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"account_types": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `The accountTypes field.`,
							},
							"app_user_statuses": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `The appUserStatuses field.`,
							},
							"no_account_owner": schema.BoolAttribute{
								Computed:    true,
								Description: `The noAccountOwner field.`,
							},
						},
						Description: `The AccountCriteriaScope message.`,
					},
					"all_accounts_scope": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The AllAccountsScope message.`,
					},
					"all_grants_scope": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The AllGrantsScope message.`,
					},
					"all_users_scope": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The AllUsersScope message.`,
					},
					"app_selection_criteria_scope": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The AppSelectionCriteriaScope message.`,
					},
					"application_access_scope": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The ApplicationAccessScope message.`,
					},
					"grants_by_criteria_scope": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"days_since_added": schema.StringAttribute{
								Computed: true,
							},
							"days_since_last_used": schema.StringAttribute{
								Computed: true,
							},
							"days_since_reviewed": schema.StringAttribute{
								Computed: true,
							},
							"grant_access_profile_filter": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"excluded_access_profile_ids": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `List of access profiles to exclude if type is EXCLUDE_SPECIFIC`,
									},
									"filter_type": schema.StringAttribute{
										Computed:    true,
										Description: `The filterType field.`,
									},
								},
								Description: `The GrantAccessProfileFilter message.`,
							},
							"grants_added_between": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"end_date": schema.StringAttribute{
										Computed: true,
									},
									"start_date": schema.StringAttribute{
										Computed: true,
									},
								},
								Description: `The GrantsAddedBetween message.`,
							},
							"source_filter": schema.StringAttribute{
								Computed:    true,
								Description: `The sourceFilter field.`,
							},
							"type_filter": schema.StringAttribute{
								Computed:    true,
								Description: `The typeFilter field.`,
							},
						},
						MarkdownDescription: `The GrantsByCriteriaScope message.` + "\n" +
							`` + "\n" +
							`This message contains a oneof named criteria_filter. Only a single field of the following list may be set at a time:` + "\n" +
							`  - daysSinceAdded` + "\n" +
							`  - daysSinceReviewed` + "\n" +
							`  - grantsAddedBetween`,
					},
					"resource_type_selection_scope": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The ResourceTypeSelectionScope message.`,
					},
					"selected_users_scope": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"user_ids": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `The userIds field.`,
							},
						},
						Description: `The SelectedUsersScope message.`,
					},
					"specific_resources_scope": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `The SpecificResourcesScope message.`,
					},
					"user_criteria_scope": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"group_app_entitlements_ref": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"app_id": schema.StringAttribute{
											Computed:    true,
											Description: `The appId field.`,
										},
										"id": schema.StringAttribute{
											Computed:    true,
											Description: `The id field.`,
										},
									},
								},
								Description: `The groupAppEntitlementsRef field.`,
							},
							"manager_user_ids": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `The managerUserIds field.`,
							},
							"multi_user_profile_attributes": schema.MapNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"values": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"value": schema.StringAttribute{
														Computed:    true,
														Description: `The value field.`,
													},
												},
											},
											Description: `The values field.`,
										},
									},
								},
								Description: `The multiUserProfileAttributes field.`,
							},
							"user_status": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `The userStatus field.`,
							},
						},
						Description: `The UserCriteriaScope message.`,
					},
				},
				MarkdownDescription: `The AccessReviewScopeV2 message.` + "\n" +
					`` + "\n" +
					`This message contains a oneof named apps_and_resources_scope. Only a single field of the following list may be set at a time:` + "\n" +
					`  - appAccess` + "\n" +
					`  - specificResources` + "\n" +
					`  - appSelectionCriteria` + "\n" +
					`  - resourceTypeSelections` + "\n" +
					`` + "\n" +
					`` + "\n" +
					`This message contains a oneof named users_scope. Only a single field of the following list may be set at a time:` + "\n" +
					`  - allUsers` + "\n" +
					`  - selectedUsers` + "\n" +
					`  - userCriteria` + "\n" +
					`` + "\n" +
					`` + "\n" +
					`This message contains a oneof named accounts_scope. Only a single field of the following list may be set at a time:` + "\n" +
					`  - allAccounts` + "\n" +
					`  - accountCriteria` + "\n" +
					`` + "\n" +
					`` + "\n" +
					`This message contains a oneof named grants_scope. Only a single field of the following list may be set at a time:` + "\n" +
					`  - allGrants` + "\n" +
					`  - grantsByCriteria`,
			},
			"access_review_template_id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the template if the campaign was created from one`,
			},
			"auto_resolve": schema.BoolAttribute{
				Computed:    true,
				Description: `The autoResolve field.`,
			},
			"binding_object_setup": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `The BindingObjectSetup message.`,
			},
			"closed_at": schema.StringAttribute{
				Computed: true,
			},
			"completion_date": schema.StringAttribute{
				Computed: true,
			},
			"connector_sources_frozen_at": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"created_by_id": schema.StringAttribute{
				Computed:    true,
				Description: `The createdById field.`,
			},
			"default_view": schema.StringAttribute{
				Computed:    true,
				Description: `the default view that reviewers will see when they complete their access reviews`,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `The description field.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Description: `The displayName field.`,
			},
			"expanded": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `The expanded field.`,
			},
			"expected_ticket_count": schema.Int32Attribute{
				Computed:    true,
				Description: `The expectedTicketCount field.`,
			},
			"has_accuracy_support": schema.BoolAttribute{
				Computed:    true,
				Description: `The hasAccuracySupport field.`,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"multi_app_setup": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"app_entitlement_details": schema.MapNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"entitlement_details": schema.MapNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"app_id": schema.StringAttribute{
												Computed:    true,
												Description: `The appId field.`,
											},
											"entitlement_id": schema.StringAttribute{
												Computed:    true,
												Description: `The entitlementId field.`,
											},
											"policy_id": schema.StringAttribute{
												Computed:    true,
												Description: `The policyId field.`,
											},
										},
									},
									Description: `The entitlementDetails field.`,
								},
							},
						},
						Description: `The appEntitlementDetails field.`,
					},
					"app_entitlements": schema.MapNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed:    true,
									Description: `The appId field.`,
								},
								"entitlement_ids": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `The entitlementIds field.`,
								},
							},
						},
						Description: `The appEntitlements field.`,
					},
				},
				Description: `The MultiAppSetup message.`,
			},
			"policy_id": schema.StringAttribute{
				Computed:    true,
				Description: `The policyId field.`,
			},
			"review_instructions": schema.StringAttribute{
				Computed:    true,
				Description: `The reviewInstructions field.`,
			},
			"scoping_version": schema.StringAttribute{
				Computed:    true,
				Description: `The scopingVersion field.`,
			},
			"single_app_setup": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"app_id": schema.StringAttribute{
						Computed:    true,
						Description: `The appId field.`,
					},
				},
				Description: `The SingleAppSetup message.`,
			},
			"started_at": schema.StringAttribute{
				Computed: true,
			},
			"state": schema.StringAttribute{
				Computed:    true,
				Description: `The state field.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"use_policy_override": schema.BoolAttribute{
				Computed: true,
				MarkdownDescription: `Determines the policy applied to the campaign. Default is false, using the campaign policy.` + "\n" +
					` If true, the order of precedence is entitlement → app → campaign policy.`,
			},
		},
	}
}

func (r *AccessReviewDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AccessReviewDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AccessReviewDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIAccessreviewV1AccessReviewServiceGetRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AccessReview.Get(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AccessReviewServiceGetResponse != nil && res.AccessReviewServiceGetResponse.AccessReviewView != nil && res.AccessReviewServiceGetResponse.AccessReviewView.AccessReview != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAccessReview(ctx, res.AccessReviewServiceGetResponse.AccessReviewView.AccessReview)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
