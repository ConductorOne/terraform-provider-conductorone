// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *WebhookResourceModel) ToSharedWebhooksServiceCreateRequest(ctx context.Context) (*shared.WebhooksServiceCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var displayName string
	displayName = r.DisplayName.ValueString()

	var url string
	url = r.URL.ValueString()

	out := shared.WebhooksServiceCreateRequest{
		Description: description,
		DisplayName: displayName,
		URL:         url,
	}

	return &out, diags
}

func (r *WebhookResourceModel) ToSharedWebhookInput(ctx context.Context) (*shared.WebhookInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	url := new(string)
	if !r.URL.IsUnknown() && !r.URL.IsNull() {
		*url = r.URL.ValueString()
	} else {
		url = nil
	}
	out := shared.WebhookInput{
		Description: description,
		DisplayName: displayName,
		ID:          id,
		URL:         url,
	}

	return &out, diags
}

func (r *WebhookResourceModel) ToOperationsC1APIWebhooksV1WebhooksServiceGetRequest(ctx context.Context) (*operations.C1APIWebhooksV1WebhooksServiceGetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIWebhooksV1WebhooksServiceGetRequest{
		ID: id,
	}

	return &out, diags
}

func (r *WebhookResourceModel) ToOperationsC1APIWebhooksV1WebhooksServiceUpdateRequest(ctx context.Context) (*operations.C1APIWebhooksV1WebhooksServiceUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIWebhooksV1WebhooksServiceUpdateRequest{
		ID: id,
	}

	return &out, diags
}

func (r *WebhookResourceModel) ToOperationsC1APIWebhooksV1WebhooksServiceDeleteRequest(ctx context.Context) (*operations.C1APIWebhooksV1WebhooksServiceDeleteRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.C1APIWebhooksV1WebhooksServiceDeleteRequest{
		ID: id,
	}

	return &out, diags
}

func (r *WebhookResourceModel) RefreshFromSharedWebhook1(ctx context.Context, resp *shared.Webhook1) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		r.ID = types.StringPointerValue(resp.ID)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.URL = types.StringPointerValue(resp.URL)
	}

	return diags
}
