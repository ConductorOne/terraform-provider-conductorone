// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	speakeasy_stringplanmodifier "github.com/conductorone/terraform-provider-conductorone/internal/planmodifiers/stringplanmodifier"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/conductorone/terraform-provider-conductorone/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &AttributeResource{}
var _ resource.ResourceWithImportState = &AttributeResource{}

func NewAttributeResource() resource.Resource {
	return &AttributeResource{}
}

// AttributeResource defines the resource implementation.
type AttributeResource struct {
	client *sdk.ConductoroneAPI
}

// AttributeResourceModel describes the resource data model.
type AttributeResourceModel struct {
	AttributeTypeID types.String `tfsdk:"attribute_type_id"`
	CreatedAt       types.String `tfsdk:"created_at"`
	DeletedAt       types.String `tfsdk:"-"`
	ID              types.String `tfsdk:"id"`
	UpdatedAt       types.String `tfsdk:"updated_at"`
	Value           types.String `tfsdk:"value"`
}

func (r *AttributeResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_attribute"
}

func (r *AttributeResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Attribute Resource",
		Attributes: map[string]schema.Attribute{
			"attribute_type_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `The ID of the AttributeType that this AttributeValue belongs to.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The ID of the AttributeValue.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"value": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The value field. Requires replacement if changed.`,
			},
		},
	}
}

func (r *AttributeResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AttributeResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *AttributeResourceModel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	createRequest, diags := data.ToSharedCreateAttributeValueRequest(ctx)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	response, err := r.client.Attributes.CreateAttributeValue(ctx, createRequest)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if response != nil && response.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http response/status", fmt.Sprintf("Status: %v, Body: %v", response.RawResponse.StatusCode, response.RawResponse.Body))
		}
		return
	}
	if response == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", response))
		return
	}
	if fmt.Sprintf("%v", response.StatusCode) != "200" {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", response.StatusCode), fmt.Sprintf("Status: %v, Body: %v", response.StatusCode, response.RawResponse.Body))
		return
	}

	if response.CreateAttributeValueResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", fmt.Sprintf("Status: %v, Body: %v", response.StatusCode, response.RawResponse.Body))
		return
	}
	data.RefreshFromSharedAttributeValue(ctx, response.CreateAttributeValueResponse.AttributeValue)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AttributeResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *AttributeResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, diags := data.ToOperationsC1APIAttributeV1AttributesGetAttributeValueRequest(ctx)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	response, err := r.client.Attributes.GetAttributeValue(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if response != nil && response.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http response/status", fmt.Sprintf("Status: %v, Body: %v", response.RawResponse.StatusCode, response.RawResponse.Body))
		}
		return
	}
	if response == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", response))
		return
	}
	if fmt.Sprintf("%v", response.StatusCode) != "200" {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", response.StatusCode), fmt.Sprintf("Status: %v, Body: %v", response.StatusCode, response.RawResponse.Body))
		return
	}

	if response.GetAttributeValueResponse == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", fmt.Sprintf("Status: %v, Body: %v", response.StatusCode, response.RawResponse.Body))
		return
	}
	data.RefreshFromSharedAttributeValue(ctx, response.GetAttributeValueResponse.AttributeValue)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *AttributeResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// The API doesn't support updates, so we need to delete and recreate
	resp.Diagnostics.AddError("Update not supported", "Attribute values cannot be updated. Please delete and recreate the resource.")
}

func (r *AttributeResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *AttributeResourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, diags := data.ToOperationsC1APIAttributeV1AttributesDeleteAttributeValueRequest(ctx)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	response, err := r.client.Attributes.DeleteAttributeValue(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if response != nil && response.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http response/status", fmt.Sprintf("Status: %v, Body: %v", response.RawResponse.StatusCode, response.RawResponse.Body))
		}
		return
	}
	if response == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", response))
		return
	}
	if fmt.Sprintf("%v", response.StatusCode) != "200" {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", response.StatusCode), fmt.Sprintf("Status: %v, Body: %v", response.StatusCode, response.RawResponse.Body))
		return
	}
}

func (r *AttributeResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
} 