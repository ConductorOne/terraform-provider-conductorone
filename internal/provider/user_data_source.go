// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &UserDataSource{}
var _ datasource.DataSourceWithConfigure = &UserDataSource{}

func NewUserDataSource() datasource.DataSource {
	return &UserDataSource{}
}

// UserDataSource is the data source implementation.
type UserDataSource struct {
	client *sdk.ConductoroneAPI
}

// UserDataSourceModel describes the data model.
type UserDataSourceModel struct {
	CreatedAt               types.String                          `tfsdk:"created_at"`
	DelegatedUserID         types.String                          `tfsdk:"delegated_user_id"`
	DelegatedUserPath       types.String                          `tfsdk:"delegated_user_path"`
	DeletedAt               types.String                          `tfsdk:"deleted_at"`
	Department              types.String                          `tfsdk:"department"`
	DepartmentSources       []tfTypes.UserAttributeMappingSource  `tfsdk:"department_sources"`
	DirectoriesPath         types.String                          `tfsdk:"directories_path"`
	DirectoryIds            []types.String                        `tfsdk:"directory_ids"`
	DirectoryStatus         types.String                          `tfsdk:"directory_status"`
	DirectoryStatusSources  []tfTypes.UserAttributeMappingSource  `tfsdk:"directory_status_sources"`
	DisplayName             types.String                          `tfsdk:"display_name"`
	Email                   types.String                          `tfsdk:"email"`
	EmailSources            []tfTypes.UserAttributeMappingSource  `tfsdk:"email_sources"`
	Emails                  []types.String                        `tfsdk:"emails"`
	EmployeeIDSources       []tfTypes.UserAttributeMappingSource  `tfsdk:"employee_id_sources"`
	EmployeeIds             []types.String                        `tfsdk:"employee_ids"`
	EmploymentStatus        types.String                          `tfsdk:"employment_status"`
	EmploymentStatusSources []tfTypes.UserAttributeMappingSource  `tfsdk:"employment_status_sources"`
	EmploymentType          types.String                          `tfsdk:"employment_type"`
	EmploymentTypeSources   []tfTypes.UserAttributeMappingSource  `tfsdk:"employment_type_sources"`
	ExcludeIds              []types.String                        `tfsdk:"exclude_ids"`
	ExcludeTypes            []types.String                        `tfsdk:"exclude_types"`
	Expanded                []tfTypes.SearchUsersResponseExpanded `tfsdk:"expanded"`
	ID                      types.String                          `tfsdk:"id"`
	Ids                     []types.String                        `tfsdk:"ids"`
	JobTitle                types.String                          `tfsdk:"job_title"`
	JobTitleSources         []tfTypes.UserAttributeMappingSource  `tfsdk:"job_title_sources"`
	ManagerIds              []types.String                        `tfsdk:"manager_ids"`
	ManagerSources          []tfTypes.UserAttributeMappingSource  `tfsdk:"manager_sources"`
	ManagersPath            types.String                          `tfsdk:"managers_path"`
	NextPageToken           types.String                          `tfsdk:"next_page_token"`
	Profile                 *tfTypes.Profile                      `tfsdk:"profile"`
	Query                   types.String                          `tfsdk:"query"`
	Refs                    []tfTypes.UserRef                     `tfsdk:"refs"`
	RoleIds                 []types.String                        `tfsdk:"role_ids"`
	RolesPath               types.String                          `tfsdk:"roles_path"`
	Status                  types.String                          `tfsdk:"status"`
	Type                    types.String                          `tfsdk:"type"`
	UpdatedAt               types.String                          `tfsdk:"updated_at"`
	UserStatuses            []types.String                        `tfsdk:"user_statuses"`
	Username                types.String                          `tfsdk:"username"`
	UsernameSources         []tfTypes.UserAttributeMappingSource  `tfsdk:"username_sources"`
	Usernames               []types.String                        `tfsdk:"usernames"`
}

// Metadata returns the data source type name.
func (r *UserDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_user"
}

// Schema defines the schema for the data source.
func (r *UserDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "User DataSource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"delegated_user_id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the user to whom tasks will be automatically reassigned to.`,
			},
			"delegated_user_path": schema.StringAttribute{
				Computed:    true,
				Description: `JSONPATH expression indicating the location of the user objects of delegates of the current user in the expanded array.`,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"department": schema.StringAttribute{
				Computed:    true,
				Description: `The department which the user belongs to in the organization.`,
			},
			"department_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of objects mapped based on department attribute mappings configured in the system.`,
			},
			"directories_path": schema.StringAttribute{
				Computed:    true,
				Description: `JSONPATH expression indicating the location of directory objects in the expanded array.`,
			},
			"directory_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `A list of unique ids that represent different directories.`,
			},
			"directory_status": schema.StringAttribute{
				Computed:    true,
				Description: `The status of the user in the directory.`,
			},
			"directory_status_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of objects mapped based on directoryStatus attribute mappings configured in the system.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Description: `The display name of the user.`,
			},
			"email": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Search for users based on their email (exact match).`,
			},
			"email_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of source data for the email attribute.`,
			},
			"emails": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `This is a list of all of the user's emails from app users.`,
			},
			"employee_id_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of source data for the employee IDs attribute.`,
			},
			"employee_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `This is a list of all of the user's employee IDs from app users.`,
			},
			"employment_status": schema.StringAttribute{
				Computed:    true,
				Description: `The users employment status.`,
			},
			"employment_status_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of objects mapped based on employmentStatus attribute mappings configured in the system.`,
			},
			"employment_type": schema.StringAttribute{
				Computed:    true,
				Description: `The employment type of the user.`,
			},
			"employment_type_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of objects mapped based on employmentType attribute mappings configured in the system.`,
			},
			"exclude_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `An array of users IDs to exclude from the results.`,
			},
			"exclude_types": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `An array of types to exclude from the results.`,
			},
			"expanded": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `List of related objects`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `A unique identifier of the user.`,
			},
			"ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Deprecated. Use refs array instead.`,
			},
			"job_title": schema.StringAttribute{
				Computed:    true,
				Description: `The job title of the user.`,
			},
			"job_title_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of objects mapped based on jobTitle attribute mappings configured in the system.`,
			},
			"manager_ids": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `A list of ids of the user's managers.`,
			},
			"manager_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of objects mapped based on managerId attribute mappings configured in the system.`,
			},
			"managers_path": schema.StringAttribute{
				Computed:    true,
				Description: `JSONPATH expression indicating the location of the user objects that managed the current user in the expanded array.`,
			},
			"next_page_token": schema.StringAttribute{
				Computed:    true,
				Description: `The nextPageToken is shown for the next page if the number of results is larger than the max page size. The server returns one page of results and the nextPageToken until all results are retreived. To retrieve the next page, use the same request and append a pageToken field with the value of nextPageToken shown on the previous page.`,
			},
			"profile": schema.SingleNestedAttribute{
				Computed: true,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `Query the apps with a fuzzy search on display name and emails.`,
			},
			"refs": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Optional:    true,
							Description: `The id of the user.`,
						},
					},
				},
				Description: `An array of user refs to restrict the return values to by ID.`,
			},
			"role_ids": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for users that have any of the role IDs on this list.`,
			},
			"roles_path": schema.StringAttribute{
				Computed:    true,
				Description: `JSONPATH expression indicating the location of the roles of the current user in the expanded array.`,
			},
			"status": schema.StringAttribute{
				Computed:    true,
				Description: `The status of the user in the system.`,
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `The type of the user.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"user_statuses": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `Search for users that have any of the statuses on this list. This can only be ENABLED, DISABLED, and DELETED`,
			},
			"username": schema.StringAttribute{
				Computed:    true,
				Description: `This is the user's primary username. Typically sourced from the primary directory.`,
			},
			"username_sources": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appId field.`,
						},
						"app_user_id": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserId field.`,
						},
						"app_user_profile_attribute_key": schema.StringAttribute{
							Computed:    true,
							Description: `The appUserProfileAttributeKey field.`,
						},
						"user_attribute_mapping_id": schema.StringAttribute{
							Computed:    true,
							Description: `The userAttributeMappingId field.`,
						},
						"value": schema.StringAttribute{
							Computed:    true,
							Description: `The value field.`,
						},
					},
				},
				Description: `A list of source data for the usernames attribute.`,
			},
			"usernames": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `This is a list of all of the user's usernames from app users.`,
			},
		},
	}
}

func (r *UserDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *UserDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *UserDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedSearchUsersRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.UserSearch.Search(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SearchUsersResponse != nil && res.SearchUsersResponse.List != nil && len(res.SearchUsersResponse.List) > 0 && res.SearchUsersResponse.List[0].User != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedUser(ctx, res.SearchUsersResponse.List[0].User)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
