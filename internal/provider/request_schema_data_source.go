// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RequestSchemaDataSource{}
var _ datasource.DataSourceWithConfigure = &RequestSchemaDataSource{}

func NewRequestSchemaDataSource() datasource.DataSource {
	return &RequestSchemaDataSource{}
}

// RequestSchemaDataSource is the data source implementation.
type RequestSchemaDataSource struct {
	// Provider configured SDK client.
	client *sdk.ConductoroneAPI
}

// RequestSchemaDataSourceModel describes the data model.
type RequestSchemaDataSourceModel struct {
	CreatedAt          types.String                `tfsdk:"created_at"`
	DeletedAt          types.String                `tfsdk:"deleted_at"`
	Description        types.String                `tfsdk:"description"`
	FieldRelationships []tfTypes.FieldRelationship `tfsdk:"field_relationships"`
	Fields             []tfTypes.Field             `tfsdk:"fields"`
	ID                 types.String                `tfsdk:"id"`
	Name               types.String                `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (r *RequestSchemaDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_request_schema"
}

// Schema defines the schema for the data source.
func (r *RequestSchemaDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "RequestSchema DataSource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed:    true,
				Description: `The description field.`,
			},
			"field_relationships": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"at_least_one": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `The AtLeastOne message.`,
						},
						"field_names": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `The names of the fields that share this relationship`,
						},
						"mutually_exclusive": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `The MutuallyExclusive message.`,
						},
						"required_together": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `The RequiredTogether message.`,
						},
					},
				},
				Description: `The fieldRelationships field.`,
			},
			"fields": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"bool_field": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"bool_rules": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"const": schema.BoolAttribute{
											Computed:    true,
											Description: `Const specifies that this field must be exactly the specified value`,
										},
									},
									Description: `BoolRules describes the constraints applied to ` + "`" + `bool` + "`" + ` values`,
								},
								"checkbox_field": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The CheckboxField message.`,
								},
								"default_value": schema.BoolAttribute{
									Computed:    true,
									Description: `The defaultValue field.`,
								},
							},
							MarkdownDescription: `The BoolField message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
								`  - checkboxField` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
								`  - rules`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `The description field.`,
						},
						"display_name": schema.StringAttribute{
							Computed:    true,
							Description: `The displayName field.`,
						},
						"file_field": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"accepted_file_types": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `The acceptedFileTypes field.`,
								},
								"file_input_field": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The FileInputField message.`,
								},
								"max_file_size": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `The maxFileSize field.` + "\n" +
										`This field is part of the ` + "`" + `_max_file_size` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.form.v1.FileField` + "`" + ` for more details.`,
								},
							},
							MarkdownDescription: `The FileField message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
								`  - fileInputField` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _max_file_size. Only a single field of the following list may be set at a time:` + "\n" +
								`  - maxFileSize`,
						},
						"int64_field": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"default_value": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `The defaultValue field.` + "\n" +
										`This field is part of the ` + "`" + `_default_value` + "`" + ` oneof.` + "\n" +
										`See the documentation for ` + "`" + `c1.api.form.v1.Int64Field` + "`" + ` for more details.`,
								},
								"int64_rules": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"const": schema.StringAttribute{
											Computed:    true,
											Description: `Const specifies that this field must be exactly the specified value`,
										},
										"gt": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Gt specifies that this field must be greater than the specified value,` + "\n" +
												` exclusive. If the value of Gt is larger than a specified Lt or Lte, the` + "\n" +
												` range is reversed.`,
										},
										"gte": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Gte specifies that this field must be greater than or equal to the` + "\n" +
												` specified value, inclusive. If the value of Gte is larger than a` + "\n" +
												` specified Lt or Lte, the range is reversed.`,
										},
										"ignore_empty": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `IgnoreEmpty specifies that the validation rules of this field should be` + "\n" +
												` evaluated only if the field is not empty`,
										},
										"in": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `In specifies that this field must be equal to one of the specified` + "\n" +
												` values`,
										},
										"lt": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Lt specifies that this field must be less than the specified value,` + "\n" +
												` exclusive`,
										},
										"lte": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Lte specifies that this field must be less than or equal to the` + "\n" +
												` specified value, inclusive`,
										},
										"not_in": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `NotIn specifies that this field cannot be equal to one of the specified` + "\n" +
												` values`,
										},
									},
									Description: `Int64Rules describes the constraints applied to ` + "`" + `int64` + "`" + ` values`,
								},
								"number_field": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"max_value": schema.StringAttribute{
											Computed:    true,
											Description: `The maxValue field.`,
										},
										"min_value": schema.StringAttribute{
											Computed:    true,
											Description: `The minValue field.`,
										},
										"step": schema.StringAttribute{
											Computed:    true,
											Description: `The step field.`,
										},
									},
									Description: `The NumberField message.`,
								},
								"placeholder": schema.StringAttribute{
									Computed:    true,
									Description: `The placeholder field.`,
								},
							},
							MarkdownDescription: `The Int64Field message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
								`  - numberField` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _default_value. Only a single field of the following list may be set at a time:` + "\n" +
								`  - defaultValue` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
								`  - rules`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The name field.`,
						},
						"string_field": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `The defaultValue field.`,
								},
								"password_field": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The PasswordField message.`,
								},
								"placeholder": schema.StringAttribute{
									Computed:    true,
									Description: `The placeholder field.`,
								},
								"select_field": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"options": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"display_name": schema.StringAttribute{
														Computed:    true,
														Description: `The displayName field.`,
													},
													"value": schema.StringAttribute{
														Computed:    true,
														Description: `The value field.`,
													},
												},
											},
											Description: `The options field.`,
										},
									},
									Description: `The SelectField message.`,
								},
								"string_rules": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"address": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `Address specifies that the field must be either a valid hostname as` + "\n" +
												` defined by RFC 1034 (which does not support internationalized domain` + "\n" +
												` names or IDNs), or it can be a valid IP (v4 or v6).` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"const": schema.StringAttribute{
											Computed:    true,
											Description: `Const specifies that this field must be exactly the specified value`,
										},
										"contains": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Contains specifies that this field must have the specified substring` + "\n" +
												` anywhere in the string.`,
										},
										"email": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `Email specifies that the field must be a valid email address as` + "\n" +
												` defined by RFC 5322` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"hostname": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `Hostname specifies that the field must be a valid hostname as` + "\n" +
												` defined by RFC 1034. This constraint does not support` + "\n" +
												` internationalized domain names (IDNs).` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"ignore_empty": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `IgnoreEmpty specifies that the validation rules of this field should be` + "\n" +
												` evaluated only if the field is not empty`,
										},
										"in": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `In specifies that this field must be equal to one of the specified` + "\n" +
												` values`,
										},
										"ip": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `Ip specifies that the field must be a valid IP (v4 or v6) address.` + "\n" +
												` Valid IPv6 addresses should not include surrounding square brackets.` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"ipv4": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `Ipv4 specifies that the field must be a valid IPv4 address.` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"ipv6": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `Ipv6 specifies that the field must be a valid IPv6 address. Valid` + "\n" +
												` IPv6 addresses should not include surrounding square brackets.` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"len_bytes": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `LenBytes specifies that this field must be the specified number of bytes` + "\n" +
												` at a minimum`,
										},
										"length": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Len specifies that this field must be the specified number of` + "\n" +
												` characters (Unicode code points). Note that the number of` + "\n" +
												` characters may differ from the number of bytes in the string.`,
										},
										"max_bytes": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `MaxBytes specifies that this field must be the specified number of bytes` + "\n" +
												` at a maximum`,
										},
										"max_len": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `MaxLen specifies that this field must be the specified number of` + "\n" +
												` characters (Unicode code points) at a maximum. Note that the number of` + "\n" +
												` characters may differ from the number of bytes in the string.`,
										},
										"min_bytes": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `MinBytes specifies that this field must be the specified number of bytes` + "\n" +
												` at a minimum`,
										},
										"min_len": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `MinLen specifies that this field must be the specified number of` + "\n" +
												` characters (Unicode code points) at a minimum. Note that the number of` + "\n" +
												` characters may differ from the number of bytes in the string.`,
										},
										"not_contains": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `NotContains specifies that this field cannot have the specified substring` + "\n" +
												` anywhere in the string.`,
										},
										"not_in": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `NotIn specifies that this field cannot be equal to one of the specified` + "\n" +
												` values`,
										},
										"pattern": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Pattern specifes that this field must match against the specified` + "\n" +
												` regular expression (RE2 syntax). The included expression should elide` + "\n" +
												` any delimiters.`,
										},
										"prefix": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Prefix specifies that this field must have the specified substring at` + "\n" +
												` the beginning of the string.`,
										},
										"strict": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable` + "\n" +
												` strict header validation.` + "\n" +
												` By default, this is true, and HTTP header validations are RFC-compliant.` + "\n" +
												` Setting to false will enable a looser validations that only disallows` + "\n" +
												` \r\n\0 characters, which can be used to bypass header matching rules.`,
										},
										"suffix": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Suffix specifies that this field must have the specified substring at` + "\n" +
												` the end of the string.`,
										},
										"uri": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `Uri specifies that the field must be a valid, absolute URI as defined` + "\n" +
												` by RFC 3986` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"uri_ref": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `UriRef specifies that the field must be a valid URI as defined by RFC` + "\n" +
												` 3986 and may be relative or absolute.` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"uuid": schema.BoolAttribute{
											Computed: true,
											MarkdownDescription: `Uuid specifies that the field must be a valid UUID as defined by` + "\n" +
												` RFC 4122` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
										"well_known_regex": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `WellKnownRegex specifies a common well known pattern defined as a regex.` + "\n" +
												`This field is part of the ` + "`" + `well_known` + "`" + ` oneof.` + "\n" +
												`See the documentation for ` + "`" + `validate.StringRules` + "`" + ` for more details.`,
										},
									},
									MarkdownDescription: `StringRules describe the constraints applied to ` + "`" + `string` + "`" + ` values` + "\n" +
										`` + "\n" +
										`This message contains a oneof named well_known. Only a single field of the following list may be set at a time:` + "\n" +
										`  - email` + "\n" +
										`  - hostname` + "\n" +
										`  - ip` + "\n" +
										`  - ipv4` + "\n" +
										`  - ipv6` + "\n" +
										`  - uri` + "\n" +
										`  - uriRef` + "\n" +
										`  - address` + "\n" +
										`  - uuid` + "\n" +
										`  - wellKnownRegex`,
								},
								"text_field": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"multiline": schema.BoolAttribute{
											Computed:    true,
											Description: `The multiline field.`,
										},
									},
									Description: `The TextField message.`,
								},
							},
							MarkdownDescription: `The StringField message.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named view. Only a single field of the following list may be set at a time:` + "\n" +
								`  - textField` + "\n" +
								`  - passwordField` + "\n" +
								`  - selectField` + "\n" +
								`` + "\n" +
								`` + "\n" +
								`This message contains a oneof named _rules. Only a single field of the following list may be set at a time:` + "\n" +
								`  - rules`,
						},
					},
				},
				Description: `The fields field.`,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The displayName field.`,
			},
		},
	}
}

func (r *RequestSchemaDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RequestSchemaDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RequestSchemaDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsC1APIRequestSchemaV1RequestSchemaServiceGetRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.RequestSchema.Get(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RequestSchemaServiceGetResponse != nil && res.RequestSchemaServiceGetResponse.RequestSchema != nil && res.RequestSchemaServiceGetResponse.RequestSchema.Form != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedForm(ctx, res.RequestSchemaServiceGetResponse.RequestSchema.Form)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
