// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/operations"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *AppEntitlementAutomationResourceModel) RefreshFromSharedAppEntitlementAutomation(ctx context.Context, resp *shared.AppEntitlementAutomation) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AppEntitlementID = types.StringPointerValue(resp.AppEntitlementID)
		r.AppID = types.StringPointerValue(resp.AppID)
		if resp.Basic == nil {
			r.Basic = nil
		} else {
			r.Basic = &tfTypes.AppEntitlementAutomationRuleBasic{}
			r.Basic.Expression = types.StringPointerValue(resp.Basic.Expression)
		}
		if resp.Cel == nil {
			r.Cel = nil
		} else {
			r.Cel = &tfTypes.AppEntitlementAutomationRuleCEL{}
			r.Cel.Expression = types.StringPointerValue(resp.Cel.Expression)
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.DeletedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringPointerValue(resp.DisplayName)
		if resp.Entitlements == nil {
			r.Entitlements = nil
		} else {
			r.Entitlements = &tfTypes.AppEntitlementAutomationRuleEntitlement{}
			if resp.Entitlements.EntitlementRefs != nil {
				r.Entitlements.EntitlementRefs = []tfTypes.AppEntitlementRef{}

				for _, entitlementRefsItem := range resp.Entitlements.EntitlementRefs {
					var entitlementRefs tfTypes.AppEntitlementRef

					entitlementRefs.AppID = types.StringPointerValue(entitlementRefsItem.AppID)
					entitlementRefs.ID = types.StringPointerValue(entitlementRefsItem.ID)

					r.Entitlements.EntitlementRefs = append(r.Entitlements.EntitlementRefs, entitlementRefs)
				}
			}
		}
		if resp.LastRunStatus == nil {
			r.LastRunStatus = nil
		} else {
			r.LastRunStatus = &tfTypes.AppEntitlementAutomationLastRunStatus{}
			r.LastRunStatus.ErrorMessage = types.StringPointerValue(resp.LastRunStatus.ErrorMessage)
			r.LastRunStatus.LastCompletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastRunStatus.LastCompletedAt))
			if resp.LastRunStatus.Status != nil {
				r.LastRunStatus.Status = types.StringValue(string(*resp.LastRunStatus.Status))
			} else {
				r.LastRunStatus.Status = types.StringNull()
			}
		}
		if resp.None == nil {
			r.None = nil
		} else {
			r.None = &tfTypes.AppEntitlementAutomationRuleNone{}
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *AppEntitlementAutomationResourceModel) ToOperationsC1APIAppV1AppEntitlementsCreateAutomationRequest(ctx context.Context) (*operations.C1APIAppV1AppEntitlementsCreateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appEntitlementID := new(string)
	if !r.AppEntitlementID.IsUnknown() && !r.AppEntitlementID.IsNull() {
		*appEntitlementID = r.AppEntitlementID.ValueString()
	} else {
		appEntitlementID = nil
	}
	createAutomationRequest, createAutomationRequestDiags := r.ToSharedCreateAutomationRequestInput(ctx)
	diags.Append(createAutomationRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAppV1AppEntitlementsCreateAutomationRequest{
		AppID:                   appID,
		AppEntitlementID:        appEntitlementID,
		CreateAutomationRequest: createAutomationRequest,
	}

	return &out, diags
}

func (r *AppEntitlementAutomationResourceModel) ToOperationsC1APIAppV1AppEntitlementsDeleteAutomationRequest(ctx context.Context) (*operations.C1APIAppV1AppEntitlementsDeleteAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appEntitlementID := new(string)
	if !r.AppEntitlementID.IsUnknown() && !r.AppEntitlementID.IsNull() {
		*appEntitlementID = r.AppEntitlementID.ValueString()
	} else {
		appEntitlementID = nil
	}
	out := operations.C1APIAppV1AppEntitlementsDeleteAutomationRequest{
		AppID:            appID,
		AppEntitlementID: appEntitlementID,
	}

	return &out, diags
}

func (r *AppEntitlementAutomationResourceModel) ToOperationsC1APIAppV1AppEntitlementsGetAutomationRequest(ctx context.Context) (*operations.C1APIAppV1AppEntitlementsGetAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appEntitlementID := new(string)
	if !r.AppEntitlementID.IsUnknown() && !r.AppEntitlementID.IsNull() {
		*appEntitlementID = r.AppEntitlementID.ValueString()
	} else {
		appEntitlementID = nil
	}
	out := operations.C1APIAppV1AppEntitlementsGetAutomationRequest{
		AppID:            appID,
		AppEntitlementID: appEntitlementID,
	}

	return &out, diags
}

func (r *AppEntitlementAutomationResourceModel) ToOperationsC1APIAppV1AppEntitlementsUpdateAutomationRequest(ctx context.Context) (*operations.C1APIAppV1AppEntitlementsUpdateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appEntitlementID := new(string)
	if !r.AppEntitlementID.IsUnknown() && !r.AppEntitlementID.IsNull() {
		*appEntitlementID = r.AppEntitlementID.ValueString()
	} else {
		appEntitlementID = nil
	}
	appEntitlementServiceUpdateAutomationRequest, appEntitlementServiceUpdateAutomationRequestDiags := r.ToSharedAppEntitlementServiceUpdateAutomationRequest(ctx)
	diags.Append(appEntitlementServiceUpdateAutomationRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.C1APIAppV1AppEntitlementsUpdateAutomationRequest{
		AppID:            appID,
		AppEntitlementID: appEntitlementID,
		AppEntitlementServiceUpdateAutomationRequest: appEntitlementServiceUpdateAutomationRequest,
	}

	return &out, diags
}

func (r *AppEntitlementAutomationResourceModel) ToSharedAppEntitlementAutomationInput(ctx context.Context) (*shared.AppEntitlementAutomationInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	var basic *shared.AppEntitlementAutomationRuleBasic
	if r.Basic != nil {
		expression := new(string)
		if !r.Basic.Expression.IsUnknown() && !r.Basic.Expression.IsNull() {
			*expression = r.Basic.Expression.ValueString()
		} else {
			expression = nil
		}
		basic = &shared.AppEntitlementAutomationRuleBasic{
			Expression: expression,
		}
	}
	var cel *shared.AppEntitlementAutomationRuleCEL
	if r.Cel != nil {
		expression1 := new(string)
		if !r.Cel.Expression.IsUnknown() && !r.Cel.Expression.IsNull() {
			*expression1 = r.Cel.Expression.ValueString()
		} else {
			expression1 = nil
		}
		cel = &shared.AppEntitlementAutomationRuleCEL{
			Expression: expression1,
		}
	}
	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	deletedAt := new(time.Time)
	if !r.DeletedAt.IsUnknown() && !r.DeletedAt.IsNull() {
		*deletedAt, _ = time.Parse(time.RFC3339Nano, r.DeletedAt.ValueString())
	} else {
		deletedAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var entitlements *shared.AppEntitlementAutomationRuleEntitlement
	if r.Entitlements != nil {
		var entitlementRefs []shared.AppEntitlementRef
		if r.Entitlements.EntitlementRefs != nil {
			entitlementRefs = make([]shared.AppEntitlementRef, 0, len(r.Entitlements.EntitlementRefs))
			for _, entitlementRefsItem := range r.Entitlements.EntitlementRefs {
				appID := new(string)
				if !entitlementRefsItem.AppID.IsUnknown() && !entitlementRefsItem.AppID.IsNull() {
					*appID = entitlementRefsItem.AppID.ValueString()
				} else {
					appID = nil
				}
				id := new(string)
				if !entitlementRefsItem.ID.IsUnknown() && !entitlementRefsItem.ID.IsNull() {
					*id = entitlementRefsItem.ID.ValueString()
				} else {
					id = nil
				}
				entitlementRefs = append(entitlementRefs, shared.AppEntitlementRef{
					AppID: appID,
					ID:    id,
				})
			}
		}
		entitlements = &shared.AppEntitlementAutomationRuleEntitlement{
			EntitlementRefs: entitlementRefs,
		}
	}
	var lastRunStatus *shared.AppEntitlementAutomationLastRunStatusInput
	if r.LastRunStatus != nil {
		lastCompletedAt := new(time.Time)
		if !r.LastRunStatus.LastCompletedAt.IsUnknown() && !r.LastRunStatus.LastCompletedAt.IsNull() {
			*lastCompletedAt, _ = time.Parse(time.RFC3339Nano, r.LastRunStatus.LastCompletedAt.ValueString())
		} else {
			lastCompletedAt = nil
		}
		lastRunStatus = &shared.AppEntitlementAutomationLastRunStatusInput{
			LastCompletedAt: lastCompletedAt,
		}
	}
	var none *shared.AppEntitlementAutomationRuleNone
	if r.None != nil {
		none = &shared.AppEntitlementAutomationRuleNone{}
	}
	updatedAt := new(time.Time)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, r.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	out := shared.AppEntitlementAutomationInput{
		Basic:         basic,
		Cel:           cel,
		CreatedAt:     createdAt,
		DeletedAt:     deletedAt,
		Description:   description,
		DisplayName:   displayName,
		Entitlements:  entitlements,
		LastRunStatus: lastRunStatus,
		None:          none,
		UpdatedAt:     updatedAt,
	}

	return &out, diags
}

func (r *AppEntitlementAutomationResourceModel) ToSharedAppEntitlementServiceUpdateAutomationRequest(ctx context.Context) (*shared.AppEntitlementServiceUpdateAutomationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var basic *shared.AppEntitlementAutomationRuleBasic
	if r.Basic != nil {
		expression := new(string)
		if !r.Basic.Expression.IsUnknown() && !r.Basic.Expression.IsNull() {
			*expression = r.Basic.Expression.ValueString()
		} else {
			expression = nil
		}
		basic = &shared.AppEntitlementAutomationRuleBasic{
			Expression: expression,
		}
	}
	var cel *shared.AppEntitlementAutomationRuleCEL
	if r.Cel != nil {
		expression1 := new(string)
		if !r.Cel.Expression.IsUnknown() && !r.Cel.Expression.IsNull() {
			*expression1 = r.Cel.Expression.ValueString()
		} else {
			expression1 = nil
		}
		cel = &shared.AppEntitlementAutomationRuleCEL{
			Expression: expression1,
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var entitlements *shared.AppEntitlementAutomationRuleEntitlement
	if r.Entitlements != nil {
		var entitlementRefs []shared.AppEntitlementRef
		if r.Entitlements.EntitlementRefs != nil {
			entitlementRefs = make([]shared.AppEntitlementRef, 0, len(r.Entitlements.EntitlementRefs))
			for _, entitlementRefsItem := range r.Entitlements.EntitlementRefs {
				appID := new(string)
				if !entitlementRefsItem.AppID.IsUnknown() && !entitlementRefsItem.AppID.IsNull() {
					*appID = entitlementRefsItem.AppID.ValueString()
				} else {
					appID = nil
				}
				id := new(string)
				if !entitlementRefsItem.ID.IsUnknown() && !entitlementRefsItem.ID.IsNull() {
					*id = entitlementRefsItem.ID.ValueString()
				} else {
					id = nil
				}
				entitlementRefs = append(entitlementRefs, shared.AppEntitlementRef{
					AppID: appID,
					ID:    id,
				})
			}
		}
		entitlements = &shared.AppEntitlementAutomationRuleEntitlement{
			EntitlementRefs: entitlementRefs,
		}
	}
	var none *shared.AppEntitlementAutomationRuleNone
	if r.None != nil {
		none = &shared.AppEntitlementAutomationRuleNone{}
	}
	out := shared.AppEntitlementServiceUpdateAutomationRequest{
		Basic:        basic,
		Cel:          cel,
		Description:  description,
		DisplayName:  displayName,
		Entitlements: entitlements,
		None:         none,
	}

	return &out, diags
}

func (r *AppEntitlementAutomationResourceModel) ToSharedCreateAutomationRequestInput(ctx context.Context) (*shared.CreateAutomationRequestInput, diag.Diagnostics) {
	var diags diag.Diagnostics

	automation, automationDiags := r.ToSharedAppEntitlementAutomationInput(ctx)
	diags.Append(automationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := shared.CreateAutomationRequestInput{
		Automation: automation,
	}

	return &out, diags
}
