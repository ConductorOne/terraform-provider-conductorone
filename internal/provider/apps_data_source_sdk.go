// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/conductorone/terraform-provider-conductorone/internal/provider/typeconvert"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *AppsDataSourceModel) RefreshFromSharedSearchAppsResponse(ctx context.Context, resp *shared.SearchAppsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.List != nil {
			if r.List == nil {
				r.List = []tfTypes.App{}
			}

			for _, listItem := range resp.List {
				var list tfTypes.App

				list.AppAccountID = types.StringPointerValue(listItem.AppAccountID)
				list.AppAccountName = types.StringPointerValue(listItem.AppAccountName)
				list.CertifyPolicyID = types.StringPointerValue(listItem.CertifyPolicyID)
				list.ConnectorVersion = types.Int64PointerValue(listItem.ConnectorVersion)
				list.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.CreatedAt))
				list.DefaultRequestCatalogID = types.StringPointerValue(listItem.DefaultRequestCatalogID)
				list.DeletedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.DeletedAt))
				list.Description = types.StringPointerValue(listItem.Description)
				list.DisplayName = types.StringPointerValue(listItem.DisplayName)
				list.GrantPolicyID = types.StringPointerValue(listItem.GrantPolicyID)
				list.ID = types.StringPointerValue(listItem.ID)
				if listItem.IdentityMatching != nil {
					list.IdentityMatching = types.StringValue(string(*listItem.IdentityMatching))
				} else {
					list.IdentityMatching = types.StringNull()
				}
				list.Instructions = types.StringPointerValue(listItem.Instructions)
				list.IsDirectory = types.BoolPointerValue(listItem.IsDirectory)
				list.IsManuallyManaged = types.BoolPointerValue(listItem.IsManuallyManaged)
				list.MonthlyCostUsd = types.Int32PointerValue(typeconvert.IntPointerToInt32Pointer(listItem.MonthlyCostUsd))
				list.ParentAppID = types.StringPointerValue(listItem.ParentAppID)
				list.RevokePolicyID = types.StringPointerValue(listItem.RevokePolicyID)
				list.StrictAccessEntitlementProvisioning = types.BoolPointerValue(listItem.StrictAccessEntitlementProvisioning)
				list.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(listItem.UpdatedAt))
				list.UserCount = types.StringPointerValue(listItem.UserCount)

				r.List = append(r.List, list)
			}
		}
		r.NextPageToken = types.StringPointerValue(resp.NextPageToken)
	}

	return diags
}

func (r *AppsDataSourceModel) ToSharedSearchAppsRequest(ctx context.Context) (*shared.SearchAppsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var appIds []string
	if r.AppIds != nil {
		appIds = make([]string, 0, len(r.AppIds))
		for _, appIdsItem := range r.AppIds {
			appIds = append(appIds, appIdsItem.ValueString())
		}
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	var excludeAppIds []string
	if r.ExcludeAppIds != nil {
		excludeAppIds = make([]string, 0, len(r.ExcludeAppIds))
		for _, excludeAppIdsItem := range r.ExcludeAppIds {
			excludeAppIds = append(excludeAppIds, excludeAppIdsItem.ValueString())
		}
	}
	onlyDirectories := new(bool)
	if !r.OnlyDirectories.IsUnknown() && !r.OnlyDirectories.IsNull() {
		*onlyDirectories = r.OnlyDirectories.ValueBool()
	} else {
		onlyDirectories = nil
	}
	pageSize := new(int)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = int(r.PageSize.ValueInt32())
	} else {
		pageSize = nil
	}
	var policyRefs []shared.PolicyRef
	if r.PolicyRefs != nil {
		policyRefs = make([]shared.PolicyRef, 0, len(r.PolicyRefs))
		for _, policyRefsItem := range r.PolicyRefs {
			id := new(string)
			if !policyRefsItem.ID.IsUnknown() && !policyRefsItem.ID.IsNull() {
				*id = policyRefsItem.ID.ValueString()
			} else {
				id = nil
			}
			policyRefs = append(policyRefs, shared.PolicyRef{
				ID: id,
			})
		}
	}
	query := new(string)
	if !r.Query.IsUnknown() && !r.Query.IsNull() {
		*query = r.Query.ValueString()
	} else {
		query = nil
	}
	out := shared.SearchAppsRequest{
		AppIds:          appIds,
		DisplayName:     displayName,
		ExcludeAppIds:   excludeAppIds,
		OnlyDirectories: onlyDirectories,
		PageSize:        pageSize,
		PolicyRefs:      policyRefs,
		Query:           query,
	}

	return &out, diags
}
