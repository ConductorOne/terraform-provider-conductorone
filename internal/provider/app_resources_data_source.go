// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/conductorone/terraform-provider-conductorone/internal/provider/types"
	"github.com/conductorone/terraform-provider-conductorone/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AppResourcesDataSource{}
var _ datasource.DataSourceWithConfigure = &AppResourcesDataSource{}

func NewAppResourcesDataSource() datasource.DataSource {
	return &AppResourcesDataSource{}
}

// AppResourcesDataSource is the data source implementation.
type AppResourcesDataSource struct {
	client *sdk.ConductoroneAPI
}

// AppResourcesDataSourceModel describes the data model.
type AppResourcesDataSourceModel struct {
	AppID                          types.String                                 `tfsdk:"app_id"`
	AppUserIds                     []types.String                               `tfsdk:"app_user_ids"`
	ExcludeDeletedResourceBindings types.Bool                                   `tfsdk:"exclude_deleted_resource_bindings"`
	ExcludeResourceIds             []types.String                               `tfsdk:"exclude_resource_ids"`
	ExcludeResourceTypeTraitIds    []types.String                               `tfsdk:"exclude_resource_type_trait_ids"`
	Expanded                       []tfTypes.SearchAppResourcesResponseExpanded `tfsdk:"expanded"`
	List                           []tfTypes.AppResourceView                    `tfsdk:"list"`
	NextPageToken                  types.String                                 `tfsdk:"next_page_token"`
	PageSize                       types.Int32                                  `tfsdk:"page_size"`
	PageToken                      types.String                                 `tfsdk:"page_token"`
	Query                          types.String                                 `tfsdk:"query"`
	Refs                           []tfTypes.AppResourceRef                     `tfsdk:"refs"`
	ResourceIds                    []types.String                               `tfsdk:"resource_ids"`
	ResourceTypeIds                []types.String                               `tfsdk:"resource_type_ids"`
	ResourceTypeTraitIds           []types.String                               `tfsdk:"resource_type_trait_ids"`
}

// Metadata returns the data source type name.
func (r *AppResourcesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_resources"
}

// Schema defines the schema for the data source.
func (r *AppResourcesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AppResources DataSource",

		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Optional:    true,
				Description: `The appId field.`,
			},
			"app_user_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The appUserIds field.`,
			},
			"exclude_deleted_resource_bindings": schema.BoolAttribute{
				Optional:    true,
				Description: `The excludeDeletedResourceBindings field.`,
			},
			"exclude_resource_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The excludeResourceIds field.`,
			},
			"exclude_resource_type_trait_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The excludeResourceTypeTraitIds field.`,
			},
			"expanded": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `The expanded field.`,
			},
			"list": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_resource": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"app_id": schema.StringAttribute{
									Computed:    true,
									Description: `The app that this resource belongs to.`,
								},
								"app_resource_type_id": schema.StringAttribute{
									Computed:    true,
									Description: `The resource type that this resource is.`,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"deleted_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed:    true,
									Description: `The description set for the resource.`,
								},
								"display_name": schema.StringAttribute{
									Computed:    true,
									Description: `The display name for this resource.`,
								},
								"grant_count": schema.StringAttribute{
									Computed:    true,
									Description: `The number of grants to this resource.`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `The id of the resource.`,
								},
								"match_baton_id": schema.StringAttribute{
									Computed:    true,
									Description: `The matchBatonId field.`,
								},
								"parent_app_resource_id": schema.StringAttribute{
									Computed:    true,
									Description: `The parent resource id, if this resource is a child of another resource.`,
								},
								"parent_app_resource_type_id": schema.StringAttribute{
									Computed:    true,
									Description: `The parent resource type id, if this resource is a child of another resource.`,
								},
								"secret_trait": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"identity_app_user_id": schema.StringAttribute{
											Computed:    true,
											Description: `The identityAppUserId field.`,
										},
										"last_used_at": schema.StringAttribute{
											Computed: true,
										},
										"secret_created_at": schema.StringAttribute{
											Computed: true,
										},
										"secret_expires_at": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `The SecretTrait message.`,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
							MarkdownDescription: `The app resource message is a single resource that can have entitlements.` + "\n" +
								`` + "\n" +
								`This message contains a oneof named metadata. Only a single field of the following list may be set at a time:` + "\n" +
								`  - secretTrait`,
						},
					},
				},
				Description: `The list field.`,
			},
			"next_page_token": schema.StringAttribute{
				Computed:    true,
				Description: `The nextPageToken field.`,
			},
			"page_size": schema.Int32Attribute{
				Optional:    true,
				Description: `The pageSize field.`,
			},
			"page_token": schema.StringAttribute{
				Optional:    true,
				Description: `The pageToken field.`,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `The query field.`,
			},
			"refs": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Optional:    true,
							Description: `The appId field.`,
						},
						"app_resource_type_id": schema.StringAttribute{
							Optional:    true,
							Description: `The appResourceTypeId field.`,
						},
						"id": schema.StringAttribute{
							Optional:    true,
							Description: `The id field.`,
						},
					},
				},
				Description: `The refs field.`,
			},
			"resource_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The resourceIds field.`,
			},
			"resource_type_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The resourceTypeIds field.`,
			},
			"resource_type_trait_ids": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The resourceTypeTraitIds field.`,
			},
		},
	}
}

func (r *AppResourcesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.ConductoroneAPI)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.ConductoroneAPI, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AppResourcesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AppResourcesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedSearchAppResourcesRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AppResourceSearch.SearchAppResources(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SearchAppResourcesResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSearchAppResourcesResponse(ctx, res.SearchAppResourcesResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
